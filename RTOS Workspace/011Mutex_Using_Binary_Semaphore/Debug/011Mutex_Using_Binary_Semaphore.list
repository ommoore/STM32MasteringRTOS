
011Mutex_Using_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008678  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08008848  08008848  00018848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a1c  08008a1c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008a1c  08008a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a24  08008a24  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014604  20000084  08008ab0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014688  08008ab0  00024688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd38  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dae  00000000  00000000  0003fdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00043ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001590  00000000  00000000  000452c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002630b  00000000  00000000  00046858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000205ee  00000000  00000000  0006cb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e61d9  00000000  00000000  0008d151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017332a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006518  00000000  00000000  00173380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008830 	.word	0x08008830

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08008830 	.word	0x08008830

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200145d0 	.word	0x200145d0

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96e 	b.w	8000654 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468c      	mov	ip, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8083 	bne.w	80004a6 <__udivmoddi4+0x116>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d947      	bls.n	8000436 <__udivmoddi4+0xa6>
 80003a6:	fab2 f282 	clz	r2, r2
 80003aa:	b142      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003ac:	f1c2 0020 	rsb	r0, r2, #32
 80003b0:	fa24 f000 	lsr.w	r0, r4, r0
 80003b4:	4091      	lsls	r1, r2
 80003b6:	4097      	lsls	r7, r2
 80003b8:	ea40 0c01 	orr.w	ip, r0, r1
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbbc f6f8 	udiv	r6, ip, r8
 80003c8:	fa1f fe87 	uxth.w	lr, r7
 80003cc:	fb08 c116 	mls	r1, r8, r6, ip
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f10e 	mul.w	r1, r6, lr
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e2:	f080 8119 	bcs.w	8000618 <__udivmoddi4+0x288>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8116 	bls.w	8000618 <__udivmoddi4+0x288>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8105 	bcs.w	800061c <__udivmoddi4+0x28c>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f240 8102 	bls.w	800061c <__udivmoddi4+0x28c>
 8000418:	3802      	subs	r0, #2
 800041a:	443c      	add	r4, r7
 800041c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	2600      	movs	r6, #0
 8000426:	b11d      	cbz	r5, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c5 4300 	strd	r4, r3, [r5]
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	b902      	cbnz	r2, 800043a <__udivmoddi4+0xaa>
 8000438:	deff      	udf	#255	; 0xff
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	2a00      	cmp	r2, #0
 8000440:	d150      	bne.n	80004e4 <__udivmoddi4+0x154>
 8000442:	1bcb      	subs	r3, r1, r7
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fa1f f887 	uxth.w	r8, r7
 800044c:	2601      	movs	r6, #1
 800044e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000452:	0c21      	lsrs	r1, r4, #16
 8000454:	fb0e 331c 	mls	r3, lr, ip, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb08 f30c 	mul.w	r3, r8, ip
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0xe4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0xe2>
 800046c:	428b      	cmp	r3, r1
 800046e:	f200 80e9 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 8000472:	4684      	mov	ip, r0
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000480:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x10c>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x10a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80d9 	bhi.w	800064c <__udivmoddi4+0x2bc>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e7bf      	b.n	8000426 <__udivmoddi4+0x96>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0x12e>
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	f000 80b1 	beq.w	8000612 <__udivmoddi4+0x282>
 80004b0:	2600      	movs	r6, #0
 80004b2:	e9c5 0100 	strd	r0, r1, [r5]
 80004b6:	4630      	mov	r0, r6
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f683 	clz	r6, r3
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d14a      	bne.n	800055c <__udivmoddi4+0x1cc>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0x140>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80b8 	bhi.w	8000640 <__udivmoddi4+0x2b0>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0103 	sbc.w	r1, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	468c      	mov	ip, r1
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d0a8      	beq.n	8000430 <__udivmoddi4+0xa0>
 80004de:	e9c5 4c00 	strd	r4, ip, [r5]
 80004e2:	e7a5      	b.n	8000430 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ec:	4097      	lsls	r7, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f6:	40d9      	lsrs	r1, r3
 80004f8:	4330      	orrs	r0, r6
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	fb0e 1116 	mls	r1, lr, r6, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb06 f108 	mul.w	r1, r6, r8
 8000510:	4299      	cmp	r1, r3
 8000512:	fa04 f402 	lsl.w	r4, r4, r2
 8000516:	d909      	bls.n	800052c <__udivmoddi4+0x19c>
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	f106 3cff 	add.w	ip, r6, #4294967295
 800051e:	f080 808d 	bcs.w	800063c <__udivmoddi4+0x2ac>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 808a 	bls.w	800063c <__udivmoddi4+0x2ac>
 8000528:	3e02      	subs	r6, #2
 800052a:	443b      	add	r3, r7
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b281      	uxth	r1, r0
 8000530:	fbb3 f0fe 	udiv	r0, r3, lr
 8000534:	fb0e 3310 	mls	r3, lr, r0, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb00 f308 	mul.w	r3, r0, r8
 8000540:	428b      	cmp	r3, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x1c4>
 8000544:	1879      	adds	r1, r7, r1
 8000546:	f100 3cff 	add.w	ip, r0, #4294967295
 800054a:	d273      	bcs.n	8000634 <__udivmoddi4+0x2a4>
 800054c:	428b      	cmp	r3, r1
 800054e:	d971      	bls.n	8000634 <__udivmoddi4+0x2a4>
 8000550:	3802      	subs	r0, #2
 8000552:	4439      	add	r1, r7
 8000554:	1acb      	subs	r3, r1, r3
 8000556:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800055a:	e778      	b.n	800044e <__udivmoddi4+0xbe>
 800055c:	f1c6 0c20 	rsb	ip, r6, #32
 8000560:	fa03 f406 	lsl.w	r4, r3, r6
 8000564:	fa22 f30c 	lsr.w	r3, r2, ip
 8000568:	431c      	orrs	r4, r3
 800056a:	fa20 f70c 	lsr.w	r7, r0, ip
 800056e:	fa01 f306 	lsl.w	r3, r1, r6
 8000572:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000576:	fa21 f10c 	lsr.w	r1, r1, ip
 800057a:	431f      	orrs	r7, r3
 800057c:	0c3b      	lsrs	r3, r7, #16
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fa1f f884 	uxth.w	r8, r4
 8000586:	fb0e 1119 	mls	r1, lr, r9, r1
 800058a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800058e:	fb09 fa08 	mul.w	sl, r9, r8
 8000592:	458a      	cmp	sl, r1
 8000594:	fa02 f206 	lsl.w	r2, r2, r6
 8000598:	fa00 f306 	lsl.w	r3, r0, r6
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x220>
 800059e:	1861      	adds	r1, r4, r1
 80005a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a4:	d248      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 80005a6:	458a      	cmp	sl, r1
 80005a8:	d946      	bls.n	8000638 <__udivmoddi4+0x2a8>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4421      	add	r1, r4
 80005b0:	eba1 010a 	sub.w	r1, r1, sl
 80005b4:	b2bf      	uxth	r7, r7
 80005b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80005be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005c2:	fb00 f808 	mul.w	r8, r0, r8
 80005c6:	45b8      	cmp	r8, r7
 80005c8:	d907      	bls.n	80005da <__udivmoddi4+0x24a>
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d22e      	bcs.n	8000630 <__udivmoddi4+0x2a0>
 80005d2:	45b8      	cmp	r8, r7
 80005d4:	d92c      	bls.n	8000630 <__udivmoddi4+0x2a0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4427      	add	r7, r4
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	eba7 0708 	sub.w	r7, r7, r8
 80005e2:	fba0 8902 	umull	r8, r9, r0, r2
 80005e6:	454f      	cmp	r7, r9
 80005e8:	46c6      	mov	lr, r8
 80005ea:	4649      	mov	r1, r9
 80005ec:	d31a      	bcc.n	8000624 <__udivmoddi4+0x294>
 80005ee:	d017      	beq.n	8000620 <__udivmoddi4+0x290>
 80005f0:	b15d      	cbz	r5, 800060a <__udivmoddi4+0x27a>
 80005f2:	ebb3 020e 	subs.w	r2, r3, lr
 80005f6:	eb67 0701 	sbc.w	r7, r7, r1
 80005fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005fe:	40f2      	lsrs	r2, r6
 8000600:	ea4c 0202 	orr.w	r2, ip, r2
 8000604:	40f7      	lsrs	r7, r6
 8000606:	e9c5 2700 	strd	r2, r7, [r5]
 800060a:	2600      	movs	r6, #0
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e70b      	b.n	8000430 <__udivmoddi4+0xa0>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0x60>
 800061c:	4618      	mov	r0, r3
 800061e:	e6fd      	b.n	800041c <__udivmoddi4+0x8c>
 8000620:	4543      	cmp	r3, r8
 8000622:	d2e5      	bcs.n	80005f0 <__udivmoddi4+0x260>
 8000624:	ebb8 0e02 	subs.w	lr, r8, r2
 8000628:	eb69 0104 	sbc.w	r1, r9, r4
 800062c:	3801      	subs	r0, #1
 800062e:	e7df      	b.n	80005f0 <__udivmoddi4+0x260>
 8000630:	4608      	mov	r0, r1
 8000632:	e7d2      	b.n	80005da <__udivmoddi4+0x24a>
 8000634:	4660      	mov	r0, ip
 8000636:	e78d      	b.n	8000554 <__udivmoddi4+0x1c4>
 8000638:	4681      	mov	r9, r0
 800063a:	e7b9      	b.n	80005b0 <__udivmoddi4+0x220>
 800063c:	4666      	mov	r6, ip
 800063e:	e775      	b.n	800052c <__udivmoddi4+0x19c>
 8000640:	4630      	mov	r0, r6
 8000642:	e74a      	b.n	80004da <__udivmoddi4+0x14a>
 8000644:	f1ac 0c02 	sub.w	ip, ip, #2
 8000648:	4439      	add	r1, r7
 800064a:	e713      	b.n	8000474 <__udivmoddi4+0xe4>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	e724      	b.n	800049c <__udivmoddi4+0x10c>
 8000652:	bf00      	nop

08000654 <__aeabi_idiv0>:
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SEGGER_UART_init(500000);
 800065e:	482d      	ldr	r0, [pc, #180]	; (8000714 <main+0xbc>)
 8000660:	f005 fde2 	bl	8006228 <SEGGER_UART_init>
	// Used to collect SEGGER Event time-stamps
	DWT->CTRL |= (1 << 0); //Enable CYCCNT in DWT_CTRL
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <main+0xc0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <main+0xc0>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fb8e 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f862 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 f948 	bl	800090c <MX_GPIO_Init>
  MX_RTC_Init();
 800067c:	f000 f8f6 	bl	800086c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000680:	f000 f91a 	bl	80008b8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

    //Start Recording with Segger SystemView
  	SEGGER_SYSVIEW_Conf();
 8000684:	f005 fc02 	bl	8005e8c <SEGGER_SYSVIEW_Conf>
  	//SEGGER_SYSVIEW_Start();

  	sprintf(usr_msg,"Demo of Mutual exclusion using binary semaphore\r\n");
 8000688:	4924      	ldr	r1, [pc, #144]	; (800071c <main+0xc4>)
 800068a:	4825      	ldr	r0, [pc, #148]	; (8000720 <main+0xc8>)
 800068c:	f007 fca2 	bl	8007fd4 <siprintf>
  	printmsg(usr_msg);
 8000690:	4823      	ldr	r0, [pc, #140]	; (8000720 <main+0xc8>)
 8000692:	f000 f9ff 	bl	8000a94 <printmsg>

  	//Create binary semaphore
  	vSemaphoreCreateBinary(xBinarySemaphore);
 8000696:	2203      	movs	r2, #3
 8000698:	2100      	movs	r1, #0
 800069a:	2001      	movs	r0, #1
 800069c:	f002 ff00 	bl	80034a0 <xQueueGenericCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <main+0xcc>)
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <main+0xcc>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <main+0x64>
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <main+0xcc>)
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	f002 ff7a 	bl	80035b0 <xQueueGenericSend>

  	/* Check the semaphore was created successfully. */
  	if(xBinarySemaphore != NULL) {
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <main+0xcc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d01e      	beq.n	8000702 <main+0xaa>

		/* Create the two tasks */
  		xTaskCreate(vTask1, "Task 1", 500, NULL, 1, NULL);
 80006c4:	2300      	movs	r3, #0
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	2301      	movs	r3, #1
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006d2:	4915      	ldr	r1, [pc, #84]	; (8000728 <main+0xd0>)
 80006d4:	4815      	ldr	r0, [pc, #84]	; (800072c <main+0xd4>)
 80006d6:	f003 fd29 	bl	800412c <xTaskCreate>
		xTaskCreate(vTask2, "Task 2", 500, NULL, 1, NULL);
 80006da:	2300      	movs	r3, #0
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006e8:	4911      	ldr	r1, [pc, #68]	; (8000730 <main+0xd8>)
 80006ea:	4812      	ldr	r0, [pc, #72]	; (8000734 <main+0xdc>)
 80006ec:	f003 fd1e 	bl	800412c <xTaskCreate>

		/* Makes semaphore available for the first time */
		xSemaphoreGive(xBinarySemaphore);
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <main+0xcc>)
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	2300      	movs	r3, #0
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	f002 ff59 	bl	80035b0 <xQueueGenericSend>

  		/* Start the scheduler so the created tasks start executing. */
  		vTaskStartScheduler();
 80006fe:	f003 feb1 	bl	8004464 <vTaskStartScheduler>
  	}

  	sprintf(usr_msg, "Semaphore creation failed... \r\n");
 8000702:	490d      	ldr	r1, [pc, #52]	; (8000738 <main+0xe0>)
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <main+0xc8>)
 8000706:	f007 fc65 	bl	8007fd4 <siprintf>
  	printmsg(usr_msg);
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <main+0xc8>)
 800070c:	f000 f9c2 	bl	8000a94 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000710:	e7fe      	b.n	8000710 <main+0xb8>
 8000712:	bf00      	nop
 8000714:	0007a120 	.word	0x0007a120
 8000718:	e0001000 	.word	0xe0001000
 800071c:	08008848 	.word	0x08008848
 8000720:	200000a0 	.word	0x200000a0
 8000724:	200144dc 	.word	0x200144dc
 8000728:	0800887c 	.word	0x0800887c
 800072c:	080009ed 	.word	0x080009ed
 8000730:	08008884 	.word	0x08008884
 8000734:	08000a41 	.word	0x08000a41
 8000738:	0800888c 	.word	0x0800888c

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0ac      	sub	sp, #176	; 0xb0
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f007 fc3a 	bl	8007fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	225c      	movs	r2, #92	; 0x5c
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f007 fc2b 	bl	8007fc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <SystemClock_Config+0x128>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a3b      	ldr	r2, [pc, #236]	; (8000864 <SystemClock_Config+0x128>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <SystemClock_Config+0x128>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <SystemClock_Config+0x12c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a35      	ldr	r2, [pc, #212]	; (8000868 <SystemClock_Config+0x12c>)
 8000794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <SystemClock_Config+0x12c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007a6:	230a      	movs	r3, #10
 80007a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2310      	movs	r3, #16
 80007b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007ce:	2308      	movs	r3, #8
 80007d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007d4:	23b4      	movs	r3, #180	; 0xb4
 80007d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fc17 	bl	8002024 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007fc:	f000 f97e 	bl	8000afc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000800:	f000 fd98 	bl	8001334 <HAL_PWREx_EnableOverDrive>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800080a:	f000 f977 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800081e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000826:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800082a:	2105      	movs	r1, #5
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fdd1 	bl	80013d4 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000838:	f000 f960 	bl	8000afc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800083c:	2320      	movs	r3, #32
 800083e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f000 ff0e 	bl	800166c <HAL_RCCEx_PeriphCLKConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000856:	f000 f951 	bl	8000afc <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	37b0      	adds	r7, #176	; 0xb0
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_RTC_Init+0x44>)
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <MX_RTC_Init+0x48>)
 8000874:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_RTC_Init+0x44>)
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_RTC_Init+0x44>)
 800087e:	227f      	movs	r2, #127	; 0x7f
 8000880:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_RTC_Init+0x44>)
 8000884:	22ff      	movs	r2, #255	; 0xff
 8000886:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_RTC_Init+0x44>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_RTC_Init+0x44>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_RTC_Init+0x44>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_RTC_Init+0x44>)
 800089c:	f001 fe60 	bl	8002560 <HAL_RTC_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80008a6:	f000 f929 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200144e0 	.word	0x200144e0
 80008b4:	40002800 	.word	0x40002800

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f002 f9c8 	bl	8002c84 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f8ff 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20014500 	.word	0x20014500
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a2c      	ldr	r2, [pc, #176]	; (80009dc <MX_GPIO_Init+0xd0>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a25      	ldr	r2, [pc, #148]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2120      	movs	r1, #32
 8000996:	4812      	ldr	r0, [pc, #72]	; (80009e0 <MX_GPIO_Init+0xd4>)
 8000998:	f000 fcb2 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_GPIO_Init+0xd8>)
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_GPIO_Init+0xdc>)
 80009b2:	f000 fb11 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b6:	2320      	movs	r3, #32
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0xd4>)
 80009ce:	f000 fb03 	bl	8000fd8 <HAL_GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	10110000 	.word	0x10110000
 80009e8:	40020800 	.word	0x40020800

080009ec <vTask1>:

/* USER CODE BEGIN 4 */
void vTask1(void *pvParameters) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

	const char *pcTaskName = "Task 1 is running\r\n";
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <vTask1+0x44>)
 80009f6:	60fb      	str	r3, [r7, #12]

	for(;;) {
		/* Decreases binary semaphore count to 0 */
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <vTask1+0x48>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 f8c9 	bl	8003b98 <xQueueSemaphoreTake>

		/* Print out the name of this task. */
		sprintf(usr_msg, "%s", pcTaskName);
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	490b      	ldr	r1, [pc, #44]	; (8000a38 <vTask1+0x4c>)
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <vTask1+0x50>)
 8000a0c:	f007 fae2 	bl	8007fd4 <siprintf>
		printmsg(usr_msg);
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <vTask1+0x50>)
 8000a12:	f000 f83f 	bl	8000a94 <printmsg>

		/* Increases binary semaphore count to 1 */
		xSemaphoreGive(xBinarySemaphore);
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <vTask1+0x48>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f002 fdc6 	bl	80035b0 <xQueueGenericSend>

		/* Block task for 500 ticks */
		vTaskDelay(pdMS_TO_TICKS(500));
 8000a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a28:	f003 fce4 	bl	80043f4 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8000a2c:	e7e4      	b.n	80009f8 <vTask1+0xc>
 8000a2e:	bf00      	nop
 8000a30:	080088ac 	.word	0x080088ac
 8000a34:	200144dc 	.word	0x200144dc
 8000a38:	080088c0 	.word	0x080088c0
 8000a3c:	200000a0 	.word	0x200000a0

08000a40 <vTask2>:
	}
}

void vTask2(void *pvParameters) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

	const char *pcTaskName = "Task 2 is running\r\n";
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <vTask2+0x44>)
 8000a4a:	60fb      	str	r3, [r7, #12]

	for(;;) {
		/* Decreases binary semaphore count to 0 */
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <vTask2+0x48>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 f89f 	bl	8003b98 <xQueueSemaphoreTake>

		/* Print out the name of this task. */
		sprintf(usr_msg, "%s", pcTaskName);
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	490b      	ldr	r1, [pc, #44]	; (8000a8c <vTask2+0x4c>)
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <vTask2+0x50>)
 8000a60:	f007 fab8 	bl	8007fd4 <siprintf>
		printmsg(usr_msg);
 8000a64:	480a      	ldr	r0, [pc, #40]	; (8000a90 <vTask2+0x50>)
 8000a66:	f000 f815 	bl	8000a94 <printmsg>

		/* Increases binary semaphore count to 1 */
		xSemaphoreGive(xBinarySemaphore);
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <vTask2+0x48>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	f002 fd9c 	bl	80035b0 <xQueueGenericSend>

		/* Block task for 500 ticks */
		vTaskDelay(pdMS_TO_TICKS(500));
 8000a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7c:	f003 fcba 	bl	80043f4 <vTaskDelay>
		xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8000a80:	e7e4      	b.n	8000a4c <vTask2+0xc>
 8000a82:	bf00      	nop
 8000a84:	080088c4 	.word	0x080088c4
 8000a88:	200144dc 	.word	0x200144dc
 8000a8c:	080088c0 	.word	0x080088c0
 8000a90:	200000a0 	.word	0x200000a0

08000a94 <printmsg>:
	}
}

void printmsg(char *msg) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0; i < strlen(msg); i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e00b      	b.n	8000aba <printmsg+0x26>
		HAL_UART_Transmit(&huart2, (uint8_t*)&msg[i], sizeof(msg[i]), HAL_MAX_DELAY);
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	18d1      	adds	r1, r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	2201      	movs	r2, #1
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <printmsg+0x40>)
 8000ab0:	f002 f935 	bl	8002d1e <HAL_UART_Transmit>
	for(uint32_t i = 0; i < strlen(msg); i++) {
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fbf2 	bl	80002a4 <strlen>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d3ec      	bcc.n	8000aa2 <printmsg+0xe>
	}
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20014500 	.word	0x20014500

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 f973 	bl	8000dd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40001000 	.word	0x40001000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <HAL_RTC_MspInit+0x24>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d102      	bne.n	8000b70 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_RTC_MspInit+0x28>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40002800 	.word	0x40002800
 8000b80:	42470e3c 	.word	0x42470e3c

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <HAL_UART_MspInit+0x94>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d133      	bne.n	8000c0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_UART_MspInit+0x98>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_UART_MspInit+0x98>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_UART_MspInit+0x98>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0x98>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <HAL_UART_MspInit+0x98>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_UART_MspInit+0x98>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bde:	230c      	movs	r3, #12
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <HAL_UART_MspInit+0x9c>)
 8000bfa:	f000 f9ed 	bl	8000fd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2106      	movs	r1, #6
 8000c02:	2026      	movs	r0, #38	; 0x26
 8000c04:	f000 f9be 	bl	8000f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c08:	2026      	movs	r0, #38	; 0x26
 8000c0a:	f000 f9d7 	bl	8000fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	; 0x30
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2036      	movs	r0, #54	; 0x36
 8000c3a:	f000 f9a3 	bl	8000f84 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c3e:	2036      	movs	r0, #54	; 0x36
 8000c40:	f000 f9bc 	bl	8000fbc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <HAL_InitTick+0xa4>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <HAL_InitTick+0xa4>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_InitTick+0xa4>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c60:	f107 0210 	add.w	r2, r7, #16
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fccc 	bl	8001608 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c70:	f000 fca2 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 8000c74:	4603      	mov	r3, r0
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <HAL_InitTick+0xa8>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	0c9b      	lsrs	r3, r3, #18
 8000c84:	3b01      	subs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_InitTick+0xac>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <HAL_InitTick+0xb0>)
 8000c8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_InitTick+0xac>)
 8000c90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_InitTick+0xac>)
 8000c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_InitTick+0xac>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_InitTick+0xac>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <HAL_InitTick+0xac>)
 8000caa:	f001 fd3e 	bl	800272a <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d104      	bne.n	8000cbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <HAL_InitTick+0xac>)
 8000cb6:	f001 fd91 	bl	80027dc <HAL_TIM_Base_Start_IT>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3730      	adds	r7, #48	; 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	431bde83 	.word	0x431bde83
 8000cd0:	20014544 	.word	0x20014544
 8000cd4:	40001000 	.word	0x40001000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <TIM6_DAC_IRQHandler+0x10>)
 8000d0a:	f001 fdd7 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20014544 	.word	0x20014544

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffd7 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f007 f8eb 	bl	8007f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fc73 	bl	8000658 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000d80:	08008a2c 	.word	0x08008a2c
  ldr r2, =_sbss
 8000d84:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000d88:	20014688 	.word	0x20014688

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f8d8 	bl	8000f6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ff30 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fea0 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	2001458c 	.word	0x2001458c

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2001458c 	.word	0x2001458c

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff4c 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f96:	f7ff ff61 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000f9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	6978      	ldr	r0, [r7, #20]
 8000fa2:	f7ff ffb1 	bl	8000f08 <NVIC_EncodePriority>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff80 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff54 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e165      	b.n	80012c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 8154 	bne.w	80012ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d005      	beq.n	800102a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	2b02      	cmp	r3, #2
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80ae 	beq.w	80012ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b5d      	ldr	r3, [pc, #372]	; (80012d8 <HAL_GPIO_Init+0x300>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a5c      	ldr	r2, [pc, #368]	; (80012d8 <HAL_GPIO_Init+0x300>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b5a      	ldr	r3, [pc, #360]	; (80012d8 <HAL_GPIO_Init+0x300>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117a:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_GPIO_Init+0x304>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4f      	ldr	r2, [pc, #316]	; (80012e0 <HAL_GPIO_Init+0x308>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x21a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4e      	ldr	r2, [pc, #312]	; (80012e4 <HAL_GPIO_Init+0x30c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x216>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_GPIO_Init+0x310>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x212>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x314>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x20e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4b      	ldr	r2, [pc, #300]	; (80012f0 <HAL_GPIO_Init+0x318>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x20a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4a      	ldr	r2, [pc, #296]	; (80012f4 <HAL_GPIO_Init+0x31c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x206>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a49      	ldr	r2, [pc, #292]	; (80012f8 <HAL_GPIO_Init+0x320>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x202>
 80011d6:	2306      	movs	r3, #6
 80011d8:	e00c      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011da:	2307      	movs	r3, #7
 80011dc:	e00a      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011de:	2305      	movs	r3, #5
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011e2:	2304      	movs	r3, #4
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x21c>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x304>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_GPIO_Init+0x324>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a31      	ldr	r2, [pc, #196]	; (80012fc <HAL_GPIO_Init+0x324>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_GPIO_Init+0x324>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_GPIO_Init+0x324>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_GPIO_Init+0x324>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <HAL_GPIO_Init+0x324>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HAL_GPIO_Init+0x324>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_GPIO_Init+0x324>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f ae96 	bls.w	8000ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40021800 	.word	0x40021800
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001360:	f7ff fd4c 	bl	8000dfc <HAL_GetTick>
 8001364:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001366:	e009      	b.n	800137c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001368:	f7ff fd48 	bl	8000dfc <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001376:	d901      	bls.n	800137c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e01f      	b.n	80013bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_PWREx_EnableOverDrive+0x98>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d1ee      	bne.n	8001368 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001390:	f7ff fd34 	bl	8000dfc <HAL_GetTick>
 8001394:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001396:	e009      	b.n	80013ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001398:	f7ff fd30 	bl	8000dfc <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a6:	d901      	bls.n	80013ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e007      	b.n	80013bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_PWREx_EnableOverDrive+0x98>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013b8:	d1ee      	bne.n	8001398 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	420e0040 	.word	0x420e0040
 80013cc:	40007000 	.word	0x40007000
 80013d0:	420e0044 	.word	0x420e0044

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fc9a 	bl	8000dfc <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fc96 	bl	8000dfc <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800155a:	f000 fbb1 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fb52 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	080089b8 	.word	0x080089b8
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000

080015b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015bc:	f7ff fff0 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4903      	ldr	r1, [pc, #12]	; (80015dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	080089c8 	.word	0x080089c8

080015e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015e4:	f7ff ffdc 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	0b5b      	lsrs	r3, r3, #13
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4903      	ldr	r1, [pc, #12]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	080089c8 	.word	0x080089c8

08001608 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	220f      	movs	r2, #15
 8001616:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_GetClockConfig+0x5c>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0203 	and.w	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_RCC_GetClockConfig+0x5c>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_RCC_GetClockConfig+0x5c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_GetClockConfig+0x5c>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_RCC_GetClockConfig+0x60>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 020f 	and.w	r2, r3, #15
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	601a      	str	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40023c00 	.word	0x40023c00

0800166c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d010      	beq.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80016a4:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016aa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	496c      	ldr	r1, [pc, #432]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80016c2:	2301      	movs	r3, #1
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d010      	beq.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80016d2:	4b64      	ldr	r3, [pc, #400]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e0:	4960      	ldr	r1, [pc, #384]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d017      	beq.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4955      	ldr	r1, [pc, #340]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001710:	4313      	orrs	r3, r2
 8001712:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800171e:	d101      	bne.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001720:	2301      	movs	r3, #1
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d017      	beq.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800173c:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800173e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	4946      	ldr	r1, [pc, #280]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800174c:	4313      	orrs	r3, r2
 800174e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800175a:	d101      	bne.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800175c:	2301      	movs	r3, #1
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 808a 	beq.w	800188e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a38      	ldr	r2, [pc, #224]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a33      	ldr	r2, [pc, #204]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017a2:	f7ff fb2b 	bl	8000dfc <HAL_GetTick>
 80017a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017aa:	f7ff fb27 	bl	8000dfc <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e278      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017c8:	4b26      	ldr	r3, [pc, #152]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02f      	beq.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d028      	beq.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d114      	bne.n	8001838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff faf5 	bl	8000dfc <HAL_GetTick>
 8001812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff faf1 	bl	8000dfc <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	f241 3288 	movw	r2, #5000	; 0x1388
 8001824:	4293      	cmp	r3, r2
 8001826:	d901      	bls.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e240      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ee      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001844:	d114      	bne.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800185a:	4902      	ldr	r1, [pc, #8]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
 8001860:	e00c      	b.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000
 800186c:	42470e40 	.word	0x42470e40
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a49      	ldr	r2, [pc, #292]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001876:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800187a:	6093      	str	r3, [r2, #8]
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800187e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001888:	4944      	ldr	r1, [pc, #272]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800188a:	4313      	orrs	r3, r2
 800188c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80018a0:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80018a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4937      	ldr	r1, [pc, #220]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00a      	beq.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018d2:	4b32      	ldr	r3, [pc, #200]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e0:	492e      	ldr	r1, [pc, #184]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d011      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	4926      	ldr	r1, [pc, #152]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001904:	4313      	orrs	r3, r2
 8001906:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001912:	d101      	bne.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001914:	2301      	movs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00a      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	491a      	ldr	r1, [pc, #104]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001934:	4313      	orrs	r3, r2
 8001936:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d011      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001954:	4911      	ldr	r1, [pc, #68]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001956:	4313      	orrs	r3, r2
 8001958:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001964:	d101      	bne.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001966:	2301      	movs	r3, #1
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196c:	2b01      	cmp	r3, #1
 800196e:	d005      	beq.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001978:	f040 80ff 	bne.w	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001982:	f7ff fa3b 	bl	8000dfc <HAL_GetTick>
 8001986:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001988:	e00e      	b.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800198a:	f7ff fa37 	bl	8000dfc <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d907      	bls.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e188      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x642>
 800199c:	40023800 	.word	0x40023800
 80019a0:	424711e0 	.word	0x424711e0
 80019a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019a8:	4b7e      	ldr	r3, [pc, #504]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ea      	bne.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d009      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d028      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d124      	bne.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80019dc:	4b71      	ldr	r3, [pc, #452]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	3301      	adds	r3, #1
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019f4:	0e1b      	lsrs	r3, r3, #24
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	019b      	lsls	r3, r3, #6
 8001a06:	431a      	orrs	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	041b      	lsls	r3, r3, #16
 8001a10:	431a      	orrs	r2, r3
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	071b      	lsls	r3, r3, #28
 8001a1e:	4961      	ldr	r1, [pc, #388]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a3a:	d00a      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d035      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a50:	d130      	bne.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a52:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a6a:	0f1b      	lsrs	r3, r3, #28
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	019b      	lsls	r3, r3, #6
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	071b      	lsls	r3, r3, #28
 8001a94:	4943      	ldr	r1, [pc, #268]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a9c:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa2:	f023 021f 	bic.w	r2, r3, #31
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	493d      	ldr	r1, [pc, #244]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d029      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac8:	d124      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ae2:	0f1b      	lsrs	r3, r3, #28
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	019b      	lsls	r3, r3, #6
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	085b      	lsrs	r3, r3, #1
 8001afc:	3b01      	subs	r3, #1
 8001afe:	041b      	lsls	r3, r3, #16
 8001b00:	431a      	orrs	r2, r3
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	431a      	orrs	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	071b      	lsls	r3, r3, #28
 8001b0c:	4925      	ldr	r1, [pc, #148]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d016      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	085b      	lsrs	r3, r3, #1
 8001b32:	3b01      	subs	r3, #1
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	061b      	lsls	r3, r3, #24
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	071b      	lsls	r3, r3, #28
 8001b46:	4917      	ldr	r1, [pc, #92]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f952 	bl	8000dfc <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b5c:	f7ff f94e 	bl	8000dfc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e09f      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	f040 8095 	bne.w	8001cac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b88:	f7ff f938 	bl	8000dfc <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b8e:	e00f      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001b90:	f7ff f934 	bl	8000dfc <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d908      	bls.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e085      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	42470068 	.word	0x42470068
 8001bac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bb0:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bbc:	d0e8      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d02b      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d127      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	431a      	orrs	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	041b      	lsls	r3, r3, #16
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	4928      	ldr	r1, [pc, #160]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c22:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	4922      	ldr	r1, [pc, #136]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01d      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c4a:	d118      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c52:	0e1b      	lsrs	r3, r3, #24
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	019b      	lsls	r3, r3, #6
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	431a      	orrs	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	4910      	ldr	r1, [pc, #64]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c84:	f7ff f8ba 	bl	8000dfc <HAL_GetTick>
 8001c88:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c8c:	f7ff f8b6 	bl	8000dfc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e007      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001caa:	d1ef      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3730      	adds	r7, #48	; 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	42470070 	.word	0x42470070

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cdc:	4bce      	ldr	r3, [pc, #824]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	f200 818d 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x344>
 8001cea:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <HAL_RCC_GetSysClockFreq+0x30>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d25 	.word	0x08001d25
 8001cf4:	08002005 	.word	0x08002005
 8001cf8:	08002005 	.word	0x08002005
 8001cfc:	08002005 	.word	0x08002005
 8001d00:	08001d2b 	.word	0x08001d2b
 8001d04:	08002005 	.word	0x08002005
 8001d08:	08002005 	.word	0x08002005
 8001d0c:	08002005 	.word	0x08002005
 8001d10:	08001d31 	.word	0x08001d31
 8001d14:	08002005 	.word	0x08002005
 8001d18:	08002005 	.word	0x08002005
 8001d1c:	08002005 	.word	0x08002005
 8001d20:	08001ea5 	.word	0x08001ea5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4bbd      	ldr	r3, [pc, #756]	; (800201c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d26:	61bb      	str	r3, [r7, #24]
       break;
 8001d28:	e16f      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d2a:	4bbd      	ldr	r3, [pc, #756]	; (8002020 <HAL_RCC_GetSysClockFreq+0x360>)
 8001d2c:	61bb      	str	r3, [r7, #24]
      break;
 8001d2e:	e16c      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d30:	4bb9      	ldr	r3, [pc, #740]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d38:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3a:	4bb7      	ldr	r3, [pc, #732]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d053      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4bb4      	ldr	r3, [pc, #720]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	ea02 0400 	and.w	r4, r2, r0
 8001d5e:	603c      	str	r4, [r7, #0]
 8001d60:	400b      	ands	r3, r1
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	014b      	lsls	r3, r1, #5
 8001d76:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d7a:	0142      	lsls	r2, r0, #5
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4623      	mov	r3, r4
 8001d82:	1ac0      	subs	r0, r0, r3
 8001d84:	462b      	mov	r3, r5
 8001d86:	eb61 0103 	sbc.w	r1, r1, r3
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	018b      	lsls	r3, r1, #6
 8001d94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d98:	0182      	lsls	r2, r0, #6
 8001d9a:	1a12      	subs	r2, r2, r0
 8001d9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	00d9      	lsls	r1, r3, #3
 8001daa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dae:	00d0      	lsls	r0, r2, #3
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4621      	mov	r1, r4
 8001db6:	1852      	adds	r2, r2, r1
 8001db8:	4629      	mov	r1, r5
 8001dba:	eb43 0101 	adc.w	r1, r3, r1
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	0259      	lsls	r1, r3, #9
 8001dca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dce:	0250      	lsls	r0, r2, #9
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	f7fe fabe 	bl	8000360 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	e04c      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dee:	4b8a      	ldr	r3, [pc, #552]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	461a      	mov	r2, r3
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	ea02 0a00 	and.w	sl, r2, r0
 8001e06:	ea03 0b01 	and.w	fp, r3, r1
 8001e0a:	4650      	mov	r0, sl
 8001e0c:	4659      	mov	r1, fp
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	014b      	lsls	r3, r1, #5
 8001e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e1c:	0142      	lsls	r2, r0, #5
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	ebb0 000a 	subs.w	r0, r0, sl
 8001e26:	eb61 010b 	sbc.w	r1, r1, fp
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	018b      	lsls	r3, r1, #6
 8001e34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e38:	0182      	lsls	r2, r0, #6
 8001e3a:	1a12      	subs	r2, r2, r0
 8001e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e40:	f04f 0000 	mov.w	r0, #0
 8001e44:	f04f 0100 	mov.w	r1, #0
 8001e48:	00d9      	lsls	r1, r3, #3
 8001e4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e4e:	00d0      	lsls	r0, r2, #3
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	eb12 020a 	adds.w	r2, r2, sl
 8001e58:	eb43 030b 	adc.w	r3, r3, fp
 8001e5c:	f04f 0000 	mov.w	r0, #0
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	0299      	lsls	r1, r3, #10
 8001e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e6a:	0290      	lsls	r0, r2, #10
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	f7fe fa70 	bl	8000360 <__aeabi_uldivmod>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4613      	mov	r3, r2
 8001e86:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e88:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	0c1b      	lsrs	r3, r3, #16
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	3301      	adds	r3, #1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	61bb      	str	r3, [r7, #24]
      break;
 8001ea2:	e0b2      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea4:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eac:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eae:	4b5a      	ldr	r3, [pc, #360]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d04d      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eba:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	099b      	lsrs	r3, r3, #6
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	ea02 0800 	and.w	r8, r2, r0
 8001ed2:	ea03 0901 	and.w	r9, r3, r1
 8001ed6:	4640      	mov	r0, r8
 8001ed8:	4649      	mov	r1, r9
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	014b      	lsls	r3, r1, #5
 8001ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ee8:	0142      	lsls	r2, r0, #5
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	ebb0 0008 	subs.w	r0, r0, r8
 8001ef2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	018b      	lsls	r3, r1, #6
 8001f00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f04:	0182      	lsls	r2, r0, #6
 8001f06:	1a12      	subs	r2, r2, r0
 8001f08:	eb63 0301 	sbc.w	r3, r3, r1
 8001f0c:	f04f 0000 	mov.w	r0, #0
 8001f10:	f04f 0100 	mov.w	r1, #0
 8001f14:	00d9      	lsls	r1, r3, #3
 8001f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f1a:	00d0      	lsls	r0, r2, #3
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	eb12 0208 	adds.w	r2, r2, r8
 8001f24:	eb43 0309 	adc.w	r3, r3, r9
 8001f28:	f04f 0000 	mov.w	r0, #0
 8001f2c:	f04f 0100 	mov.w	r1, #0
 8001f30:	0259      	lsls	r1, r3, #9
 8001f32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f36:	0250      	lsls	r0, r2, #9
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	f7fe fa0a 	bl	8000360 <__aeabi_uldivmod>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4613      	mov	r3, r2
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	e04a      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f66:	f04f 0100 	mov.w	r1, #0
 8001f6a:	ea02 0400 	and.w	r4, r2, r0
 8001f6e:	ea03 0501 	and.w	r5, r3, r1
 8001f72:	4620      	mov	r0, r4
 8001f74:	4629      	mov	r1, r5
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	014b      	lsls	r3, r1, #5
 8001f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f84:	0142      	lsls	r2, r0, #5
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	1b00      	subs	r0, r0, r4
 8001f8c:	eb61 0105 	sbc.w	r1, r1, r5
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	018b      	lsls	r3, r1, #6
 8001f9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f9e:	0182      	lsls	r2, r0, #6
 8001fa0:	1a12      	subs	r2, r2, r0
 8001fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa6:	f04f 0000 	mov.w	r0, #0
 8001faa:	f04f 0100 	mov.w	r1, #0
 8001fae:	00d9      	lsls	r1, r3, #3
 8001fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fb4:	00d0      	lsls	r0, r2, #3
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	1912      	adds	r2, r2, r4
 8001fbc:	eb45 0303 	adc.w	r3, r5, r3
 8001fc0:	f04f 0000 	mov.w	r0, #0
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	0299      	lsls	r1, r3, #10
 8001fca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fce:	0290      	lsls	r0, r2, #10
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	f7fe f9be 	bl	8000360 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	0f1b      	lsrs	r3, r3, #28
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	61bb      	str	r3, [r7, #24]
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002006:	61bb      	str	r3, [r7, #24]
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	69bb      	ldr	r3, [r7, #24]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	00f42400 	.word	0x00f42400
 8002020:	007a1200 	.word	0x007a1200

08002024 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e28d      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8083 	beq.w	800214a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002044:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b04      	cmp	r3, #4
 800204e:	d019      	beq.n	8002084 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002058:	2b08      	cmp	r3, #8
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800205c:	4b8e      	ldr	r3, [pc, #568]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002068:	d00c      	beq.n	8002084 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206a:	4b8b      	ldr	r3, [pc, #556]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d112      	bne.n	800209c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002082:	d10b      	bne.n	800209c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d05b      	beq.n	8002148 <HAL_RCC_OscConfig+0x124>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d157      	bne.n	8002148 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e25a      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d106      	bne.n	80020b4 <HAL_RCC_OscConfig+0x90>
 80020a6:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7b      	ldr	r2, [pc, #492]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e01d      	b.n	80020f0 <HAL_RCC_OscConfig+0xcc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0xb4>
 80020be:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a75      	ldr	r2, [pc, #468]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a72      	ldr	r2, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0xcc>
 80020d8:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6b      	ldr	r2, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80020ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe80 	bl	8000dfc <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe fe7c 	bl	8000dfc <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e21f      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b61      	ldr	r3, [pc, #388]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0xdc>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe fe6c 	bl	8000dfc <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7fe fe68 	bl	8000dfc <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e20b      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	4b57      	ldr	r3, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x104>
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06f      	beq.n	8002236 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b00      	cmp	r3, #0
 8002160:	d017      	beq.n	8002192 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002162:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800216a:	2b08      	cmp	r3, #8
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800216e:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002182:	2b0c      	cmp	r3, #12
 8002184:	d11c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d116      	bne.n	80021c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_RCC_OscConfig+0x186>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e1d3      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4937      	ldr	r1, [pc, #220]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	e03a      	b.n	8002236 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d020      	beq.n	800220a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c8:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_RCC_OscConfig+0x278>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe fe15 	bl	8000dfc <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d6:	f7fe fe11 	bl	8000dfc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e1b4      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4925      	ldr	r1, [pc, #148]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]
 8002208:	e015      	b.n	8002236 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_OscConfig+0x278>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe fdf4 	bl	8000dfc <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002218:	f7fe fdf0 	bl	8000dfc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e193      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d036      	beq.n	80022b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7fe fdd4 	bl	8000dfc <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002258:	f7fe fdd0 	bl	8000dfc <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e173      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_OscConfig+0x274>)
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x234>
 8002276:	e01b      	b.n	80022b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe fdbd 	bl	8000dfc <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	e00e      	b.n	80022a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002286:	f7fe fdb9 	bl	8000dfc <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d907      	bls.n	80022a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e15c      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
 8002298:	40023800 	.word	0x40023800
 800229c:	42470000 	.word	0x42470000
 80022a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b8a      	ldr	r3, [pc, #552]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ea      	bne.n	8002286 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8097 	beq.w	80023ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b83      	ldr	r3, [pc, #524]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a7e      	ldr	r2, [pc, #504]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b7c      	ldr	r3, [pc, #496]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <HAL_RCC_OscConfig+0x4b0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x4b0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a75      	ldr	r2, [pc, #468]	; (80024d4 <HAL_RCC_OscConfig+0x4b0>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7fe fd79 	bl	8000dfc <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe fd75 	bl	8000dfc <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e118      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <HAL_RCC_OscConfig+0x4b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x31e>
 8002334:	4b66      	ldr	r3, [pc, #408]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a65      	ldr	r2, [pc, #404]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x358>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x340>
 800234a:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a60      	ldr	r2, [pc, #384]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a5d      	ldr	r2, [pc, #372]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x358>
 8002364:	4b5a      	ldr	r3, [pc, #360]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a59      	ldr	r2, [pc, #356]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	4b57      	ldr	r3, [pc, #348]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002376:	f023 0304 	bic.w	r3, r3, #4
 800237a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d015      	beq.n	80023b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fd3a 	bl	8000dfc <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe fd36 	bl	8000dfc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0d7      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0ee      	beq.n	800238c <HAL_RCC_OscConfig+0x368>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe fd24 	bl	8000dfc <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe fd20 	bl	8000dfc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0c1      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ce:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ee      	bne.n	80023b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80ad 	beq.w	8002550 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d060      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d145      	bne.n	8002496 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240a:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <HAL_RCC_OscConfig+0x4b4>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fcf4 	bl	8000dfc <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002418:	f7fe fcf0 	bl	8000dfc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e093      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	3b01      	subs	r3, #1
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	061b      	lsls	r3, r3, #24
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	071b      	lsls	r3, r3, #28
 8002462:	491b      	ldr	r1, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCC_OscConfig+0x4b4>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7fe fcc5 	bl	8000dfc <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe fcc1 	bl	8000dfc <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e064      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x452>
 8002494:	e05c      	b.n	8002550 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_RCC_OscConfig+0x4b4>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fcae 	bl	8000dfc <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fcaa 	bl	8000dfc <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e04d      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_OscConfig+0x4ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x480>
 80024c2:	e045      	b.n	8002550 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e040      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40007000 	.word	0x40007000
 80024d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_RCC_OscConfig+0x538>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d030      	beq.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d129      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d122      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800250c:	4013      	ands	r3, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002514:	4293      	cmp	r3, r2
 8002516:	d119      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	085b      	lsrs	r3, r3, #1
 8002524:	3b01      	subs	r3, #1
 8002526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d10f      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e083      	b.n	800267a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7f5b      	ldrb	r3, [r3, #29]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fae8 	bl	8000b58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	22ca      	movs	r2, #202	; 0xca
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2253      	movs	r2, #83	; 0x53
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f897 	bl	80026d2 <RTC_EnterInitMode>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	22ff      	movs	r2, #255	; 0xff
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2204      	movs	r2, #4
 80025b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e05e      	b.n	800267a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80025ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6899      	ldr	r1, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68d2      	ldr	r2, [r2, #12]
 80025f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6919      	ldr	r1, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	041a      	lsls	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10e      	bne.n	8002648 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f829 	bl	8002682 <HAL_RTC_WaitForSynchro>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2204      	movs	r2, #4
 8002642:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e018      	b.n	800267a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	22ff      	movs	r2, #255	; 0xff
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002678:	2300      	movs	r3, #0
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800269c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800269e:	f7fe fbad 	bl	8000dfc <HAL_GetTick>
 80026a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026a4:	e009      	b.n	80026ba <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026a6:	f7fe fba9 	bl	8000dfc <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026b4:	d901      	bls.n	80026ba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e007      	b.n	80026ca <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ee      	beq.n	80026a6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d119      	bne.n	8002720 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fb81 	bl	8000dfc <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80026fc:	e009      	b.n	8002712 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026fe:	f7fe fb7d 	bl	8000dfc <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800270c:	d901      	bls.n	8002712 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e007      	b.n	8002722 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ee      	beq.n	80026fe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e041      	b.n	80027c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f839 	bl	80027c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f000 f9d7 	bl	8002b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d001      	beq.n	80027f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e04e      	b.n	8002892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d022      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d01d      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d018      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_TIM_Base_Start_IT+0xd0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00e      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_TIM_Base_Start_IT+0x80>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d111      	bne.n	8002880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b06      	cmp	r3, #6
 800286c:	d010      	beq.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	e007      	b.n	8002890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00
 80028b0:	40010400 	.word	0x40010400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40001800 	.word	0x40001800

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8ee 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8e0 	bl	8002acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f8f1 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8c4 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8b6 	bl	8002acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8c7 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f89a 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f88c 	bl	8002acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f89d 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f870 	bl	8002ae0 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f862 	bl	8002acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f873 	bl	8002af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe f84c 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f902 	bl	8002c70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f838 	bl	8002b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0220 	mvn.w	r2, #32
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8cc 	bl	8002c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a40      	ldr	r2, [pc, #256]	; (8002c30 <TIM_Base_SetConfig+0x114>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3a:	d00f      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a3d      	ldr	r2, [pc, #244]	; (8002c34 <TIM_Base_SetConfig+0x118>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00b      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a3c      	ldr	r2, [pc, #240]	; (8002c38 <TIM_Base_SetConfig+0x11c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d007      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a3b      	ldr	r2, [pc, #236]	; (8002c3c <TIM_Base_SetConfig+0x120>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3a      	ldr	r2, [pc, #232]	; (8002c40 <TIM_Base_SetConfig+0x124>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2f      	ldr	r2, [pc, #188]	; (8002c30 <TIM_Base_SetConfig+0x114>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d02b      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d027      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a2c      	ldr	r2, [pc, #176]	; (8002c34 <TIM_Base_SetConfig+0x118>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d023      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a2b      	ldr	r2, [pc, #172]	; (8002c38 <TIM_Base_SetConfig+0x11c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <TIM_Base_SetConfig+0x120>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01b      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a29      	ldr	r2, [pc, #164]	; (8002c40 <TIM_Base_SetConfig+0x124>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d017      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <TIM_Base_SetConfig+0x128>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <TIM_Base_SetConfig+0x12c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00f      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <TIM_Base_SetConfig+0x130>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00b      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <TIM_Base_SetConfig+0x134>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <TIM_Base_SetConfig+0x138>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d003      	beq.n	8002bce <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <TIM_Base_SetConfig+0x13c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d108      	bne.n	8002be0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <TIM_Base_SetConfig+0x114>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_Base_SetConfig+0xf8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <TIM_Base_SetConfig+0x124>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d103      	bne.n	8002c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	615a      	str	r2, [r3, #20]
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40010000 	.word	0x40010000
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00
 8002c40:	40010400 	.word	0x40010400
 8002c44:	40014000 	.word	0x40014000
 8002c48:	40014400 	.word	0x40014400
 8002c4c:	40014800 	.word	0x40014800
 8002c50:	40001800 	.word	0x40001800
 8002c54:	40001c00 	.word	0x40001c00
 8002c58:	40002000 	.word	0x40002000

08002c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e03f      	b.n	8002d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd ff6a 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f905 	bl	8002ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b08a      	sub	sp, #40	; 0x28
 8002d22:	af02      	add	r7, sp, #8
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d17c      	bne.n	8002e38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_UART_Transmit+0x2c>
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e075      	b.n	8002e3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit+0x3e>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e06e      	b.n	8002e3a <HAL_UART_Transmit+0x11c>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2221      	movs	r2, #33	; 0x21
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d72:	f7fe f843 	bl	8000dfc <HAL_GetTick>
 8002d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	88fa      	ldrh	r2, [r7, #6]
 8002d82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8c:	d108      	bne.n	8002da0 <HAL_UART_Transmit+0x82>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e003      	b.n	8002da8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002db0:	e02a      	b.n	8002e08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f840 	bl	8002e42 <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e036      	b.n	8002e3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10b      	bne.n	8002dea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	3302      	adds	r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e007      	b.n	8002dfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	3301      	adds	r3, #1
 8002df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1cf      	bne.n	8002db2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2140      	movs	r1, #64	; 0x40
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f810 	bl	8002e42 <UART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e006      	b.n	8002e3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e52:	e02c      	b.n	8002eae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d028      	beq.n	8002eae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e62:	f7fd ffcb 	bl	8000dfc <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d21d      	bcs.n	8002eae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e80:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e00f      	b.n	8002ece <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d0c3      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002edc:	b09f      	sub	sp, #124	; 0x7c
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eee:	68d9      	ldr	r1, [r3, #12]
 8002ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	ea40 0301 	orr.w	r3, r0, r1
 8002ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f1c:	f021 010c 	bic.w	r1, r1, #12
 8002f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f26:	430b      	orrs	r3, r1
 8002f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	6999      	ldr	r1, [r3, #24]
 8002f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	ea40 0301 	orr.w	r3, r0, r1
 8002f40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4bc5      	ldr	r3, [pc, #788]	; (800325c <UART_SetConfig+0x384>)
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d004      	beq.n	8002f56 <UART_SetConfig+0x7e>
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4bc3      	ldr	r3, [pc, #780]	; (8003260 <UART_SetConfig+0x388>)
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d103      	bne.n	8002f5e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f56:	f7fe fb43 	bl	80015e0 <HAL_RCC_GetPCLK2Freq>
 8002f5a:	6778      	str	r0, [r7, #116]	; 0x74
 8002f5c:	e002      	b.n	8002f64 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5e:	f7fe fb2b 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 8002f62:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6c:	f040 80b6 	bne.w	80030dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f72:	461c      	mov	r4, r3
 8002f74:	f04f 0500 	mov.w	r5, #0
 8002f78:	4622      	mov	r2, r4
 8002f7a:	462b      	mov	r3, r5
 8002f7c:	1891      	adds	r1, r2, r2
 8002f7e:	6439      	str	r1, [r7, #64]	; 0x40
 8002f80:	415b      	adcs	r3, r3
 8002f82:	647b      	str	r3, [r7, #68]	; 0x44
 8002f84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f88:	1912      	adds	r2, r2, r4
 8002f8a:	eb45 0303 	adc.w	r3, r5, r3
 8002f8e:	f04f 0000 	mov.w	r0, #0
 8002f92:	f04f 0100 	mov.w	r1, #0
 8002f96:	00d9      	lsls	r1, r3, #3
 8002f98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f9c:	00d0      	lsls	r0, r2, #3
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	1911      	adds	r1, r2, r4
 8002fa4:	6639      	str	r1, [r7, #96]	; 0x60
 8002fa6:	416b      	adcs	r3, r5
 8002fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8002faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fc0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002fc4:	f7fd f9cc 	bl	8000360 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4ba5      	ldr	r3, [pc, #660]	; (8003264 <UART_SetConfig+0x38c>)
 8002fce:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	011e      	lsls	r6, r3, #4
 8002fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd8:	461c      	mov	r4, r3
 8002fda:	f04f 0500 	mov.w	r5, #0
 8002fde:	4622      	mov	r2, r4
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	1891      	adds	r1, r2, r2
 8002fe4:	6339      	str	r1, [r7, #48]	; 0x30
 8002fe6:	415b      	adcs	r3, r3
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fee:	1912      	adds	r2, r2, r4
 8002ff0:	eb45 0303 	adc.w	r3, r5, r3
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	00d9      	lsls	r1, r3, #3
 8002ffe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003002:	00d0      	lsls	r0, r2, #3
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	1911      	adds	r1, r2, r4
 800300a:	65b9      	str	r1, [r7, #88]	; 0x58
 800300c:	416b      	adcs	r3, r5
 800300e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	461a      	mov	r2, r3
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	1891      	adds	r1, r2, r2
 800301c:	62b9      	str	r1, [r7, #40]	; 0x28
 800301e:	415b      	adcs	r3, r3
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003022:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003026:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800302a:	f7fd f999 	bl	8000360 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4b8c      	ldr	r3, [pc, #560]	; (8003264 <UART_SetConfig+0x38c>)
 8003034:	fba3 1302 	umull	r1, r3, r3, r2
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	2164      	movs	r1, #100	; 0x64
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	3332      	adds	r3, #50	; 0x32
 8003046:	4a87      	ldr	r2, [pc, #540]	; (8003264 <UART_SetConfig+0x38c>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003054:	441e      	add	r6, r3
 8003056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003058:	4618      	mov	r0, r3
 800305a:	f04f 0100 	mov.w	r1, #0
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	1894      	adds	r4, r2, r2
 8003064:	623c      	str	r4, [r7, #32]
 8003066:	415b      	adcs	r3, r3
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800306e:	1812      	adds	r2, r2, r0
 8003070:	eb41 0303 	adc.w	r3, r1, r3
 8003074:	f04f 0400 	mov.w	r4, #0
 8003078:	f04f 0500 	mov.w	r5, #0
 800307c:	00dd      	lsls	r5, r3, #3
 800307e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003082:	00d4      	lsls	r4, r2, #3
 8003084:	4622      	mov	r2, r4
 8003086:	462b      	mov	r3, r5
 8003088:	1814      	adds	r4, r2, r0
 800308a:	653c      	str	r4, [r7, #80]	; 0x50
 800308c:	414b      	adcs	r3, r1
 800308e:	657b      	str	r3, [r7, #84]	; 0x54
 8003090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	461a      	mov	r2, r3
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	1891      	adds	r1, r2, r2
 800309c:	61b9      	str	r1, [r7, #24]
 800309e:	415b      	adcs	r3, r3
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80030aa:	f7fd f959 	bl	8000360 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4b6c      	ldr	r3, [pc, #432]	; (8003264 <UART_SetConfig+0x38c>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	; 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	3332      	adds	r3, #50	; 0x32
 80030c6:	4a67      	ldr	r2, [pc, #412]	; (8003264 <UART_SetConfig+0x38c>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	f003 0207 	and.w	r2, r3, #7
 80030d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4432      	add	r2, r6
 80030d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030da:	e0b9      	b.n	8003250 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030de:	461c      	mov	r4, r3
 80030e0:	f04f 0500 	mov.w	r5, #0
 80030e4:	4622      	mov	r2, r4
 80030e6:	462b      	mov	r3, r5
 80030e8:	1891      	adds	r1, r2, r2
 80030ea:	6139      	str	r1, [r7, #16]
 80030ec:	415b      	adcs	r3, r3
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030f4:	1912      	adds	r2, r2, r4
 80030f6:	eb45 0303 	adc.w	r3, r5, r3
 80030fa:	f04f 0000 	mov.w	r0, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	00d9      	lsls	r1, r3, #3
 8003104:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003108:	00d0      	lsls	r0, r2, #3
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	eb12 0804 	adds.w	r8, r2, r4
 8003112:	eb43 0905 	adc.w	r9, r3, r5
 8003116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	008b      	lsls	r3, r1, #2
 800312a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800312e:	0082      	lsls	r2, r0, #2
 8003130:	4640      	mov	r0, r8
 8003132:	4649      	mov	r1, r9
 8003134:	f7fd f914 	bl	8000360 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4b49      	ldr	r3, [pc, #292]	; (8003264 <UART_SetConfig+0x38c>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	011e      	lsls	r6, r3, #4
 8003146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003148:	4618      	mov	r0, r3
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	1894      	adds	r4, r2, r2
 8003154:	60bc      	str	r4, [r7, #8]
 8003156:	415b      	adcs	r3, r3
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800315e:	1812      	adds	r2, r2, r0
 8003160:	eb41 0303 	adc.w	r3, r1, r3
 8003164:	f04f 0400 	mov.w	r4, #0
 8003168:	f04f 0500 	mov.w	r5, #0
 800316c:	00dd      	lsls	r5, r3, #3
 800316e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003172:	00d4      	lsls	r4, r2, #3
 8003174:	4622      	mov	r2, r4
 8003176:	462b      	mov	r3, r5
 8003178:	1814      	adds	r4, r2, r0
 800317a:	64bc      	str	r4, [r7, #72]	; 0x48
 800317c:	414b      	adcs	r3, r1
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	008b      	lsls	r3, r1, #2
 8003194:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003198:	0082      	lsls	r2, r0, #2
 800319a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800319e:	f7fd f8df 	bl	8000360 <__aeabi_uldivmod>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <UART_SetConfig+0x38c>)
 80031a8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	2164      	movs	r1, #100	; 0x64
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	3332      	adds	r3, #50	; 0x32
 80031ba:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <UART_SetConfig+0x38c>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c6:	441e      	add	r6, r3
 80031c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ca:	4618      	mov	r0, r3
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	1894      	adds	r4, r2, r2
 80031d6:	603c      	str	r4, [r7, #0]
 80031d8:	415b      	adcs	r3, r3
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e0:	1812      	adds	r2, r2, r0
 80031e2:	eb41 0303 	adc.w	r3, r1, r3
 80031e6:	f04f 0400 	mov.w	r4, #0
 80031ea:	f04f 0500 	mov.w	r5, #0
 80031ee:	00dd      	lsls	r5, r3, #3
 80031f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031f4:	00d4      	lsls	r4, r2, #3
 80031f6:	4622      	mov	r2, r4
 80031f8:	462b      	mov	r3, r5
 80031fa:	eb12 0a00 	adds.w	sl, r2, r0
 80031fe:	eb43 0b01 	adc.w	fp, r3, r1
 8003202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4618      	mov	r0, r3
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	008b      	lsls	r3, r1, #2
 8003216:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800321a:	0082      	lsls	r2, r0, #2
 800321c:	4650      	mov	r0, sl
 800321e:	4659      	mov	r1, fp
 8003220:	f7fd f89e 	bl	8000360 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <UART_SetConfig+0x38c>)
 800322a:	fba3 1302 	umull	r1, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2164      	movs	r1, #100	; 0x64
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	; 0x32
 800323c:	4a09      	ldr	r2, [pc, #36]	; (8003264 <UART_SetConfig+0x38c>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4432      	add	r2, r6
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	377c      	adds	r7, #124	; 0x7c
 8003254:	46bd      	mov	sp, r7
 8003256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800325a:	bf00      	nop
 800325c:	40011000 	.word	0x40011000
 8003260:	40011400 	.word	0x40011400
 8003264:	51eb851f 	.word	0x51eb851f

08003268 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f103 0208 	add.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f103 0208 	add.w	r2, r3, #8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f103 0208 	add.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d103      	bne.n	800332a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e00c      	b.n	8003344 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3308      	adds	r3, #8
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e002      	b.n	8003338 <vListInsert+0x2e>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	429a      	cmp	r2, r3
 8003342:	d2f6      	bcs.n	8003332 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6892      	ldr	r2, [r2, #8]
 8003392:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6852      	ldr	r2, [r2, #4]
 800339c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d103      	bne.n	80033b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80033fa:	f002 fafd 	bl	80059f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	441a      	add	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	3b01      	subs	r3, #1
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	22ff      	movs	r2, #255	; 0xff
 800343e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	22ff      	movs	r2, #255	; 0xff
 8003446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d114      	bne.n	800347a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01a      	beq.n	800348e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3310      	adds	r3, #16
 800345c:	4618      	mov	r0, r3
 800345e:	f001 faab 	bl	80049b8 <xTaskRemoveFromEventList>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d012      	beq.n	800348e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <xQueueGenericReset+0xcc>)
 800346a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	e009      	b.n	800348e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3310      	adds	r3, #16
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fef2 	bl	8003268 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3324      	adds	r3, #36	; 0x24
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff feed 	bl	8003268 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800348e:	f002 fae3 	bl	8005a58 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	; 0x30
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <xQueueGenericCreate+0x2a>
        __asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	61bb      	str	r3, [r7, #24]
    }
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <xQueueGenericCreate+0x48>
 80034da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d101      	bne.n	80034ec <xQueueGenericCreate+0x4c>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <xQueueGenericCreate+0x4e>
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <xQueueGenericCreate+0x68>
        __asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	617b      	str	r3, [r7, #20]
    }
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800350e:	d90a      	bls.n	8003526 <xQueueGenericCreate+0x86>
        __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	613b      	str	r3, [r7, #16]
    }
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	3350      	adds	r3, #80	; 0x50
 800352a:	4618      	mov	r0, r3
 800352c:	f002 fb8e 	bl	8005c4c <pvPortMalloc>
 8003530:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	3350      	adds	r3, #80	; 0x50
 8003540:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003542:	79fa      	ldrb	r2, [r7, #7]
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f805 	bl	800355e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003554:	6a3b      	ldr	r3, [r7, #32]
    }
 8003556:	4618      	mov	r0, r3
 8003558:	3728      	adds	r7, #40	; 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e002      	b.n	8003580 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800358c:	2101      	movs	r1, #1
 800358e:	69b8      	ldr	r0, [r7, #24]
 8003590:	f7ff ff1e 	bl	80033d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	2073      	movs	r0, #115	; 0x73
 80035a4:	f003 fdca 	bl	800713c <SEGGER_SYSVIEW_RecordU32x3>
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b090      	sub	sp, #64	; 0x40
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035be:	2300      	movs	r3, #0
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <xQueueGenericSend+0x32>
        __asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80035de:	bf00      	nop
 80035e0:	e7fe      	b.n	80035e0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <xQueueGenericSend+0x40>
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <xQueueGenericSend+0x44>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <xQueueGenericSend+0x46>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <xQueueGenericSend+0x60>
        __asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800360c:	bf00      	nop
 800360e:	e7fe      	b.n	800360e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d103      	bne.n	800361e <xQueueGenericSend+0x6e>
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <xQueueGenericSend+0x72>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <xQueueGenericSend+0x74>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xQueueGenericSend+0x8e>
        __asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	623b      	str	r3, [r7, #32]
    }
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800363e:	f001 fb5b 	bl	8004cf8 <xTaskGetSchedulerState>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <xQueueGenericSend+0x9e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <xQueueGenericSend+0xa2>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <xQueueGenericSend+0xa4>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueGenericSend+0xbe>
        __asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	61fb      	str	r3, [r7, #28]
    }
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800366e:	f002 f9c3 	bl	80059f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <xQueueGenericSend+0xd4>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d136      	bne.n	80036f2 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	4618      	mov	r0, r3
 8003688:	f004 fae6 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	460b      	mov	r3, r1
 8003696:	4601      	mov	r1, r0
 8003698:	205a      	movs	r0, #90	; 0x5a
 800369a:	f003 fdc5 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036a4:	f000 fbcc 	bl	8003e40 <prvCopyDataToQueue>
 80036a8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d010      	beq.n	80036d4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	3324      	adds	r3, #36	; 0x24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 f97e 	bl	80049b8 <xTaskRemoveFromEventList>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d013      	beq.n	80036ea <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80036c2:	4b4d      	ldr	r3, [pc, #308]	; (80037f8 <xQueueGenericSend+0x248>)
 80036c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	e00a      	b.n	80036ea <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <xQueueGenericSend+0x248>)
 80036dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80036ea:	f002 f9b5 	bl	8005a58 <vPortExitCritical>
                return pdPASS;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e07d      	b.n	80037ee <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d110      	bne.n	800371a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80036f8:	f002 f9ae 	bl	8005a58 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	4618      	mov	r0, r3
 8003700:	f004 faaa 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	460b      	mov	r3, r1
 800370e:	4601      	mov	r1, r0
 8003710:	205a      	movs	r0, #90	; 0x5a
 8003712:	f003 fd89 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003716:	2300      	movs	r3, #0
 8003718:	e069      	b.n	80037ee <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4618      	mov	r0, r3
 8003726:	f001 f9ad 	bl	8004a84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800372a:	2301      	movs	r3, #1
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800372e:	f002 f993 	bl	8005a58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003732:	f000 fef9 	bl	8004528 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003736:	f002 f95f 	bl	80059f8 <vPortEnterCritical>
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003740:	b25b      	sxtb	r3, r3
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d103      	bne.n	8003750 <xQueueGenericSend+0x1a0>
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003756:	b25b      	sxtb	r3, r3
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d103      	bne.n	8003766 <xQueueGenericSend+0x1b6>
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003766:	f002 f977 	bl	8005a58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800376a:	1d3a      	adds	r2, r7, #4
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f001 f99c 	bl	8004ab0 <xTaskCheckForTimeOut>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d124      	bne.n	80037c8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800377e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003780:	f000 fc56 	bl	8004030 <prvIsQueueFull>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	3310      	adds	r3, #16
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f001 f8be 	bl	8004914 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800379a:	f000 fbe1 	bl	8003f60 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800379e:	f000 fed1 	bl	8004544 <xTaskResumeAll>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f af62 	bne.w	800366e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <xQueueGenericSend+0x248>)
 80037ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	e758      	b.n	800366e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80037bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037be:	f000 fbcf 	bl	8003f60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80037c2:	f000 febf 	bl	8004544 <xTaskResumeAll>
 80037c6:	e752      	b.n	800366e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80037c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ca:	f000 fbc9 	bl	8003f60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80037ce:	f000 feb9 	bl	8004544 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	4618      	mov	r0, r3
 80037d6:	f004 fa3f 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	460b      	mov	r3, r1
 80037e4:	4601      	mov	r1, r0
 80037e6:	205a      	movs	r0, #90	; 0x5a
 80037e8:	f003 fd1e 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80037ec:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3738      	adds	r7, #56	; 0x38
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b090      	sub	sp, #64	; 0x40
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <xQueueGenericSendFromISR+0x3c>
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <xQueueGenericSendFromISR+0x40>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <xQueueGenericSendFromISR+0x42>
 800383c:	2300      	movs	r3, #0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d103      	bne.n	8003866 <xQueueGenericSendFromISR+0x6a>
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <xQueueGenericSendFromISR+0x6e>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <xQueueGenericSendFromISR+0x70>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	623b      	str	r3, [r7, #32]
    }
 8003882:	bf00      	nop
 8003884:	e7fe      	b.n	8003884 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003886:	f002 f9a1 	bl	8005bcc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800388a:	f3ef 8211 	mrs	r2, BASEPRI
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	61fa      	str	r2, [r7, #28]
 80038a0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80038a2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <xQueueGenericSendFromISR+0xbc>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d148      	bne.n	800394a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 f9c4 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 80038d0:	4601      	mov	r1, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	461a      	mov	r2, r3
 80038d6:	2060      	movs	r0, #96	; 0x60
 80038d8:	f003 fbd6 	bl	8007088 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038e2:	f000 faad 	bl	8003e40 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80038e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ee:	d112      	bne.n	8003916 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d025      	beq.n	8003944 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	3324      	adds	r3, #36	; 0x24
 80038fc:	4618      	mov	r0, r3
 80038fe:	f001 f85b 	bl	80049b8 <xTaskRemoveFromEventList>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01d      	beq.n	8003944 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01a      	beq.n	8003944 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e016      	b.n	8003944 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003916:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800391a:	2b7f      	cmp	r3, #127	; 0x7f
 800391c:	d10a      	bne.n	8003934 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	617b      	str	r3, [r7, #20]
    }
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003934:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003938:	3301      	adds	r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	b25a      	sxtb	r2, r3
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003944:	2301      	movs	r3, #1
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003948:	e00b      	b.n	8003962 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	4618      	mov	r0, r3
 800394e:	f004 f983 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003952:	4601      	mov	r1, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	461a      	mov	r2, r3
 8003958:	2060      	movs	r0, #96	; 0x60
 800395a:	f003 fb95 	bl	8007088 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800395e:	2300      	movs	r3, #0
 8003960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800396c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003970:	4618      	mov	r0, r3
 8003972:	3740      	adds	r7, #64	; 0x40
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b08f      	sub	sp, #60	; 0x3c
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003984:	2300      	movs	r3, #0
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <xQueueReceive+0x30>
        __asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	623b      	str	r3, [r7, #32]
    }
 80039a4:	bf00      	nop
 80039a6:	e7fe      	b.n	80039a6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <xQueueReceive+0x3e>
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <xQueueReceive+0x42>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <xQueueReceive+0x44>
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <xQueueReceive+0x5e>
        __asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	61fb      	str	r3, [r7, #28]
    }
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039d6:	f001 f98f 	bl	8004cf8 <xTaskGetSchedulerState>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <xQueueReceive+0x6e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <xQueueReceive+0x72>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueReceive+0x74>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xQueueReceive+0x8e>
        __asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	61bb      	str	r3, [r7, #24]
    }
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a06:	f001 fff7 	bl	80059f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02f      	beq.n	8003a76 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a1a:	f000 fa7b 	bl	8003f14 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 f919 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003a26:	4604      	mov	r4, r0
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f004 f915 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2101      	movs	r1, #1
 8003a34:	9100      	str	r1, [sp, #0]
 8003a36:	4621      	mov	r1, r4
 8003a38:	205c      	movs	r0, #92	; 0x5c
 8003a3a:	f003 fbf5 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	1e5a      	subs	r2, r3, #1
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00f      	beq.n	8003a6e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	3310      	adds	r3, #16
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 ffb0 	bl	80049b8 <xTaskRemoveFromEventList>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003a5e:	4b4d      	ldr	r3, [pc, #308]	; (8003b94 <xQueueReceive+0x21c>)
 8003a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003a6e:	f001 fff3 	bl	8005a58 <vPortExitCritical>
                return pdPASS;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e08a      	b.n	8003b8c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d113      	bne.n	8003aa4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003a7c:	f001 ffec 	bl	8005a58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 f8e8 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f004 f8e4 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003a90:	4602      	mov	r2, r0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2101      	movs	r1, #1
 8003a96:	9100      	str	r1, [sp, #0]
 8003a98:	4621      	mov	r1, r4
 8003a9a:	205c      	movs	r0, #92	; 0x5c
 8003a9c:	f003 fbc4 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e073      	b.n	8003b8c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003aaa:	f107 0310 	add.w	r3, r7, #16
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 ffe8 	bl	8004a84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ab8:	f001 ffce 	bl	8005a58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003abc:	f000 fd34 	bl	8004528 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003ac0:	f001 ff9a 	bl	80059f8 <vPortEnterCritical>
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d103      	bne.n	8003ada <xQueueReceive+0x162>
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d103      	bne.n	8003af0 <xQueueReceive+0x178>
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af0:	f001 ffb2 	bl	8005a58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003af4:	1d3a      	adds	r2, r7, #4
 8003af6:	f107 0310 	add.w	r3, r7, #16
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 ffd7 	bl	8004ab0 <xTaskCheckForTimeOut>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d124      	bne.n	8003b52 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b0a:	f000 fa7b 	bl	8004004 <prvIsQueueEmpty>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d018      	beq.n	8003b46 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	3324      	adds	r3, #36	; 0x24
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 fef9 	bl	8004914 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b24:	f000 fa1c 	bl	8003f60 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003b28:	f000 fd0c 	bl	8004544 <xTaskResumeAll>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f47f af69 	bne.w	8003a06 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003b34:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <xQueueReceive+0x21c>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	e75f      	b.n	8003a06 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b48:	f000 fa0a 	bl	8003f60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b4c:	f000 fcfa 	bl	8004544 <xTaskResumeAll>
 8003b50:	e759      	b.n	8003a06 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b54:	f000 fa04 	bl	8003f60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b58:	f000 fcf4 	bl	8004544 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b5e:	f000 fa51 	bl	8004004 <prvIsQueueEmpty>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f43f af4e 	beq.w	8003a06 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f004 f873 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003b72:	4604      	mov	r4, r0
 8003b74:	2000      	movs	r0, #0
 8003b76:	f004 f86f 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2101      	movs	r1, #1
 8003b80:	9100      	str	r1, [sp, #0]
 8003b82:	4621      	mov	r1, r4
 8003b84:	205c      	movs	r0, #92	; 0x5c
 8003b86:	f003 fb4f 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003b8a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3734      	adds	r7, #52	; 0x34
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd90      	pop	{r4, r7, pc}
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b091      	sub	sp, #68	; 0x44
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003baa:	2300      	movs	r3, #0
 8003bac:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	623b      	str	r3, [r7, #32]
    }
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	61fb      	str	r3, [r7, #28]
    }
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003be8:	f001 f886 	bl	8004cf8 <xTaskGetSchedulerState>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <xQueueSemaphoreTake+0x60>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <xQueueSemaphoreTake+0x64>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <xQueueSemaphoreTake+0x66>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	61bb      	str	r3, [r7, #24]
    }
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c18:	f001 feee 	bl	80059f8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d034      	beq.n	8003c92 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f004 f814 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003c30:	4604      	mov	r4, r0
 8003c32:	2000      	movs	r0, #0
 8003c34:	f004 f810 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	9100      	str	r1, [sp, #0]
 8003c40:	4621      	mov	r1, r4
 8003c42:	205c      	movs	r0, #92	; 0x5c
 8003c44:	f003 faf0 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c58:	f001 f9fe 	bl	8005058 <pvTaskIncrementMutexHeldCount>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	3310      	adds	r3, #16
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fea2 	bl	80049b8 <xTaskRemoveFromEventList>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003c7a:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <xQueueSemaphoreTake+0x274>)
 8003c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003c8a:	f001 fee5 	bl	8005a58 <vPortExitCritical>
                return pdPASS;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0b7      	b.n	8003e02 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d121      	bne.n	8003cdc <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	617b      	str	r3, [r7, #20]
    }
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003cb4:	f001 fed0 	bl	8005a58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 ffcc 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f003 ffc8 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2101      	movs	r1, #1
 8003cce:	9100      	str	r1, [sp, #0]
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	205c      	movs	r0, #92	; 0x5c
 8003cd4:	f003 faa8 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e092      	b.n	8003e02 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ce2:	f107 030c 	add.w	r3, r7, #12
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fecc 	bl	8004a84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cf0:	f001 feb2 	bl	8005a58 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cf4:	f000 fc18 	bl	8004528 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cf8:	f001 fe7e 	bl	80059f8 <vPortEnterCritical>
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d02:	b25b      	sxtb	r3, r3
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d103      	bne.n	8003d12 <xQueueSemaphoreTake+0x17a>
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d18:	b25b      	sxtb	r3, r3
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d103      	bne.n	8003d28 <xQueueSemaphoreTake+0x190>
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d28:	f001 fe96 	bl	8005a58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d2c:	463a      	mov	r2, r7
 8003d2e:	f107 030c 	add.w	r3, r7, #12
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 febb 	bl	8004ab0 <xTaskCheckForTimeOut>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d132      	bne.n	8003da6 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d42:	f000 f95f 	bl	8004004 <prvIsQueueEmpty>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d026      	beq.n	8003d9a <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8003d54:	f001 fe50 	bl	80059f8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ffe9 	bl	8004d34 <xTaskPriorityInherit>
 8003d62:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003d64:	f001 fe78 	bl	8005a58 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fdcf 	bl	8004914 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d78:	f000 f8f2 	bl	8003f60 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003d7c:	f000 fbe2 	bl	8004544 <xTaskResumeAll>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f47f af48 	bne.w	8003c18 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003d88:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <xQueueSemaphoreTake+0x274>)
 8003d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	e73e      	b.n	8003c18 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003d9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d9c:	f000 f8e0 	bl	8003f60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003da0:	f000 fbd0 	bl	8004544 <xTaskResumeAll>
 8003da4:	e738      	b.n	8003c18 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003da6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003da8:	f000 f8da 	bl	8003f60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003dac:	f000 fbca 	bl	8004544 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003db2:	f000 f927 	bl	8004004 <prvIsQueueEmpty>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f43f af2d 	beq.w	8003c18 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00d      	beq.n	8003de0 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8003dc4:	f001 fe18 	bl	80059f8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dca:	f000 f821 	bl	8003e10 <prvGetDisinheritPriorityAfterTimeout>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 f8a6 	bl	8004f28 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003ddc:	f001 fe3c 	bl	8005a58 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 ff38 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003de8:	4604      	mov	r4, r0
 8003dea:	2000      	movs	r0, #0
 8003dec:	f003 ff34 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 8003df0:	4602      	mov	r2, r0
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	9100      	str	r1, [sp, #0]
 8003df8:	4621      	mov	r1, r4
 8003dfa:	205c      	movs	r0, #92	; 0x5c
 8003dfc:	f003 fa14 	bl	8007228 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003e00:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	373c      	adds	r7, #60	; 0x3c
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd90      	pop	{r4, r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	e000ed04 	.word	0xe000ed04

08003e10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d006      	beq.n	8003e2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1c3 0305 	rsb	r3, r3, #5
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e001      	b.n	8003e32 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003e32:	68fb      	ldr	r3, [r7, #12]
    }
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d14d      	bne.n	8003f02 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 ffdc 	bl	8004e28 <xTaskPriorityDisinherit>
 8003e70:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	e043      	b.n	8003f02 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d119      	bne.n	8003eb4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6858      	ldr	r0, [r3, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	461a      	mov	r2, r3
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	f004 f88c 	bl	8007fa8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	441a      	add	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d32b      	bcc.n	8003f02 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	e026      	b.n	8003f02 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68d8      	ldr	r0, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	f004 f872 	bl	8007fa8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	425b      	negs	r3, r3
 8003ece:	441a      	add	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d207      	bcs.n	8003ef0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	425b      	negs	r3, r3
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d105      	bne.n	8003f02 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003f0a:	697b      	ldr	r3, [r7, #20]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	441a      	add	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d303      	bcc.n	8003f48 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68d9      	ldr	r1, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	461a      	mov	r2, r3
 8003f52:	6838      	ldr	r0, [r7, #0]
 8003f54:	f004 f828 	bl	8007fa8 <memcpy>
    }
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003f68:	f001 fd46 	bl	80059f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f72:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f74:	e011      	b.n	8003f9a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d012      	beq.n	8003fa4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3324      	adds	r3, #36	; 0x24
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd18 	bl	80049b8 <xTaskRemoveFromEventList>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003f8e:	f000 fdf5 	bl	8004b7c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	dce9      	bgt.n	8003f76 <prvUnlockQueue+0x16>
 8003fa2:	e000      	b.n	8003fa6 <prvUnlockQueue+0x46>
                        break;
 8003fa4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003fae:	f001 fd53 	bl	8005a58 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003fb2:	f001 fd21 	bl	80059f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fbc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fbe:	e011      	b.n	8003fe4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d012      	beq.n	8003fee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3310      	adds	r3, #16
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fcf3 	bl	80049b8 <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003fd8:	f000 fdd0 	bl	8004b7c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dce9      	bgt.n	8003fc0 <prvUnlockQueue+0x60>
 8003fec:	e000      	b.n	8003ff0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003fee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	22ff      	movs	r2, #255	; 0xff
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003ff8:	f001 fd2e 	bl	8005a58 <vPortExitCritical>
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800400c:	f001 fcf4 	bl	80059f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004018:	2301      	movs	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e001      	b.n	8004022 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004022:	f001 fd19 	bl	8005a58 <vPortExitCritical>

    return xReturn;
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004038:	f001 fcde 	bl	80059f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	429a      	cmp	r2, r3
 8004046:	d102      	bne.n	800404e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e001      	b.n	8004052 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004052:	f001 fd01 	bl	8005a58 <vPortExitCritical>

    return xReturn;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e01e      	b.n	80040ae <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004070:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <vQueueAddToRegistry+0x60>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d115      	bne.n	80040a8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800407c:	4910      	ldr	r1, [pc, #64]	; (80040c0 <vQueueAddToRegistry+0x60>)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004086:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <vQueueAddToRegistry+0x60>)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	f003 fddf 	bl	8007c58 <SEGGER_SYSVIEW_ShrinkId>
 800409a:	4601      	mov	r1, r0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	2071      	movs	r0, #113	; 0x71
 80040a2:	f002 fff1 	bl	8007088 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80040a6:	e006      	b.n	80040b6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b07      	cmp	r3, #7
 80040b2:	d9dd      	bls.n	8004070 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20014590 	.word	0x20014590

080040c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80040d4:	f001 fc90 	bl	80059f8 <vPortEnterCritical>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040de:	b25b      	sxtb	r3, r3
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d103      	bne.n	80040ee <vQueueWaitForMessageRestricted+0x2a>
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d103      	bne.n	8004104 <vQueueWaitForMessageRestricted+0x40>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004104:	f001 fca8 	bl	8005a58 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fc1f 	bl	800495c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff ff1e 	bl	8003f60 <prvUnlockQueue>
    }
 8004124:	bf00      	nop
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af04      	add	r7, sp, #16
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4618      	mov	r0, r3
 8004142:	f001 fd83 	bl	8005c4c <pvPortMalloc>
 8004146:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800414e:	2058      	movs	r0, #88	; 0x58
 8004150:	f001 fd7c 	bl	8005c4c <pvPortMalloc>
 8004154:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
 8004162:	e005      	b.n	8004170 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004164:	6978      	ldr	r0, [r7, #20]
 8004166:	f001 fe1f 	bl	8005da8 <vPortFree>
 800416a:	e001      	b.n	8004170 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d013      	beq.n	800419e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004176:	88fa      	ldrh	r2, [r7, #6]
 8004178:	2300      	movs	r3, #0
 800417a:	9303      	str	r3, [sp, #12]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	9302      	str	r3, [sp, #8]
 8004180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f80e 	bl	80041ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004192:	69f8      	ldr	r0, [r7, #28]
 8004194:	f000 f8a2 	bl	80042dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004198:	2301      	movs	r3, #1
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	e002      	b.n	80041a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80041a4:	69bb      	ldr	r3, [r7, #24]
    }
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b088      	sub	sp, #32
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	461a      	mov	r2, r3
 80041c6:	21a5      	movs	r1, #165	; 0xa5
 80041c8:	f003 fefc 	bl	8007fc4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041d6:	3b01      	subs	r3, #1
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f023 0307 	bic.w	r3, r3, #7
 80041e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <prvInitialiseNewTask+0x58>
        __asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	617b      	str	r3, [r7, #20]
    }
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01f      	beq.n	800424c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e012      	b.n	8004238 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	7819      	ldrb	r1, [r3, #0]
 800421a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	3334      	adds	r3, #52	; 0x34
 8004222:	460a      	mov	r2, r1
 8004224:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3301      	adds	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b09      	cmp	r3, #9
 800423c:	d9e9      	bls.n	8004212 <prvInitialiseNewTask+0x64>
 800423e:	e000      	b.n	8004242 <prvInitialiseNewTask+0x94>
            {
                break;
 8004240:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800424a:	e003      	b.n	8004254 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	2b04      	cmp	r3, #4
 8004258:	d901      	bls.n	800425e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800425a:	2304      	movs	r3, #4
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	2200      	movs	r2, #0
 800426e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	3304      	adds	r3, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff f817 	bl	80032a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	3318      	adds	r3, #24
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff f812 	bl	80032a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004288:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	f1c3 0205 	rsb	r2, r3, #5
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	3350      	adds	r3, #80	; 0x50
 800429e:	2204      	movs	r2, #4
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fe8e 	bl	8007fc4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	3354      	adds	r3, #84	; 0x54
 80042ac:	2201      	movs	r2, #1
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 fe87 	bl	8007fc4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	69b8      	ldr	r0, [r7, #24]
 80042bc:	f001 fa6a 	bl	8005794 <pxPortInitialiseStack>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042d2:	bf00      	nop
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80042dc:	b5b0      	push	{r4, r5, r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80042e4:	f001 fb88 	bl	80059f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <prvAddNewTaskToReadyList+0xfc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3301      	adds	r3, #1
 80042ee:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <prvAddNewTaskToReadyList+0xfc>)
 80042f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80042f2:	4b3a      	ldr	r3, [pc, #232]	; (80043dc <prvAddNewTaskToReadyList+0x100>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80042fa:	4a38      	ldr	r2, [pc, #224]	; (80043dc <prvAddNewTaskToReadyList+0x100>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004300:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <prvAddNewTaskToReadyList+0xfc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d110      	bne.n	800432a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004308:	f000 fc5c 	bl	8004bc4 <prvInitialiseTaskLists>
 800430c:	e00d      	b.n	800432a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800430e:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <prvAddNewTaskToReadyList+0x104>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004316:	4b31      	ldr	r3, [pc, #196]	; (80043dc <prvAddNewTaskToReadyList+0x100>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	429a      	cmp	r2, r3
 8004322:	d802      	bhi.n	800432a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004324:	4a2d      	ldr	r2, [pc, #180]	; (80043dc <prvAddNewTaskToReadyList+0x100>)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800432a:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <prvAddNewTaskToReadyList+0x108>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <prvAddNewTaskToReadyList+0x108>)
 8004332:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004334:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <prvAddNewTaskToReadyList+0x108>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <prvAddNewTaskToReadyList+0x94>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	f003 fb61 	bl	8007a0c <SEGGER_SYSVIEW_OnTaskCreate>
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	461d      	mov	r5, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461c      	mov	r4, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	1ae3      	subs	r3, r4, r3
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	462b      	mov	r3, r5
 800436c:	f001 fe28 	bl	8005fc0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	f003 fbce 	bl	8007b14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	2201      	movs	r2, #1
 800437e:	409a      	lsls	r2, r3
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <prvAddNewTaskToReadyList+0x10c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4313      	orrs	r3, r2
 8004386:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <prvAddNewTaskToReadyList+0x10c>)
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <prvAddNewTaskToReadyList+0x110>)
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7fe ff8e 	bl	80032c2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80043a6:	f001 fb57 	bl	8005a58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <prvAddNewTaskToReadyList+0x104>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00e      	beq.n	80043d0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvAddNewTaskToReadyList+0x100>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	429a      	cmp	r2, r3
 80043be:	d207      	bcs.n	80043d0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <prvAddNewTaskToReadyList+0x114>)
 80043c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bdb0      	pop	{r4, r5, r7, pc}
 80043d8:	20000274 	.word	0x20000274
 80043dc:	2000019c 	.word	0x2000019c
 80043e0:	20000280 	.word	0x20000280
 80043e4:	20000290 	.word	0x20000290
 80043e8:	2000027c 	.word	0x2000027c
 80043ec:	200001a0 	.word	0x200001a0
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01b      	beq.n	800443e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <vTaskDelay+0x68>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <vTaskDelay+0x30>
        __asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	60bb      	str	r3, [r7, #8]
    }
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004424:	f000 f880 	bl	8004528 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	2023      	movs	r0, #35	; 0x23
 800442c:	f002 fdf0 	bl	8007010 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004430:	2100      	movs	r1, #0
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fe24 	bl	8005080 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004438:	f000 f884 	bl	8004544 <xTaskResumeAll>
 800443c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d107      	bne.n	8004454 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <vTaskDelay+0x6c>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	2000029c 	.word	0x2000029c
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800446a:	4b27      	ldr	r3, [pc, #156]	; (8004508 <vTaskStartScheduler+0xa4>)
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	2300      	movs	r3, #0
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	2300      	movs	r3, #0
 8004474:	2282      	movs	r2, #130	; 0x82
 8004476:	4925      	ldr	r1, [pc, #148]	; (800450c <vTaskStartScheduler+0xa8>)
 8004478:	4825      	ldr	r0, [pc, #148]	; (8004510 <vTaskStartScheduler+0xac>)
 800447a:	f7ff fe57 	bl	800412c <xTaskCreate>
 800447e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d102      	bne.n	800448c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004486:	f000 fe73 	bl	8005170 <xTimerCreateTimerTask>
 800448a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d124      	bne.n	80044dc <vTaskStartScheduler+0x78>
        __asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60bb      	str	r3, [r7, #8]
    }
 80044a4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80044a6:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <vTaskStartScheduler+0xb0>)
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80044ae:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <vTaskStartScheduler+0xb4>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <vTaskStartScheduler+0xb8>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <vTaskStartScheduler+0xbc>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <vTaskStartScheduler+0xa4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d102      	bne.n	80044cc <vTaskStartScheduler+0x68>
 80044c6:	f003 fa85 	bl	80079d4 <SEGGER_SYSVIEW_OnIdle>
 80044ca:	e004      	b.n	80044d6 <vTaskStartScheduler+0x72>
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <vTaskStartScheduler+0xbc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f003 fadd 	bl	8007a90 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80044d6:	f001 f9ed 	bl	80058b4 <xPortStartScheduler>
 80044da:	e00e      	b.n	80044fa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d10a      	bne.n	80044fa <vTaskStartScheduler+0x96>
        __asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	607b      	str	r3, [r7, #4]
    }
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <vTaskStartScheduler+0xc0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000298 	.word	0x20000298
 800450c:	080088d8 	.word	0x080088d8
 8004510:	08004b95 	.word	0x08004b95
 8004514:	20000294 	.word	0x20000294
 8004518:	20000280 	.word	0x20000280
 800451c:	20000278 	.word	0x20000278
 8004520:	2000019c 	.word	0x2000019c
 8004524:	2000000c 	.word	0x2000000c

08004528 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <vTaskSuspendAll+0x18>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	4a03      	ldr	r2, [pc, #12]	; (8004540 <vTaskSuspendAll+0x18>)
 8004534:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	2000029c 	.word	0x2000029c

08004544 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004552:	4b43      	ldr	r3, [pc, #268]	; (8004660 <xTaskResumeAll+0x11c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10a      	bne.n	8004570 <xTaskResumeAll+0x2c>
        __asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	603b      	str	r3, [r7, #0]
    }
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004570:	f001 fa42 	bl	80059f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004574:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <xTaskResumeAll+0x11c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3b01      	subs	r3, #1
 800457a:	4a39      	ldr	r2, [pc, #228]	; (8004660 <xTaskResumeAll+0x11c>)
 800457c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457e:	4b38      	ldr	r3, [pc, #224]	; (8004660 <xTaskResumeAll+0x11c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d165      	bne.n	8004652 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <xTaskResumeAll+0x120>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d061      	beq.n	8004652 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800458e:	e032      	b.n	80045f6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004590:	4b35      	ldr	r3, [pc, #212]	; (8004668 <xTaskResumeAll+0x124>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3318      	adds	r3, #24
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe feed 	bl	800337c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3304      	adds	r3, #4
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fee8 	bl	800337c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 fab0 	bl	8007b14 <SEGGER_SYSVIEW_OnTaskStartReady>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	2201      	movs	r2, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	4b2b      	ldr	r3, [pc, #172]	; (800466c <xTaskResumeAll+0x128>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	4a2a      	ldr	r2, [pc, #168]	; (800466c <xTaskResumeAll+0x128>)
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4a27      	ldr	r2, [pc, #156]	; (8004670 <xTaskResumeAll+0x12c>)
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f7fe fe70 	bl	80032c2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e6:	4b23      	ldr	r3, [pc, #140]	; (8004674 <xTaskResumeAll+0x130>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80045f0:	4b21      	ldr	r3, [pc, #132]	; (8004678 <xTaskResumeAll+0x134>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045f6:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <xTaskResumeAll+0x124>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1c8      	bne.n	8004590 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004604:	f000 fb5c 	bl	8004cc0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004608:	4b1c      	ldr	r3, [pc, #112]	; (800467c <xTaskResumeAll+0x138>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d010      	beq.n	8004636 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004614:	f000 f858 	bl	80046c8 <xTaskIncrementTick>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <xTaskResumeAll+0x134>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3b01      	subs	r3, #1
 8004628:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f1      	bne.n	8004614 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <xTaskResumeAll+0x138>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <xTaskResumeAll+0x134>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800463e:	2301      	movs	r3, #1
 8004640:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <xTaskResumeAll+0x13c>)
 8004644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004652:	f001 fa01 	bl	8005a58 <vPortExitCritical>

    return xAlreadyYielded;
 8004656:	68bb      	ldr	r3, [r7, #8]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	2000029c 	.word	0x2000029c
 8004664:	20000274 	.word	0x20000274
 8004668:	20000234 	.word	0x20000234
 800466c:	2000027c 	.word	0x2000027c
 8004670:	200001a0 	.word	0x200001a0
 8004674:	2000019c 	.word	0x2000019c
 8004678:	20000288 	.word	0x20000288
 800467c:	20000284 	.word	0x20000284
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <xTaskGetTickCount+0x1c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004690:	687b      	ldr	r3, [r7, #4]
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000278 	.word	0x20000278

080046a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046aa:	f001 fa8f 	bl	8005bcc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80046b2:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <xTaskGetTickCountFromISR+0x20>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80046b8:	683b      	ldr	r3, [r7, #0]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000278 	.word	0x20000278

080046c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d2:	4b50      	ldr	r3, [pc, #320]	; (8004814 <xTaskIncrementTick+0x14c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 8092 	bne.w	8004800 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046dc:	4b4e      	ldr	r3, [pc, #312]	; (8004818 <xTaskIncrementTick+0x150>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80046e4:	4a4c      	ldr	r2, [pc, #304]	; (8004818 <xTaskIncrementTick+0x150>)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d120      	bne.n	8004732 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80046f0:	4b4a      	ldr	r3, [pc, #296]	; (800481c <xTaskIncrementTick+0x154>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <xTaskIncrementTick+0x48>
        __asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	603b      	str	r3, [r7, #0]
    }
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <xTaskIncrementTick+0x46>
 8004710:	4b42      	ldr	r3, [pc, #264]	; (800481c <xTaskIncrementTick+0x154>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b42      	ldr	r3, [pc, #264]	; (8004820 <xTaskIncrementTick+0x158>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a40      	ldr	r2, [pc, #256]	; (800481c <xTaskIncrementTick+0x154>)
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4a40      	ldr	r2, [pc, #256]	; (8004820 <xTaskIncrementTick+0x158>)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <xTaskIncrementTick+0x15c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a3e      	ldr	r2, [pc, #248]	; (8004824 <xTaskIncrementTick+0x15c>)
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	f000 fac7 	bl	8004cc0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004732:	4b3d      	ldr	r3, [pc, #244]	; (8004828 <xTaskIncrementTick+0x160>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	429a      	cmp	r2, r3
 800473a:	d34c      	bcc.n	80047d6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800473c:	4b37      	ldr	r3, [pc, #220]	; (800481c <xTaskIncrementTick+0x154>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <xTaskIncrementTick+0x160>)
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	601a      	str	r2, [r3, #0]
                    break;
 800474e:	e042      	b.n	80047d6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004750:	4b32      	ldr	r3, [pc, #200]	; (800481c <xTaskIncrementTick+0x154>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d203      	bcs.n	8004770 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004768:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <xTaskIncrementTick+0x160>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800476e:	e032      	b.n	80047d6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	3304      	adds	r3, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe fe01 	bl	800337c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3318      	adds	r3, #24
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fdf8 	bl	800337c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4618      	mov	r0, r3
 8004790:	f003 f9c0 	bl	8007b14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	2201      	movs	r2, #1
 800479a:	409a      	lsls	r2, r3
 800479c:	4b23      	ldr	r3, [pc, #140]	; (800482c <xTaskIncrementTick+0x164>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	4a22      	ldr	r2, [pc, #136]	; (800482c <xTaskIncrementTick+0x164>)
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <xTaskIncrementTick+0x168>)
 80047b4:	441a      	add	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f7fe fd80 	bl	80032c2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <xTaskIncrementTick+0x16c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d3b5      	bcc.n	800473c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047d4:	e7b2      	b.n	800473c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047d6:	4b17      	ldr	r3, [pc, #92]	; (8004834 <xTaskIncrementTick+0x16c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4914      	ldr	r1, [pc, #80]	; (8004830 <xTaskIncrementTick+0x168>)
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d901      	bls.n	80047f2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80047ee:	2301      	movs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80047f2:	4b11      	ldr	r3, [pc, #68]	; (8004838 <xTaskIncrementTick+0x170>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	e004      	b.n	800480a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <xTaskIncrementTick+0x174>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	4a0d      	ldr	r2, [pc, #52]	; (800483c <xTaskIncrementTick+0x174>)
 8004808:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800480a:	697b      	ldr	r3, [r7, #20]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	2000029c 	.word	0x2000029c
 8004818:	20000278 	.word	0x20000278
 800481c:	2000022c 	.word	0x2000022c
 8004820:	20000230 	.word	0x20000230
 8004824:	2000028c 	.word	0x2000028c
 8004828:	20000294 	.word	0x20000294
 800482c:	2000027c 	.word	0x2000027c
 8004830:	200001a0 	.word	0x200001a0
 8004834:	2000019c 	.word	0x2000019c
 8004838:	20000288 	.word	0x20000288
 800483c:	20000284 	.word	0x20000284

08004840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004846:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <vTaskSwitchContext+0xbc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800484e:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <vTaskSwitchContext+0xc0>)
 8004850:	2201      	movs	r2, #1
 8004852:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004854:	e04d      	b.n	80048f2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004856:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <vTaskSwitchContext+0xc0>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485c:	4b29      	ldr	r3, [pc, #164]	; (8004904 <vTaskSwitchContext+0xc4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800486a:	7afb      	ldrb	r3, [r7, #11]
 800486c:	f1c3 031f 	rsb	r3, r3, #31
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	4925      	ldr	r1, [pc, #148]	; (8004908 <vTaskSwitchContext+0xc8>)
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	607b      	str	r3, [r7, #4]
    }
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <vTaskSwitchContext+0x5a>
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <vTaskSwitchContext+0xc8>)
 80048a8:	4413      	add	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3308      	adds	r3, #8
 80048be:	429a      	cmp	r2, r3
 80048c0:	d104      	bne.n	80048cc <vTaskSwitchContext+0x8c>
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <vTaskSwitchContext+0xcc>)
 80048d4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <vTaskSwitchContext+0xcc>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <vTaskSwitchContext+0xd0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d102      	bne.n	80048e8 <vTaskSwitchContext+0xa8>
 80048e2:	f003 f877 	bl	80079d4 <SEGGER_SYSVIEW_OnIdle>
}
 80048e6:	e004      	b.n	80048f2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80048e8:	4b08      	ldr	r3, [pc, #32]	; (800490c <vTaskSwitchContext+0xcc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f003 f8cf 	bl	8007a90 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	2000029c 	.word	0x2000029c
 8004900:	20000288 	.word	0x20000288
 8004904:	2000027c 	.word	0x2000027c
 8004908:	200001a0 	.word	0x200001a0
 800490c:	2000019c 	.word	0x2000019c
 8004910:	20000298 	.word	0x20000298

08004914 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60fb      	str	r3, [r7, #12]
    }
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <vTaskPlaceOnEventList+0x44>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3318      	adds	r3, #24
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fe fce1 	bl	800330a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004948:	2101      	movs	r1, #1
 800494a:	6838      	ldr	r0, [r7, #0]
 800494c:	f000 fb98 	bl	8005080 <prvAddCurrentTaskToDelayedList>
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	2000019c 	.word	0x2000019c

0800495c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	617b      	str	r3, [r7, #20]
    }
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <vTaskPlaceOnEventListRestricted+0x58>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3318      	adds	r3, #24
 800498a:	4619      	mov	r1, r3
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7fe fc98 	bl	80032c2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004998:	f04f 33ff 	mov.w	r3, #4294967295
 800499c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800499e:	2024      	movs	r0, #36	; 0x24
 80049a0:	f002 fb18 	bl	8006fd4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	68b8      	ldr	r0, [r7, #8]
 80049a8:	f000 fb6a 	bl	8005080 <prvAddCurrentTaskToDelayedList>
    }
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	2000019c 	.word	0x2000019c

080049b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
    }
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	3318      	adds	r3, #24
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe fcc7 	bl	800337c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ee:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <xTaskRemoveFromEventList+0xb4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d120      	bne.n	8004a38 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3304      	adds	r3, #4
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fcbe 	bl	800337c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f003 f886 	bl	8007b14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <xTaskRemoveFromEventList+0xb8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <xTaskRemoveFromEventList+0xb8>)
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <xTaskRemoveFromEventList+0xbc>)
 8004a28:	441a      	add	r2, r3
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7fe fc46 	bl	80032c2 <vListInsertEnd>
 8004a36:	e005      	b.n	8004a44 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	3318      	adds	r3, #24
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	480e      	ldr	r0, [pc, #56]	; (8004a78 <xTaskRemoveFromEventList+0xc0>)
 8004a40:	f7fe fc3f 	bl	80032c2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <xTaskRemoveFromEventList+0xc4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d905      	bls.n	8004a5e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004a52:	2301      	movs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <xTaskRemoveFromEventList+0xc8>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e001      	b.n	8004a62 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004a62:	697b      	ldr	r3, [r7, #20]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	2000029c 	.word	0x2000029c
 8004a70:	2000027c 	.word	0x2000027c
 8004a74:	200001a0 	.word	0x200001a0
 8004a78:	20000234 	.word	0x20000234
 8004a7c:	2000019c 	.word	0x2000019c
 8004a80:	20000288 	.word	0x20000288

08004a84 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <vTaskInternalSetTimeOutState+0x24>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <vTaskInternalSetTimeOutState+0x28>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	605a      	str	r2, [r3, #4]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	2000028c 	.word	0x2000028c
 8004aac:	20000278 	.word	0x20000278

08004ab0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	613b      	str	r3, [r7, #16]
    }
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60fb      	str	r3, [r7, #12]
    }
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004af2:	f000 ff81 	bl	80059f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <xTaskCheckForTimeOut+0xc4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	d102      	bne.n	8004b16 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	e026      	b.n	8004b64 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <xTaskCheckForTimeOut+0xc8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d00a      	beq.n	8004b38 <xTaskCheckForTimeOut+0x88>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d305      	bcc.n	8004b38 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e015      	b.n	8004b64 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d20b      	bcs.n	8004b5a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1ad2      	subs	r2, r2, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ff98 	bl	8004a84 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e004      	b.n	8004b64 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004b60:	2301      	movs	r3, #1
 8004b62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004b64:	f000 ff78 	bl	8005a58 <vPortExitCritical>

    return xReturn;
 8004b68:	69fb      	ldr	r3, [r7, #28]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000278 	.word	0x20000278
 8004b78:	2000028c 	.word	0x2000028c

08004b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <vTaskMissedYield+0x14>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20000288 	.word	0x20000288

08004b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004b9c:	f000 f852 	bl	8004c44 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <prvIdleTask+0x28>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d9f9      	bls.n	8004b9c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <prvIdleTask+0x2c>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004bb8:	e7f0      	b.n	8004b9c <prvIdleTask+0x8>
 8004bba:	bf00      	nop
 8004bbc:	200001a0 	.word	0x200001a0
 8004bc0:	e000ed04 	.word	0xe000ed04

08004bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	e00c      	b.n	8004bea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <prvInitialiseTaskLists+0x60>)
 8004bdc:	4413      	add	r3, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe fb42 	bl	8003268 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3301      	adds	r3, #1
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d9ef      	bls.n	8004bd0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004bf0:	480d      	ldr	r0, [pc, #52]	; (8004c28 <prvInitialiseTaskLists+0x64>)
 8004bf2:	f7fe fb39 	bl	8003268 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004bf6:	480d      	ldr	r0, [pc, #52]	; (8004c2c <prvInitialiseTaskLists+0x68>)
 8004bf8:	f7fe fb36 	bl	8003268 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004bfc:	480c      	ldr	r0, [pc, #48]	; (8004c30 <prvInitialiseTaskLists+0x6c>)
 8004bfe:	f7fe fb33 	bl	8003268 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004c02:	480c      	ldr	r0, [pc, #48]	; (8004c34 <prvInitialiseTaskLists+0x70>)
 8004c04:	f7fe fb30 	bl	8003268 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004c08:	480b      	ldr	r0, [pc, #44]	; (8004c38 <prvInitialiseTaskLists+0x74>)
 8004c0a:	f7fe fb2d 	bl	8003268 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <prvInitialiseTaskLists+0x78>)
 8004c10:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <prvInitialiseTaskLists+0x64>)
 8004c12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <prvInitialiseTaskLists+0x7c>)
 8004c16:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <prvInitialiseTaskLists+0x68>)
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200001a0 	.word	0x200001a0
 8004c28:	20000204 	.word	0x20000204
 8004c2c:	20000218 	.word	0x20000218
 8004c30:	20000234 	.word	0x20000234
 8004c34:	20000248 	.word	0x20000248
 8004c38:	20000260 	.word	0x20000260
 8004c3c:	2000022c 	.word	0x2000022c
 8004c40:	20000230 	.word	0x20000230

08004c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c4a:	e019      	b.n	8004c80 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004c4c:	f000 fed4 	bl	80059f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c50:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <prvCheckTasksWaitingTermination+0x50>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fb8d 	bl	800337c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <prvCheckTasksWaitingTermination+0x54>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	4a0b      	ldr	r2, [pc, #44]	; (8004c98 <prvCheckTasksWaitingTermination+0x54>)
 8004c6a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <prvCheckTasksWaitingTermination+0x58>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <prvCheckTasksWaitingTermination+0x58>)
 8004c74:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004c76:	f000 feef 	bl	8005a58 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f810 	bl	8004ca0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <prvCheckTasksWaitingTermination+0x58>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e1      	bne.n	8004c4c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000248 	.word	0x20000248
 8004c98:	20000274 	.word	0x20000274
 8004c9c:	2000025c 	.word	0x2000025c

08004ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	4618      	mov	r0, r3
 8004cae:	f001 f87b 	bl	8005da8 <vPortFree>
                vPortFree( pxTCB );
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 f878 	bl	8005da8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <prvResetNextTaskUnblockTime+0x30>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <prvResetNextTaskUnblockTime+0x34>)
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004cd6:	e005      	b.n	8004ce4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <prvResetNextTaskUnblockTime+0x30>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <prvResetNextTaskUnblockTime+0x34>)
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	2000022c 	.word	0x2000022c
 8004cf4:	20000294 	.word	0x20000294

08004cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <xTaskGetSchedulerState+0x34>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004d06:	2301      	movs	r3, #1
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	e008      	b.n	8004d1e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d0c:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <xTaskGetSchedulerState+0x38>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004d14:	2302      	movs	r3, #2
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	e001      	b.n	8004d1e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004d1e:	687b      	ldr	r3, [r7, #4]
    }
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	20000280 	.word	0x20000280
 8004d30:	2000029c 	.word	0x2000029c

08004d34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d063      	beq.n	8004e12 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4e:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <xTaskPriorityInherit+0xe8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d253      	bcs.n	8004e00 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	db06      	blt.n	8004d6e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d60:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <xTaskPriorityInherit+0xe8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	f1c3 0205 	rsb	r2, r3, #5
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6959      	ldr	r1, [r3, #20]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <xTaskPriorityInherit+0xec>)
 8004d80:	4413      	add	r3, r2
 8004d82:	4299      	cmp	r1, r3
 8004d84:	d12f      	bne.n	8004de6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe faf6 	bl	800337c <uxListRemove>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43da      	mvns	r2, r3
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <xTaskPriorityInherit+0xf0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4013      	ands	r3, r2
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <xTaskPriorityInherit+0xf0>)
 8004daa:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dac:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <xTaskPriorityInherit+0xe8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	2201      	movs	r2, #1
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <xTaskPriorityInherit+0xf0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <xTaskPriorityInherit+0xf0>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <xTaskPriorityInherit+0xec>)
 8004dd6:	441a      	add	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7fe fa6f 	bl	80032c2 <vListInsertEnd>
 8004de4:	e004      	b.n	8004df0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <xTaskPriorityInherit+0xe8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4619      	mov	r1, r3
 8004df4:	2049      	movs	r0, #73	; 0x49
 8004df6:	f002 f90b 	bl	8007010 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e008      	b.n	8004e12 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <xTaskPriorityInherit+0xe8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d201      	bcs.n	8004e12 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004e12:	68fb      	ldr	r3, [r7, #12]
    }
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	2000019c 	.word	0x2000019c
 8004e20:	200001a0 	.word	0x200001a0
 8004e24:	2000027c 	.word	0x2000027c

08004e28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d068      	beq.n	8004f10 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004e3e:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <xTaskPriorityDisinherit+0xf4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d00a      	beq.n	8004e5e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	60fb      	str	r3, [r7, #12]
    }
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60bb      	str	r3, [r7, #8]
    }
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e80:	1e5a      	subs	r2, r3, #1
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d03e      	beq.n	8004f10 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d13a      	bne.n	8004f10 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fa6c 	bl	800337c <uxListRemove>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	2201      	movs	r2, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43da      	mvns	r2, r3
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <xTaskPriorityDisinherit+0xf8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <xTaskPriorityDisinherit+0xf8>)
 8004ebe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	204a      	movs	r0, #74	; 0x4a
 8004ec6:	f002 f8a3 	bl	8007010 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	f1c3 0205 	rsb	r2, r3, #5
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <xTaskPriorityDisinherit+0xf8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <xTaskPriorityDisinherit+0xf8>)
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <xTaskPriorityDisinherit+0xfc>)
 8004efe:	441a      	add	r2, r3
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7fe f9db 	bl	80032c2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004f10:	697b      	ldr	r3, [r7, #20]
    }
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2000019c 	.word	0x2000019c
 8004f20:	2000027c 	.word	0x2000027c
 8004f24:	200001a0 	.word	0x200001a0

08004f28 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8081 	beq.w	8005044 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	60fb      	str	r3, [r7, #12]
    }
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d902      	bls.n	8004f70 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	e002      	b.n	8004f76 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f74:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d061      	beq.n	8005044 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d15c      	bne.n	8005044 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004f8a:	4b30      	ldr	r3, [pc, #192]	; (800504c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d10a      	bne.n	8004faa <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60bb      	str	r3, [r7, #8]
    }
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4619      	mov	r1, r3
 8004fae:	204a      	movs	r0, #74	; 0x4a
 8004fb0:	f002 f82e 	bl	8007010 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	db04      	blt.n	8004fd2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f1c3 0205 	rsb	r2, r3, #5
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	6959      	ldr	r1, [r3, #20]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004fe2:	4413      	add	r3, r2
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d12d      	bne.n	8005044 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fe f9c5 	bl	800337c <uxListRemove>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43da      	mvns	r2, r3
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4013      	ands	r3, r2
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800500c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4618      	mov	r0, r3
 8005012:	f002 fd7f 	bl	8007b14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	2201      	movs	r2, #1
 800501c:	409a      	lsls	r2, r3
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4313      	orrs	r3, r2
 8005024:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4a06      	ldr	r2, [pc, #24]	; (8005050 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005036:	441a      	add	r2, r3
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f7fe f93f 	bl	80032c2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005044:	bf00      	nop
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	2000019c 	.word	0x2000019c
 8005050:	200001a0 	.word	0x200001a0
 8005054:	2000027c 	.word	0x2000027c

08005058 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800505c:	4b07      	ldr	r3, [pc, #28]	; (800507c <pvTaskIncrementMutexHeldCount+0x24>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <pvTaskIncrementMutexHeldCount+0x24>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800506a:	3201      	adds	r2, #1
 800506c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800506e:	4b03      	ldr	r3, [pc, #12]	; (800507c <pvTaskIncrementMutexHeldCount+0x24>)
 8005070:	681b      	ldr	r3, [r3, #0]
    }
 8005072:	4618      	mov	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	2000019c 	.word	0x2000019c

08005080 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800508a:	4b32      	ldr	r3, [pc, #200]	; (8005154 <prvAddCurrentTaskToDelayedList+0xd4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005090:	4b31      	ldr	r3, [pc, #196]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3304      	adds	r3, #4
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe f970 	bl	800337c <uxListRemove>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050a2:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	2201      	movs	r2, #1
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43da      	mvns	r2, r3
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <prvAddCurrentTaskToDelayedList+0xdc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4013      	ands	r3, r2
 80050b6:	4a29      	ldr	r2, [pc, #164]	; (800515c <prvAddCurrentTaskToDelayedList+0xdc>)
 80050b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d110      	bne.n	80050e4 <prvAddCurrentTaskToDelayedList+0x64>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80050c8:	4b23      	ldr	r3, [pc, #140]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	211b      	movs	r1, #27
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 fd62 	bl	8007b98 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050d4:	4b20      	ldr	r3, [pc, #128]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	4820      	ldr	r0, [pc, #128]	; (8005160 <prvAddCurrentTaskToDelayedList+0xe0>)
 80050de:	f7fe f8f0 	bl	80032c2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80050e2:	e032      	b.n	800514a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ec:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d20f      	bcs.n	800511c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80050fc:	4b16      	ldr	r3, [pc, #88]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2104      	movs	r1, #4
 8005102:	4618      	mov	r0, r3
 8005104:	f002 fd48 	bl	8007b98 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005108:	4b16      	ldr	r3, [pc, #88]	; (8005164 <prvAddCurrentTaskToDelayedList+0xe4>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3304      	adds	r3, #4
 8005112:	4619      	mov	r1, r3
 8005114:	4610      	mov	r0, r2
 8005116:	f7fe f8f8 	bl	800330a <vListInsert>
}
 800511a:	e016      	b.n	800514a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2104      	movs	r1, #4
 8005122:	4618      	mov	r0, r3
 8005124:	f002 fd38 	bl	8007b98 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <prvAddCurrentTaskToDelayedList+0xe8>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <prvAddCurrentTaskToDelayedList+0xd8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7fe f8e8 	bl	800330a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <prvAddCurrentTaskToDelayedList+0xec>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	d202      	bcs.n	800514a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8005144:	4a09      	ldr	r2, [pc, #36]	; (800516c <prvAddCurrentTaskToDelayedList+0xec>)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6013      	str	r3, [r2, #0]
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000278 	.word	0x20000278
 8005158:	2000019c 	.word	0x2000019c
 800515c:	2000027c 	.word	0x2000027c
 8005160:	20000260 	.word	0x20000260
 8005164:	20000230 	.word	0x20000230
 8005168:	2000022c 	.word	0x2000022c
 800516c:	20000294 	.word	0x20000294

08005170 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800517a:	f000 fad5 	bl	8005728 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <xTimerCreateTimerTask+0x54>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005186:	4b10      	ldr	r3, [pc, #64]	; (80051c8 <xTimerCreateTimerTask+0x58>)
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	2302      	movs	r3, #2
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	2300      	movs	r3, #0
 8005190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005194:	490d      	ldr	r1, [pc, #52]	; (80051cc <xTimerCreateTimerTask+0x5c>)
 8005196:	480e      	ldr	r0, [pc, #56]	; (80051d0 <xTimerCreateTimerTask+0x60>)
 8005198:	f7fe ffc8 	bl	800412c <xTaskCreate>
 800519c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	603b      	str	r3, [r7, #0]
    }
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80051ba:	687b      	ldr	r3, [r7, #4]
    }
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	200002d0 	.word	0x200002d0
 80051c8:	200002d4 	.word	0x200002d4
 80051cc:	080088e0 	.word	0x080088e0
 80051d0:	08005309 	.word	0x08005309

080051d4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <xTimerGenericCommand+0x2e>
        __asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	623b      	str	r3, [r7, #32]
    }
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <xTimerGenericCommand+0x98>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02a      	beq.n	8005260 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b05      	cmp	r3, #5
 800521a:	dc18      	bgt.n	800524e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800521c:	f7ff fd6c 	bl	8004cf8 <xTaskGetSchedulerState>
 8005220:	4603      	mov	r3, r0
 8005222:	2b02      	cmp	r3, #2
 8005224:	d109      	bne.n	800523a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <xTimerGenericCommand+0x98>)
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	f107 0114 	add.w	r1, r7, #20
 800522e:	2300      	movs	r3, #0
 8005230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005232:	f7fe f9bd 	bl	80035b0 <xQueueGenericSend>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24
 8005238:	e012      	b.n	8005260 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <xTimerGenericCommand+0x98>)
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	f107 0114 	add.w	r1, r7, #20
 8005242:	2300      	movs	r3, #0
 8005244:	2200      	movs	r2, #0
 8005246:	f7fe f9b3 	bl	80035b0 <xQueueGenericSend>
 800524a:	6278      	str	r0, [r7, #36]	; 0x24
 800524c:	e008      	b.n	8005260 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <xTimerGenericCommand+0x98>)
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	f107 0114 	add.w	r1, r7, #20
 8005256:	2300      	movs	r3, #0
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	f7fe facf 	bl	80037fc <xQueueGenericSendFromISR>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005262:	4618      	mov	r0, r3
 8005264:	3728      	adds	r7, #40	; 0x28
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	200002d0 	.word	0x200002d0

08005270 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527a:	4b22      	ldr	r3, [pc, #136]	; (8005304 <prvProcessExpiredTimer+0x94>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3304      	adds	r3, #4
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe f877 	bl	800337c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d022      	beq.n	80052e2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	18d1      	adds	r1, r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	6978      	ldr	r0, [r7, #20]
 80052aa:	f000 f8d1 	bl	8005450 <prvInsertTimerInActiveList>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01f      	beq.n	80052f4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	2100      	movs	r1, #0
 80052be:	6978      	ldr	r0, [r7, #20]
 80052c0:	f7ff ff88 	bl	80051d4 <xTimerGenericCommand>
 80052c4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d113      	bne.n	80052f4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	60fb      	str	r3, [r7, #12]
    }
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	6978      	ldr	r0, [r7, #20]
 80052fa:	4798      	blx	r3
    }
 80052fc:	bf00      	nop
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	200002c8 	.word	0x200002c8

08005308 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005310:	f107 0308 	add.w	r3, r7, #8
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f857 	bl	80053c8 <prvGetNextExpireTime>
 800531a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4619      	mov	r1, r3
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f803 	bl	800532c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005326:	f000 f8d5 	bl	80054d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800532a:	e7f1      	b.n	8005310 <prvTimerTask+0x8>

0800532c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005336:	f7ff f8f7 	bl	8004528 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800533a:	f107 0308 	add.w	r3, r7, #8
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f866 	bl	8005410 <prvSampleTimeNow>
 8005344:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d130      	bne.n	80053ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <prvProcessTimerOrBlockTask+0x3c>
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	429a      	cmp	r2, r3
 8005358:	d806      	bhi.n	8005368 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800535a:	f7ff f8f3 	bl	8004544 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff85 	bl	8005270 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005366:	e024      	b.n	80053b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <prvProcessTimerOrBlockTask+0x90>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <prvProcessTimerOrBlockTask+0x50>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <prvProcessTimerOrBlockTask+0x52>
 800537c:	2300      	movs	r3, #0
 800537e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005380:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <prvProcessTimerOrBlockTask+0x94>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	4619      	mov	r1, r3
 800538e:	f7fe fe99 	bl	80040c4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005392:	f7ff f8d7 	bl	8004544 <xTaskResumeAll>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <prvProcessTimerOrBlockTask+0x98>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
    }
 80053ac:	e001      	b.n	80053b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80053ae:	f7ff f8c9 	bl	8004544 <xTaskResumeAll>
    }
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200002cc 	.word	0x200002cc
 80053c0:	200002d0 	.word	0x200002d0
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053d0:	4b0e      	ldr	r3, [pc, #56]	; (800540c <prvGetNextExpireTime+0x44>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <prvGetNextExpireTime+0x16>
 80053da:	2201      	movs	r2, #1
 80053dc:	e000      	b.n	80053e0 <prvGetNextExpireTime+0x18>
 80053de:	2200      	movs	r2, #0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <prvGetNextExpireTime+0x44>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e001      	b.n	80053fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80053fc:	68fb      	ldr	r3, [r7, #12]
    }
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	200002c8 	.word	0x200002c8

08005410 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005418:	f7ff f934 	bl	8004684 <xTaskGetTickCount>
 800541c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <prvSampleTimeNow+0x3c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	429a      	cmp	r2, r3
 8005426:	d205      	bcs.n	8005434 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005428:	f000 f91a 	bl	8005660 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e002      	b.n	800543a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800543a:	4a04      	ldr	r2, [pc, #16]	; (800544c <prvSampleTimeNow+0x3c>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005440:	68fb      	ldr	r3, [r7, #12]
    }
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200002d8 	.word	0x200002d8

08005450 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d812      	bhi.n	800549c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e01b      	b.n	80054c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <prvInsertTimerInActiveList+0x7c>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3304      	adds	r3, #4
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f7fd ff38 	bl	800330a <vListInsert>
 800549a:	e012      	b.n	80054c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d206      	bcs.n	80054b2 <prvInsertTimerInActiveList+0x62>
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d302      	bcc.n	80054b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e007      	b.n	80054c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <prvInsertTimerInActiveList+0x80>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7fd ff24 	bl	800330a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80054c2:	697b      	ldr	r3, [r7, #20]
    }
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200002cc 	.word	0x200002cc
 80054d0:	200002c8 	.word	0x200002c8

080054d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08c      	sub	sp, #48	; 0x30
 80054d8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054da:	e0ae      	b.n	800563a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f2c0 80aa 	blt.w	8005638 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	3304      	adds	r3, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fd ff41 	bl	800337c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ff87 	bl	8005410 <prvSampleTimeNow>
 8005502:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b09      	cmp	r3, #9
 8005508:	f200 8097 	bhi.w	800563a <prvProcessReceivedCommands+0x166>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <prvProcessReceivedCommands+0x40>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	0800553d 	.word	0x0800553d
 8005518:	0800553d 	.word	0x0800553d
 800551c:	0800553d 	.word	0x0800553d
 8005520:	080055b1 	.word	0x080055b1
 8005524:	080055c5 	.word	0x080055c5
 8005528:	0800560f 	.word	0x0800560f
 800552c:	0800553d 	.word	0x0800553d
 8005530:	0800553d 	.word	0x0800553d
 8005534:	080055b1 	.word	0x080055b1
 8005538:	080055c5 	.word	0x080055c5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	18d1      	adds	r1, r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a3a      	ldr	r2, [r7, #32]
 800555a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800555c:	f7ff ff78 	bl	8005450 <prvInsertTimerInActiveList>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d069      	beq.n	800563a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800556c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d05e      	beq.n	800563a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	441a      	add	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	2100      	movs	r1, #0
 800558c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800558e:	f7ff fe21 	bl	80051d4 <xTimerGenericCommand>
 8005592:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d14f      	bne.n	800563a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	61bb      	str	r3, [r7, #24]
    }
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055b6:	f023 0301 	bic.w	r3, r3, #1
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80055c2:	e03a      	b.n	800563a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <prvProcessReceivedCommands+0x126>
        __asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	617b      	str	r3, [r7, #20]
    }
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	699a      	ldr	r2, [r3, #24]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	18d1      	adds	r1, r2, r3
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005608:	f7ff ff22 	bl	8005450 <prvInsertTimerInActiveList>
                        break;
 800560c:	e015      	b.n	800563a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d103      	bne.n	8005624 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800561c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800561e:	f000 fbc3 	bl	8005da8 <vPortFree>
 8005622:	e00a      	b.n	800563a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	b2da      	uxtb	r2, r3
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005636:	e000      	b.n	800563a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005638:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800563a:	4b08      	ldr	r3, [pc, #32]	; (800565c <prvProcessReceivedCommands+0x188>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f107 0108 	add.w	r1, r7, #8
 8005642:	2200      	movs	r2, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f7fe f997 	bl	8003978 <xQueueReceive>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	f47f af45 	bne.w	80054dc <prvProcessReceivedCommands+0x8>
        }
    }
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	3728      	adds	r7, #40	; 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	200002d0 	.word	0x200002d0

08005660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005666:	e048      	b.n	80056fa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005668:	4b2d      	ldr	r3, [pc, #180]	; (8005720 <prvSwitchTimerLists+0xc0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005672:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <prvSwitchTimerLists+0xc0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3304      	adds	r3, #4
 8005680:	4618      	mov	r0, r3
 8005682:	f7fd fe7b 	bl	800337c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d02e      	beq.n	80056fa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d90e      	bls.n	80056cc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ba:	4b19      	ldr	r3, [pc, #100]	; (8005720 <prvSwitchTimerLists+0xc0>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7fd fe20 	bl	800330a <vListInsert>
 80056ca:	e016      	b.n	80056fa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	2100      	movs	r1, #0
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff fd7c 	bl	80051d4 <xTimerGenericCommand>
 80056dc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <prvSwitchTimerLists+0x9a>
        __asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	603b      	str	r3, [r7, #0]
    }
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <prvSwitchTimerLists+0xc0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1b1      	bne.n	8005668 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <prvSwitchTimerLists+0xc0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <prvSwitchTimerLists+0xc4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a04      	ldr	r2, [pc, #16]	; (8005720 <prvSwitchTimerLists+0xc0>)
 8005710:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005712:	4a04      	ldr	r2, [pc, #16]	; (8005724 <prvSwitchTimerLists+0xc4>)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	6013      	str	r3, [r2, #0]
    }
 8005718:	bf00      	nop
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	200002c8 	.word	0x200002c8
 8005724:	200002cc 	.word	0x200002cc

08005728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800572c:	f000 f964 	bl	80059f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005730:	4b12      	ldr	r3, [pc, #72]	; (800577c <prvCheckForValidListAndQueue+0x54>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11d      	bne.n	8005774 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005738:	4811      	ldr	r0, [pc, #68]	; (8005780 <prvCheckForValidListAndQueue+0x58>)
 800573a:	f7fd fd95 	bl	8003268 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800573e:	4811      	ldr	r0, [pc, #68]	; (8005784 <prvCheckForValidListAndQueue+0x5c>)
 8005740:	f7fd fd92 	bl	8003268 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005744:	4b10      	ldr	r3, [pc, #64]	; (8005788 <prvCheckForValidListAndQueue+0x60>)
 8005746:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <prvCheckForValidListAndQueue+0x58>)
 8005748:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800574a:	4b10      	ldr	r3, [pc, #64]	; (800578c <prvCheckForValidListAndQueue+0x64>)
 800574c:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <prvCheckForValidListAndQueue+0x5c>)
 800574e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005750:	2200      	movs	r2, #0
 8005752:	210c      	movs	r1, #12
 8005754:	200a      	movs	r0, #10
 8005756:	f7fd fea3 	bl	80034a0 <xQueueGenericCreate>
 800575a:	4603      	mov	r3, r0
 800575c:	4a07      	ldr	r2, [pc, #28]	; (800577c <prvCheckForValidListAndQueue+0x54>)
 800575e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <prvCheckForValidListAndQueue+0x54>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <prvCheckForValidListAndQueue+0x54>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4908      	ldr	r1, [pc, #32]	; (8005790 <prvCheckForValidListAndQueue+0x68>)
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fc76 	bl	8004060 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005774:	f000 f970 	bl	8005a58 <vPortExitCritical>
    }
 8005778:	bf00      	nop
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200002d0 	.word	0x200002d0
 8005780:	200002a0 	.word	0x200002a0
 8005784:	200002b4 	.word	0x200002b4
 8005788:	200002c8 	.word	0x200002c8
 800578c:	200002cc 	.word	0x200002cc
 8005790:	080088e8 	.word	0x080088e8

08005794 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3b04      	subs	r3, #4
 80057a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3b04      	subs	r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80057c4:	4a0c      	ldr	r2, [pc, #48]	; (80057f8 <pxPortInitialiseStack+0x64>)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3b14      	subs	r3, #20
 80057ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b04      	subs	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f06f 0202 	mvn.w	r2, #2
 80057e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3b20      	subs	r3, #32
 80057e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80057ea:	68fb      	ldr	r3, [r7, #12]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	080057fd 	.word	0x080057fd

080057fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005806:	4b12      	ldr	r3, [pc, #72]	; (8005850 <prvTaskExitError+0x54>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d00a      	beq.n	8005826 <prvTaskExitError+0x2a>
        __asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	60fb      	str	r3, [r7, #12]
    }
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <prvTaskExitError+0x28>
        __asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	60bb      	str	r3, [r7, #8]
    }
 8005838:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800583a:	bf00      	nop
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0fc      	beq.n	800583c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000010 	.word	0x20000010
	...

08005860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005860:	4b07      	ldr	r3, [pc, #28]	; (8005880 <pxCurrentTCBConst2>)
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6808      	ldr	r0, [r1, #0]
 8005866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586a:	f380 8809 	msr	PSP, r0
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8811 	msr	BASEPRI, r0
 800587a:	4770      	bx	lr
 800587c:	f3af 8000 	nop.w

08005880 <pxCurrentTCBConst2>:
 8005880:	2000019c 	.word	0x2000019c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop

08005888 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005888:	4808      	ldr	r0, [pc, #32]	; (80058ac <prvPortStartFirstTask+0x24>)
 800588a:	6800      	ldr	r0, [r0, #0]
 800588c:	6800      	ldr	r0, [r0, #0]
 800588e:	f380 8808 	msr	MSP, r0
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8814 	msr	CONTROL, r0
 800589a:	b662      	cpsie	i
 800589c:	b661      	cpsie	f
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	df00      	svc	0
 80058a8:	bf00      	nop
 80058aa:	0000      	.short	0x0000
 80058ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop

080058b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058ba:	4b46      	ldr	r3, [pc, #280]	; (80059d4 <xPortStartScheduler+0x120>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a46      	ldr	r2, [pc, #280]	; (80059d8 <xPortStartScheduler+0x124>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d10a      	bne.n	80058da <xPortStartScheduler+0x26>
        __asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	613b      	str	r3, [r7, #16]
    }
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058da:	4b3e      	ldr	r3, [pc, #248]	; (80059d4 <xPortStartScheduler+0x120>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a3f      	ldr	r2, [pc, #252]	; (80059dc <xPortStartScheduler+0x128>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10a      	bne.n	80058fa <xPortStartScheduler+0x46>
        __asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60fb      	str	r3, [r7, #12]
    }
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058fa:	4b39      	ldr	r3, [pc, #228]	; (80059e0 <xPortStartScheduler+0x12c>)
 80058fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	22ff      	movs	r2, #255	; 0xff
 800590a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800591c:	b2da      	uxtb	r2, r3
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <xPortStartScheduler+0x130>)
 8005920:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005922:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <xPortStartScheduler+0x134>)
 8005924:	2207      	movs	r2, #7
 8005926:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005928:	e009      	b.n	800593e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800592a:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <xPortStartScheduler+0x134>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3b01      	subs	r3, #1
 8005930:	4a2d      	ldr	r2, [pc, #180]	; (80059e8 <xPortStartScheduler+0x134>)
 8005932:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d0ef      	beq.n	800592a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800594a:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <xPortStartScheduler+0x134>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1c3 0307 	rsb	r3, r3, #7
 8005952:	2b04      	cmp	r3, #4
 8005954:	d00a      	beq.n	800596c <xPortStartScheduler+0xb8>
        __asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	60bb      	str	r3, [r7, #8]
    }
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800596c:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <xPortStartScheduler+0x134>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <xPortStartScheduler+0x134>)
 8005974:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005976:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800597e:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <xPortStartScheduler+0x134>)
 8005980:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	b2da      	uxtb	r2, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800598a:	4b18      	ldr	r3, [pc, #96]	; (80059ec <xPortStartScheduler+0x138>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a17      	ldr	r2, [pc, #92]	; (80059ec <xPortStartScheduler+0x138>)
 8005990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005994:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <xPortStartScheduler+0x138>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a14      	ldr	r2, [pc, #80]	; (80059ec <xPortStartScheduler+0x138>)
 800599c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80059a2:	f000 f8e3 	bl	8005b6c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <xPortStartScheduler+0x13c>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80059ac:	f000 f902 	bl	8005bb4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059b0:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <xPortStartScheduler+0x140>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a0f      	ldr	r2, [pc, #60]	; (80059f4 <xPortStartScheduler+0x140>)
 80059b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80059bc:	f7ff ff64 	bl	8005888 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80059c0:	f7fe ff3e 	bl	8004840 <vTaskSwitchContext>
    prvTaskExitError();
 80059c4:	f7ff ff1a 	bl	80057fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	e000ed00 	.word	0xe000ed00
 80059d8:	410fc271 	.word	0x410fc271
 80059dc:	410fc270 	.word	0x410fc270
 80059e0:	e000e400 	.word	0xe000e400
 80059e4:	200002dc 	.word	0x200002dc
 80059e8:	200002e0 	.word	0x200002e0
 80059ec:	e000ed20 	.word	0xe000ed20
 80059f0:	20000010 	.word	0x20000010
 80059f4:	e000ef34 	.word	0xe000ef34

080059f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
        __asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
    }
 8005a10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <vPortEnterCritical+0x58>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3301      	adds	r3, #1
 8005a18:	4a0d      	ldr	r2, [pc, #52]	; (8005a50 <vPortEnterCritical+0x58>)
 8005a1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <vPortEnterCritical+0x58>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d10f      	bne.n	8005a44 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <vPortEnterCritical+0x5c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <vPortEnterCritical+0x4c>
        __asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	603b      	str	r3, [r7, #0]
    }
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <vPortEnterCritical+0x4a>
    }
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000010 	.word	0x20000010
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005a5e:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <vPortExitCritical+0x50>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <vPortExitCritical+0x24>
        __asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	607b      	str	r3, [r7, #4]
    }
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <vPortExitCritical+0x50>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	4a09      	ldr	r2, [pc, #36]	; (8005aa8 <vPortExitCritical+0x50>)
 8005a84:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005a86:	4b08      	ldr	r3, [pc, #32]	; (8005aa8 <vPortExitCritical+0x50>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d105      	bne.n	8005a9a <vPortExitCritical+0x42>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f383 8811 	msr	BASEPRI, r3
    }
 8005a98:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	20000010 	.word	0x20000010
 8005aac:	00000000 	.word	0x00000000

08005ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ab0:	f3ef 8009 	mrs	r0, PSP
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <pxCurrentTCBConst>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	f01e 0f10 	tst.w	lr, #16
 8005ac0:	bf08      	it	eq
 8005ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ad4:	f380 8811 	msr	BASEPRI, r0
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f7fe feae 	bl	8004840 <vTaskSwitchContext>
 8005ae4:	f04f 0000 	mov.w	r0, #0
 8005ae8:	f380 8811 	msr	BASEPRI, r0
 8005aec:	bc09      	pop	{r0, r3}
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af6:	f01e 0f10 	tst.w	lr, #16
 8005afa:	bf08      	it	eq
 8005afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b00:	f380 8809 	msr	PSP, r0
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst>:
 8005b10:	2000019c 	.word	0x2000019c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
    }
 8005b30:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005b32:	f001 fed5 	bl	80078e0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005b36:	f7fe fdc7 	bl	80046c8 <xTaskIncrementTick>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005b40:	f001 ff2c 	bl	800799c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b44:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <SysTick_Handler+0x50>)
 8005b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e001      	b.n	8005b52 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8005b4e:	f001 ff09 	bl	8007964 <SEGGER_SYSVIEW_RecordExitISR>
 8005b52:	2300      	movs	r3, #0
 8005b54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	f383 8811 	msr	BASEPRI, r3
    }
 8005b5c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <vPortSetupTimerInterrupt+0x38>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <vPortSetupTimerInterrupt+0x3c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <vPortSetupTimerInterrupt+0x40>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <vPortSetupTimerInterrupt+0x44>)
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b8e:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000e010 	.word	0xe000e010
 8005ba4:	e000e018 	.word	0xe000e018
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	10624dd3 	.word	0x10624dd3
 8005bb0:	e000e014 	.word	0xe000e014

08005bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bc4 <vPortEnableVFP+0x10>
 8005bb8:	6801      	ldr	r1, [r0, #0]
 8005bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bbe:	6001      	str	r1, [r0, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	0000      	.short	0x0000
 8005bc4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop

08005bcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005bd2:	f3ef 8305 	mrs	r3, IPSR
 8005bd6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d914      	bls.n	8005c08 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bde:	4a17      	ldr	r2, [pc, #92]	; (8005c3c <vPortValidateInterruptPriority+0x70>)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <vPortValidateInterruptPriority+0x74>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	7afa      	ldrb	r2, [r7, #11]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d20a      	bcs.n	8005c08 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	607b      	str	r3, [r7, #4]
    }
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <vPortValidateInterruptPriority+0x78>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <vPortValidateInterruptPriority+0x7c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d90a      	bls.n	8005c2e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	603b      	str	r3, [r7, #0]
    }
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <vPortValidateInterruptPriority+0x60>
    }
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	e000e3f0 	.word	0xe000e3f0
 8005c40:	200002dc 	.word	0x200002dc
 8005c44:	e000ed0c 	.word	0xe000ed0c
 8005c48:	200002e0 	.word	0x200002e0

08005c4c <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	; 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005c58:	f7fe fc66 	bl	8004528 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8005c5c:	4b4e      	ldr	r3, [pc, #312]	; (8005d98 <pvPortMalloc+0x14c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8005c64:	f000 f8da 	bl	8005e1c <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8005c68:	4b4b      	ldr	r3, [pc, #300]	; (8005d98 <pvPortMalloc+0x14c>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) && 
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02a      	beq.n	8005cca <pvPortMalloc+0x7e>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 8005c74:	2308      	movs	r3, #8
 8005c76:	461a      	mov	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && 
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d223      	bcs.n	8005cca <pvPortMalloc+0x7e>
        {
            xWantedSize += heapSTRUCT_SIZE;
 8005c82:	2308      	movs	r3, #8
 8005c84:	461a      	mov	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	607b      	str	r3, [r7, #4]

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f023 0307 	bic.w	r3, r3, #7
 8005c92:	3308      	adds	r3, #8
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d214      	bcs.n	8005cc4 <pvPortMalloc+0x78>
                    > xWantedSize )
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f023 0307 	bic.w	r3, r3, #7
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	607b      	str	r3, [r7, #4]
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d010      	beq.n	8005cd0 <pvPortMalloc+0x84>
        __asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60fb      	str	r3, [r7, #12]
    }
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <pvPortMalloc+0x76>
            }
            else
            {
                xWantedSize = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	607b      	str	r3, [r7, #4]
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005cc8:	e002      	b.n	8005cd0 <pvPortMalloc+0x84>
            }       
        }
        else 
        {
            xWantedSize = 0; 
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	e000      	b.n	8005cd2 <pvPortMalloc+0x86>
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005cd0:	bf00      	nop
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d057      	beq.n	8005d88 <pvPortMalloc+0x13c>
 8005cd8:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <pvPortMalloc+0x150>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d852      	bhi.n	8005d88 <pvPortMalloc+0x13c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 8005ce2:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <pvPortMalloc+0x154>)
 8005ce4:	623b      	str	r3, [r7, #32]
            pxBlock = xStart.pxNextFreeBlock;
 8005ce6:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <pvPortMalloc+0x154>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cec:	e004      	b.n	8005cf8 <pvPortMalloc+0xac>
            {
                pxPreviousBlock = pxBlock;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	623b      	str	r3, [r7, #32]
                pxBlock = pxBlock->pxNextFreeBlock;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d903      	bls.n	8005d0a <pvPortMalloc+0xbe>
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f1      	bne.n	8005cee <pvPortMalloc+0xa2>
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	4a25      	ldr	r2, [pc, #148]	; (8005da4 <pvPortMalloc+0x158>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03a      	beq.n	8005d88 <pvPortMalloc+0x13c>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2208      	movs	r2, #8
 8005d18:	4413      	add	r3, r2
 8005d1a:	61fb      	str	r3, [r7, #28]

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	601a      	str	r2, [r3, #0]

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	0052      	lsls	r2, r2, #1
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d922      	bls.n	8005d7a <pvPortMalloc+0x12e>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	1ad2      	subs	r2, r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	605a      	str	r2, [r3, #4]
                    pxBlock->xBlockSize = xWantedSize;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	605a      	str	r2, [r3, #4]

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <pvPortMalloc+0x154>)
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	e002      	b.n	8005d60 <pvPortMalloc+0x114>
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	61bb      	str	r3, [r7, #24]
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d8f6      	bhi.n	8005d5a <pvPortMalloc+0x10e>
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	601a      	str	r2, [r3, #0]
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <pvPortMalloc+0x150>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	4a05      	ldr	r2, [pc, #20]	; (8005d9c <pvPortMalloc+0x150>)
 8005d86:	6013      	str	r3, [r2, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005d88:	f7fe fbdc 	bl	8004544 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3728      	adds	r7, #40	; 0x28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20012ef4 	.word	0x20012ef4
 8005d9c:	20000014 	.word	0x20000014
 8005da0:	20012ee4 	.word	0x20012ee4
 8005da4:	20012eec 	.word	0x20012eec

08005da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d027      	beq.n	8005e0a <vPortFree+0x62>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 8005dba:	2308      	movs	r3, #8
 8005dbc:	425b      	negs	r3, r3
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	60fb      	str	r3, [r7, #12]

        vTaskSuspendAll();
 8005dc8:	f7fe fbae 	bl	8004528 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <vPortFree+0x6c>)
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e002      	b.n	8005dde <vPortFree+0x36>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d8f6      	bhi.n	8005dd8 <vPortFree+0x30>
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <vPortFree+0x70>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4413      	add	r3, r2
 8005e02:	4a05      	ldr	r2, [pc, #20]	; (8005e18 <vPortFree+0x70>)
 8005e04:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 8005e06:	f7fe fb9d 	bl	8004544 <xTaskResumeAll>
    }
}
 8005e0a:	bf00      	nop
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20012ee4 	.word	0x20012ee4
 8005e18:	20000014 	.word	0x20000014

08005e1c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <prvHeapInit+0x44>)
 8005e24:	f023 0307 	bic.w	r3, r3, #7
 8005e28:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e2a:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <prvHeapInit+0x48>)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <prvHeapInit+0x48>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8005e36:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <prvHeapInit+0x4c>)
 8005e38:	4a0c      	ldr	r2, [pc, #48]	; (8005e6c <prvHeapInit+0x50>)
 8005e3a:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <prvHeapInit+0x4c>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <prvHeapInit+0x50>)
 8005e4a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4a06      	ldr	r2, [pc, #24]	; (8005e68 <prvHeapInit+0x4c>)
 8005e50:	601a      	str	r2, [r3, #0]
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	200002ec 	.word	0x200002ec
 8005e64:	20012ee4 	.word	0x20012ee4
 8005e68:	20012eec 	.word	0x20012eec
 8005e6c:	00012bf8 	.word	0x00012bf8

08005e70 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005e74:	4803      	ldr	r0, [pc, #12]	; (8005e84 <_cbSendSystemDesc+0x14>)
 8005e76:	f001 fcdd 	bl	8007834 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005e7a:	4803      	ldr	r0, [pc, #12]	; (8005e88 <_cbSendSystemDesc+0x18>)
 8005e7c:	f001 fcda 	bl	8007834 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005e80:	bf00      	nop
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	080088f0 	.word	0x080088f0
 8005e88:	08008930 	.word	0x08008930

08005e8c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <SEGGER_SYSVIEW_Conf+0x20>)
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <SEGGER_SYSVIEW_Conf+0x20>)
 8005e96:	6819      	ldr	r1, [r3, #0]
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <SEGGER_SYSVIEW_Conf+0x24>)
 8005e9a:	4a06      	ldr	r2, [pc, #24]	; (8005eb4 <SEGGER_SYSVIEW_Conf+0x28>)
 8005e9c:	f001 f846 	bl	8006f2c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005ea0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005ea4:	f001 f886 	bl	8006fb4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005ea8:	bf00      	nop
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20000000 	.word	0x20000000
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	080089d0 	.word	0x080089d0

08005eb8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	e033      	b.n	8005f2c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005ec4:	491e      	ldr	r1, [pc, #120]	; (8005f40 <_cbSendTaskList+0x88>)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	491a      	ldr	r1, [pc, #104]	; (8005f40 <_cbSendTaskList+0x88>)
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	6819      	ldr	r1, [r3, #0]
 8005ee6:	4c16      	ldr	r4, [pc, #88]	; (8005f40 <_cbSendTaskList+0x88>)
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4423      	add	r3, r4
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	681c      	ldr	r4, [r3, #0]
 8005ef8:	4d11      	ldr	r5, [pc, #68]	; (8005f40 <_cbSendTaskList+0x88>)
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	4613      	mov	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	442b      	add	r3, r5
 8005f06:	330c      	adds	r3, #12
 8005f08:	681d      	ldr	r5, [r3, #0]
 8005f0a:	4e0d      	ldr	r6, [pc, #52]	; (8005f40 <_cbSendTaskList+0x88>)
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4433      	add	r3, r6
 8005f18:	3310      	adds	r3, #16
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	462b      	mov	r3, r5
 8005f20:	4622      	mov	r2, r4
 8005f22:	f000 f8b5 	bl	8006090 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <_cbSendTaskList+0x8c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d3c6      	bcc.n	8005ec4 <_cbSendTaskList+0xc>
  }
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f40:	20012ef8 	.word	0x20012ef8
 8005f44:	20012f98 	.word	0x20012f98

08005f48 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005f48:	b5b0      	push	{r4, r5, r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005f4e:	f7fe fba9 	bl	80046a4 <xTaskGetTickCountFromISR>
 8005f52:	4603      	mov	r3, r0
 8005f54:	461a      	mov	r2, r3
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	f04f 0400 	mov.w	r4, #0
 8005f6a:	f04f 0500 	mov.w	r5, #0
 8005f6e:	015d      	lsls	r5, r3, #5
 8005f70:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005f74:	0154      	lsls	r4, r2, #5
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	1a12      	subs	r2, r2, r0
 8005f7c:	eb63 0301 	sbc.w	r3, r3, r1
 8005f80:	f04f 0400 	mov.w	r4, #0
 8005f84:	f04f 0500 	mov.w	r5, #0
 8005f88:	009d      	lsls	r5, r3, #2
 8005f8a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8005f8e:	0094      	lsls	r4, r2, #2
 8005f90:	4622      	mov	r2, r4
 8005f92:	462b      	mov	r3, r5
 8005f94:	1812      	adds	r2, r2, r0
 8005f96:	eb41 0303 	adc.w	r3, r1, r3
 8005f9a:	f04f 0000 	mov.w	r0, #0
 8005f9e:	f04f 0100 	mov.w	r1, #0
 8005fa2:	00d9      	lsls	r1, r3, #3
 8005fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fa8:	00d0      	lsls	r0, r2, #3
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8005fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bdb0      	pop	{r4, r5, r7, pc}

08005fc0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005fce:	2205      	movs	r2, #5
 8005fd0:	492b      	ldr	r1, [pc, #172]	; (8006080 <SYSVIEW_AddTask+0xc0>)
 8005fd2:	68b8      	ldr	r0, [r7, #8]
 8005fd4:	f001 ffda 	bl	8007f8c <memcmp>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d04b      	beq.n	8006076 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005fde:	4b29      	ldr	r3, [pc, #164]	; (8006084 <SYSVIEW_AddTask+0xc4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b07      	cmp	r3, #7
 8005fe4:	d903      	bls.n	8005fee <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005fe6:	4828      	ldr	r0, [pc, #160]	; (8006088 <SYSVIEW_AddTask+0xc8>)
 8005fe8:	f001 ff22 	bl	8007e30 <SEGGER_SYSVIEW_Warn>
    return;
 8005fec:	e044      	b.n	8006078 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005fee:	4b25      	ldr	r3, [pc, #148]	; (8006084 <SYSVIEW_AddTask+0xc4>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4926      	ldr	r1, [pc, #152]	; (800608c <SYSVIEW_AddTask+0xcc>)
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006002:	4b20      	ldr	r3, [pc, #128]	; (8006084 <SYSVIEW_AddTask+0xc4>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4921      	ldr	r1, [pc, #132]	; (800608c <SYSVIEW_AddTask+0xcc>)
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	3304      	adds	r3, #4
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006018:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <SYSVIEW_AddTask+0xc4>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	491b      	ldr	r1, [pc, #108]	; (800608c <SYSVIEW_AddTask+0xcc>)
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	3308      	adds	r3, #8
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800602e:	4b15      	ldr	r3, [pc, #84]	; (8006084 <SYSVIEW_AddTask+0xc4>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4916      	ldr	r1, [pc, #88]	; (800608c <SYSVIEW_AddTask+0xcc>)
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	440b      	add	r3, r1
 800603e:	330c      	adds	r3, #12
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <SYSVIEW_AddTask+0xc4>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4910      	ldr	r1, [pc, #64]	; (800608c <SYSVIEW_AddTask+0xcc>)
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	3310      	adds	r3, #16
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800605a:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <SYSVIEW_AddTask+0xc4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3301      	adds	r3, #1
 8006060:	4a08      	ldr	r2, [pc, #32]	; (8006084 <SYSVIEW_AddTask+0xc4>)
 8006062:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 f80e 	bl	8006090 <SYSVIEW_SendTaskInfo>
 8006074:	e000      	b.n	8006078 <SYSVIEW_AddTask+0xb8>
    return;
 8006076:	bf00      	nop

}
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	08008940 	.word	0x08008940
 8006084:	20012f98 	.word	0x20012f98
 8006088:	08008948 	.word	0x08008948
 800608c:	20012ef8 	.word	0x20012ef8

08006090 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800609e:	f107 0314 	add.w	r3, r7, #20
 80060a2:	2214      	movs	r2, #20
 80060a4:	2100      	movs	r1, #0
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 ff8c 	bl	8007fc4 <memset>
  TaskInfo.TaskID     = TaskID;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fabd 	bl	8007644 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80060ca:	bf00      	nop
 80060cc:	3728      	adds	r7, #40	; 0x28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <__NVIC_EnableIRQ>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	db0b      	blt.n	80060fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	f003 021f 	and.w	r2, r3, #31
 80060ec:	4907      	ldr	r1, [pc, #28]	; (800610c <__NVIC_EnableIRQ+0x38>)
 80060ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2001      	movs	r0, #1
 80060f6:	fa00 f202 	lsl.w	r2, r0, r2
 80060fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	e000e100 	.word	0xe000e100

08006110 <__NVIC_SetPriority>:
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800611c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006120:	2b00      	cmp	r3, #0
 8006122:	db0a      	blt.n	800613a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	490c      	ldr	r1, [pc, #48]	; (800615c <__NVIC_SetPriority+0x4c>)
 800612a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612e:	0112      	lsls	r2, r2, #4
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	440b      	add	r3, r1
 8006134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006138:	e00a      	b.n	8006150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4908      	ldr	r1, [pc, #32]	; (8006160 <__NVIC_SetPriority+0x50>)
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	3b04      	subs	r3, #4
 8006148:	0112      	lsls	r2, r2, #4
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	440b      	add	r3, r1
 800614e:	761a      	strb	r2, [r3, #24]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	e000e100 	.word	0xe000e100
 8006160:	e000ed00 	.word	0xe000ed00

08006164 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800616a:	f001 febd 	bl	8007ee8 <SEGGER_SYSVIEW_IsStarted>
 800616e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8006176:	f001 f8e9 	bl	800734c <SEGGER_SYSVIEW_Start>
  }
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800618e:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <_cbOnUARTRx+0x3c>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d806      	bhi.n	80061a4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8006196:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <_cbOnUARTRx+0x3c>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <_cbOnUARTRx+0x3c>)
 80061a0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80061a2:	e009      	b.n	80061b8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80061a4:	f7ff ffde 	bl	8006164 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <_cbOnUARTRx+0x3c>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4618      	mov	r0, r3
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	2201      	movs	r2, #1
 80061b2:	4619      	mov	r1, r3
 80061b4:	f000 fb9a 	bl	80068ec <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80061b8:	bf00      	nop
}
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000018 	.word	0x20000018

080061c4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80061cc:	4b14      	ldr	r3, [pc, #80]	; (8006220 <_cbOnUARTTx+0x5c>)
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d80f      	bhi.n	80061f4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <_cbOnUARTTx+0x5c>)
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	461a      	mov	r2, r3
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <_cbOnUARTTx+0x60>)
 80061dc:	5c9a      	ldrb	r2, [r3, r2]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80061e2:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <_cbOnUARTTx+0x5c>)
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	3301      	adds	r3, #1
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <_cbOnUARTTx+0x5c>)
 80061ec:	705a      	strb	r2, [r3, #1]
    r = 1;
 80061ee:	2301      	movs	r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80061f2:	e00f      	b.n	8006214 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <_cbOnUARTTx+0x5c>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fa19 	bl	8006634 <SEGGER_RTT_ReadUpBufferNoLock>
 8006202:	4603      	mov	r3, r0
 8006204:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	da02      	bge.n	8006212 <_cbOnUARTTx+0x4e>
    r = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e000      	b.n	8006214 <_cbOnUARTTx+0x50>
  }
Done:
 8006212:	bf00      	nop
  return r;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000018 	.word	0x20000018
 8006224:	080089d8 	.word	0x080089d8

08006228 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8006230:	4a04      	ldr	r2, [pc, #16]	; (8006244 <SEGGER_UART_init+0x1c>)
 8006232:	4905      	ldr	r1, [pc, #20]	; (8006248 <SEGGER_UART_init+0x20>)
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f863 	bl	8006300 <HIF_UART_Init>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	08006185 	.word	0x08006185
 8006248:	080061c5 	.word	0x080061c5

0800624c <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <USART2_IRQHandler+0x80>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d011      	beq.n	8006286 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8006262:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <USART2_IRQHandler+0x84>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f003 030b 	and.w	r3, r3, #11
 8006270:	2b00      	cmp	r3, #0
 8006272:	d108      	bne.n	8006286 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <USART2_IRQHandler+0x88>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800627c:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <USART2_IRQHandler+0x88>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	79fa      	ldrb	r2, [r7, #7]
 8006282:	4610      	mov	r0, r2
 8006284:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01a      	beq.n	80062c6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <USART2_IRQHandler+0x8c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d015      	beq.n	80062c4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <USART2_IRQHandler+0x8c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	1dfa      	adds	r2, r7, #7
 800629e:	4610      	mov	r0, r2
 80062a0:	4798      	blx	r3
 80062a2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <USART2_IRQHandler+0x90>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a0b      	ldr	r2, [pc, #44]	; (80062dc <USART2_IRQHandler+0x90>)
 80062b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	e006      	b.n	80062c6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80062b8:	4b04      	ldr	r3, [pc, #16]	; (80062cc <USART2_IRQHandler+0x80>)
 80062ba:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80062bc:	79fa      	ldrb	r2, [r7, #7]
 80062be:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <USART2_IRQHandler+0x84>)
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e000      	b.n	80062c6 <USART2_IRQHandler+0x7a>
      return;
 80062c4:	bf00      	nop
    }
  }
}
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40004400 	.word	0x40004400
 80062d0:	40004404 	.word	0x40004404
 80062d4:	20012f9c 	.word	0x20012f9c
 80062d8:	20012fa0 	.word	0x20012fa0
 80062dc:	4000440c 	.word	0x4000440c

080062e0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a04      	ldr	r2, [pc, #16]	; (80062fc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	6013      	str	r3, [r2, #0]
}
 80062f0:	bf00      	nop
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	4000440c 	.word	0x4000440c

08006300 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800630c:	4b2e      	ldr	r3, [pc, #184]	; (80063c8 <HIF_UART_Init+0xc8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2d      	ldr	r2, [pc, #180]	; (80063c8 <HIF_UART_Init+0xc8>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006316:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8006318:	4b2c      	ldr	r3, [pc, #176]	; (80063cc <HIF_UART_Init+0xcc>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2b      	ldr	r2, [pc, #172]	; (80063cc <HIF_UART_Init+0xcc>)
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8006324:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <HIF_UART_Init+0xd0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006330:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8006338:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800633a:	4a25      	ldr	r2, [pc, #148]	; (80063d0 <HIF_UART_Init+0xd0>)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8006340:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <HIF_UART_Init+0xd4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8006354:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8006356:	4a1f      	ldr	r2, [pc, #124]	; (80063d4 <HIF_UART_Init+0xd4>)
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800635c:	4b1e      	ldr	r3, [pc, #120]	; (80063d8 <HIF_UART_Init+0xd8>)
 800635e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8006362:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8006364:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <HIF_UART_Init+0xdc>)
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800636a:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <HIF_UART_Init+0xe0>)
 800636c:	2280      	movs	r2, #128	; 0x80
 800636e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8006376:	4a1b      	ldr	r2, [pc, #108]	; (80063e4 <HIF_UART_Init+0xe4>)
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	3301      	adds	r3, #1
 8006380:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638e:	d302      	bcc.n	8006396 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8006390:	f640 73ff 	movw	r3, #4095	; 0xfff
 8006394:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	4a11      	ldr	r2, [pc, #68]	; (80063e8 <HIF_UART_Init+0xe8>)
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80063a6:	4a11      	ldr	r2, [pc, #68]	; (80063ec <HIF_UART_Init+0xec>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80063ac:	4a10      	ldr	r2, [pc, #64]	; (80063f0 <HIF_UART_Init+0xf0>)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80063b2:	2106      	movs	r1, #6
 80063b4:	2026      	movs	r0, #38	; 0x26
 80063b6:	f7ff feab 	bl	8006110 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80063ba:	2026      	movs	r0, #38	; 0x26
 80063bc:	f7ff fe8a 	bl	80060d4 <__NVIC_EnableIRQ>
}
 80063c0:	bf00      	nop
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40023840 	.word	0x40023840
 80063cc:	40023830 	.word	0x40023830
 80063d0:	40020020 	.word	0x40020020
 80063d4:	40020000 	.word	0x40020000
 80063d8:	4000440c 	.word	0x4000440c
 80063dc:	40004410 	.word	0x40004410
 80063e0:	40004414 	.word	0x40004414
 80063e4:	055d4a80 	.word	0x055d4a80
 80063e8:	40004408 	.word	0x40004408
 80063ec:	20012f9c 	.word	0x20012f9c
 80063f0:	20012fa0 	.word	0x20012fa0

080063f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80063fa:	4b24      	ldr	r3, [pc, #144]	; (800648c <_DoInit+0x98>)
 80063fc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2203      	movs	r2, #3
 8006402:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2203      	movs	r2, #3
 8006408:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a20      	ldr	r2, [pc, #128]	; (8006490 <_DoInit+0x9c>)
 800640e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a20      	ldr	r2, [pc, #128]	; (8006494 <_DoInit+0xa0>)
 8006414:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800641c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a17      	ldr	r2, [pc, #92]	; (8006490 <_DoInit+0x9c>)
 8006434:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a17      	ldr	r2, [pc, #92]	; (8006498 <_DoInit+0xa4>)
 800643a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2210      	movs	r2, #16
 8006440:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3307      	adds	r3, #7
 8006458:	4a10      	ldr	r2, [pc, #64]	; (800649c <_DoInit+0xa8>)
 800645a:	6810      	ldr	r0, [r2, #0]
 800645c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800645e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <_DoInit+0xac>)
 8006466:	6810      	ldr	r0, [r2, #0]
 8006468:	6018      	str	r0, [r3, #0]
 800646a:	8891      	ldrh	r1, [r2, #4]
 800646c:	7992      	ldrb	r2, [r2, #6]
 800646e:	8099      	strh	r1, [r3, #4]
 8006470:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006472:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800647c:	f3bf 8f5f 	dmb	sy
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	200145d0 	.word	0x200145d0
 8006490:	08008998 	.word	0x08008998
 8006494:	20012fa4 	.word	0x20012fa4
 8006498:	200133a4 	.word	0x200133a4
 800649c:	080089a4 	.word	0x080089a4
 80064a0:	080089a8 	.word	0x080089a8

080064a4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08a      	sub	sp, #40	; 0x28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80064b0:	2300      	movs	r3, #0
 80064b2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d905      	bls.n	80064d4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
 80064d2:	e007      	b.n	80064e4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	69b9      	ldr	r1, [r7, #24]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	1acb      	subs	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	3b01      	subs	r3, #1
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ee:	4293      	cmp	r3, r2
 80064f0:	bf28      	it	cs
 80064f2:	4613      	movcs	r3, r2
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80064f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4293      	cmp	r3, r2
 80064fc:	bf28      	it	cs
 80064fe:	4613      	movcs	r3, r2
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800650c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	6978      	ldr	r0, [r7, #20]
 8006512:	f001 fd49 	bl	8007fa8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8006516:	6a3a      	ldr	r2, [r7, #32]
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	4413      	add	r3, r2
 800651c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	4413      	add	r3, r2
 8006524:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	4413      	add	r3, r2
 8006534:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	429a      	cmp	r2, r3
 800653e:	d101      	bne.n	8006544 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8006540:	2300      	movs	r3, #0
 8006542:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006544:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1b2      	bne.n	80064ba <_WriteBlocking+0x16>
  return NumBytesWritten;
 8006554:	6a3b      	ldr	r3, [r7, #32]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3728      	adds	r7, #40	; 0x28
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800655e:	b580      	push	{r7, lr}
 8006560:	b088      	sub	sp, #32
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	429a      	cmp	r2, r3
 8006580:	d911      	bls.n	80065a6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	6938      	ldr	r0, [r7, #16]
 8006592:	f001 fd09 	bl	8007fa8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006596:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	441a      	add	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80065a4:	e01f      	b.n	80065e6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	6938      	ldr	r0, [r7, #16]
 80065ba:	f001 fcf5 	bl	8007fa8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	4413      	add	r3, r2
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6938      	ldr	r0, [r7, #16]
 80065d8:	f001 fce6 	bl	8007fa8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80065dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	60da      	str	r2, [r3, #12]
}
 80065e6:	bf00      	nop
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80065ee:	b480      	push	{r7}
 80065f0:	b087      	sub	sp, #28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	429a      	cmp	r2, r3
 8006608:	d808      	bhi.n	800661c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4413      	add	r3, r2
 8006616:	3b01      	subs	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e004      	b.n	8006626 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006626:	697b      	ldr	r3, [r7, #20]
}
 8006628:	4618      	mov	r0, r3
 800662a:	371c      	adds	r7, #28
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8006640:	4b3e      	ldr	r3, [pc, #248]	; (800673c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800664e:	f7ff fed1 	bl	80063f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	4613      	mov	r3, r2
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	4413      	add	r3, r2
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	4a37      	ldr	r2, [pc, #220]	; (800673c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8006660:	4413      	add	r3, r2
 8006662:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	d92b      	bls.n	80066d8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4293      	cmp	r3, r2
 8006690:	bf28      	it	cs
 8006692:	4613      	movcs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	4413      	add	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	6939      	ldr	r1, [r7, #16]
 80066a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a6:	f001 fc7f 	bl	8007fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 80066aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4413      	add	r3, r2
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80066b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	4413      	add	r3, r2
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80066c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4413      	add	r3, r2
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d101      	bne.n	80066d8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4293      	cmp	r3, r2
 80066e6:	bf28      	it	cs
 80066e8:	4613      	movcs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d019      	beq.n	8006726 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	4413      	add	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	6939      	ldr	r1, [r7, #16]
 8006700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006702:	f001 fc51 	bl	8007fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	4413      	add	r3, r2
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800670e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4413      	add	r3, r2
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800671e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	4413      	add	r3, r2
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006730:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006734:	4618      	mov	r0, r3
 8006736:	3730      	adds	r7, #48	; 0x30
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	200145d0 	.word	0x200145d0

08006740 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b08c      	sub	sp, #48	; 0x30
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800674c:	4b3e      	ldr	r3, [pc, #248]	; (8006848 <SEGGER_RTT_ReadNoLock+0x108>)
 800674e:	623b      	str	r3, [r7, #32]
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <SEGGER_RTT_ReadNoLock+0x1e>
 800675a:	f7ff fe4b 	bl	80063f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4613      	mov	r3, r2
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	4413      	add	r3, r2
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	3360      	adds	r3, #96	; 0x60
 800676a:	4a37      	ldr	r2, [pc, #220]	; (8006848 <SEGGER_RTT_ReadNoLock+0x108>)
 800676c:	4413      	add	r3, r2
 800676e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006780:	2300      	movs	r3, #0
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	429a      	cmp	r2, r3
 800678a:	d92b      	bls.n	80067e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4293      	cmp	r3, r2
 800679c:	bf28      	it	cs
 800679e:	4613      	movcs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	4413      	add	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	6939      	ldr	r1, [r7, #16]
 80067b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067b2:	f001 fbf9 	bl	8007fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 80067b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	4413      	add	r3, r2
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80067be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	4413      	add	r3, r2
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80067ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4413      	add	r3, r2
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067dc:	429a      	cmp	r2, r3
 80067de:	d101      	bne.n	80067e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80067e0:	2300      	movs	r3, #0
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4293      	cmp	r3, r2
 80067f2:	bf28      	it	cs
 80067f4:	4613      	movcs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d019      	beq.n	8006832 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	4413      	add	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	6939      	ldr	r1, [r7, #16]
 800680c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800680e:	f001 fbcb 	bl	8007fa8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4413      	add	r3, r2
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800681a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	4413      	add	r3, r2
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800682a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800683c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006840:	4618      	mov	r0, r3
 8006842:	3730      	adds	r7, #48	; 0x30
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	200145d0 	.word	0x200145d0

0800684c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4613      	mov	r3, r2
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4413      	add	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	3360      	adds	r3, #96	; 0x60
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800686a:	4413      	add	r3, r2
 800686c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d029      	beq.n	80068ca <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8006876:	2b02      	cmp	r3, #2
 8006878:	d82e      	bhi.n	80068d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800687e:	2b01      	cmp	r3, #1
 8006880:	d013      	beq.n	80068aa <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8006882:	e029      	b.n	80068d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006884:	6978      	ldr	r0, [r7, #20]
 8006886:	f7ff feb2 	bl	80065ee <_GetAvailWriteSpace>
 800688a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d202      	bcs.n	800689a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8006894:	2300      	movs	r3, #0
 8006896:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006898:	e021      	b.n	80068de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	69b9      	ldr	r1, [r7, #24]
 80068a2:	6978      	ldr	r0, [r7, #20]
 80068a4:	f7ff fe5b 	bl	800655e <_WriteNoCheck>
    break;
 80068a8:	e019      	b.n	80068de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80068aa:	6978      	ldr	r0, [r7, #20]
 80068ac:	f7ff fe9f 	bl	80065ee <_GetAvailWriteSpace>
 80068b0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4293      	cmp	r3, r2
 80068b8:	bf28      	it	cs
 80068ba:	4613      	movcs	r3, r2
 80068bc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	69b9      	ldr	r1, [r7, #24]
 80068c2:	6978      	ldr	r0, [r7, #20]
 80068c4:	f7ff fe4b 	bl	800655e <_WriteNoCheck>
    break;
 80068c8:	e009      	b.n	80068de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	6978      	ldr	r0, [r7, #20]
 80068d0:	f7ff fde8 	bl	80064a4 <_WriteBlocking>
 80068d4:	61f8      	str	r0, [r7, #28]
    break;
 80068d6:	e002      	b.n	80068de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80068d8:	2300      	movs	r3, #0
 80068da:	61fb      	str	r3, [r7, #28]
    break;
 80068dc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80068de:	69fb      	ldr	r3, [r7, #28]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3720      	adds	r7, #32
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	200145d0 	.word	0x200145d0

080068ec <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80068f8:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8006906:	f7ff fd75 	bl	80063f4 <_DoInit>
  SEGGER_RTT_LOCK();
 800690a:	f3ef 8311 	mrs	r3, BASEPRI
 800690e:	f04f 0120 	mov.w	r1, #32
 8006912:	f381 8811 	msr	BASEPRI, r1
 8006916:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7ff ff95 	bl	800684c <SEGGER_RTT_WriteDownBufferNoLock>
 8006922:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800692a:	697b      	ldr	r3, [r7, #20]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3720      	adds	r7, #32
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	200145d0 	.word	0x200145d0

08006938 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006946:	4b3d      	ldr	r3, [pc, #244]	; (8006a3c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006954:	f7ff fd4e 	bl	80063f4 <_DoInit>
  SEGGER_RTT_LOCK();
 8006958:	f3ef 8311 	mrs	r3, BASEPRI
 800695c:	f04f 0120 	mov.w	r1, #32
 8006960:	f381 8811 	msr	BASEPRI, r1
 8006964:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006966:	4b35      	ldr	r3, [pc, #212]	; (8006a3c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006968:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800696e:	6939      	ldr	r1, [r7, #16]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	4613      	mov	r3, r2
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	4413      	add	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	440b      	add	r3, r1
 800697e:	3304      	adds	r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	3301      	adds	r3, #1
 800698a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	429a      	cmp	r2, r3
 8006994:	dbeb      	blt.n	800696e <SEGGER_RTT_AllocUpBuffer+0x36>
 8006996:	e000      	b.n	800699a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006998:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	da3f      	bge.n	8006a24 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80069a4:	6939      	ldr	r1, [r7, #16]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	4613      	mov	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	4413      	add	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	440b      	add	r3, r1
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80069b8:	6939      	ldr	r1, [r7, #16]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	440b      	add	r3, r1
 80069c8:	3304      	adds	r3, #4
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80069ce:	6939      	ldr	r1, [r7, #16]
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	440b      	add	r3, r1
 80069dc:	3320      	adds	r3, #32
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80069e2:	6939      	ldr	r1, [r7, #16]
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	4613      	mov	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	4413      	add	r3, r2
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	440b      	add	r3, r1
 80069f0:	3328      	adds	r3, #40	; 0x28
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80069f6:	6939      	ldr	r1, [r7, #16]
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	440b      	add	r3, r1
 8006a04:	3324      	adds	r3, #36	; 0x24
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006a0a:	6939      	ldr	r1, [r7, #16]
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4413      	add	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	440b      	add	r3, r1
 8006a18:	332c      	adds	r3, #44	; 0x2c
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006a1e:	f3bf 8f5f 	dmb	sy
 8006a22:	e002      	b.n	8006a2a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006a24:	f04f 33ff 	mov.w	r3, #4294967295
 8006a28:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006a30:	69fb      	ldr	r3, [r7, #28]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3720      	adds	r7, #32
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200145d0 	.word	0x200145d0

08006a40 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006a4e:	4b21      	ldr	r3, [pc, #132]	; (8006ad4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006a50:	623b      	str	r3, [r7, #32]
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006a5c:	f7ff fcca 	bl	80063f4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006a60:	4b1c      	ldr	r3, [pc, #112]	; (8006ad4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006a62:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d82c      	bhi.n	8006ac4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a6e:	f04f 0120 	mov.w	r1, #32
 8006a72:	f381 8811 	msr	BASEPRI, r1
 8006a76:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	4413      	add	r3, r2
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	3360      	adds	r3, #96	; 0x60
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00e      	beq.n	8006aae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006ab4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac2:	e002      	b.n	8006aca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3728      	adds	r7, #40	; 0x28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	200145d0 	.word	0x200145d0

08006ad8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00f      	beq.n	8006b0e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8006aee:	e002      	b.n	8006af6 <_EncodeStr+0x1e>
      Len++;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	3301      	adds	r3, #1
 8006af4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	4413      	add	r3, r2
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f6      	bne.n	8006af0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d901      	bls.n	8006b0e <_EncodeStr+0x36>
      Len = Limit;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2bfe      	cmp	r3, #254	; 0xfe
 8006b12:	d806      	bhi.n	8006b22 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	60fa      	str	r2, [r7, #12]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e011      	b.n	8006b46 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	60fa      	str	r2, [r7, #12]
 8006b28:	22ff      	movs	r2, #255	; 0xff
 8006b2a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	60fa      	str	r2, [r7, #12]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	0a19      	lsrs	r1, r3, #8
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	60fa      	str	r2, [r7, #12]
 8006b42:	b2ca      	uxtb	r2, r1
 8006b44:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006b4a:	e00a      	b.n	8006b62 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	1c53      	adds	r3, r2, #1
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1c59      	adds	r1, r3, #1
 8006b56:	60f9      	str	r1, [r7, #12]
 8006b58:	7812      	ldrb	r2, [r2, #0]
 8006b5a:	701a      	strb	r2, [r3, #0]
    n++;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d3f0      	bcc.n	8006b4c <_EncodeStr+0x74>
  }
  return pPayload;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	371c      	adds	r7, #28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3304      	adds	r3, #4
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006b96:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <_HandleIncomingPacket+0xe0>)
 8006b98:	7e1b      	ldrb	r3, [r3, #24]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	1cfb      	adds	r3, r7, #3
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	f7ff fdcd 	bl	8006740 <SEGGER_RTT_ReadNoLock>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dd54      	ble.n	8006c5a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	2b80      	cmp	r3, #128	; 0x80
 8006bb4:	d032      	beq.n	8006c1c <_HandleIncomingPacket+0x8c>
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	dc42      	bgt.n	8006c40 <_HandleIncomingPacket+0xb0>
 8006bba:	2b07      	cmp	r3, #7
 8006bbc:	dc16      	bgt.n	8006bec <_HandleIncomingPacket+0x5c>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dd3e      	ble.n	8006c40 <_HandleIncomingPacket+0xb0>
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2b06      	cmp	r3, #6
 8006bc6:	d83b      	bhi.n	8006c40 <_HandleIncomingPacket+0xb0>
 8006bc8:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <_HandleIncomingPacket+0x40>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006bf3 	.word	0x08006bf3
 8006bd4:	08006bf9 	.word	0x08006bf9
 8006bd8:	08006bff 	.word	0x08006bff
 8006bdc:	08006c05 	.word	0x08006c05
 8006be0:	08006c0b 	.word	0x08006c0b
 8006be4:	08006c11 	.word	0x08006c11
 8006be8:	08006c17 	.word	0x08006c17
 8006bec:	2b7f      	cmp	r3, #127	; 0x7f
 8006bee:	d036      	beq.n	8006c5e <_HandleIncomingPacket+0xce>
 8006bf0:	e026      	b.n	8006c40 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006bf2:	f000 fbab 	bl	800734c <SEGGER_SYSVIEW_Start>
      break;
 8006bf6:	e037      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006bf8:	f000 fc64 	bl	80074c4 <SEGGER_SYSVIEW_Stop>
      break;
 8006bfc:	e034      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006bfe:	f000 fe3d 	bl	800787c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006c02:	e031      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006c04:	f000 fe02 	bl	800780c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006c08:	e02e      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006c0a:	f000 fc81 	bl	8007510 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006c0e:	e02b      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006c10:	f001 f8d0 	bl	8007db4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006c14:	e028      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006c16:	f001 f8af 	bl	8007d78 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006c1a:	e025      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006c1c:	4b14      	ldr	r3, [pc, #80]	; (8006c70 <_HandleIncomingPacket+0xe0>)
 8006c1e:	7e1b      	ldrb	r3, [r3, #24]
 8006c20:	4618      	mov	r0, r3
 8006c22:	1cfb      	adds	r3, r7, #3
 8006c24:	2201      	movs	r2, #1
 8006c26:	4619      	mov	r1, r3
 8006c28:	f7ff fd8a 	bl	8006740 <SEGGER_RTT_ReadNoLock>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	dd15      	ble.n	8006c62 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 f81d 	bl	8007c78 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006c3e:	e010      	b.n	8006c62 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	b25b      	sxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	da0e      	bge.n	8006c66 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006c48:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <_HandleIncomingPacket+0xe0>)
 8006c4a:	7e1b      	ldrb	r3, [r3, #24]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	1cfb      	adds	r3, r7, #3
 8006c50:	2201      	movs	r2, #1
 8006c52:	4619      	mov	r1, r3
 8006c54:	f7ff fd74 	bl	8006740 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006c58:	e005      	b.n	8006c66 <_HandleIncomingPacket+0xd6>
    }
  }
 8006c5a:	bf00      	nop
 8006c5c:	e004      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e002      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
      break;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <_HandleIncomingPacket+0xd8>
      break;
 8006c66:	bf00      	nop
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	200143bc 	.word	0x200143bc

08006c74 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08c      	sub	sp, #48	; 0x30
 8006c78:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006c7e:	1d3b      	adds	r3, r7, #4
 8006c80:	3301      	adds	r3, #1
 8006c82:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c88:	4b32      	ldr	r3, [pc, #200]	; (8006d54 <_TrySendOverflowPacket+0xe0>)
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c8e:	e00b      	b.n	8006ca8 <_TrySendOverflowPacket+0x34>
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	1c59      	adds	r1, r3, #1
 8006c98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	09db      	lsrs	r3, r3, #7
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	2b7f      	cmp	r3, #127	; 0x7f
 8006cac:	d8f0      	bhi.n	8006c90 <_TrySendOverflowPacket+0x1c>
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006cbe:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <_TrySendOverflowPacket+0xe4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006cc4:	4b23      	ldr	r3, [pc, #140]	; (8006d54 <_TrySendOverflowPacket+0xe0>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	623b      	str	r3, [r7, #32]
 8006cd6:	e00b      	b.n	8006cf0 <_TrySendOverflowPacket+0x7c>
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	09db      	lsrs	r3, r3, #7
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf4:	d8f0      	bhi.n	8006cd8 <_TrySendOverflowPacket+0x64>
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	627a      	str	r2, [r7, #36]	; 0x24
 8006cfc:	6a3a      	ldr	r2, [r7, #32]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006d06:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <_TrySendOverflowPacket+0xe0>)
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	1d3b      	adds	r3, r7, #4
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	1d3b      	adds	r3, r7, #4
 8006d16:	4619      	mov	r1, r3
 8006d18:	f7f9 fa7a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006d20:	f7ff fade 	bl	80062e0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <_TrySendOverflowPacket+0xe0>)
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006d30:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <_TrySendOverflowPacket+0xe0>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <_TrySendOverflowPacket+0xe0>)
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	e004      	b.n	8006d48 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <_TrySendOverflowPacket+0xe0>)
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	3301      	adds	r3, #1
 8006d44:	4a03      	ldr	r2, [pc, #12]	; (8006d54 <_TrySendOverflowPacket+0xe0>)
 8006d46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006d48:	693b      	ldr	r3, [r7, #16]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3730      	adds	r7, #48	; 0x30
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	200143bc 	.word	0x200143bc
 8006d58:	e0001004 	.word	0xe0001004

08006d5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08a      	sub	sp, #40	; 0x28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006d68:	4b6d      	ldr	r3, [pc, #436]	; (8006f20 <_SendPacket+0x1c4>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d010      	beq.n	8006d92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006d70:	4b6b      	ldr	r3, [pc, #428]	; (8006f20 <_SendPacket+0x1c4>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80a5 	beq.w	8006ec4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006d7a:	4b69      	ldr	r3, [pc, #420]	; (8006f20 <_SendPacket+0x1c4>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d109      	bne.n	8006d96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006d82:	f7ff ff77 	bl	8006c74 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006d86:	4b66      	ldr	r3, [pc, #408]	; (8006f20 <_SendPacket+0x1c4>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	f040 809c 	bne.w	8006ec8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006d90:	e001      	b.n	8006d96 <_SendPacket+0x3a>
    goto Send;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <_SendPacket+0x3c>
Send:
 8006d96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b1f      	cmp	r3, #31
 8006d9c:	d809      	bhi.n	8006db2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006d9e:	4b60      	ldr	r3, [pc, #384]	; (8006f20 <_SendPacket+0x1c4>)
 8006da0:	69da      	ldr	r2, [r3, #28]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 808d 	bne.w	8006ecc <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b17      	cmp	r3, #23
 8006db6:	d807      	bhi.n	8006dc8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e03d      	b.n	8006e44 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd4:	d912      	bls.n	8006dfc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	09da      	lsrs	r2, r3, #7
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	3a01      	subs	r2, #1
 8006dee:	60fa      	str	r2, [r7, #12]
 8006df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	e006      	b.n	8006e0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e0e:	d912      	bls.n	8006e36 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	09da      	lsrs	r2, r3, #7
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	3a01      	subs	r2, #1
 8006e28:	60fa      	str	r2, [r7, #12]
 8006e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	e006      	b.n	8006e44 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006e44:	4b37      	ldr	r3, [pc, #220]	; (8006f24 <_SendPacket+0x1c8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006e4a:	4b35      	ldr	r3, [pc, #212]	; (8006f20 <_SendPacket+0x1c4>)
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	623b      	str	r3, [r7, #32]
 8006e5c:	e00b      	b.n	8006e76 <_SendPacket+0x11a>
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	1c59      	adds	r1, r3, #1
 8006e66:	6279      	str	r1, [r7, #36]	; 0x24
 8006e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	09db      	lsrs	r3, r3, #7
 8006e74:	623b      	str	r3, [r7, #32]
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	2b7f      	cmp	r3, #127	; 0x7f
 8006e7a:	d8f0      	bhi.n	8006e5e <_SendPacket+0x102>
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	627a      	str	r2, [r7, #36]	; 0x24
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006e8c:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <_SendPacket+0x1c4>)
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	4618      	mov	r0, r3
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	f7f9 f9b8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006ea4:	f7ff fa1c 	bl	80062e0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006eae:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <_SendPacket+0x1c4>)
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	60d3      	str	r3, [r2, #12]
 8006eb4:	e00b      	b.n	8006ece <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	; (8006f20 <_SendPacket+0x1c4>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <_SendPacket+0x1c4>)
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	e004      	b.n	8006ece <_SendPacket+0x172>
    goto SendDone;
 8006ec4:	bf00      	nop
 8006ec6:	e002      	b.n	8006ece <_SendPacket+0x172>
      goto SendDone;
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <_SendPacket+0x172>
      goto SendDone;
 8006ecc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006ece:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <_SendPacket+0x1c4>)
 8006ed0:	7e1b      	ldrb	r3, [r3, #24]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <_SendPacket+0x1cc>)
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	440b      	add	r3, r1
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	336c      	adds	r3, #108	; 0x6c
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <_SendPacket+0x1c4>)
 8006ee6:	7e1b      	ldrb	r3, [r3, #24]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	490f      	ldr	r1, [pc, #60]	; (8006f28 <_SendPacket+0x1cc>)
 8006eec:	4603      	mov	r3, r0
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4403      	add	r3, r0
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3370      	adds	r3, #112	; 0x70
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d00b      	beq.n	8006f16 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006efe:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <_SendPacket+0x1c4>)
 8006f00:	789b      	ldrb	r3, [r3, #2]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d107      	bne.n	8006f16 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <_SendPacket+0x1c4>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f0c:	f7ff fe40 	bl	8006b90 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f10:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <_SendPacket+0x1c4>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006f16:	bf00      	nop
 8006f18:	3728      	adds	r7, #40	; 0x28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200143bc 	.word	0x200143bc
 8006f24:	e0001004 	.word	0xe0001004
 8006f28:	200145d0 	.word	0x200145d0

08006f2c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f40:	4917      	ldr	r1, [pc, #92]	; (8006fa0 <SEGGER_SYSVIEW_Init+0x74>)
 8006f42:	4818      	ldr	r0, [pc, #96]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x78>)
 8006f44:	f7ff fcf8 	bl	8006938 <SEGGER_RTT_AllocUpBuffer>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	4b16      	ldr	r3, [pc, #88]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f4e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006f50:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f52:	785a      	ldrb	r2, [r3, #1]
 8006f54:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f56:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f5a:	7e1b      	ldrb	r3, [r3, #24]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	2308      	movs	r3, #8
 8006f64:	4a11      	ldr	r2, [pc, #68]	; (8006fac <SEGGER_SYSVIEW_Init+0x80>)
 8006f66:	490f      	ldr	r1, [pc, #60]	; (8006fa4 <SEGGER_SYSVIEW_Init+0x78>)
 8006f68:	f7ff fd6a 	bl	8006a40 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006f72:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <SEGGER_SYSVIEW_Init+0x84>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f78:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006f7a:	4a0b      	ldr	r2, [pc, #44]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006f80:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006f86:	4a08      	ldr	r2, [pc, #32]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006f8c:	4a06      	ldr	r2, [pc, #24]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006f92:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	200133b4 	.word	0x200133b4
 8006fa4:	080089b0 	.word	0x080089b0
 8006fa8:	200143bc 	.word	0x200143bc
 8006fac:	200143b4 	.word	0x200143b4
 8006fb0:	e0001004 	.word	0xe0001004

08006fb4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006fbc:	4a04      	ldr	r2, [pc, #16]	; (8006fd0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6113      	str	r3, [r2, #16]
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	200143bc 	.word	0x200143bc

08006fd4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe0:	f04f 0120 	mov.w	r1, #32
 8006fe4:	f381 8811 	msr	BASEPRI, r1
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	4808      	ldr	r0, [pc, #32]	; (800700c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006fec:	f7ff fdc4 	bl	8006b78 <_PreparePacket>
 8006ff0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	68b8      	ldr	r0, [r7, #8]
 8006ff8:	f7ff feb0 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f383 8811 	msr	BASEPRI, r3
}
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200143ec 	.word	0x200143ec

08007010 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800701a:	f3ef 8311 	mrs	r3, BASEPRI
 800701e:	f04f 0120 	mov.w	r1, #32
 8007022:	f381 8811 	msr	BASEPRI, r1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	4816      	ldr	r0, [pc, #88]	; (8007084 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800702a:	f7ff fda5 	bl	8006b78 <_PreparePacket>
 800702e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e00b      	b.n	8007056 <SEGGER_SYSVIEW_RecordU32+0x46>
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	1c59      	adds	r1, r3, #1
 8007046:	61f9      	str	r1, [r7, #28]
 8007048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	09db      	lsrs	r3, r3, #7
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b7f      	cmp	r3, #127	; 0x7f
 800705a:	d8f0      	bhi.n	800703e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	61fa      	str	r2, [r7, #28]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68f9      	ldr	r1, [r7, #12]
 8007070:	6938      	ldr	r0, [r7, #16]
 8007072:	f7ff fe73 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f383 8811 	msr	BASEPRI, r3
}
 800707c:	bf00      	nop
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	200143ec 	.word	0x200143ec

08007088 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b08c      	sub	sp, #48	; 0x30
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007094:	f3ef 8311 	mrs	r3, BASEPRI
 8007098:	f04f 0120 	mov.w	r1, #32
 800709c:	f381 8811 	msr	BASEPRI, r1
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	4825      	ldr	r0, [pc, #148]	; (8007138 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80070a4:	f7ff fd68 	bl	8006b78 <_PreparePacket>
 80070a8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b6:	e00b      	b.n	80070d0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80070c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	09db      	lsrs	r3, r3, #7
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	2b7f      	cmp	r3, #127	; 0x7f
 80070d4:	d8f0      	bhi.n	80070b8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	e00b      	b.n	8007108 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	1c59      	adds	r1, r3, #1
 80070f8:	6279      	str	r1, [r7, #36]	; 0x24
 80070fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	09db      	lsrs	r3, r3, #7
 8007106:	623b      	str	r3, [r7, #32]
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	2b7f      	cmp	r3, #127	; 0x7f
 800710c:	d8f0      	bhi.n	80070f0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	627a      	str	r2, [r7, #36]	; 0x24
 8007114:	6a3a      	ldr	r2, [r7, #32]
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	6979      	ldr	r1, [r7, #20]
 8007122:	69b8      	ldr	r0, [r7, #24]
 8007124:	f7ff fe1a 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f383 8811 	msr	BASEPRI, r3
}
 800712e:	bf00      	nop
 8007130:	3730      	adds	r7, #48	; 0x30
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200143ec 	.word	0x200143ec

0800713c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	; 0x38
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800714a:	f3ef 8311 	mrs	r3, BASEPRI
 800714e:	f04f 0120 	mov.w	r1, #32
 8007152:	f381 8811 	msr	BASEPRI, r1
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	4832      	ldr	r0, [pc, #200]	; (8007224 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800715a:	f7ff fd0d 	bl	8006b78 <_PreparePacket>
 800715e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	637b      	str	r3, [r7, #52]	; 0x34
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	633b      	str	r3, [r7, #48]	; 0x30
 800716c:	e00b      	b.n	8007186 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	b2da      	uxtb	r2, r3
 8007172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007174:	1c59      	adds	r1, r3, #1
 8007176:	6379      	str	r1, [r7, #52]	; 0x34
 8007178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800717c:	b2d2      	uxtb	r2, r2
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	09db      	lsrs	r3, r3, #7
 8007184:	633b      	str	r3, [r7, #48]	; 0x30
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	2b7f      	cmp	r3, #127	; 0x7f
 800718a:	d8f0      	bhi.n	800716e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800718c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	637a      	str	r2, [r7, #52]	; 0x34
 8007192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007194:	b2d2      	uxtb	r2, r2
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071a4:	e00b      	b.n	80071be <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	1c59      	adds	r1, r3, #1
 80071ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80071b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	09db      	lsrs	r3, r3, #7
 80071bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	2b7f      	cmp	r3, #127	; 0x7f
 80071c2:	d8f0      	bhi.n	80071a6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	623b      	str	r3, [r7, #32]
 80071dc:	e00b      	b.n	80071f6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	1c59      	adds	r1, r3, #1
 80071e6:	6279      	str	r1, [r7, #36]	; 0x24
 80071e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	09db      	lsrs	r3, r3, #7
 80071f4:	623b      	str	r3, [r7, #32]
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	2b7f      	cmp	r3, #127	; 0x7f
 80071fa:	d8f0      	bhi.n	80071de <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	627a      	str	r2, [r7, #36]	; 0x24
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	6979      	ldr	r1, [r7, #20]
 8007210:	69b8      	ldr	r0, [r7, #24]
 8007212:	f7ff fda3 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f383 8811 	msr	BASEPRI, r3
}
 800721c:	bf00      	nop
 800721e:	3738      	adds	r7, #56	; 0x38
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	200143ec 	.word	0x200143ec

08007228 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b090      	sub	sp, #64	; 0x40
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007236:	f3ef 8311 	mrs	r3, BASEPRI
 800723a:	f04f 0120 	mov.w	r1, #32
 800723e:	f381 8811 	msr	BASEPRI, r1
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	4840      	ldr	r0, [pc, #256]	; (8007348 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007246:	f7ff fc97 	bl	8006b78 <_PreparePacket>
 800724a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	63bb      	str	r3, [r7, #56]	; 0x38
 8007258:	e00b      	b.n	8007272 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	b2da      	uxtb	r2, r3
 800725e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007260:	1c59      	adds	r1, r3, #1
 8007262:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	09db      	lsrs	r3, r3, #7
 8007270:	63bb      	str	r3, [r7, #56]	; 0x38
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	2b7f      	cmp	r3, #127	; 0x7f
 8007276:	d8f0      	bhi.n	800725a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800727e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007286:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	637b      	str	r3, [r7, #52]	; 0x34
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	633b      	str	r3, [r7, #48]	; 0x30
 8007290:	e00b      	b.n	80072aa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	b2da      	uxtb	r2, r3
 8007296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007298:	1c59      	adds	r1, r3, #1
 800729a:	6379      	str	r1, [r7, #52]	; 0x34
 800729c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	09db      	lsrs	r3, r3, #7
 80072a8:	633b      	str	r3, [r7, #48]	; 0x30
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	2b7f      	cmp	r3, #127	; 0x7f
 80072ae:	d8f0      	bhi.n	8007292 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80072b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	637a      	str	r2, [r7, #52]	; 0x34
 80072b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	701a      	strb	r2, [r3, #0]
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c8:	e00b      	b.n	80072e2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	1c59      	adds	r1, r3, #1
 80072d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80072d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	09db      	lsrs	r3, r3, #7
 80072e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	2b7f      	cmp	r3, #127	; 0x7f
 80072e6:	d8f0      	bhi.n	80072ca <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
 80072fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fe:	623b      	str	r3, [r7, #32]
 8007300:	e00b      	b.n	800731a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	b2da      	uxtb	r2, r3
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	1c59      	adds	r1, r3, #1
 800730a:	6279      	str	r1, [r7, #36]	; 0x24
 800730c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	09db      	lsrs	r3, r3, #7
 8007318:	623b      	str	r3, [r7, #32]
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	2b7f      	cmp	r3, #127	; 0x7f
 800731e:	d8f0      	bhi.n	8007302 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	627a      	str	r2, [r7, #36]	; 0x24
 8007326:	6a3a      	ldr	r2, [r7, #32]
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	701a      	strb	r2, [r3, #0]
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	6979      	ldr	r1, [r7, #20]
 8007334:	69b8      	ldr	r0, [r7, #24]
 8007336:	f7ff fd11 	bl	8006d5c <_SendPacket>
  RECORD_END();
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f383 8811 	msr	BASEPRI, r3
}
 8007340:	bf00      	nop
 8007342:	3740      	adds	r7, #64	; 0x40
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	200143ec 	.word	0x200143ec

0800734c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800734c:	b580      	push	{r7, lr}
 800734e:	b08c      	sub	sp, #48	; 0x30
 8007350:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007352:	4b59      	ldr	r3, [pc, #356]	; (80074b8 <SEGGER_SYSVIEW_Start+0x16c>)
 8007354:	2201      	movs	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007358:	f3ef 8311 	mrs	r3, BASEPRI
 800735c:	f04f 0120 	mov.w	r1, #32
 8007360:	f381 8811 	msr	BASEPRI, r1
 8007364:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007366:	4b54      	ldr	r3, [pc, #336]	; (80074b8 <SEGGER_SYSVIEW_Start+0x16c>)
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	220a      	movs	r2, #10
 800736c:	4953      	ldr	r1, [pc, #332]	; (80074bc <SEGGER_SYSVIEW_Start+0x170>)
 800736e:	4618      	mov	r0, r3
 8007370:	f7f8 ff4e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800737a:	f7fe ffb1 	bl	80062e0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800737e:	200a      	movs	r0, #10
 8007380:	f7ff fe28 	bl	8006fd4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007384:	f3ef 8311 	mrs	r3, BASEPRI
 8007388:	f04f 0120 	mov.w	r1, #32
 800738c:	f381 8811 	msr	BASEPRI, r1
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	484b      	ldr	r0, [pc, #300]	; (80074c0 <SEGGER_SYSVIEW_Start+0x174>)
 8007394:	f7ff fbf0 	bl	8006b78 <_PreparePacket>
 8007398:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a2:	4b45      	ldr	r3, [pc, #276]	; (80074b8 <SEGGER_SYSVIEW_Start+0x16c>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a8:	e00b      	b.n	80073c2 <SEGGER_SYSVIEW_Start+0x76>
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	1c59      	adds	r1, r3, #1
 80073b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80073b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	09db      	lsrs	r3, r3, #7
 80073c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	2b7f      	cmp	r3, #127	; 0x7f
 80073c6:	d8f0      	bhi.n	80073aa <SEGGER_SYSVIEW_Start+0x5e>
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
 80073dc:	4b36      	ldr	r3, [pc, #216]	; (80074b8 <SEGGER_SYSVIEW_Start+0x16c>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	623b      	str	r3, [r7, #32]
 80073e2:	e00b      	b.n	80073fc <SEGGER_SYSVIEW_Start+0xb0>
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	6279      	str	r1, [r7, #36]	; 0x24
 80073ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	09db      	lsrs	r3, r3, #7
 80073fa:	623b      	str	r3, [r7, #32]
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007400:	d8f0      	bhi.n	80073e4 <SEGGER_SYSVIEW_Start+0x98>
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	627a      	str	r2, [r7, #36]	; 0x24
 8007408:	6a3a      	ldr	r2, [r7, #32]
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	4b28      	ldr	r3, [pc, #160]	; (80074b8 <SEGGER_SYSVIEW_Start+0x16c>)
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	e00b      	b.n	8007436 <SEGGER_SYSVIEW_Start+0xea>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	b2da      	uxtb	r2, r3
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	1c59      	adds	r1, r3, #1
 8007426:	61f9      	str	r1, [r7, #28]
 8007428:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	701a      	strb	r2, [r3, #0]
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	09db      	lsrs	r3, r3, #7
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b7f      	cmp	r3, #127	; 0x7f
 800743a:	d8f0      	bhi.n	800741e <SEGGER_SYSVIEW_Start+0xd2>
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	61fa      	str	r2, [r7, #28]
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	2300      	movs	r3, #0
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	e00b      	b.n	800746e <SEGGER_SYSVIEW_Start+0x122>
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	1c59      	adds	r1, r3, #1
 800745e:	6179      	str	r1, [r7, #20]
 8007460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	09db      	lsrs	r3, r3, #7
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b7f      	cmp	r3, #127	; 0x7f
 8007472:	d8f0      	bhi.n	8007456 <SEGGER_SYSVIEW_Start+0x10a>
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	617a      	str	r2, [r7, #20]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007484:	2218      	movs	r2, #24
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff fc67 	bl	8006d5c <_SendPacket>
      RECORD_END();
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007494:	4b08      	ldr	r3, [pc, #32]	; (80074b8 <SEGGER_SYSVIEW_Start+0x16c>)
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <SEGGER_SYSVIEW_Start+0x16c>)
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80074a2:	f000 f9eb 	bl	800787c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80074a6:	f000 f9b1 	bl	800780c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80074aa:	f000 fc83 	bl	8007db4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80074ae:	bf00      	nop
 80074b0:	3730      	adds	r7, #48	; 0x30
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	200143bc 	.word	0x200143bc
 80074bc:	080089dc 	.word	0x080089dc
 80074c0:	200143ec 	.word	0x200143ec

080074c4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074ca:	f3ef 8311 	mrs	r3, BASEPRI
 80074ce:	f04f 0120 	mov.w	r1, #32
 80074d2:	f381 8811 	msr	BASEPRI, r1
 80074d6:	607b      	str	r3, [r7, #4]
 80074d8:	480b      	ldr	r0, [pc, #44]	; (8007508 <SEGGER_SYSVIEW_Stop+0x44>)
 80074da:	f7ff fb4d 	bl	8006b78 <_PreparePacket>
 80074de:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80074e0:	4b0a      	ldr	r3, [pc, #40]	; (800750c <SEGGER_SYSVIEW_Stop+0x48>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80074e8:	220b      	movs	r2, #11
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6838      	ldr	r0, [r7, #0]
 80074ee:	f7ff fc35 	bl	8006d5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80074f2:	4b06      	ldr	r3, [pc, #24]	; (800750c <SEGGER_SYSVIEW_Stop+0x48>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f383 8811 	msr	BASEPRI, r3
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	200143ec 	.word	0x200143ec
 800750c:	200143bc 	.word	0x200143bc

08007510 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007510:	b580      	push	{r7, lr}
 8007512:	b08c      	sub	sp, #48	; 0x30
 8007514:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007516:	f3ef 8311 	mrs	r3, BASEPRI
 800751a:	f04f 0120 	mov.w	r1, #32
 800751e:	f381 8811 	msr	BASEPRI, r1
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	4845      	ldr	r0, [pc, #276]	; (800763c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007526:	f7ff fb27 	bl	8006b78 <_PreparePacket>
 800752a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007534:	4b42      	ldr	r3, [pc, #264]	; (8007640 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
 800753a:	e00b      	b.n	8007554 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	1c59      	adds	r1, r3, #1
 8007544:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	09db      	lsrs	r3, r3, #7
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	2b7f      	cmp	r3, #127	; 0x7f
 8007558:	d8f0      	bhi.n	800753c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
 800756e:	4b34      	ldr	r3, [pc, #208]	; (8007640 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	623b      	str	r3, [r7, #32]
 8007574:	e00b      	b.n	800758e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	b2da      	uxtb	r2, r3
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	1c59      	adds	r1, r3, #1
 800757e:	6279      	str	r1, [r7, #36]	; 0x24
 8007580:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	09db      	lsrs	r3, r3, #7
 800758c:	623b      	str	r3, [r7, #32]
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	2b7f      	cmp	r3, #127	; 0x7f
 8007592:	d8f0      	bhi.n	8007576 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	627a      	str	r2, [r7, #36]	; 0x24
 800759a:	6a3a      	ldr	r2, [r7, #32]
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	61fb      	str	r3, [r7, #28]
 80075a8:	4b25      	ldr	r3, [pc, #148]	; (8007640 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e00b      	b.n	80075c8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	1c59      	adds	r1, r3, #1
 80075b8:	61f9      	str	r1, [r7, #28]
 80075ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	09db      	lsrs	r3, r3, #7
 80075c6:	61bb      	str	r3, [r7, #24]
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	2b7f      	cmp	r3, #127	; 0x7f
 80075cc:	d8f0      	bhi.n	80075b0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	61fa      	str	r2, [r7, #28]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	2300      	movs	r3, #0
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	e00b      	b.n	8007600 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	1c59      	adds	r1, r3, #1
 80075f0:	6179      	str	r1, [r7, #20]
 80075f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	09db      	lsrs	r3, r3, #7
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	2b7f      	cmp	r3, #127	; 0x7f
 8007604:	d8f0      	bhi.n	80075e8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	617a      	str	r2, [r7, #20]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007616:	2218      	movs	r2, #24
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	68b8      	ldr	r0, [r7, #8]
 800761c:	f7ff fb9e 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	4798      	blx	r3
  }
}
 8007634:	bf00      	nop
 8007636:	3730      	adds	r7, #48	; 0x30
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	200143ec 	.word	0x200143ec
 8007640:	200143bc 	.word	0x200143bc

08007644 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b092      	sub	sp, #72	; 0x48
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800764c:	f3ef 8311 	mrs	r3, BASEPRI
 8007650:	f04f 0120 	mov.w	r1, #32
 8007654:	f381 8811 	msr	BASEPRI, r1
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	486a      	ldr	r0, [pc, #424]	; (8007804 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800765c:	f7ff fa8c 	bl	8006b78 <_PreparePacket>
 8007660:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	647b      	str	r3, [r7, #68]	; 0x44
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b66      	ldr	r3, [pc, #408]	; (8007808 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	643b      	str	r3, [r7, #64]	; 0x40
 8007676:	e00b      	b.n	8007690 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800767a:	b2da      	uxtb	r2, r3
 800767c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767e:	1c59      	adds	r1, r3, #1
 8007680:	6479      	str	r1, [r7, #68]	; 0x44
 8007682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768c:	09db      	lsrs	r3, r3, #7
 800768e:	643b      	str	r3, [r7, #64]	; 0x40
 8007690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007692:	2b7f      	cmp	r3, #127	; 0x7f
 8007694:	d8f0      	bhi.n	8007678 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	647a      	str	r2, [r7, #68]	; 0x44
 800769c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80076b0:	e00b      	b.n	80076ca <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b8:	1c59      	adds	r1, r3, #1
 80076ba:	63f9      	str	r1, [r7, #60]	; 0x3c
 80076bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076c0:	b2d2      	uxtb	r2, r2
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	09db      	lsrs	r3, r3, #7
 80076c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	2b7f      	cmp	r3, #127	; 0x7f
 80076ce:	d8f0      	bhi.n	80076b2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80076d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80076d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	701a      	strb	r2, [r3, #0]
 80076dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076de:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	4619      	mov	r1, r3
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff f9f5 	bl	8006ad8 <_EncodeStr>
 80076ee:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80076f0:	2209      	movs	r2, #9
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	6938      	ldr	r0, [r7, #16]
 80076f6:	f7ff fb31 	bl	8006d5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b40      	ldr	r3, [pc, #256]	; (8007808 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	633b      	str	r3, [r7, #48]	; 0x30
 800770e:	e00b      	b.n	8007728 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	b2da      	uxtb	r2, r3
 8007714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007716:	1c59      	adds	r1, r3, #1
 8007718:	6379      	str	r1, [r7, #52]	; 0x34
 800771a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	09db      	lsrs	r3, r3, #7
 8007726:	633b      	str	r3, [r7, #48]	; 0x30
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	2b7f      	cmp	r3, #127	; 0x7f
 800772c:	d8f0      	bhi.n	8007710 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	637a      	str	r2, [r7, #52]	; 0x34
 8007734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	701a      	strb	r2, [r3, #0]
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28
 8007748:	e00b      	b.n	8007762 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	b2da      	uxtb	r2, r3
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	1c59      	adds	r1, r3, #1
 8007752:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007754:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	09db      	lsrs	r3, r3, #7
 8007760:	62bb      	str	r3, [r7, #40]	; 0x28
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	2b7f      	cmp	r3, #127	; 0x7f
 8007766:	d8f0      	bhi.n	800774a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800776e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	623b      	str	r3, [r7, #32]
 8007782:	e00b      	b.n	800779c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	b2da      	uxtb	r2, r3
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	1c59      	adds	r1, r3, #1
 800778c:	6279      	str	r1, [r7, #36]	; 0x24
 800778e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	09db      	lsrs	r3, r3, #7
 800779a:	623b      	str	r3, [r7, #32]
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	2b7f      	cmp	r3, #127	; 0x7f
 80077a0:	d8f0      	bhi.n	8007784 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	627a      	str	r2, [r7, #36]	; 0x24
 80077a8:	6a3a      	ldr	r2, [r7, #32]
 80077aa:	b2d2      	uxtb	r2, r2
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	61fb      	str	r3, [r7, #28]
 80077b6:	2300      	movs	r3, #0
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	e00b      	b.n	80077d4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	1c59      	adds	r1, r3, #1
 80077c4:	61f9      	str	r1, [r7, #28]
 80077c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	09db      	lsrs	r3, r3, #7
 80077d2:	61bb      	str	r3, [r7, #24]
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b7f      	cmp	r3, #127	; 0x7f
 80077d8:	d8f0      	bhi.n	80077bc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	61fa      	str	r2, [r7, #28]
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80077ea:	2215      	movs	r2, #21
 80077ec:	68f9      	ldr	r1, [r7, #12]
 80077ee:	6938      	ldr	r0, [r7, #16]
 80077f0:	f7ff fab4 	bl	8006d5c <_SendPacket>
  RECORD_END();
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f383 8811 	msr	BASEPRI, r3
}
 80077fa:	bf00      	nop
 80077fc:	3748      	adds	r7, #72	; 0x48
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	200143ec 	.word	0x200143ec
 8007808:	200143bc 	.word	0x200143bc

0800780c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007810:	4b07      	ldr	r3, [pc, #28]	; (8007830 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007818:	4b05      	ldr	r3, [pc, #20]	; (8007830 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007822:	4b03      	ldr	r3, [pc, #12]	; (8007830 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4798      	blx	r3
  }
}
 800782a:	bf00      	nop
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	200143bc 	.word	0x200143bc

08007834 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800783c:	f3ef 8311 	mrs	r3, BASEPRI
 8007840:	f04f 0120 	mov.w	r1, #32
 8007844:	f381 8811 	msr	BASEPRI, r1
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	480b      	ldr	r0, [pc, #44]	; (8007878 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800784c:	f7ff f994 	bl	8006b78 <_PreparePacket>
 8007850:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007852:	2280      	movs	r2, #128	; 0x80
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	6938      	ldr	r0, [r7, #16]
 8007858:	f7ff f93e 	bl	8006ad8 <_EncodeStr>
 800785c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800785e:	220e      	movs	r2, #14
 8007860:	68f9      	ldr	r1, [r7, #12]
 8007862:	6938      	ldr	r0, [r7, #16]
 8007864:	f7ff fa7a 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f383 8811 	msr	BASEPRI, r3
}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	200143ec 	.word	0x200143ec

0800787c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800787c:	b590      	push	{r4, r7, lr}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007882:	4b15      	ldr	r3, [pc, #84]	; (80078d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01a      	beq.n	80078c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800788a:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d015      	beq.n	80078c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007894:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4798      	blx	r3
 800789c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80078a0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80078a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078a6:	f04f 0200 	mov.w	r2, #0
 80078aa:	f04f 0300 	mov.w	r3, #0
 80078ae:	000a      	movs	r2, r1
 80078b0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80078b2:	4613      	mov	r3, r2
 80078b4:	461a      	mov	r2, r3
 80078b6:	4621      	mov	r1, r4
 80078b8:	200d      	movs	r0, #13
 80078ba:	f7ff fbe5 	bl	8007088 <SEGGER_SYSVIEW_RecordU32x2>
 80078be:	e006      	b.n	80078ce <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	200c      	movs	r0, #12
 80078c8:	f7ff fba2 	bl	8007010 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80078cc:	bf00      	nop
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd90      	pop	{r4, r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200143bc 	.word	0x200143bc
 80078dc:	e0001004 	.word	0xe0001004

080078e0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80078e6:	f3ef 8311 	mrs	r3, BASEPRI
 80078ea:	f04f 0120 	mov.w	r1, #32
 80078ee:	f381 8811 	msr	BASEPRI, r1
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	4819      	ldr	r0, [pc, #100]	; (800795c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80078f6:	f7ff f93f 	bl	8006b78 <_PreparePacket>
 80078fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007900:	4b17      	ldr	r3, [pc, #92]	; (8007960 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007908:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	e00b      	b.n	800792c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	b2da      	uxtb	r2, r3
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	1c59      	adds	r1, r3, #1
 800791c:	6179      	str	r1, [r7, #20]
 800791e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	09db      	lsrs	r3, r3, #7
 800792a:	613b      	str	r3, [r7, #16]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2b7f      	cmp	r3, #127	; 0x7f
 8007930:	d8f0      	bhi.n	8007914 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	617a      	str	r2, [r7, #20]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007942:	2202      	movs	r2, #2
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	68b8      	ldr	r0, [r7, #8]
 8007948:	f7ff fa08 	bl	8006d5c <_SendPacket>
  RECORD_END();
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f383 8811 	msr	BASEPRI, r3
}
 8007952:	bf00      	nop
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	200143ec 	.word	0x200143ec
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800796a:	f3ef 8311 	mrs	r3, BASEPRI
 800796e:	f04f 0120 	mov.w	r1, #32
 8007972:	f381 8811 	msr	BASEPRI, r1
 8007976:	607b      	str	r3, [r7, #4]
 8007978:	4807      	ldr	r0, [pc, #28]	; (8007998 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800797a:	f7ff f8fd 	bl	8006b78 <_PreparePacket>
 800797e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007980:	2203      	movs	r2, #3
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6838      	ldr	r0, [r7, #0]
 8007986:	f7ff f9e9 	bl	8006d5c <_SendPacket>
  RECORD_END();
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f383 8811 	msr	BASEPRI, r3
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	200143ec 	.word	0x200143ec

0800799c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80079a2:	f3ef 8311 	mrs	r3, BASEPRI
 80079a6:	f04f 0120 	mov.w	r1, #32
 80079aa:	f381 8811 	msr	BASEPRI, r1
 80079ae:	607b      	str	r3, [r7, #4]
 80079b0:	4807      	ldr	r0, [pc, #28]	; (80079d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80079b2:	f7ff f8e1 	bl	8006b78 <_PreparePacket>
 80079b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80079b8:	2212      	movs	r2, #18
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6838      	ldr	r0, [r7, #0]
 80079be:	f7ff f9cd 	bl	8006d5c <_SendPacket>
  RECORD_END();
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f383 8811 	msr	BASEPRI, r3
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	200143ec 	.word	0x200143ec

080079d4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80079da:	f3ef 8311 	mrs	r3, BASEPRI
 80079de:	f04f 0120 	mov.w	r1, #32
 80079e2:	f381 8811 	msr	BASEPRI, r1
 80079e6:	607b      	str	r3, [r7, #4]
 80079e8:	4807      	ldr	r0, [pc, #28]	; (8007a08 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80079ea:	f7ff f8c5 	bl	8006b78 <_PreparePacket>
 80079ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80079f0:	2211      	movs	r2, #17
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6838      	ldr	r0, [r7, #0]
 80079f6:	f7ff f9b1 	bl	8006d5c <_SendPacket>
  RECORD_END();
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f383 8811 	msr	BASEPRI, r3
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	200143ec 	.word	0x200143ec

08007a0c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007a14:	f3ef 8311 	mrs	r3, BASEPRI
 8007a18:	f04f 0120 	mov.w	r1, #32
 8007a1c:	f381 8811 	msr	BASEPRI, r1
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	4819      	ldr	r0, [pc, #100]	; (8007a88 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007a24:	f7ff f8a8 	bl	8006b78 <_PreparePacket>
 8007a28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007a2e:	4b17      	ldr	r3, [pc, #92]	; (8007a8c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	e00b      	b.n	8007a5a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	1c59      	adds	r1, r3, #1
 8007a4a:	61f9      	str	r1, [r7, #28]
 8007a4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	701a      	strb	r2, [r3, #0]
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	09db      	lsrs	r3, r3, #7
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a5e:	d8f0      	bhi.n	8007a42 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	61fa      	str	r2, [r7, #28]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	b2d2      	uxtb	r2, r2
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007a70:	2208      	movs	r2, #8
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	6938      	ldr	r0, [r7, #16]
 8007a76:	f7ff f971 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f383 8811 	msr	BASEPRI, r3
}
 8007a80:	bf00      	nop
 8007a82:	3720      	adds	r7, #32
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	200143ec 	.word	0x200143ec
 8007a8c:	200143bc 	.word	0x200143bc

08007a90 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007a98:	f3ef 8311 	mrs	r3, BASEPRI
 8007a9c:	f04f 0120 	mov.w	r1, #32
 8007aa0:	f381 8811 	msr	BASEPRI, r1
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	4819      	ldr	r0, [pc, #100]	; (8007b0c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007aa8:	f7ff f866 	bl	8006b78 <_PreparePacket>
 8007aac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007ab2:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	61fb      	str	r3, [r7, #28]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	e00b      	b.n	8007ade <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	61f9      	str	r1, [r7, #28]
 8007ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	09db      	lsrs	r3, r3, #7
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ae2:	d8f0      	bhi.n	8007ac6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	61fa      	str	r2, [r7, #28]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007af4:	2204      	movs	r2, #4
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	6938      	ldr	r0, [r7, #16]
 8007afa:	f7ff f92f 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f383 8811 	msr	BASEPRI, r3
}
 8007b04:	bf00      	nop
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	200143ec 	.word	0x200143ec
 8007b10:	200143bc 	.word	0x200143bc

08007b14 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8007b20:	f04f 0120 	mov.w	r1, #32
 8007b24:	f381 8811 	msr	BASEPRI, r1
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	4819      	ldr	r0, [pc, #100]	; (8007b90 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007b2c:	f7ff f824 	bl	8006b78 <_PreparePacket>
 8007b30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007b36:	4b17      	ldr	r3, [pc, #92]	; (8007b94 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	e00b      	b.n	8007b62 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	1c59      	adds	r1, r3, #1
 8007b52:	61f9      	str	r1, [r7, #28]
 8007b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	09db      	lsrs	r3, r3, #7
 8007b60:	61bb      	str	r3, [r7, #24]
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2b7f      	cmp	r3, #127	; 0x7f
 8007b66:	d8f0      	bhi.n	8007b4a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	61fa      	str	r2, [r7, #28]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	701a      	strb	r2, [r3, #0]
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007b78:	2206      	movs	r2, #6
 8007b7a:	68f9      	ldr	r1, [r7, #12]
 8007b7c:	6938      	ldr	r0, [r7, #16]
 8007b7e:	f7ff f8ed 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f383 8811 	msr	BASEPRI, r3
}
 8007b88:	bf00      	nop
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	200143ec 	.word	0x200143ec
 8007b94:	200143bc 	.word	0x200143bc

08007b98 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8007ba6:	f04f 0120 	mov.w	r1, #32
 8007baa:	f381 8811 	msr	BASEPRI, r1
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	4827      	ldr	r0, [pc, #156]	; (8007c50 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007bb2:	f7fe ffe1 	bl	8006b78 <_PreparePacket>
 8007bb6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	623b      	str	r3, [r7, #32]
 8007bce:	e00b      	b.n	8007be8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	1c59      	adds	r1, r3, #1
 8007bd8:	6279      	str	r1, [r7, #36]	; 0x24
 8007bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	09db      	lsrs	r3, r3, #7
 8007be6:	623b      	str	r3, [r7, #32]
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	2b7f      	cmp	r3, #127	; 0x7f
 8007bec:	d8f0      	bhi.n	8007bd0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	1c5a      	adds	r2, r3, #1
 8007bf2:	627a      	str	r2, [r7, #36]	; 0x24
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	e00b      	b.n	8007c20 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	1c59      	adds	r1, r3, #1
 8007c10:	61f9      	str	r1, [r7, #28]
 8007c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	09db      	lsrs	r3, r3, #7
 8007c1e:	61bb      	str	r3, [r7, #24]
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	2b7f      	cmp	r3, #127	; 0x7f
 8007c24:	d8f0      	bhi.n	8007c08 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	61fa      	str	r2, [r7, #28]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007c36:	2207      	movs	r2, #7
 8007c38:	68f9      	ldr	r1, [r7, #12]
 8007c3a:	6938      	ldr	r0, [r7, #16]
 8007c3c:	f7ff f88e 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f383 8811 	msr	BASEPRI, r3
}
 8007c46:	bf00      	nop
 8007c48:	3728      	adds	r7, #40	; 0x28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	200143ec 	.word	0x200143ec
 8007c54:	200143bc 	.word	0x200143bc

08007c58 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007c60:	4b04      	ldr	r3, [pc, #16]	; (8007c74 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	1ad3      	subs	r3, r2, r3
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	200143bc 	.word	0x200143bc

08007c78 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007c82:	4b3b      	ldr	r3, [pc, #236]	; (8007d70 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d06d      	beq.n	8007d66 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007c8a:	4b39      	ldr	r3, [pc, #228]	; (8007d70 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007c90:	2300      	movs	r3, #0
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c94:	e008      	b.n	8007ca8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d007      	beq.n	8007cb2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d3f2      	bcc.n	8007c96 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007cb0:	e000      	b.n	8007cb4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007cb2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d055      	beq.n	8007d66 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007cba:	f3ef 8311 	mrs	r3, BASEPRI
 8007cbe:	f04f 0120 	mov.w	r1, #32
 8007cc2:	f381 8811 	msr	BASEPRI, r1
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	482a      	ldr	r0, [pc, #168]	; (8007d74 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007cca:	f7fe ff55 	bl	8006b78 <_PreparePacket>
 8007cce:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	623b      	str	r3, [r7, #32]
 8007cdc:	e00b      	b.n	8007cf6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	1c59      	adds	r1, r3, #1
 8007ce6:	6279      	str	r1, [r7, #36]	; 0x24
 8007ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cec:	b2d2      	uxtb	r2, r2
 8007cee:	701a      	strb	r2, [r3, #0]
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	09db      	lsrs	r3, r3, #7
 8007cf4:	623b      	str	r3, [r7, #32]
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8007cfa:	d8f0      	bhi.n	8007cde <SEGGER_SYSVIEW_SendModule+0x66>
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	627a      	str	r2, [r7, #36]	; 0x24
 8007d02:	6a3a      	ldr	r2, [r7, #32]
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	61fb      	str	r3, [r7, #28]
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	e00b      	b.n	8007d30 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	1c59      	adds	r1, r3, #1
 8007d20:	61f9      	str	r1, [r7, #28]
 8007d22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	09db      	lsrs	r3, r3, #7
 8007d2e:	61bb      	str	r3, [r7, #24]
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b7f      	cmp	r3, #127	; 0x7f
 8007d34:	d8f0      	bhi.n	8007d18 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	61fa      	str	r2, [r7, #28]
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2280      	movs	r2, #128	; 0x80
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7fe fec2 	bl	8006ad8 <_EncodeStr>
 8007d54:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007d56:	2216      	movs	r2, #22
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	6938      	ldr	r0, [r7, #16]
 8007d5c:	f7fe fffe 	bl	8006d5c <_SendPacket>
      RECORD_END();
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007d66:	bf00      	nop
 8007d68:	3730      	adds	r7, #48	; 0x30
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	200143e4 	.word	0x200143e4
 8007d74:	200143ec 	.word	0x200143ec

08007d78 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00f      	beq.n	8007da6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007d86:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f2      	bne.n	8007d8c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	200143e4 	.word	0x200143e4

08007db4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007dba:	f3ef 8311 	mrs	r3, BASEPRI
 8007dbe:	f04f 0120 	mov.w	r1, #32
 8007dc2:	f381 8811 	msr	BASEPRI, r1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	4817      	ldr	r0, [pc, #92]	; (8007e28 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007dca:	f7fe fed5 	bl	8006b78 <_PreparePacket>
 8007dce:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	e00b      	b.n	8007df8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	1c59      	adds	r1, r3, #1
 8007de8:	6179      	str	r1, [r7, #20]
 8007dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	09db      	lsrs	r3, r3, #7
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8007dfc:	d8f0      	bhi.n	8007de0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	617a      	str	r2, [r7, #20]
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007e0e:	221b      	movs	r2, #27
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	68b8      	ldr	r0, [r7, #8]
 8007e14:	f7fe ffa2 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f383 8811 	msr	BASEPRI, r3
}
 8007e1e:	bf00      	nop
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	200143ec 	.word	0x200143ec
 8007e2c:	200143e8 	.word	0x200143e8

08007e30 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	; 0x28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e38:	f3ef 8311 	mrs	r3, BASEPRI
 8007e3c:	f04f 0120 	mov.w	r1, #32
 8007e40:	f381 8811 	msr	BASEPRI, r1
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	4827      	ldr	r0, [pc, #156]	; (8007ee4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007e48:	f7fe fe96 	bl	8006b78 <_PreparePacket>
 8007e4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e4e:	2280      	movs	r2, #128	; 0x80
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	6938      	ldr	r0, [r7, #16]
 8007e54:	f7fe fe40 	bl	8006ad8 <_EncodeStr>
 8007e58:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5e:	2301      	movs	r3, #1
 8007e60:	623b      	str	r3, [r7, #32]
 8007e62:	e00b      	b.n	8007e7c <SEGGER_SYSVIEW_Warn+0x4c>
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	1c59      	adds	r1, r3, #1
 8007e6c:	6279      	str	r1, [r7, #36]	; 0x24
 8007e6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	09db      	lsrs	r3, r3, #7
 8007e7a:	623b      	str	r3, [r7, #32]
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e80:	d8f0      	bhi.n	8007e64 <SEGGER_SYSVIEW_Warn+0x34>
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	627a      	str	r2, [r7, #36]	; 0x24
 8007e88:	6a3a      	ldr	r2, [r7, #32]
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	61fb      	str	r3, [r7, #28]
 8007e96:	2300      	movs	r3, #0
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	e00b      	b.n	8007eb4 <SEGGER_SYSVIEW_Warn+0x84>
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	1c59      	adds	r1, r3, #1
 8007ea4:	61f9      	str	r1, [r7, #28]
 8007ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	09db      	lsrs	r3, r3, #7
 8007eb2:	61bb      	str	r3, [r7, #24]
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8007eb8:	d8f0      	bhi.n	8007e9c <SEGGER_SYSVIEW_Warn+0x6c>
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	61fa      	str	r2, [r7, #28]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007eca:	221a      	movs	r2, #26
 8007ecc:	68f9      	ldr	r1, [r7, #12]
 8007ece:	6938      	ldr	r0, [r7, #16]
 8007ed0:	f7fe ff44 	bl	8006d5c <_SendPacket>
  RECORD_END();
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f383 8811 	msr	BASEPRI, r3
}
 8007eda:	bf00      	nop
 8007edc:	3728      	adds	r7, #40	; 0x28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200143ec 	.word	0x200143ec

08007ee8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007eec:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007eee:	7e1b      	ldrb	r3, [r3, #24]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4a13      	ldr	r2, [pc, #76]	; (8007f40 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	440b      	add	r3, r1
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	336c      	adds	r3, #108	; 0x6c
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007f04:	7e1b      	ldrb	r3, [r3, #24]
 8007f06:	4618      	mov	r0, r3
 8007f08:	490d      	ldr	r1, [pc, #52]	; (8007f40 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	4403      	add	r3, r0
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	440b      	add	r3, r1
 8007f14:	3370      	adds	r3, #112	; 0x70
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d00b      	beq.n	8007f34 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007f1c:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007f1e:	789b      	ldrb	r3, [r3, #2]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d107      	bne.n	8007f34 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007f2a:	f7fe fe31 	bl	8006b90 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007f2e:	4b03      	ldr	r3, [pc, #12]	; (8007f3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007f34:	4b01      	ldr	r3, [pc, #4]	; (8007f3c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	200143bc 	.word	0x200143bc
 8007f40:	200145d0 	.word	0x200145d0

08007f44 <__libc_init_array>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4d0d      	ldr	r5, [pc, #52]	; (8007f7c <__libc_init_array+0x38>)
 8007f48:	4c0d      	ldr	r4, [pc, #52]	; (8007f80 <__libc_init_array+0x3c>)
 8007f4a:	1b64      	subs	r4, r4, r5
 8007f4c:	10a4      	asrs	r4, r4, #2
 8007f4e:	2600      	movs	r6, #0
 8007f50:	42a6      	cmp	r6, r4
 8007f52:	d109      	bne.n	8007f68 <__libc_init_array+0x24>
 8007f54:	4d0b      	ldr	r5, [pc, #44]	; (8007f84 <__libc_init_array+0x40>)
 8007f56:	4c0c      	ldr	r4, [pc, #48]	; (8007f88 <__libc_init_array+0x44>)
 8007f58:	f000 fc6a 	bl	8008830 <_init>
 8007f5c:	1b64      	subs	r4, r4, r5
 8007f5e:	10a4      	asrs	r4, r4, #2
 8007f60:	2600      	movs	r6, #0
 8007f62:	42a6      	cmp	r6, r4
 8007f64:	d105      	bne.n	8007f72 <__libc_init_array+0x2e>
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6c:	4798      	blx	r3
 8007f6e:	3601      	adds	r6, #1
 8007f70:	e7ee      	b.n	8007f50 <__libc_init_array+0xc>
 8007f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f76:	4798      	blx	r3
 8007f78:	3601      	adds	r6, #1
 8007f7a:	e7f2      	b.n	8007f62 <__libc_init_array+0x1e>
 8007f7c:	08008a24 	.word	0x08008a24
 8007f80:	08008a24 	.word	0x08008a24
 8007f84:	08008a24 	.word	0x08008a24
 8007f88:	08008a28 	.word	0x08008a28

08007f8c <memcmp>:
 8007f8c:	b530      	push	{r4, r5, lr}
 8007f8e:	3901      	subs	r1, #1
 8007f90:	2400      	movs	r4, #0
 8007f92:	42a2      	cmp	r2, r4
 8007f94:	d101      	bne.n	8007f9a <memcmp+0xe>
 8007f96:	2000      	movs	r0, #0
 8007f98:	e005      	b.n	8007fa6 <memcmp+0x1a>
 8007f9a:	5d03      	ldrb	r3, [r0, r4]
 8007f9c:	3401      	adds	r4, #1
 8007f9e:	5d0d      	ldrb	r5, [r1, r4]
 8007fa0:	42ab      	cmp	r3, r5
 8007fa2:	d0f6      	beq.n	8007f92 <memcmp+0x6>
 8007fa4:	1b58      	subs	r0, r3, r5
 8007fa6:	bd30      	pop	{r4, r5, pc}

08007fa8 <memcpy>:
 8007fa8:	440a      	add	r2, r1
 8007faa:	4291      	cmp	r1, r2
 8007fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fb0:	d100      	bne.n	8007fb4 <memcpy+0xc>
 8007fb2:	4770      	bx	lr
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fbe:	4291      	cmp	r1, r2
 8007fc0:	d1f9      	bne.n	8007fb6 <memcpy+0xe>
 8007fc2:	bd10      	pop	{r4, pc}

08007fc4 <memset>:
 8007fc4:	4402      	add	r2, r0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d100      	bne.n	8007fce <memset+0xa>
 8007fcc:	4770      	bx	lr
 8007fce:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd2:	e7f9      	b.n	8007fc8 <memset+0x4>

08007fd4 <siprintf>:
 8007fd4:	b40e      	push	{r1, r2, r3}
 8007fd6:	b500      	push	{lr}
 8007fd8:	b09c      	sub	sp, #112	; 0x70
 8007fda:	ab1d      	add	r3, sp, #116	; 0x74
 8007fdc:	9002      	str	r0, [sp, #8]
 8007fde:	9006      	str	r0, [sp, #24]
 8007fe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fe4:	4809      	ldr	r0, [pc, #36]	; (800800c <siprintf+0x38>)
 8007fe6:	9107      	str	r1, [sp, #28]
 8007fe8:	9104      	str	r1, [sp, #16]
 8007fea:	4909      	ldr	r1, [pc, #36]	; (8008010 <siprintf+0x3c>)
 8007fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff0:	9105      	str	r1, [sp, #20]
 8007ff2:	6800      	ldr	r0, [r0, #0]
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	a902      	add	r1, sp, #8
 8007ff8:	f000 f868 	bl	80080cc <_svfiprintf_r>
 8007ffc:	9b02      	ldr	r3, [sp, #8]
 8007ffe:	2200      	movs	r2, #0
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	b01c      	add	sp, #112	; 0x70
 8008004:	f85d eb04 	ldr.w	lr, [sp], #4
 8008008:	b003      	add	sp, #12
 800800a:	4770      	bx	lr
 800800c:	20000020 	.word	0x20000020
 8008010:	ffff0208 	.word	0xffff0208

08008014 <__ssputs_r>:
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	688e      	ldr	r6, [r1, #8]
 800801a:	429e      	cmp	r6, r3
 800801c:	4682      	mov	sl, r0
 800801e:	460c      	mov	r4, r1
 8008020:	4690      	mov	r8, r2
 8008022:	461f      	mov	r7, r3
 8008024:	d838      	bhi.n	8008098 <__ssputs_r+0x84>
 8008026:	898a      	ldrh	r2, [r1, #12]
 8008028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800802c:	d032      	beq.n	8008094 <__ssputs_r+0x80>
 800802e:	6825      	ldr	r5, [r4, #0]
 8008030:	6909      	ldr	r1, [r1, #16]
 8008032:	eba5 0901 	sub.w	r9, r5, r1
 8008036:	6965      	ldr	r5, [r4, #20]
 8008038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800803c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008040:	3301      	adds	r3, #1
 8008042:	444b      	add	r3, r9
 8008044:	106d      	asrs	r5, r5, #1
 8008046:	429d      	cmp	r5, r3
 8008048:	bf38      	it	cc
 800804a:	461d      	movcc	r5, r3
 800804c:	0553      	lsls	r3, r2, #21
 800804e:	d531      	bpl.n	80080b4 <__ssputs_r+0xa0>
 8008050:	4629      	mov	r1, r5
 8008052:	f000 fb39 	bl	80086c8 <_malloc_r>
 8008056:	4606      	mov	r6, r0
 8008058:	b950      	cbnz	r0, 8008070 <__ssputs_r+0x5c>
 800805a:	230c      	movs	r3, #12
 800805c:	f8ca 3000 	str.w	r3, [sl]
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008070:	6921      	ldr	r1, [r4, #16]
 8008072:	464a      	mov	r2, r9
 8008074:	f7ff ff98 	bl	8007fa8 <memcpy>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800807e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	6126      	str	r6, [r4, #16]
 8008086:	6165      	str	r5, [r4, #20]
 8008088:	444e      	add	r6, r9
 800808a:	eba5 0509 	sub.w	r5, r5, r9
 800808e:	6026      	str	r6, [r4, #0]
 8008090:	60a5      	str	r5, [r4, #8]
 8008092:	463e      	mov	r6, r7
 8008094:	42be      	cmp	r6, r7
 8008096:	d900      	bls.n	800809a <__ssputs_r+0x86>
 8008098:	463e      	mov	r6, r7
 800809a:	4632      	mov	r2, r6
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	4641      	mov	r1, r8
 80080a0:	f000 faa8 	bl	80085f4 <memmove>
 80080a4:	68a3      	ldr	r3, [r4, #8]
 80080a6:	6822      	ldr	r2, [r4, #0]
 80080a8:	1b9b      	subs	r3, r3, r6
 80080aa:	4432      	add	r2, r6
 80080ac:	60a3      	str	r3, [r4, #8]
 80080ae:	6022      	str	r2, [r4, #0]
 80080b0:	2000      	movs	r0, #0
 80080b2:	e7db      	b.n	800806c <__ssputs_r+0x58>
 80080b4:	462a      	mov	r2, r5
 80080b6:	f000 fb61 	bl	800877c <_realloc_r>
 80080ba:	4606      	mov	r6, r0
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1e1      	bne.n	8008084 <__ssputs_r+0x70>
 80080c0:	6921      	ldr	r1, [r4, #16]
 80080c2:	4650      	mov	r0, sl
 80080c4:	f000 fab0 	bl	8008628 <_free_r>
 80080c8:	e7c7      	b.n	800805a <__ssputs_r+0x46>
	...

080080cc <_svfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	4698      	mov	r8, r3
 80080d2:	898b      	ldrh	r3, [r1, #12]
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	b09d      	sub	sp, #116	; 0x74
 80080d8:	4607      	mov	r7, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	4614      	mov	r4, r2
 80080de:	d50e      	bpl.n	80080fe <_svfiprintf_r+0x32>
 80080e0:	690b      	ldr	r3, [r1, #16]
 80080e2:	b963      	cbnz	r3, 80080fe <_svfiprintf_r+0x32>
 80080e4:	2140      	movs	r1, #64	; 0x40
 80080e6:	f000 faef 	bl	80086c8 <_malloc_r>
 80080ea:	6028      	str	r0, [r5, #0]
 80080ec:	6128      	str	r0, [r5, #16]
 80080ee:	b920      	cbnz	r0, 80080fa <_svfiprintf_r+0x2e>
 80080f0:	230c      	movs	r3, #12
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e0d1      	b.n	800829e <_svfiprintf_r+0x1d2>
 80080fa:	2340      	movs	r3, #64	; 0x40
 80080fc:	616b      	str	r3, [r5, #20]
 80080fe:	2300      	movs	r3, #0
 8008100:	9309      	str	r3, [sp, #36]	; 0x24
 8008102:	2320      	movs	r3, #32
 8008104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008108:	f8cd 800c 	str.w	r8, [sp, #12]
 800810c:	2330      	movs	r3, #48	; 0x30
 800810e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082b8 <_svfiprintf_r+0x1ec>
 8008112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008116:	f04f 0901 	mov.w	r9, #1
 800811a:	4623      	mov	r3, r4
 800811c:	469a      	mov	sl, r3
 800811e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008122:	b10a      	cbz	r2, 8008128 <_svfiprintf_r+0x5c>
 8008124:	2a25      	cmp	r2, #37	; 0x25
 8008126:	d1f9      	bne.n	800811c <_svfiprintf_r+0x50>
 8008128:	ebba 0b04 	subs.w	fp, sl, r4
 800812c:	d00b      	beq.n	8008146 <_svfiprintf_r+0x7a>
 800812e:	465b      	mov	r3, fp
 8008130:	4622      	mov	r2, r4
 8008132:	4629      	mov	r1, r5
 8008134:	4638      	mov	r0, r7
 8008136:	f7ff ff6d 	bl	8008014 <__ssputs_r>
 800813a:	3001      	adds	r0, #1
 800813c:	f000 80aa 	beq.w	8008294 <_svfiprintf_r+0x1c8>
 8008140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008142:	445a      	add	r2, fp
 8008144:	9209      	str	r2, [sp, #36]	; 0x24
 8008146:	f89a 3000 	ldrb.w	r3, [sl]
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80a2 	beq.w	8008294 <_svfiprintf_r+0x1c8>
 8008150:	2300      	movs	r3, #0
 8008152:	f04f 32ff 	mov.w	r2, #4294967295
 8008156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800815a:	f10a 0a01 	add.w	sl, sl, #1
 800815e:	9304      	str	r3, [sp, #16]
 8008160:	9307      	str	r3, [sp, #28]
 8008162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008166:	931a      	str	r3, [sp, #104]	; 0x68
 8008168:	4654      	mov	r4, sl
 800816a:	2205      	movs	r2, #5
 800816c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008170:	4851      	ldr	r0, [pc, #324]	; (80082b8 <_svfiprintf_r+0x1ec>)
 8008172:	f7f8 f8a5 	bl	80002c0 <memchr>
 8008176:	9a04      	ldr	r2, [sp, #16]
 8008178:	b9d8      	cbnz	r0, 80081b2 <_svfiprintf_r+0xe6>
 800817a:	06d0      	lsls	r0, r2, #27
 800817c:	bf44      	itt	mi
 800817e:	2320      	movmi	r3, #32
 8008180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008184:	0711      	lsls	r1, r2, #28
 8008186:	bf44      	itt	mi
 8008188:	232b      	movmi	r3, #43	; 0x2b
 800818a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800818e:	f89a 3000 	ldrb.w	r3, [sl]
 8008192:	2b2a      	cmp	r3, #42	; 0x2a
 8008194:	d015      	beq.n	80081c2 <_svfiprintf_r+0xf6>
 8008196:	9a07      	ldr	r2, [sp, #28]
 8008198:	4654      	mov	r4, sl
 800819a:	2000      	movs	r0, #0
 800819c:	f04f 0c0a 	mov.w	ip, #10
 80081a0:	4621      	mov	r1, r4
 80081a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081a6:	3b30      	subs	r3, #48	; 0x30
 80081a8:	2b09      	cmp	r3, #9
 80081aa:	d94e      	bls.n	800824a <_svfiprintf_r+0x17e>
 80081ac:	b1b0      	cbz	r0, 80081dc <_svfiprintf_r+0x110>
 80081ae:	9207      	str	r2, [sp, #28]
 80081b0:	e014      	b.n	80081dc <_svfiprintf_r+0x110>
 80081b2:	eba0 0308 	sub.w	r3, r0, r8
 80081b6:	fa09 f303 	lsl.w	r3, r9, r3
 80081ba:	4313      	orrs	r3, r2
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	46a2      	mov	sl, r4
 80081c0:	e7d2      	b.n	8008168 <_svfiprintf_r+0x9c>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	1d19      	adds	r1, r3, #4
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	9103      	str	r1, [sp, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bfbb      	ittet	lt
 80081ce:	425b      	neglt	r3, r3
 80081d0:	f042 0202 	orrlt.w	r2, r2, #2
 80081d4:	9307      	strge	r3, [sp, #28]
 80081d6:	9307      	strlt	r3, [sp, #28]
 80081d8:	bfb8      	it	lt
 80081da:	9204      	strlt	r2, [sp, #16]
 80081dc:	7823      	ldrb	r3, [r4, #0]
 80081de:	2b2e      	cmp	r3, #46	; 0x2e
 80081e0:	d10c      	bne.n	80081fc <_svfiprintf_r+0x130>
 80081e2:	7863      	ldrb	r3, [r4, #1]
 80081e4:	2b2a      	cmp	r3, #42	; 0x2a
 80081e6:	d135      	bne.n	8008254 <_svfiprintf_r+0x188>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	1d1a      	adds	r2, r3, #4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	9203      	str	r2, [sp, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bfb8      	it	lt
 80081f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80081f8:	3402      	adds	r4, #2
 80081fa:	9305      	str	r3, [sp, #20]
 80081fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082c8 <_svfiprintf_r+0x1fc>
 8008200:	7821      	ldrb	r1, [r4, #0]
 8008202:	2203      	movs	r2, #3
 8008204:	4650      	mov	r0, sl
 8008206:	f7f8 f85b 	bl	80002c0 <memchr>
 800820a:	b140      	cbz	r0, 800821e <_svfiprintf_r+0x152>
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	eba0 000a 	sub.w	r0, r0, sl
 8008212:	fa03 f000 	lsl.w	r0, r3, r0
 8008216:	9b04      	ldr	r3, [sp, #16]
 8008218:	4303      	orrs	r3, r0
 800821a:	3401      	adds	r4, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008222:	4826      	ldr	r0, [pc, #152]	; (80082bc <_svfiprintf_r+0x1f0>)
 8008224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008228:	2206      	movs	r2, #6
 800822a:	f7f8 f849 	bl	80002c0 <memchr>
 800822e:	2800      	cmp	r0, #0
 8008230:	d038      	beq.n	80082a4 <_svfiprintf_r+0x1d8>
 8008232:	4b23      	ldr	r3, [pc, #140]	; (80082c0 <_svfiprintf_r+0x1f4>)
 8008234:	bb1b      	cbnz	r3, 800827e <_svfiprintf_r+0x1b2>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	3307      	adds	r3, #7
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	3308      	adds	r3, #8
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008244:	4433      	add	r3, r6
 8008246:	9309      	str	r3, [sp, #36]	; 0x24
 8008248:	e767      	b.n	800811a <_svfiprintf_r+0x4e>
 800824a:	fb0c 3202 	mla	r2, ip, r2, r3
 800824e:	460c      	mov	r4, r1
 8008250:	2001      	movs	r0, #1
 8008252:	e7a5      	b.n	80081a0 <_svfiprintf_r+0xd4>
 8008254:	2300      	movs	r3, #0
 8008256:	3401      	adds	r4, #1
 8008258:	9305      	str	r3, [sp, #20]
 800825a:	4619      	mov	r1, r3
 800825c:	f04f 0c0a 	mov.w	ip, #10
 8008260:	4620      	mov	r0, r4
 8008262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008266:	3a30      	subs	r2, #48	; 0x30
 8008268:	2a09      	cmp	r2, #9
 800826a:	d903      	bls.n	8008274 <_svfiprintf_r+0x1a8>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0c5      	beq.n	80081fc <_svfiprintf_r+0x130>
 8008270:	9105      	str	r1, [sp, #20]
 8008272:	e7c3      	b.n	80081fc <_svfiprintf_r+0x130>
 8008274:	fb0c 2101 	mla	r1, ip, r1, r2
 8008278:	4604      	mov	r4, r0
 800827a:	2301      	movs	r3, #1
 800827c:	e7f0      	b.n	8008260 <_svfiprintf_r+0x194>
 800827e:	ab03      	add	r3, sp, #12
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	462a      	mov	r2, r5
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <_svfiprintf_r+0x1f8>)
 8008286:	a904      	add	r1, sp, #16
 8008288:	4638      	mov	r0, r7
 800828a:	f3af 8000 	nop.w
 800828e:	1c42      	adds	r2, r0, #1
 8008290:	4606      	mov	r6, r0
 8008292:	d1d6      	bne.n	8008242 <_svfiprintf_r+0x176>
 8008294:	89ab      	ldrh	r3, [r5, #12]
 8008296:	065b      	lsls	r3, r3, #25
 8008298:	f53f af2c 	bmi.w	80080f4 <_svfiprintf_r+0x28>
 800829c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800829e:	b01d      	add	sp, #116	; 0x74
 80082a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a4:	ab03      	add	r3, sp, #12
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	462a      	mov	r2, r5
 80082aa:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <_svfiprintf_r+0x1f8>)
 80082ac:	a904      	add	r1, sp, #16
 80082ae:	4638      	mov	r0, r7
 80082b0:	f000 f87a 	bl	80083a8 <_printf_i>
 80082b4:	e7eb      	b.n	800828e <_svfiprintf_r+0x1c2>
 80082b6:	bf00      	nop
 80082b8:	080089e6 	.word	0x080089e6
 80082bc:	080089f0 	.word	0x080089f0
 80082c0:	00000000 	.word	0x00000000
 80082c4:	08008015 	.word	0x08008015
 80082c8:	080089ec 	.word	0x080089ec

080082cc <_printf_common>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	4616      	mov	r6, r2
 80082d2:	4699      	mov	r9, r3
 80082d4:	688a      	ldr	r2, [r1, #8]
 80082d6:	690b      	ldr	r3, [r1, #16]
 80082d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082dc:	4293      	cmp	r3, r2
 80082de:	bfb8      	it	lt
 80082e0:	4613      	movlt	r3, r2
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082e8:	4607      	mov	r7, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	b10a      	cbz	r2, 80082f2 <_printf_common+0x26>
 80082ee:	3301      	adds	r3, #1
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	0699      	lsls	r1, r3, #26
 80082f6:	bf42      	ittt	mi
 80082f8:	6833      	ldrmi	r3, [r6, #0]
 80082fa:	3302      	addmi	r3, #2
 80082fc:	6033      	strmi	r3, [r6, #0]
 80082fe:	6825      	ldr	r5, [r4, #0]
 8008300:	f015 0506 	ands.w	r5, r5, #6
 8008304:	d106      	bne.n	8008314 <_printf_common+0x48>
 8008306:	f104 0a19 	add.w	sl, r4, #25
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	6832      	ldr	r2, [r6, #0]
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	42ab      	cmp	r3, r5
 8008312:	dc26      	bgt.n	8008362 <_printf_common+0x96>
 8008314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008318:	1e13      	subs	r3, r2, #0
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	bf18      	it	ne
 800831e:	2301      	movne	r3, #1
 8008320:	0692      	lsls	r2, r2, #26
 8008322:	d42b      	bmi.n	800837c <_printf_common+0xb0>
 8008324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008328:	4649      	mov	r1, r9
 800832a:	4638      	mov	r0, r7
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d01e      	beq.n	8008370 <_printf_common+0xa4>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	68e5      	ldr	r5, [r4, #12]
 8008336:	6832      	ldr	r2, [r6, #0]
 8008338:	f003 0306 	and.w	r3, r3, #6
 800833c:	2b04      	cmp	r3, #4
 800833e:	bf08      	it	eq
 8008340:	1aad      	subeq	r5, r5, r2
 8008342:	68a3      	ldr	r3, [r4, #8]
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	bf0c      	ite	eq
 8008348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800834c:	2500      	movne	r5, #0
 800834e:	4293      	cmp	r3, r2
 8008350:	bfc4      	itt	gt
 8008352:	1a9b      	subgt	r3, r3, r2
 8008354:	18ed      	addgt	r5, r5, r3
 8008356:	2600      	movs	r6, #0
 8008358:	341a      	adds	r4, #26
 800835a:	42b5      	cmp	r5, r6
 800835c:	d11a      	bne.n	8008394 <_printf_common+0xc8>
 800835e:	2000      	movs	r0, #0
 8008360:	e008      	b.n	8008374 <_printf_common+0xa8>
 8008362:	2301      	movs	r3, #1
 8008364:	4652      	mov	r2, sl
 8008366:	4649      	mov	r1, r9
 8008368:	4638      	mov	r0, r7
 800836a:	47c0      	blx	r8
 800836c:	3001      	adds	r0, #1
 800836e:	d103      	bne.n	8008378 <_printf_common+0xac>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008378:	3501      	adds	r5, #1
 800837a:	e7c6      	b.n	800830a <_printf_common+0x3e>
 800837c:	18e1      	adds	r1, r4, r3
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	2030      	movs	r0, #48	; 0x30
 8008382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008386:	4422      	add	r2, r4
 8008388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800838c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008390:	3302      	adds	r3, #2
 8008392:	e7c7      	b.n	8008324 <_printf_common+0x58>
 8008394:	2301      	movs	r3, #1
 8008396:	4622      	mov	r2, r4
 8008398:	4649      	mov	r1, r9
 800839a:	4638      	mov	r0, r7
 800839c:	47c0      	blx	r8
 800839e:	3001      	adds	r0, #1
 80083a0:	d0e6      	beq.n	8008370 <_printf_common+0xa4>
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7d9      	b.n	800835a <_printf_common+0x8e>
	...

080083a8 <_printf_i>:
 80083a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	460c      	mov	r4, r1
 80083ae:	4691      	mov	r9, r2
 80083b0:	7e27      	ldrb	r7, [r4, #24]
 80083b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083b4:	2f78      	cmp	r7, #120	; 0x78
 80083b6:	4680      	mov	r8, r0
 80083b8:	469a      	mov	sl, r3
 80083ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083be:	d807      	bhi.n	80083d0 <_printf_i+0x28>
 80083c0:	2f62      	cmp	r7, #98	; 0x62
 80083c2:	d80a      	bhi.n	80083da <_printf_i+0x32>
 80083c4:	2f00      	cmp	r7, #0
 80083c6:	f000 80d8 	beq.w	800857a <_printf_i+0x1d2>
 80083ca:	2f58      	cmp	r7, #88	; 0x58
 80083cc:	f000 80a3 	beq.w	8008516 <_printf_i+0x16e>
 80083d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083d8:	e03a      	b.n	8008450 <_printf_i+0xa8>
 80083da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083de:	2b15      	cmp	r3, #21
 80083e0:	d8f6      	bhi.n	80083d0 <_printf_i+0x28>
 80083e2:	a001      	add	r0, pc, #4	; (adr r0, 80083e8 <_printf_i+0x40>)
 80083e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083e8:	08008441 	.word	0x08008441
 80083ec:	08008455 	.word	0x08008455
 80083f0:	080083d1 	.word	0x080083d1
 80083f4:	080083d1 	.word	0x080083d1
 80083f8:	080083d1 	.word	0x080083d1
 80083fc:	080083d1 	.word	0x080083d1
 8008400:	08008455 	.word	0x08008455
 8008404:	080083d1 	.word	0x080083d1
 8008408:	080083d1 	.word	0x080083d1
 800840c:	080083d1 	.word	0x080083d1
 8008410:	080083d1 	.word	0x080083d1
 8008414:	08008561 	.word	0x08008561
 8008418:	08008485 	.word	0x08008485
 800841c:	08008543 	.word	0x08008543
 8008420:	080083d1 	.word	0x080083d1
 8008424:	080083d1 	.word	0x080083d1
 8008428:	08008583 	.word	0x08008583
 800842c:	080083d1 	.word	0x080083d1
 8008430:	08008485 	.word	0x08008485
 8008434:	080083d1 	.word	0x080083d1
 8008438:	080083d1 	.word	0x080083d1
 800843c:	0800854b 	.word	0x0800854b
 8008440:	680b      	ldr	r3, [r1, #0]
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	600a      	str	r2, [r1, #0]
 8008448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800844c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008450:	2301      	movs	r3, #1
 8008452:	e0a3      	b.n	800859c <_printf_i+0x1f4>
 8008454:	6825      	ldr	r5, [r4, #0]
 8008456:	6808      	ldr	r0, [r1, #0]
 8008458:	062e      	lsls	r6, r5, #24
 800845a:	f100 0304 	add.w	r3, r0, #4
 800845e:	d50a      	bpl.n	8008476 <_printf_i+0xce>
 8008460:	6805      	ldr	r5, [r0, #0]
 8008462:	600b      	str	r3, [r1, #0]
 8008464:	2d00      	cmp	r5, #0
 8008466:	da03      	bge.n	8008470 <_printf_i+0xc8>
 8008468:	232d      	movs	r3, #45	; 0x2d
 800846a:	426d      	negs	r5, r5
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008470:	485e      	ldr	r0, [pc, #376]	; (80085ec <_printf_i+0x244>)
 8008472:	230a      	movs	r3, #10
 8008474:	e019      	b.n	80084aa <_printf_i+0x102>
 8008476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800847a:	6805      	ldr	r5, [r0, #0]
 800847c:	600b      	str	r3, [r1, #0]
 800847e:	bf18      	it	ne
 8008480:	b22d      	sxthne	r5, r5
 8008482:	e7ef      	b.n	8008464 <_printf_i+0xbc>
 8008484:	680b      	ldr	r3, [r1, #0]
 8008486:	6825      	ldr	r5, [r4, #0]
 8008488:	1d18      	adds	r0, r3, #4
 800848a:	6008      	str	r0, [r1, #0]
 800848c:	0628      	lsls	r0, r5, #24
 800848e:	d501      	bpl.n	8008494 <_printf_i+0xec>
 8008490:	681d      	ldr	r5, [r3, #0]
 8008492:	e002      	b.n	800849a <_printf_i+0xf2>
 8008494:	0669      	lsls	r1, r5, #25
 8008496:	d5fb      	bpl.n	8008490 <_printf_i+0xe8>
 8008498:	881d      	ldrh	r5, [r3, #0]
 800849a:	4854      	ldr	r0, [pc, #336]	; (80085ec <_printf_i+0x244>)
 800849c:	2f6f      	cmp	r7, #111	; 0x6f
 800849e:	bf0c      	ite	eq
 80084a0:	2308      	moveq	r3, #8
 80084a2:	230a      	movne	r3, #10
 80084a4:	2100      	movs	r1, #0
 80084a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084aa:	6866      	ldr	r6, [r4, #4]
 80084ac:	60a6      	str	r6, [r4, #8]
 80084ae:	2e00      	cmp	r6, #0
 80084b0:	bfa2      	ittt	ge
 80084b2:	6821      	ldrge	r1, [r4, #0]
 80084b4:	f021 0104 	bicge.w	r1, r1, #4
 80084b8:	6021      	strge	r1, [r4, #0]
 80084ba:	b90d      	cbnz	r5, 80084c0 <_printf_i+0x118>
 80084bc:	2e00      	cmp	r6, #0
 80084be:	d04d      	beq.n	800855c <_printf_i+0x1b4>
 80084c0:	4616      	mov	r6, r2
 80084c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80084c6:	fb03 5711 	mls	r7, r3, r1, r5
 80084ca:	5dc7      	ldrb	r7, [r0, r7]
 80084cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084d0:	462f      	mov	r7, r5
 80084d2:	42bb      	cmp	r3, r7
 80084d4:	460d      	mov	r5, r1
 80084d6:	d9f4      	bls.n	80084c2 <_printf_i+0x11a>
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d10b      	bne.n	80084f4 <_printf_i+0x14c>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	07df      	lsls	r7, r3, #31
 80084e0:	d508      	bpl.n	80084f4 <_printf_i+0x14c>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	6861      	ldr	r1, [r4, #4]
 80084e6:	4299      	cmp	r1, r3
 80084e8:	bfde      	ittt	le
 80084ea:	2330      	movle	r3, #48	; 0x30
 80084ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084f4:	1b92      	subs	r2, r2, r6
 80084f6:	6122      	str	r2, [r4, #16]
 80084f8:	f8cd a000 	str.w	sl, [sp]
 80084fc:	464b      	mov	r3, r9
 80084fe:	aa03      	add	r2, sp, #12
 8008500:	4621      	mov	r1, r4
 8008502:	4640      	mov	r0, r8
 8008504:	f7ff fee2 	bl	80082cc <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	d14c      	bne.n	80085a6 <_printf_i+0x1fe>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	b004      	add	sp, #16
 8008512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008516:	4835      	ldr	r0, [pc, #212]	; (80085ec <_printf_i+0x244>)
 8008518:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	680e      	ldr	r6, [r1, #0]
 8008520:	061f      	lsls	r7, r3, #24
 8008522:	f856 5b04 	ldr.w	r5, [r6], #4
 8008526:	600e      	str	r6, [r1, #0]
 8008528:	d514      	bpl.n	8008554 <_printf_i+0x1ac>
 800852a:	07d9      	lsls	r1, r3, #31
 800852c:	bf44      	itt	mi
 800852e:	f043 0320 	orrmi.w	r3, r3, #32
 8008532:	6023      	strmi	r3, [r4, #0]
 8008534:	b91d      	cbnz	r5, 800853e <_printf_i+0x196>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f023 0320 	bic.w	r3, r3, #32
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	2310      	movs	r3, #16
 8008540:	e7b0      	b.n	80084a4 <_printf_i+0xfc>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	f043 0320 	orr.w	r3, r3, #32
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	2378      	movs	r3, #120	; 0x78
 800854c:	4828      	ldr	r0, [pc, #160]	; (80085f0 <_printf_i+0x248>)
 800854e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008552:	e7e3      	b.n	800851c <_printf_i+0x174>
 8008554:	065e      	lsls	r6, r3, #25
 8008556:	bf48      	it	mi
 8008558:	b2ad      	uxthmi	r5, r5
 800855a:	e7e6      	b.n	800852a <_printf_i+0x182>
 800855c:	4616      	mov	r6, r2
 800855e:	e7bb      	b.n	80084d8 <_printf_i+0x130>
 8008560:	680b      	ldr	r3, [r1, #0]
 8008562:	6826      	ldr	r6, [r4, #0]
 8008564:	6960      	ldr	r0, [r4, #20]
 8008566:	1d1d      	adds	r5, r3, #4
 8008568:	600d      	str	r5, [r1, #0]
 800856a:	0635      	lsls	r5, r6, #24
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	d501      	bpl.n	8008574 <_printf_i+0x1cc>
 8008570:	6018      	str	r0, [r3, #0]
 8008572:	e002      	b.n	800857a <_printf_i+0x1d2>
 8008574:	0671      	lsls	r1, r6, #25
 8008576:	d5fb      	bpl.n	8008570 <_printf_i+0x1c8>
 8008578:	8018      	strh	r0, [r3, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	4616      	mov	r6, r2
 8008580:	e7ba      	b.n	80084f8 <_printf_i+0x150>
 8008582:	680b      	ldr	r3, [r1, #0]
 8008584:	1d1a      	adds	r2, r3, #4
 8008586:	600a      	str	r2, [r1, #0]
 8008588:	681e      	ldr	r6, [r3, #0]
 800858a:	6862      	ldr	r2, [r4, #4]
 800858c:	2100      	movs	r1, #0
 800858e:	4630      	mov	r0, r6
 8008590:	f7f7 fe96 	bl	80002c0 <memchr>
 8008594:	b108      	cbz	r0, 800859a <_printf_i+0x1f2>
 8008596:	1b80      	subs	r0, r0, r6
 8008598:	6060      	str	r0, [r4, #4]
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	2300      	movs	r3, #0
 80085a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a4:	e7a8      	b.n	80084f8 <_printf_i+0x150>
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	4632      	mov	r2, r6
 80085aa:	4649      	mov	r1, r9
 80085ac:	4640      	mov	r0, r8
 80085ae:	47d0      	blx	sl
 80085b0:	3001      	adds	r0, #1
 80085b2:	d0ab      	beq.n	800850c <_printf_i+0x164>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	079b      	lsls	r3, r3, #30
 80085b8:	d413      	bmi.n	80085e2 <_printf_i+0x23a>
 80085ba:	68e0      	ldr	r0, [r4, #12]
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	4298      	cmp	r0, r3
 80085c0:	bfb8      	it	lt
 80085c2:	4618      	movlt	r0, r3
 80085c4:	e7a4      	b.n	8008510 <_printf_i+0x168>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4632      	mov	r2, r6
 80085ca:	4649      	mov	r1, r9
 80085cc:	4640      	mov	r0, r8
 80085ce:	47d0      	blx	sl
 80085d0:	3001      	adds	r0, #1
 80085d2:	d09b      	beq.n	800850c <_printf_i+0x164>
 80085d4:	3501      	adds	r5, #1
 80085d6:	68e3      	ldr	r3, [r4, #12]
 80085d8:	9903      	ldr	r1, [sp, #12]
 80085da:	1a5b      	subs	r3, r3, r1
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dcf2      	bgt.n	80085c6 <_printf_i+0x21e>
 80085e0:	e7eb      	b.n	80085ba <_printf_i+0x212>
 80085e2:	2500      	movs	r5, #0
 80085e4:	f104 0619 	add.w	r6, r4, #25
 80085e8:	e7f5      	b.n	80085d6 <_printf_i+0x22e>
 80085ea:	bf00      	nop
 80085ec:	080089f7 	.word	0x080089f7
 80085f0:	08008a08 	.word	0x08008a08

080085f4 <memmove>:
 80085f4:	4288      	cmp	r0, r1
 80085f6:	b510      	push	{r4, lr}
 80085f8:	eb01 0402 	add.w	r4, r1, r2
 80085fc:	d902      	bls.n	8008604 <memmove+0x10>
 80085fe:	4284      	cmp	r4, r0
 8008600:	4623      	mov	r3, r4
 8008602:	d807      	bhi.n	8008614 <memmove+0x20>
 8008604:	1e43      	subs	r3, r0, #1
 8008606:	42a1      	cmp	r1, r4
 8008608:	d008      	beq.n	800861c <memmove+0x28>
 800860a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800860e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008612:	e7f8      	b.n	8008606 <memmove+0x12>
 8008614:	4402      	add	r2, r0
 8008616:	4601      	mov	r1, r0
 8008618:	428a      	cmp	r2, r1
 800861a:	d100      	bne.n	800861e <memmove+0x2a>
 800861c:	bd10      	pop	{r4, pc}
 800861e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008626:	e7f7      	b.n	8008618 <memmove+0x24>

08008628 <_free_r>:
 8008628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800862a:	2900      	cmp	r1, #0
 800862c:	d048      	beq.n	80086c0 <_free_r+0x98>
 800862e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008632:	9001      	str	r0, [sp, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f1a1 0404 	sub.w	r4, r1, #4
 800863a:	bfb8      	it	lt
 800863c:	18e4      	addlt	r4, r4, r3
 800863e:	f000 f8d3 	bl	80087e8 <__malloc_lock>
 8008642:	4a20      	ldr	r2, [pc, #128]	; (80086c4 <_free_r+0x9c>)
 8008644:	9801      	ldr	r0, [sp, #4]
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	4615      	mov	r5, r2
 800864a:	b933      	cbnz	r3, 800865a <_free_r+0x32>
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	6014      	str	r4, [r2, #0]
 8008650:	b003      	add	sp, #12
 8008652:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008656:	f000 b8cd 	b.w	80087f4 <__malloc_unlock>
 800865a:	42a3      	cmp	r3, r4
 800865c:	d90b      	bls.n	8008676 <_free_r+0x4e>
 800865e:	6821      	ldr	r1, [r4, #0]
 8008660:	1862      	adds	r2, r4, r1
 8008662:	4293      	cmp	r3, r2
 8008664:	bf04      	itt	eq
 8008666:	681a      	ldreq	r2, [r3, #0]
 8008668:	685b      	ldreq	r3, [r3, #4]
 800866a:	6063      	str	r3, [r4, #4]
 800866c:	bf04      	itt	eq
 800866e:	1852      	addeq	r2, r2, r1
 8008670:	6022      	streq	r2, [r4, #0]
 8008672:	602c      	str	r4, [r5, #0]
 8008674:	e7ec      	b.n	8008650 <_free_r+0x28>
 8008676:	461a      	mov	r2, r3
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	b10b      	cbz	r3, 8008680 <_free_r+0x58>
 800867c:	42a3      	cmp	r3, r4
 800867e:	d9fa      	bls.n	8008676 <_free_r+0x4e>
 8008680:	6811      	ldr	r1, [r2, #0]
 8008682:	1855      	adds	r5, r2, r1
 8008684:	42a5      	cmp	r5, r4
 8008686:	d10b      	bne.n	80086a0 <_free_r+0x78>
 8008688:	6824      	ldr	r4, [r4, #0]
 800868a:	4421      	add	r1, r4
 800868c:	1854      	adds	r4, r2, r1
 800868e:	42a3      	cmp	r3, r4
 8008690:	6011      	str	r1, [r2, #0]
 8008692:	d1dd      	bne.n	8008650 <_free_r+0x28>
 8008694:	681c      	ldr	r4, [r3, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	6053      	str	r3, [r2, #4]
 800869a:	4421      	add	r1, r4
 800869c:	6011      	str	r1, [r2, #0]
 800869e:	e7d7      	b.n	8008650 <_free_r+0x28>
 80086a0:	d902      	bls.n	80086a8 <_free_r+0x80>
 80086a2:	230c      	movs	r3, #12
 80086a4:	6003      	str	r3, [r0, #0]
 80086a6:	e7d3      	b.n	8008650 <_free_r+0x28>
 80086a8:	6825      	ldr	r5, [r4, #0]
 80086aa:	1961      	adds	r1, r4, r5
 80086ac:	428b      	cmp	r3, r1
 80086ae:	bf04      	itt	eq
 80086b0:	6819      	ldreq	r1, [r3, #0]
 80086b2:	685b      	ldreq	r3, [r3, #4]
 80086b4:	6063      	str	r3, [r4, #4]
 80086b6:	bf04      	itt	eq
 80086b8:	1949      	addeq	r1, r1, r5
 80086ba:	6021      	streq	r1, [r4, #0]
 80086bc:	6054      	str	r4, [r2, #4]
 80086be:	e7c7      	b.n	8008650 <_free_r+0x28>
 80086c0:	b003      	add	sp, #12
 80086c2:	bd30      	pop	{r4, r5, pc}
 80086c4:	200144d0 	.word	0x200144d0

080086c8 <_malloc_r>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	1ccd      	adds	r5, r1, #3
 80086cc:	f025 0503 	bic.w	r5, r5, #3
 80086d0:	3508      	adds	r5, #8
 80086d2:	2d0c      	cmp	r5, #12
 80086d4:	bf38      	it	cc
 80086d6:	250c      	movcc	r5, #12
 80086d8:	2d00      	cmp	r5, #0
 80086da:	4606      	mov	r6, r0
 80086dc:	db01      	blt.n	80086e2 <_malloc_r+0x1a>
 80086de:	42a9      	cmp	r1, r5
 80086e0:	d903      	bls.n	80086ea <_malloc_r+0x22>
 80086e2:	230c      	movs	r3, #12
 80086e4:	6033      	str	r3, [r6, #0]
 80086e6:	2000      	movs	r0, #0
 80086e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ea:	f000 f87d 	bl	80087e8 <__malloc_lock>
 80086ee:	4921      	ldr	r1, [pc, #132]	; (8008774 <_malloc_r+0xac>)
 80086f0:	680a      	ldr	r2, [r1, #0]
 80086f2:	4614      	mov	r4, r2
 80086f4:	b99c      	cbnz	r4, 800871e <_malloc_r+0x56>
 80086f6:	4f20      	ldr	r7, [pc, #128]	; (8008778 <_malloc_r+0xb0>)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	b923      	cbnz	r3, 8008706 <_malloc_r+0x3e>
 80086fc:	4621      	mov	r1, r4
 80086fe:	4630      	mov	r0, r6
 8008700:	f000 f862 	bl	80087c8 <_sbrk_r>
 8008704:	6038      	str	r0, [r7, #0]
 8008706:	4629      	mov	r1, r5
 8008708:	4630      	mov	r0, r6
 800870a:	f000 f85d 	bl	80087c8 <_sbrk_r>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d123      	bne.n	800875a <_malloc_r+0x92>
 8008712:	230c      	movs	r3, #12
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	4630      	mov	r0, r6
 8008718:	f000 f86c 	bl	80087f4 <__malloc_unlock>
 800871c:	e7e3      	b.n	80086e6 <_malloc_r+0x1e>
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	1b5b      	subs	r3, r3, r5
 8008722:	d417      	bmi.n	8008754 <_malloc_r+0x8c>
 8008724:	2b0b      	cmp	r3, #11
 8008726:	d903      	bls.n	8008730 <_malloc_r+0x68>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	441c      	add	r4, r3
 800872c:	6025      	str	r5, [r4, #0]
 800872e:	e004      	b.n	800873a <_malloc_r+0x72>
 8008730:	6863      	ldr	r3, [r4, #4]
 8008732:	42a2      	cmp	r2, r4
 8008734:	bf0c      	ite	eq
 8008736:	600b      	streq	r3, [r1, #0]
 8008738:	6053      	strne	r3, [r2, #4]
 800873a:	4630      	mov	r0, r6
 800873c:	f000 f85a 	bl	80087f4 <__malloc_unlock>
 8008740:	f104 000b 	add.w	r0, r4, #11
 8008744:	1d23      	adds	r3, r4, #4
 8008746:	f020 0007 	bic.w	r0, r0, #7
 800874a:	1ac2      	subs	r2, r0, r3
 800874c:	d0cc      	beq.n	80086e8 <_malloc_r+0x20>
 800874e:	1a1b      	subs	r3, r3, r0
 8008750:	50a3      	str	r3, [r4, r2]
 8008752:	e7c9      	b.n	80086e8 <_malloc_r+0x20>
 8008754:	4622      	mov	r2, r4
 8008756:	6864      	ldr	r4, [r4, #4]
 8008758:	e7cc      	b.n	80086f4 <_malloc_r+0x2c>
 800875a:	1cc4      	adds	r4, r0, #3
 800875c:	f024 0403 	bic.w	r4, r4, #3
 8008760:	42a0      	cmp	r0, r4
 8008762:	d0e3      	beq.n	800872c <_malloc_r+0x64>
 8008764:	1a21      	subs	r1, r4, r0
 8008766:	4630      	mov	r0, r6
 8008768:	f000 f82e 	bl	80087c8 <_sbrk_r>
 800876c:	3001      	adds	r0, #1
 800876e:	d1dd      	bne.n	800872c <_malloc_r+0x64>
 8008770:	e7cf      	b.n	8008712 <_malloc_r+0x4a>
 8008772:	bf00      	nop
 8008774:	200144d0 	.word	0x200144d0
 8008778:	200144d4 	.word	0x200144d4

0800877c <_realloc_r>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	4607      	mov	r7, r0
 8008780:	4614      	mov	r4, r2
 8008782:	460e      	mov	r6, r1
 8008784:	b921      	cbnz	r1, 8008790 <_realloc_r+0x14>
 8008786:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800878a:	4611      	mov	r1, r2
 800878c:	f7ff bf9c 	b.w	80086c8 <_malloc_r>
 8008790:	b922      	cbnz	r2, 800879c <_realloc_r+0x20>
 8008792:	f7ff ff49 	bl	8008628 <_free_r>
 8008796:	4625      	mov	r5, r4
 8008798:	4628      	mov	r0, r5
 800879a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800879c:	f000 f830 	bl	8008800 <_malloc_usable_size_r>
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d20f      	bcs.n	80087c4 <_realloc_r+0x48>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4638      	mov	r0, r7
 80087a8:	f7ff ff8e 	bl	80086c8 <_malloc_r>
 80087ac:	4605      	mov	r5, r0
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d0f2      	beq.n	8008798 <_realloc_r+0x1c>
 80087b2:	4631      	mov	r1, r6
 80087b4:	4622      	mov	r2, r4
 80087b6:	f7ff fbf7 	bl	8007fa8 <memcpy>
 80087ba:	4631      	mov	r1, r6
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff ff33 	bl	8008628 <_free_r>
 80087c2:	e7e9      	b.n	8008798 <_realloc_r+0x1c>
 80087c4:	4635      	mov	r5, r6
 80087c6:	e7e7      	b.n	8008798 <_realloc_r+0x1c>

080087c8 <_sbrk_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d06      	ldr	r5, [pc, #24]	; (80087e4 <_sbrk_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f000 f81e 	bl	8008814 <_sbrk>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_sbrk_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_sbrk_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20014678 	.word	0x20014678

080087e8 <__malloc_lock>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__malloc_lock+0x8>)
 80087ea:	f000 b811 	b.w	8008810 <__retarget_lock_acquire_recursive>
 80087ee:	bf00      	nop
 80087f0:	20014680 	.word	0x20014680

080087f4 <__malloc_unlock>:
 80087f4:	4801      	ldr	r0, [pc, #4]	; (80087fc <__malloc_unlock+0x8>)
 80087f6:	f000 b80c 	b.w	8008812 <__retarget_lock_release_recursive>
 80087fa:	bf00      	nop
 80087fc:	20014680 	.word	0x20014680

08008800 <_malloc_usable_size_r>:
 8008800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008804:	1f18      	subs	r0, r3, #4
 8008806:	2b00      	cmp	r3, #0
 8008808:	bfbc      	itt	lt
 800880a:	580b      	ldrlt	r3, [r1, r0]
 800880c:	18c0      	addlt	r0, r0, r3
 800880e:	4770      	bx	lr

08008810 <__retarget_lock_acquire_recursive>:
 8008810:	4770      	bx	lr

08008812 <__retarget_lock_release_recursive>:
 8008812:	4770      	bx	lr

08008814 <_sbrk>:
 8008814:	4b04      	ldr	r3, [pc, #16]	; (8008828 <_sbrk+0x14>)
 8008816:	6819      	ldr	r1, [r3, #0]
 8008818:	4602      	mov	r2, r0
 800881a:	b909      	cbnz	r1, 8008820 <_sbrk+0xc>
 800881c:	4903      	ldr	r1, [pc, #12]	; (800882c <_sbrk+0x18>)
 800881e:	6019      	str	r1, [r3, #0]
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	4402      	add	r2, r0
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	4770      	bx	lr
 8008828:	200144d8 	.word	0x200144d8
 800882c:	20014688 	.word	0x20014688

08008830 <_init>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	bf00      	nop
 8008834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008836:	bc08      	pop	{r3}
 8008838:	469e      	mov	lr, r3
 800883a:	4770      	bx	lr

0800883c <_fini>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	bf00      	nop
 8008840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008842:	bc08      	pop	{r3}
 8008844:	469e      	mov	lr, r3
 8008846:	4770      	bx	lr
