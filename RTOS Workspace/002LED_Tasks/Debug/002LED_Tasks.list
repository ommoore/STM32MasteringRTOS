
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000507c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f0  080053f0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080053f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000143fc  20000014  0800540c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014410  0800540c  00024410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177f5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003140  00000000  00000000  00037839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0003a980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024712  00000000  00000000  0003cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019009  00000000  00000000  000612da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc3e6  00000000  00000000  0007a2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001566c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e4  00000000  00000000  0015671c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005234 	.word	0x08005234

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08005234 	.word	0x08005234

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014368 	.word	0x20014368

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08c      	sub	sp, #48	; 0x30
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 facf 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f889 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8f9 	bl	80007a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //CYCLCNT enable
  DWT_CTRL |= (1 << 0);
 80005ae:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <main+0xfc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a39      	ldr	r2, [pc, #228]	; (8000698 <main+0xfc>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]

  //SEGGER_UART_init(500000);

  SEGGER_SYSVIEW_Conf();
 80005ba:	f002 fe89 	bl	80032d0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start(); //comment out if using UART based continuous recording
 80005be:	f004 f87f 	bl	80046c0 <SEGGER_SYSVIEW_Start>

  //Create Task 1: Red LED
  status = xTaskCreate(led_red_handler, "LED_RED_TASK", 200, NULL, 2, &ledr_task_handle);
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	4932      	ldr	r1, [pc, #200]	; (800069c <main+0x100>)
 80005d2:	4833      	ldr	r0, [pc, #204]	; (80006a0 <main+0x104>)
 80005d4:	f001 fec7 	bl	8002366 <xTaskCreate>
 80005d8:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d00a      	beq.n	80005f6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e4:	f383 8811 	msr	BASEPRI, r3
 80005e8:	f3bf 8f6f 	isb	sy
 80005ec:	f3bf 8f4f 	dsb	sy
 80005f0:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f2:	bf00      	nop
 80005f4:	e7fe      	b.n	80005f4 <main+0x58>

  //Create Task 2: Yellow LED
  status = xTaskCreate(led_yellow_handler, "LED_YELLOW_TASK", 200, NULL, 2, &ledy_task_handle);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4927      	ldr	r1, [pc, #156]	; (80006a4 <main+0x108>)
 8000606:	4828      	ldr	r0, [pc, #160]	; (80006a8 <main+0x10c>)
 8000608:	f001 fead 	bl	8002366 <xTaskCreate>
 800060c:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0x8e>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	61fb      	str	r3, [r7, #28]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0x8c>

  //Create Task 3: Blue LED
  status = xTaskCreate(led_blue_handler, "LED_BLUE_TASK", 200, NULL, 2, &ledb_task_handle);
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2302      	movs	r3, #2
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	22c8      	movs	r2, #200	; 0xc8
 8000638:	491c      	ldr	r1, [pc, #112]	; (80006ac <main+0x110>)
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <main+0x114>)
 800063c:	f001 fe93 	bl	8002366 <xTaskCreate>
 8000640:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000644:	2b01      	cmp	r3, #1
 8000646:	d00a      	beq.n	800065e <main+0xc2>
        __asm volatile
 8000648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	61bb      	str	r3, [r7, #24]
    }
 800065a:	bf00      	nop
 800065c:	e7fe      	b.n	800065c <main+0xc0>

  //Create Task 4: Green LED
  status = xTaskCreate(led_green_handler, "LED_GREEN_TASK", 200, NULL, 2, &ledg_task_handle);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2302      	movs	r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	22c8      	movs	r2, #200	; 0xc8
 800066a:	4912      	ldr	r1, [pc, #72]	; (80006b4 <main+0x118>)
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <main+0x11c>)
 800066e:	f001 fe7a 	bl	8002366 <xTaskCreate>
 8000672:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	2b01      	cmp	r3, #1
 8000678:	d00a      	beq.n	8000690 <main+0xf4>
        __asm volatile
 800067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	617b      	str	r3, [r7, #20]
    }
 800068c:	bf00      	nop
 800068e:	e7fe      	b.n	800068e <main+0xf2>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000690:	f001 ffcc 	bl	800262c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0xf8>
 8000696:	bf00      	nop
 8000698:	e0001000 	.word	0xe0001000
 800069c:	0800524c 	.word	0x0800524c
 80006a0:	080008ad 	.word	0x080008ad
 80006a4:	0800525c 	.word	0x0800525c
 80006a8:	080008d5 	.word	0x080008d5
 80006ac:	0800526c 	.word	0x0800526c
 80006b0:	08000901 	.word	0x08000901
 80006b4:	0800527c 	.word	0x0800527c
 80006b8:	0800092d 	.word	0x0800092d

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fdaa 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <SystemClock_Config+0xdc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <SystemClock_Config+0xdc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <SystemClock_Config+0xdc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <SystemClock_Config+0xe0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a25      	ldr	r2, [pc, #148]	; (800079c <SystemClock_Config+0xe0>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <SystemClock_Config+0xe0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000730:	23b4      	movs	r3, #180	; 0xb4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f001 f847 	bl	80017d8 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000750:	f000 f914 	bl	800097c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f000 fd06 	bl	8001164 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075e:	f000 f90d 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2105      	movs	r1, #5
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fd3f 	bl	8001204 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800078c:	f000 f8f6 	bl	800097c <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	; 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_GPIO_Init+0x100>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a38      	ldr	r2, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x100>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <MX_GPIO_Init+0x100>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_GPIO_Init+0x100>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a31      	ldr	r2, [pc, #196]	; (80008a0 <MX_GPIO_Init+0x100>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_GPIO_Init+0x100>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_GPIO_Init+0x100>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a2a      	ldr	r2, [pc, #168]	; (80008a0 <MX_GPIO_Init+0x100>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_GPIO_Init+0x100>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_GPIO_Init+0x100>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <MX_GPIO_Init+0x100>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_GPIO_Init+0x100>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	481e      	ldr	r0, [pc, #120]	; (80008a4 <MX_GPIO_Init+0x104>)
 800082c:	f000 fc66 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000836:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_GPIO_Init+0x108>)
 8000838:	f000 fc60 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800083c:	230c      	movs	r3, #12
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084c:	2307      	movs	r3, #7
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_GPIO_Init+0x104>)
 8000858:	f000 fabc 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085c:	2320      	movs	r3, #32
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_GPIO_Init+0x104>)
 8000874:	f000 faae 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_YELLOW_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin;
 8000878:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_GPIO_Init+0x108>)
 8000892:	f000 fa9f 	bl	8000dd4 <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40020400 	.word	0x40020400

080008ac <led_red_handler>:

/* USER CODE BEGIN 4 */
static void led_red_handler(void* parameters) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <led_red_handler+0x20>)
 80008b6:	f004 fc05 	bl	80050c4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <led_red_handler+0x24>)
 80008be:	f000 fc36 	bl	800112e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f000 f97f 	bl	8000bc8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008ca:	e7f3      	b.n	80008b4 <led_red_handler+0x8>
 80008cc:	0800528c 	.word	0x0800528c
 80008d0:	40020400 	.word	0x40020400

080008d4 <led_yellow_handler>:
	}
}

static void led_yellow_handler(void* parameters) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <led_yellow_handler+0x24>)
 80008de:	f004 fbf1 	bl	80050c4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80008e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <led_yellow_handler+0x28>)
 80008e8:	f000 fc21 	bl	800112e <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80008ec:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008f0:	f000 f96a 	bl	8000bc8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 80008f4:	e7f2      	b.n	80008dc <led_yellow_handler+0x8>
 80008f6:	bf00      	nop
 80008f8:	080052a0 	.word	0x080052a0
 80008fc:	40020400 	.word	0x40020400

08000900 <led_blue_handler>:
	}
}

static void led_blue_handler(void* parameters) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <led_blue_handler+0x24>)
 800090a:	f004 fbdb 	bl	80050c4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800090e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <led_blue_handler+0x28>)
 8000914:	f000 fc0b 	bl	800112e <HAL_GPIO_TogglePin>
		HAL_Delay(600);
 8000918:	f44f 7016 	mov.w	r0, #600	; 0x258
 800091c:	f000 f954 	bl	8000bc8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000920:	e7f2      	b.n	8000908 <led_blue_handler+0x8>
 8000922:	bf00      	nop
 8000924:	080052b4 	.word	0x080052b4
 8000928:	40020400 	.word	0x40020400

0800092c <led_green_handler>:
	}
}

static void led_green_handler(void* parameters) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <led_green_handler+0x24>)
 8000936:	f004 fbc5 	bl	80050c4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <led_green_handler+0x28>)
 8000940:	f000 fbf5 	bl	800112e <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000944:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000948:	f000 f93e 	bl	8000bc8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 800094c:	e7f2      	b.n	8000934 <led_green_handler+0x8>
 800094e:	bf00      	nop
 8000950:	080052c8 	.word	0x080052c8
 8000954:	40020400 	.word	0x40020400

08000958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d101      	bne.n	800096e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096a:	f000 f90d 	bl	8000b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40001000 	.word	0x40001000

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009c6:	f002 fa5f 	bl	8002e88 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	2036      	movs	r0, #54	; 0x36
 80009ee:	f000 f9c7 	bl	8000d80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009f2:	2036      	movs	r0, #54	; 0x36
 80009f4:	f000 f9e0 	bl	8000db8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_InitTick+0xa4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_InitTick+0xa4>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_InitTick+0xa4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a14:	f107 0210 	add.w	r2, r7, #16
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fcf6 	bl	8001410 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a24:	f000 fce0 	bl	80013e8 <HAL_RCC_GetPCLK1Freq>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_InitTick+0xa8>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_InitTick+0xac>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_InitTick+0xb0>)
 8000a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_InitTick+0xac>)
 8000a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_InitTick+0xac>)
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_InitTick+0xac>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_InitTick+0xac>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_InitTick+0xac>)
 8000a5e:	f001 f959 	bl	8001d14 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d104      	bne.n	8000a72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <HAL_InitTick+0xac>)
 8000a6a:	f001 f9ad 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	2001431c 	.word	0x2001431c
 8000a88:	40001000 	.word	0x40001000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <TIM6_DAC_IRQHandler+0x10>)
 8000abe:	f001 f9f3 	bl	8001ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2001431c 	.word	0x2001431c

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af6:	490e      	ldr	r1, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b0c:	4c0b      	ldr	r4, [pc, #44]	; (8000b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1a:	f7ff ffd7 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f004 fb41 	bl	80051a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fd3b 	bl	800059c <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b34:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8000b38:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b3c:	20014410 	.word	0x20014410

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_Init+0x40>)
 8000b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_Init+0x40>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x40>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f8fc 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ff30 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff ff06 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023c00 	.word	0x40023c00

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20014364 	.word	0x20014364

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20014364 	.word	0x20014364

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e165      	b.n	80010bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8154 	bne.w	80010b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d005      	beq.n	8000e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d130      	bne.n	8000e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	f003 0201 	and.w	r2, r3, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d017      	beq.n	8000ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d123      	bne.n	8000f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0203 	and.w	r2, r3, #3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80ae 	beq.w	80010b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a5c      	ldr	r2, [pc, #368]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f76:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <HAL_GPIO_Init+0x304>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	; (80010dc <HAL_GPIO_Init+0x308>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d025      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4e      	ldr	r2, [pc, #312]	; (80010e0 <HAL_GPIO_Init+0x30c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01f      	beq.n	8000fea <HAL_GPIO_Init+0x216>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <HAL_GPIO_Init+0x310>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_GPIO_Init+0x314>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x20e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_GPIO_Init+0x318>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x20a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <HAL_GPIO_Init+0x31c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x206>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x320>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x202>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e00c      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	e00a      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	; (80010d8 <HAL_GPIO_Init+0x304>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100e:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001032:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0x324>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105c:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <HAL_GPIO_Init+0x324>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_GPIO_Init+0x324>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <HAL_GPIO_Init+0x324>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f ae96 	bls.w	8000df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40021400 	.word	0x40021400
 80010f4:	40021800 	.word	0x40021800
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43d9      	mvns	r1, r3
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	400b      	ands	r3, r1
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff fd0e 	bl	8000bb0 <HAL_GetTick>
 8001194:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001196:	e009      	b.n	80011ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001198:	f7ff fd0a 	bl	8000bb0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a6:	d901      	bls.n	80011ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e01f      	b.n	80011ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_PWREx_EnableOverDrive+0x98>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d1ee      	bne.n	8001198 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c0:	f7ff fcf6 	bl	8000bb0 <HAL_GetTick>
 80011c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011c6:	e009      	b.n	80011dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011c8:	f7ff fcf2 	bl	8000bb0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d6:	d901      	bls.n	80011dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e007      	b.n	80011ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_PWREx_EnableOverDrive+0x98>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011e8:	d1ee      	bne.n	80011c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	420e0040 	.word	0x420e0040
 80011fc:	40007000 	.word	0x40007000
 8001200:	420e0044 	.word	0x420e0044

08001204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0cc      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b68      	ldr	r3, [pc, #416]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d90c      	bls.n	8001240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b65      	ldr	r3, [pc, #404]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b63      	ldr	r3, [pc, #396]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0b8      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d020      	beq.n	800128e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001258:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4a58      	ldr	r2, [pc, #352]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001270:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800127a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800127c:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	494d      	ldr	r1, [pc, #308]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	4313      	orrs	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d044      	beq.n	8001324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d119      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e07f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d003      	beq.n	80012c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e06f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e067      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f023 0203 	bic.w	r2, r3, #3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4934      	ldr	r1, [pc, #208]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f4:	f7ff fc5c 	bl	8000bb0 <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7ff fc58 	bl	8000bb0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3288 	movw	r2, #5000	; 0x1388
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e04f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 020c 	and.w	r2, r3, #12
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	429a      	cmp	r2, r3
 8001322:	d1eb      	bne.n	80012fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d20c      	bcs.n	800134c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_RCC_ClockConfig+0x1b8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e032      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4916      	ldr	r1, [pc, #88]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	490e      	ldr	r1, [pc, #56]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	4313      	orrs	r3, r2
 8001388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800138a:	f000 f873 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 800138e:	4602      	mov	r2, r0
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	490a      	ldr	r1, [pc, #40]	; (80013c4 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	5ccb      	ldrb	r3, [r1, r3]
 800139e:	fa22 f303 	lsr.w	r3, r2, r3
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_ClockConfig+0x1c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fb14 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023c00 	.word	0x40023c00
 80013c0:	40023800 	.word	0x40023800
 80013c4:	080053ac 	.word	0x080053ac
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000

080013e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013ec:	f7ff fff0 	bl	80013d0 <HAL_RCC_GetHCLKFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0a9b      	lsrs	r3, r3, #10
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4903      	ldr	r1, [pc, #12]	; (800140c <HAL_RCC_GetPCLK1Freq+0x24>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	080053bc 	.word	0x080053bc

08001410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	220f      	movs	r2, #15
 800141e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_RCC_GetClockConfig+0x5c>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_RCC_GetClockConfig+0x5c>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_RCC_GetClockConfig+0x5c>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_RCC_GetClockConfig+0x5c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <HAL_RCC_GetClockConfig+0x60>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 020f 	and.w	r2, r3, #15
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	601a      	str	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40023c00 	.word	0x40023c00

08001474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001478:	b088      	sub	sp, #32
 800147a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001490:	4bce      	ldr	r3, [pc, #824]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b0c      	cmp	r3, #12
 800149a:	f200 818d 	bhi.w	80017b8 <HAL_RCC_GetSysClockFreq+0x344>
 800149e:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <HAL_RCC_GetSysClockFreq+0x30>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014d9 	.word	0x080014d9
 80014a8:	080017b9 	.word	0x080017b9
 80014ac:	080017b9 	.word	0x080017b9
 80014b0:	080017b9 	.word	0x080017b9
 80014b4:	080014df 	.word	0x080014df
 80014b8:	080017b9 	.word	0x080017b9
 80014bc:	080017b9 	.word	0x080017b9
 80014c0:	080017b9 	.word	0x080017b9
 80014c4:	080014e5 	.word	0x080014e5
 80014c8:	080017b9 	.word	0x080017b9
 80014cc:	080017b9 	.word	0x080017b9
 80014d0:	080017b9 	.word	0x080017b9
 80014d4:	08001659 	.word	0x08001659
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d8:	4bbd      	ldr	r3, [pc, #756]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014da:	61bb      	str	r3, [r7, #24]
       break;
 80014dc:	e16f      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014de:	4bbd      	ldr	r3, [pc, #756]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x360>)
 80014e0:	61bb      	str	r3, [r7, #24]
      break;
 80014e2:	e16c      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e4:	4bb9      	ldr	r3, [pc, #740]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ee:	4bb7      	ldr	r3, [pc, #732]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d053      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fa:	4bb4      	ldr	r3, [pc, #720]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	099b      	lsrs	r3, r3, #6
 8001500:	461a      	mov	r2, r3
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	f240 10ff 	movw	r0, #511	; 0x1ff
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	ea02 0400 	and.w	r4, r2, r0
 8001512:	603c      	str	r4, [r7, #0]
 8001514:	400b      	ands	r3, r1
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	e9d7 4500 	ldrd	r4, r5, [r7]
 800151c:	4620      	mov	r0, r4
 800151e:	4629      	mov	r1, r5
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	014b      	lsls	r3, r1, #5
 800152a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800152e:	0142      	lsls	r2, r0, #5
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	4623      	mov	r3, r4
 8001536:	1ac0      	subs	r0, r0, r3
 8001538:	462b      	mov	r3, r5
 800153a:	eb61 0103 	sbc.w	r1, r1, r3
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	018b      	lsls	r3, r1, #6
 8001548:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800154c:	0182      	lsls	r2, r0, #6
 800154e:	1a12      	subs	r2, r2, r0
 8001550:	eb63 0301 	sbc.w	r3, r3, r1
 8001554:	f04f 0000 	mov.w	r0, #0
 8001558:	f04f 0100 	mov.w	r1, #0
 800155c:	00d9      	lsls	r1, r3, #3
 800155e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001562:	00d0      	lsls	r0, r2, #3
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4621      	mov	r1, r4
 800156a:	1852      	adds	r2, r2, r1
 800156c:	4629      	mov	r1, r5
 800156e:	eb43 0101 	adc.w	r1, r3, r1
 8001572:	460b      	mov	r3, r1
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	0259      	lsls	r1, r3, #9
 800157e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001582:	0250      	lsls	r0, r2, #9
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	461a      	mov	r2, r3
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f7fe fe86 	bl	80002a4 <__aeabi_uldivmod>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4613      	mov	r3, r2
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	e04c      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a2:	4b8a      	ldr	r3, [pc, #552]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	099b      	lsrs	r3, r3, #6
 80015a8:	461a      	mov	r2, r3
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	ea02 0a00 	and.w	sl, r2, r0
 80015ba:	ea03 0b01 	and.w	fp, r3, r1
 80015be:	4650      	mov	r0, sl
 80015c0:	4659      	mov	r1, fp
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	014b      	lsls	r3, r1, #5
 80015cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015d0:	0142      	lsls	r2, r0, #5
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	ebb0 000a 	subs.w	r0, r0, sl
 80015da:	eb61 010b 	sbc.w	r1, r1, fp
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	018b      	lsls	r3, r1, #6
 80015e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015ec:	0182      	lsls	r2, r0, #6
 80015ee:	1a12      	subs	r2, r2, r0
 80015f0:	eb63 0301 	sbc.w	r3, r3, r1
 80015f4:	f04f 0000 	mov.w	r0, #0
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	00d9      	lsls	r1, r3, #3
 80015fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001602:	00d0      	lsls	r0, r2, #3
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	eb12 020a 	adds.w	r2, r2, sl
 800160c:	eb43 030b 	adc.w	r3, r3, fp
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	0299      	lsls	r1, r3, #10
 800161a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800161e:	0290      	lsls	r0, r2, #10
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	461a      	mov	r2, r3
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	f7fe fe38 	bl	80002a4 <__aeabi_uldivmod>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4613      	mov	r3, r2
 800163a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800163c:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	3301      	adds	r3, #1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	61bb      	str	r3, [r7, #24]
      break;
 8001656:	e0b2      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001658:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001660:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001662:	4b5a      	ldr	r3, [pc, #360]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d04d      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166e:	4b57      	ldr	r3, [pc, #348]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	099b      	lsrs	r3, r3, #6
 8001674:	461a      	mov	r2, r3
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	ea02 0800 	and.w	r8, r2, r0
 8001686:	ea03 0901 	and.w	r9, r3, r1
 800168a:	4640      	mov	r0, r8
 800168c:	4649      	mov	r1, r9
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	014b      	lsls	r3, r1, #5
 8001698:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800169c:	0142      	lsls	r2, r0, #5
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	ebb0 0008 	subs.w	r0, r0, r8
 80016a6:	eb61 0109 	sbc.w	r1, r1, r9
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	018b      	lsls	r3, r1, #6
 80016b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016b8:	0182      	lsls	r2, r0, #6
 80016ba:	1a12      	subs	r2, r2, r0
 80016bc:	eb63 0301 	sbc.w	r3, r3, r1
 80016c0:	f04f 0000 	mov.w	r0, #0
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	00d9      	lsls	r1, r3, #3
 80016ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016ce:	00d0      	lsls	r0, r2, #3
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	eb12 0208 	adds.w	r2, r2, r8
 80016d8:	eb43 0309 	adc.w	r3, r3, r9
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	f04f 0100 	mov.w	r1, #0
 80016e4:	0259      	lsls	r1, r3, #9
 80016e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016ea:	0250      	lsls	r0, r2, #9
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	f7fe fdd2 	bl	80002a4 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4613      	mov	r3, r2
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	e04a      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	461a      	mov	r2, r3
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	ea02 0400 	and.w	r4, r2, r0
 8001722:	ea03 0501 	and.w	r5, r3, r1
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	014b      	lsls	r3, r1, #5
 8001734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001738:	0142      	lsls	r2, r0, #5
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	1b00      	subs	r0, r0, r4
 8001740:	eb61 0105 	sbc.w	r1, r1, r5
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	018b      	lsls	r3, r1, #6
 800174e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001752:	0182      	lsls	r2, r0, #6
 8001754:	1a12      	subs	r2, r2, r0
 8001756:	eb63 0301 	sbc.w	r3, r3, r1
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	00d9      	lsls	r1, r3, #3
 8001764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001768:	00d0      	lsls	r0, r2, #3
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	1912      	adds	r2, r2, r4
 8001770:	eb45 0303 	adc.w	r3, r5, r3
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	0299      	lsls	r1, r3, #10
 800177e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001782:	0290      	lsls	r0, r2, #10
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	461a      	mov	r2, r3
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	f7fe fd86 	bl	80002a4 <__aeabi_uldivmod>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4613      	mov	r3, r2
 800179e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_RCC_GetSysClockFreq+0x358>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0f1b      	lsrs	r3, r3, #28
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	61bb      	str	r3, [r7, #24]
      break;
 80017b6:	e002      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017ba:	61bb      	str	r3, [r7, #24]
      break;
 80017bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017be:	69bb      	ldr	r3, [r7, #24]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	007a1200 	.word	0x007a1200

080017d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e28d      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8083 	beq.w	80018fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017f8:	4b94      	ldr	r3, [pc, #592]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b04      	cmp	r3, #4
 8001802:	d019      	beq.n	8001838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001804:	4b91      	ldr	r3, [pc, #580]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800180c:	2b08      	cmp	r3, #8
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001810:	4b8e      	ldr	r3, [pc, #568]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800181c:	d00c      	beq.n	8001838 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181e:	4b8b      	ldr	r3, [pc, #556]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d112      	bne.n	8001850 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001836:	d10b      	bne.n	8001850 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d05b      	beq.n	80018fc <HAL_RCC_OscConfig+0x124>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d157      	bne.n	80018fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e25a      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001858:	d106      	bne.n	8001868 <HAL_RCC_OscConfig+0x90>
 800185a:	4b7c      	ldr	r3, [pc, #496]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7b      	ldr	r2, [pc, #492]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e01d      	b.n	80018a4 <HAL_RCC_OscConfig+0xcc>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0xb4>
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a72      	ldr	r2, [pc, #456]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_OscConfig+0xcc>
 800188c:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a6e      	ldr	r2, [pc, #440]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6b      	ldr	r2, [pc, #428]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800189e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d013      	beq.n	80018d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff f980 	bl	8000bb0 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff f97c 	bl	8000bb0 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	; 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e21f      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b61      	ldr	r3, [pc, #388]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0xdc>
 80018d2:	e014      	b.n	80018fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f96c 	bl	8000bb0 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f968 	bl	8000bb0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e20b      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ee:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x104>
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d06f      	beq.n	80019ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800190a:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b00      	cmp	r3, #0
 8001914:	d017      	beq.n	8001946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001916:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800191e:	2b08      	cmp	r3, #8
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d11c      	bne.n	8001974 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x186>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e1d3      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4937      	ldr	r1, [pc, #220]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	e03a      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197c:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff f915 	bl	8000bb0 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff f911 	bl	8000bb0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e1b4      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4925      	ldr	r1, [pc, #148]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_OscConfig+0x278>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f8f4 	bl	8000bb0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff f8f0 	bl	8000bb0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e193      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d036      	beq.n	8001a64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d016      	beq.n	8001a2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_RCC_OscConfig+0x27c>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff f8d4 	bl	8000bb0 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f8d0 	bl	8000bb0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e173      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x234>
 8001a2a:	e01b      	b.n	8001a64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7ff f8bd 	bl	8000bb0 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	e00e      	b.n	8001a58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f8b9 	bl	8000bb0 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d907      	bls.n	8001a58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e15c      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	42470000 	.word	0x42470000
 8001a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	4b8a      	ldr	r3, [pc, #552]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ea      	bne.n	8001a3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8097 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b83      	ldr	r3, [pc, #524]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b7f      	ldr	r3, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a7e      	ldr	r2, [pc, #504]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b7c      	ldr	r3, [pc, #496]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa2:	4b79      	ldr	r3, [pc, #484]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a75      	ldr	r2, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff f879 	bl	8000bb0 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff f875 	bl	8000bb0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e118      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <HAL_RCC_OscConfig+0x4b0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x31e>
 8001ae8:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a65      	ldr	r2, [pc, #404]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	e01c      	b.n	8001b30 <HAL_RCC_OscConfig+0x358>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x340>
 8001afe:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a60      	ldr	r2, [pc, #384]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	4a5d      	ldr	r2, [pc, #372]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0x358>
 8001b18:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a59      	ldr	r2, [pc, #356]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	4a56      	ldr	r2, [pc, #344]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d015      	beq.n	8001b64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff f83a 	bl	8000bb0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff f836 	bl	8000bb0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0d7      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b56:	4b4b      	ldr	r3, [pc, #300]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ee      	beq.n	8001b40 <HAL_RCC_OscConfig+0x368>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f824 	bl	8000bb0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f820 	bl	8000bb0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0c1      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b82:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ee      	bne.n	8001b6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a3a      	ldr	r2, [pc, #232]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80ad 	beq.w	8001d04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001baa:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d060      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d145      	bne.n	8001c4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x4b4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7fe fff4 	bl	8000bb0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7fe fff0 	bl	8000bb0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e093      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	3b01      	subs	r3, #1
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	071b      	lsls	r3, r3, #28
 8001c16:	491b      	ldr	r1, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x4b4>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7fe ffc5 	bl	8000bb0 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7fe ffc1 	bl	8000bb0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e064      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x452>
 8001c48:	e05c      	b.n	8001d04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_RCC_OscConfig+0x4b4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe ffae 	bl	8000bb0 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe ffaa 	bl	8000bb0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e04d      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x480>
 8001c76:	e045      	b.n	8001d04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e040      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <HAL_RCC_OscConfig+0x538>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d030      	beq.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d129      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d122      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d119      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d10f      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f839 	bl	8001db2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 f9d8 	bl	8002108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e04e      	b.n	8001e7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d022      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d01d      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d018      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40001800 	.word	0x40001800

08001ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d122      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d11b      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0202 	mvn.w	r2, #2
 8001ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8ee 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8e0 	bl	80020b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8f1 	bl	80020e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d122      	bne.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d11b      	bne.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0204 	mvn.w	r2, #4
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8c4 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8b6 	bl	80020b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8c7 	bl	80020e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d122      	bne.n	8001fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d11b      	bne.n	8001fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0208 	mvn.w	r2, #8
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2204      	movs	r2, #4
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f89a 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f88c 	bl	80020b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f89d 	bl	80020e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0210 	mvn.w	r2, #16
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f870 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f862 	bl	80020b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f873 	bl	80020e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10e      	bne.n	800202c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0201 	mvn.w	r2, #1
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fc96 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	2b80      	cmp	r3, #128	; 0x80
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f902 	bl	800225c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f838 	bl	80020f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b20      	cmp	r3, #32
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b20      	cmp	r3, #32
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0220 	mvn.w	r2, #32
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8cc 	bl	8002248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a40      	ldr	r2, [pc, #256]	; (800221c <TIM_Base_SetConfig+0x114>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d013      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002126:	d00f      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <TIM_Base_SetConfig+0x118>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00b      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <TIM_Base_SetConfig+0x11c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <TIM_Base_SetConfig+0x120>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3a      	ldr	r2, [pc, #232]	; (800222c <TIM_Base_SetConfig+0x124>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d108      	bne.n	800215a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2f      	ldr	r2, [pc, #188]	; (800221c <TIM_Base_SetConfig+0x114>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d027      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <TIM_Base_SetConfig+0x118>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d023      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <TIM_Base_SetConfig+0x11c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <TIM_Base_SetConfig+0x120>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <TIM_Base_SetConfig+0x124>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d017      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a28      	ldr	r2, [pc, #160]	; (8002230 <TIM_Base_SetConfig+0x128>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a27      	ldr	r2, [pc, #156]	; (8002234 <TIM_Base_SetConfig+0x12c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00f      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <TIM_Base_SetConfig+0x130>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a25      	ldr	r2, [pc, #148]	; (800223c <TIM_Base_SetConfig+0x134>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <TIM_Base_SetConfig+0x138>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d003      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <TIM_Base_SetConfig+0x13c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d108      	bne.n	80021cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <TIM_Base_SetConfig+0x114>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_Base_SetConfig+0xf8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a0c      	ldr	r2, [pc, #48]	; (800222c <TIM_Base_SetConfig+0x124>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d103      	bne.n	8002208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	615a      	str	r2, [r3, #20]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800
 8002228:	40000c00 	.word	0x40000c00
 800222c:	40010400 	.word	0x40010400
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800
 800223c:	40001800 	.word	0x40001800
 8002240:	40001c00 	.word	0x40001c00
 8002244:	40002000 	.word	0x40002000

08002248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 0208 	add.w	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f103 0208 	add.w	r2, r3, #8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 0208 	add.w	r2, r3, #8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	601a      	str	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6892      	ldr	r2, [r2, #8]
 8002328:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6852      	ldr	r2, [r2, #4]
 8002332:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	d103      	bne.n	8002346 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1e5a      	subs	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002366:	b580      	push	{r7, lr}
 8002368:	b08c      	sub	sp, #48	; 0x30
 800236a:	af04      	add	r7, sp, #16
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4618      	mov	r0, r3
 800237c:	f000 ff2e 	bl	80031dc <pvPortMalloc>
 8002380:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002388:	2058      	movs	r0, #88	; 0x58
 800238a:	f000 ff27 	bl	80031dc <pvPortMalloc>
 800238e:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
 800239c:	e005      	b.n	80023aa <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f000 ff70 	bl	8003284 <vPortFree>
 80023a4:	e001      	b.n	80023aa <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023b0:	88fa      	ldrh	r2, [r7, #6]
 80023b2:	2300      	movs	r3, #0
 80023b4:	9303      	str	r3, [sp, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f80e 	bl	80023e8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023cc:	69f8      	ldr	r0, [r7, #28]
 80023ce:	f000 f8a1 	bl	8002514 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023d2:	2301      	movs	r3, #1
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	e002      	b.n	80023de <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295
 80023dc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023de:	69bb      	ldr	r3, [r7, #24]
    }
 80023e0:	4618      	mov	r0, r3
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	461a      	mov	r2, r3
 8002400:	21a5      	movs	r1, #165	; 0xa5
 8002402:	f002 ff0f 	bl	8005224 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002410:	3b01      	subs	r3, #1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f023 0307 	bic.w	r3, r3, #7
 800241e:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <prvInitialiseNewTask+0x58>
        __asm volatile
 800242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242e:	f383 8811 	msr	BASEPRI, r3
 8002432:	f3bf 8f6f 	isb	sy
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	617b      	str	r3, [r7, #20]
    }
 800243c:	bf00      	nop
 800243e:	e7fe      	b.n	800243e <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01f      	beq.n	8002486 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e012      	b.n	8002472 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	4413      	add	r3, r2
 8002452:	7819      	ldrb	r1, [r3, #0]
 8002454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	4413      	add	r3, r2
 800245a:	3334      	adds	r3, #52	; 0x34
 800245c:	460a      	mov	r2, r1
 800245e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	4413      	add	r3, r2
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	3301      	adds	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2b09      	cmp	r3, #9
 8002476:	d9e9      	bls.n	800244c <prvInitialiseNewTask+0x64>
 8002478:	e000      	b.n	800247c <prvInitialiseNewTask+0x94>
            {
                break;
 800247a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002484:	e003      	b.n	800248e <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	2b04      	cmp	r3, #4
 8002492:	d901      	bls.n	8002498 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002494:	2304      	movs	r3, #4
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a2:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	2200      	movs	r2, #0
 80024a8:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	3304      	adds	r3, #4
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fefe 	bl	80022b0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	3318      	adds	r3, #24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fef9 	bl	80022b0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c6:	f1c3 0205 	rsb	r2, r3, #5
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	3350      	adds	r3, #80	; 0x50
 80024d8:	2204      	movs	r2, #4
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 fea1 	bl	8005224 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	3354      	adds	r3, #84	; 0x54
 80024e6:	2201      	movs	r2, #1
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 fe9a 	bl	8005224 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	69b8      	ldr	r0, [r7, #24]
 80024f6:	f000 fb95 	bl	8002c24 <pxPortInitialiseStack>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800250c:	bf00      	nop
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002514:	b5b0      	push	{r4, r5, r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af02      	add	r7, sp, #8
 800251a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800251c:	f000 fd32 	bl	8002f84 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002520:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <prvAddNewTaskToReadyList+0xfc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a3a      	ldr	r2, [pc, #232]	; (8002610 <prvAddNewTaskToReadyList+0xfc>)
 8002528:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800252a:	4b3a      	ldr	r3, [pc, #232]	; (8002614 <prvAddNewTaskToReadyList+0x100>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002532:	4a38      	ldr	r2, [pc, #224]	; (8002614 <prvAddNewTaskToReadyList+0x100>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <prvAddNewTaskToReadyList+0xfc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d110      	bne.n	8002562 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002540:	f000 fad6 	bl	8002af0 <prvInitialiseTaskLists>
 8002544:	e00d      	b.n	8002562 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <prvAddNewTaskToReadyList+0x104>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <prvAddNewTaskToReadyList+0x100>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	429a      	cmp	r2, r3
 800255a:	d802      	bhi.n	8002562 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800255c:	4a2d      	ldr	r2, [pc, #180]	; (8002614 <prvAddNewTaskToReadyList+0x100>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <prvAddNewTaskToReadyList+0x108>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	4a2c      	ldr	r2, [pc, #176]	; (800261c <prvAddNewTaskToReadyList+0x108>)
 800256a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <prvAddNewTaskToReadyList+0x108>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d016      	beq.n	80025a8 <prvAddNewTaskToReadyList+0x94>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fbff 	bl	8004d80 <SEGGER_SYSVIEW_OnTaskCreate>
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	461d      	mov	r5, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461c      	mov	r4, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	1ae3      	subs	r3, r4, r3
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	462b      	mov	r3, r5
 80025a4:	f000 ff2e 	bl	8003404 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fc6c 	bl	8004e88 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	2201      	movs	r2, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <prvAddNewTaskToReadyList+0x10c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <prvAddNewTaskToReadyList+0x10c>)
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <prvAddNewTaskToReadyList+0x110>)
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7ff fe76 	bl	80022ca <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025de:	f000 fd01 	bl	8002fe4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <prvAddNewTaskToReadyList+0x104>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00e      	beq.n	8002608 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <prvAddNewTaskToReadyList+0x100>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d207      	bcs.n	8002608 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <prvAddNewTaskToReadyList+0x114>)
 80025fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bdb0      	pop	{r4, r5, r7, pc}
 8002610:	20000108 	.word	0x20000108
 8002614:	20000030 	.word	0x20000030
 8002618:	20000114 	.word	0x20000114
 800261c:	20000124 	.word	0x20000124
 8002620:	20000110 	.word	0x20000110
 8002624:	20000034 	.word	0x20000034
 8002628:	e000ed04 	.word	0xe000ed04

0800262c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <vTaskStartScheduler+0xa0>)
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2300      	movs	r3, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2300      	movs	r3, #0
 800263c:	2282      	movs	r2, #130	; 0x82
 800263e:	4924      	ldr	r1, [pc, #144]	; (80026d0 <vTaskStartScheduler+0xa4>)
 8002640:	4824      	ldr	r0, [pc, #144]	; (80026d4 <vTaskStartScheduler+0xa8>)
 8002642:	f7ff fe90 	bl	8002366 <xTaskCreate>
 8002646:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d129      	bne.n	80026a2 <vTaskStartScheduler+0x76>
        __asm volatile
 800264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	60bb      	str	r3, [r7, #8]
    }
 8002660:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <vTaskStartScheduler+0xac>)
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <vTaskStartScheduler+0xb0>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <vTaskStartScheduler+0xb4>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <vTaskStartScheduler+0xb8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3334      	adds	r3, #52	; 0x34
 800267c:	2205      	movs	r2, #5
 800267e:	4914      	ldr	r1, [pc, #80]	; (80026d0 <vTaskStartScheduler+0xa4>)
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fdb3 	bl	80051ec <memcmp>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <vTaskStartScheduler+0x6c>
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <vTaskStartScheduler+0xb8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f002 fbb7 	bl	8004e04 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002696:	e001      	b.n	800269c <vTaskStartScheduler+0x70>
 8002698:	f002 fb56 	bl	8004d48 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800269c:	f000 fb52 	bl	8002d44 <xPortStartScheduler>
 80026a0:	e00e      	b.n	80026c0 <vTaskStartScheduler+0x94>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d10a      	bne.n	80026c0 <vTaskStartScheduler+0x94>
        __asm volatile
 80026aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	607b      	str	r3, [r7, #4]
    }
 80026bc:	bf00      	nop
 80026be:	e7fe      	b.n	80026be <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <vTaskStartScheduler+0xbc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000012c 	.word	0x2000012c
 80026d0:	080052dc 	.word	0x080052dc
 80026d4:	08002ac1 	.word	0x08002ac1
 80026d8:	20000128 	.word	0x20000128
 80026dc:	20000114 	.word	0x20000114
 80026e0:	2000010c 	.word	0x2000010c
 80026e4:	20000030 	.word	0x20000030
 80026e8:	2000000c 	.word	0x2000000c

080026ec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <vTaskSuspendAll+0x18>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	4a03      	ldr	r2, [pc, #12]	; (8002704 <vTaskSuspendAll+0x18>)
 80026f8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	20000130 	.word	0x20000130

08002708 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <xTaskResumeAll+0x11c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <xTaskResumeAll+0x2c>
        __asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	603b      	str	r3, [r7, #0]
    }
 8002730:	bf00      	nop
 8002732:	e7fe      	b.n	8002732 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002734:	f000 fc26 	bl	8002f84 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002738:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <xTaskResumeAll+0x11c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3b01      	subs	r3, #1
 800273e:	4a39      	ldr	r2, [pc, #228]	; (8002824 <xTaskResumeAll+0x11c>)
 8002740:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <xTaskResumeAll+0x11c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d165      	bne.n	8002816 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <xTaskResumeAll+0x120>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d061      	beq.n	8002816 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002752:	e032      	b.n	80027ba <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002754:	4b35      	ldr	r3, [pc, #212]	; (800282c <xTaskResumeAll+0x124>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3318      	adds	r3, #24
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fdd6 	bl	8002312 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	3304      	adds	r3, #4
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fdd1 	bl	8002312 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fb88 	bl	8004e88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2201      	movs	r2, #1
 800277e:	409a      	lsls	r2, r3
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <xTaskResumeAll+0x128>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4313      	orrs	r3, r2
 8002786:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <xTaskResumeAll+0x128>)
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4a27      	ldr	r2, [pc, #156]	; (8002834 <xTaskResumeAll+0x12c>)
 8002798:	441a      	add	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3304      	adds	r3, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f7ff fd92 	bl	80022ca <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <xTaskResumeAll+0x130>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <xTaskResumeAll+0x134>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <xTaskResumeAll+0x124>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1c8      	bne.n	8002754 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80027c8:	f000 fa10 	bl	8002bec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <xTaskResumeAll+0x138>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d010      	beq.n	80027fa <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80027d8:	f000 f848 	bl	800286c <xTaskIncrementTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <xTaskResumeAll+0x134>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f1      	bne.n	80027d8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <xTaskResumeAll+0x138>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <xTaskResumeAll+0x134>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002802:	2301      	movs	r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <xTaskResumeAll+0x13c>)
 8002808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002816:	f000 fbe5 	bl	8002fe4 <vPortExitCritical>

    return xAlreadyYielded;
 800281a:	68bb      	ldr	r3, [r7, #8]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000130 	.word	0x20000130
 8002828:	20000108 	.word	0x20000108
 800282c:	200000c8 	.word	0x200000c8
 8002830:	20000110 	.word	0x20000110
 8002834:	20000034 	.word	0x20000034
 8002838:	20000030 	.word	0x20000030
 800283c:	2000011c 	.word	0x2000011c
 8002840:	20000118 	.word	0x20000118
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800284e:	f000 fc85 	bl	800315c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <xTaskGetTickCountFromISR+0x20>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800285c:	683b      	ldr	r3, [r7, #0]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000010c 	.word	0x2000010c

0800286c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002876:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <xTaskIncrementTick+0x14c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 8092 	bne.w	80029a4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002880:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <xTaskIncrementTick+0x150>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002888:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <xTaskIncrementTick+0x150>)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d120      	bne.n	80028d6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002894:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <xTaskIncrementTick+0x154>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <xTaskIncrementTick+0x48>
        __asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	603b      	str	r3, [r7, #0]
    }
 80028b0:	bf00      	nop
 80028b2:	e7fe      	b.n	80028b2 <xTaskIncrementTick+0x46>
 80028b4:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <xTaskIncrementTick+0x154>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <xTaskIncrementTick+0x158>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <xTaskIncrementTick+0x154>)
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <xTaskIncrementTick+0x158>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <xTaskIncrementTick+0x15c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	4a3e      	ldr	r2, [pc, #248]	; (80029c8 <xTaskIncrementTick+0x15c>)
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	f000 f98b 	bl	8002bec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <xTaskIncrementTick+0x160>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d34c      	bcc.n	800297a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028e0:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <xTaskIncrementTick+0x154>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d104      	bne.n	80028f4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <xTaskIncrementTick+0x160>)
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	601a      	str	r2, [r3, #0]
                    break;
 80028f2:	e042      	b.n	800297a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <xTaskIncrementTick+0x154>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d203      	bcs.n	8002914 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800290c:	4a2f      	ldr	r2, [pc, #188]	; (80029cc <xTaskIncrementTick+0x160>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002912:	e032      	b.n	800297a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	3304      	adds	r3, #4
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fcfa 	bl	8002312 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3318      	adds	r3, #24
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fcf1 	bl	8002312 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f002 faa8 	bl	8004e88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2201      	movs	r2, #1
 800293e:	409a      	lsls	r2, r3
 8002940:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <xTaskIncrementTick+0x164>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <xTaskIncrementTick+0x164>)
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4a1f      	ldr	r2, [pc, #124]	; (80029d4 <xTaskIncrementTick+0x168>)
 8002958:	441a      	add	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3304      	adds	r3, #4
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f7ff fcb2 	bl	80022ca <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <xTaskIncrementTick+0x16c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	429a      	cmp	r2, r3
 8002972:	d3b5      	bcc.n	80028e0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002974:	2301      	movs	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002978:	e7b2      	b.n	80028e0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <xTaskIncrementTick+0x16c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	4914      	ldr	r1, [pc, #80]	; (80029d4 <xTaskIncrementTick+0x168>)
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d901      	bls.n	8002996 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002992:	2301      	movs	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <xTaskIncrementTick+0x170>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e004      	b.n	80029ae <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <xTaskIncrementTick+0x174>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <xTaskIncrementTick+0x174>)
 80029ac:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80029ae:	697b      	ldr	r3, [r7, #20]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000130 	.word	0x20000130
 80029bc:	2000010c 	.word	0x2000010c
 80029c0:	200000c0 	.word	0x200000c0
 80029c4:	200000c4 	.word	0x200000c4
 80029c8:	20000120 	.word	0x20000120
 80029cc:	20000128 	.word	0x20000128
 80029d0:	20000110 	.word	0x20000110
 80029d4:	20000034 	.word	0x20000034
 80029d8:	20000030 	.word	0x20000030
 80029dc:	2000011c 	.word	0x2000011c
 80029e0:	20000118 	.word	0x20000118

080029e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <vTaskSwitchContext+0xc4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <vTaskSwitchContext+0xc8>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80029f8:	e052      	b.n	8002aa0 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <vTaskSwitchContext+0xc8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <vTaskSwitchContext+0xcc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	f1c3 031f 	rsb	r3, r3, #31
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	4927      	ldr	r1, [pc, #156]	; (8002ab4 <vTaskSwitchContext+0xd0>)
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	607b      	str	r3, [r7, #4]
    }
 8002a3c:	bf00      	nop
 8002a3e:	e7fe      	b.n	8002a3e <vTaskSwitchContext+0x5a>
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <vTaskSwitchContext+0xd0>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3308      	adds	r3, #8
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d104      	bne.n	8002a70 <vTaskSwitchContext+0x8c>
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <vTaskSwitchContext+0xd4>)
 8002a78:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <vTaskSwitchContext+0xd4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3334      	adds	r3, #52	; 0x34
 8002a80:	2205      	movs	r2, #5
 8002a82:	490e      	ldr	r1, [pc, #56]	; (8002abc <vTaskSwitchContext+0xd8>)
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fbb1 	bl	80051ec <memcmp>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <vTaskSwitchContext+0xb8>
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <vTaskSwitchContext+0xd4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 f9b5 	bl	8004e04 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a9a:	e001      	b.n	8002aa0 <vTaskSwitchContext+0xbc>
        traceTASK_SWITCHED_IN();
 8002a9c:	f002 f954 	bl	8004d48 <SEGGER_SYSVIEW_OnIdle>
}
 8002aa0:	bf00      	nop
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000130 	.word	0x20000130
 8002aac:	2000011c 	.word	0x2000011c
 8002ab0:	20000110 	.word	0x20000110
 8002ab4:	20000034 	.word	0x20000034
 8002ab8:	20000030 	.word	0x20000030
 8002abc:	080052dc 	.word	0x080052dc

08002ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ac8:	f000 f852 	bl	8002b70 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <prvIdleTask+0x28>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d9f9      	bls.n	8002ac8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <prvIdleTask+0x2c>)
 8002ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ae4:	e7f0      	b.n	8002ac8 <prvIdleTask+0x8>
 8002ae6:	bf00      	nop
 8002ae8:	20000034 	.word	0x20000034
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	e00c      	b.n	8002b16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <prvInitialiseTaskLists+0x60>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fbb0 	bl	8002270 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3301      	adds	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d9ef      	bls.n	8002afc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b1c:	480d      	ldr	r0, [pc, #52]	; (8002b54 <prvInitialiseTaskLists+0x64>)
 8002b1e:	f7ff fba7 	bl	8002270 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b22:	480d      	ldr	r0, [pc, #52]	; (8002b58 <prvInitialiseTaskLists+0x68>)
 8002b24:	f7ff fba4 	bl	8002270 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b28:	480c      	ldr	r0, [pc, #48]	; (8002b5c <prvInitialiseTaskLists+0x6c>)
 8002b2a:	f7ff fba1 	bl	8002270 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b2e:	480c      	ldr	r0, [pc, #48]	; (8002b60 <prvInitialiseTaskLists+0x70>)
 8002b30:	f7ff fb9e 	bl	8002270 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b34:	480b      	ldr	r0, [pc, #44]	; (8002b64 <prvInitialiseTaskLists+0x74>)
 8002b36:	f7ff fb9b 	bl	8002270 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <prvInitialiseTaskLists+0x78>)
 8002b3c:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <prvInitialiseTaskLists+0x64>)
 8002b3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <prvInitialiseTaskLists+0x7c>)
 8002b42:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <prvInitialiseTaskLists+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000034 	.word	0x20000034
 8002b54:	20000098 	.word	0x20000098
 8002b58:	200000ac 	.word	0x200000ac
 8002b5c:	200000c8 	.word	0x200000c8
 8002b60:	200000dc 	.word	0x200000dc
 8002b64:	200000f4 	.word	0x200000f4
 8002b68:	200000c0 	.word	0x200000c0
 8002b6c:	200000c4 	.word	0x200000c4

08002b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b76:	e019      	b.n	8002bac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002b78:	f000 fa04 	bl	8002f84 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <prvCheckTasksWaitingTermination+0x50>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fbc2 	bl	8002312 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <prvCheckTasksWaitingTermination+0x54>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <prvCheckTasksWaitingTermination+0x54>)
 8002b96:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <prvCheckTasksWaitingTermination+0x58>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <prvCheckTasksWaitingTermination+0x58>)
 8002ba0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ba2:	f000 fa1f 	bl	8002fe4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f810 	bl	8002bcc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <prvCheckTasksWaitingTermination+0x58>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e1      	bne.n	8002b78 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200000dc 	.word	0x200000dc
 8002bc4:	20000108 	.word	0x20000108
 8002bc8:	200000f0 	.word	0x200000f0

08002bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fb53 	bl	8003284 <vPortFree>
                vPortFree( pxTCB );
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fb50 	bl	8003284 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <prvResetNextTaskUnblockTime+0x30>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <prvResetNextTaskUnblockTime+0x34>)
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c02:	e005      	b.n	8002c10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <prvResetNextTaskUnblockTime+0x30>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <prvResetNextTaskUnblockTime+0x34>)
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	200000c0 	.word	0x200000c0
 8002c20:	20000128 	.word	0x20000128

08002c24 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3b04      	subs	r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c3c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b04      	subs	r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f023 0201 	bic.w	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3b04      	subs	r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <pxPortInitialiseStack+0x64>)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3b14      	subs	r3, #20
 8002c5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3b04      	subs	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f06f 0202 	mvn.w	r2, #2
 8002c72:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3b20      	subs	r3, #32
 8002c78:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	08002c8d 	.word	0x08002c8d

08002c8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <prvTaskExitError+0x54>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d00a      	beq.n	8002cb6 <prvTaskExitError+0x2a>
        __asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	60fb      	str	r3, [r7, #12]
    }
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <prvTaskExitError+0x28>
        __asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60bb      	str	r3, [r7, #8]
    }
 8002cc8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002cca:	bf00      	nop
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0fc      	beq.n	8002ccc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	20000010 	.word	0x20000010
	...

08002cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002cf0:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <pxCurrentTCBConst2>)
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	6808      	ldr	r0, [r1, #0]
 8002cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfa:	f380 8809 	msr	PSP, r0
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f380 8811 	msr	BASEPRI, r0
 8002d0a:	4770      	bx	lr
 8002d0c:	f3af 8000 	nop.w

08002d10 <pxCurrentTCBConst2>:
 8002d10:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop

08002d18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d18:	4808      	ldr	r0, [pc, #32]	; (8002d3c <prvPortStartFirstTask+0x24>)
 8002d1a:	6800      	ldr	r0, [r0, #0]
 8002d1c:	6800      	ldr	r0, [r0, #0]
 8002d1e:	f380 8808 	msr	MSP, r0
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f380 8814 	msr	CONTROL, r0
 8002d2a:	b662      	cpsie	i
 8002d2c:	b661      	cpsie	f
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	df00      	svc	0
 8002d38:	bf00      	nop
 8002d3a:	0000      	.short	0x0000
 8002d3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop

08002d44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <xPortStartScheduler+0x120>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a46      	ldr	r2, [pc, #280]	; (8002e68 <xPortStartScheduler+0x124>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d10a      	bne.n	8002d6a <xPortStartScheduler+0x26>
        __asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	613b      	str	r3, [r7, #16]
    }
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <xPortStartScheduler+0x120>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <xPortStartScheduler+0x128>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10a      	bne.n	8002d8a <xPortStartScheduler+0x46>
        __asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	60fb      	str	r3, [r7, #12]
    }
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d8a:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <xPortStartScheduler+0x12c>)
 8002d8c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <xPortStartScheduler+0x130>)
 8002db0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002db2:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <xPortStartScheduler+0x134>)
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002db8:	e009      	b.n	8002dce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <xPortStartScheduler+0x134>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <xPortStartScheduler+0x134>)
 8002dc2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b80      	cmp	r3, #128	; 0x80
 8002dd8:	d0ef      	beq.n	8002dba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <xPortStartScheduler+0x134>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d00a      	beq.n	8002dfc <xPortStartScheduler+0xb8>
        __asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	60bb      	str	r3, [r7, #8]
    }
 8002df8:	bf00      	nop
 8002dfa:	e7fe      	b.n	8002dfa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <xPortStartScheduler+0x134>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <xPortStartScheduler+0x134>)
 8002e04:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <xPortStartScheduler+0x134>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <xPortStartScheduler+0x134>)
 8002e10:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <xPortStartScheduler+0x138>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <xPortStartScheduler+0x138>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <xPortStartScheduler+0x138>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <xPortStartScheduler+0x138>)
 8002e2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e32:	f000 f963 	bl	80030fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <xPortStartScheduler+0x13c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e3c:	f000 f982 	bl	8003144 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <xPortStartScheduler+0x140>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <xPortStartScheduler+0x140>)
 8002e46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e4c:	f7ff ff64 	bl	8002d18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e50:	f7ff fdc8 	bl	80029e4 <vTaskSwitchContext>
    prvTaskExitError();
 8002e54:	f7ff ff1a 	bl	8002c8c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000ed00 	.word	0xe000ed00
 8002e68:	410fc271 	.word	0x410fc271
 8002e6c:	410fc270 	.word	0x410fc270
 8002e70:	e000e400 	.word	0xe000e400
 8002e74:	20000134 	.word	0x20000134
 8002e78:	20000138 	.word	0x20000138
 8002e7c:	e000ed20 	.word	0xe000ed20
 8002e80:	20000010 	.word	0x20000010
 8002e84:	e000ef34 	.word	0xe000ef34

08002e88 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <vInitPrioGroupValue+0xe4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a37      	ldr	r2, [pc, #220]	; (8002f70 <vInitPrioGroupValue+0xe8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10a      	bne.n	8002eae <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	613b      	str	r3, [r7, #16]
    }
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <vInitPrioGroupValue+0xe4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a30      	ldr	r2, [pc, #192]	; (8002f74 <vInitPrioGroupValue+0xec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10a      	bne.n	8002ece <vInitPrioGroupValue+0x46>
        __asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	60fb      	str	r3, [r7, #12]
    }
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ece:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <vInitPrioGroupValue+0xf0>)
 8002ed0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	22ff      	movs	r2, #255	; 0xff
 8002ede:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <vInitPrioGroupValue+0xf4>)
 8002ef4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002efc:	e009      	b.n	8002f12 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f06:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b80      	cmp	r3, #128	; 0x80
 8002f1c:	d0ef      	beq.n	8002efe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1c3 0307 	rsb	r3, r3, #7
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d00a      	beq.n	8002f40 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	60bb      	str	r3, [r7, #8]
    }
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f48:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f52:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <vInitPrioGroupValue+0xf8>)
 8002f54:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	410fc271 	.word	0x410fc271
 8002f74:	410fc270 	.word	0x410fc270
 8002f78:	e000e400 	.word	0xe000e400
 8002f7c:	20000134 	.word	0x20000134
 8002f80:	20000138 	.word	0x20000138

08002f84 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	607b      	str	r3, [r7, #4]
    }
 8002f9c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <vPortEnterCritical+0x58>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <vPortEnterCritical+0x58>)
 8002fa6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <vPortEnterCritical+0x58>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10f      	bne.n	8002fd0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <vPortEnterCritical+0x5c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	603b      	str	r3, [r7, #0]
    }
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <vPortEnterCritical+0x4a>
    }
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	20000010 	.word	0x20000010
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <vPortExitCritical+0x50>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <vPortExitCritical+0x24>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	607b      	str	r3, [r7, #4]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <vPortExitCritical+0x50>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3b01      	subs	r3, #1
 800300e:	4a09      	ldr	r2, [pc, #36]	; (8003034 <vPortExitCritical+0x50>)
 8003010:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <vPortExitCritical+0x50>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <vPortExitCritical+0x42>
 800301a:	2300      	movs	r3, #0
 800301c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003024:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000010 	.word	0x20000010
	...

08003040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003040:	f3ef 8009 	mrs	r0, PSP
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <pxCurrentTCBConst>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f01e 0f10 	tst.w	lr, #16
 8003050:	bf08      	it	eq
 8003052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305a:	6010      	str	r0, [r2, #0]
 800305c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003064:	f380 8811 	msr	BASEPRI, r0
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f7ff fcb8 	bl	80029e4 <vTaskSwitchContext>
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	f380 8811 	msr	BASEPRI, r0
 800307c:	bc09      	pop	{r0, r3}
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	6808      	ldr	r0, [r1, #0]
 8003082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003086:	f01e 0f10 	tst.w	lr, #16
 800308a:	bf08      	it	eq
 800308c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003090:	f380 8809 	msr	PSP, r0
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	f3af 8000 	nop.w

080030a0 <pxCurrentTCBConst>:
 80030a0:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop

080030a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
        __asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	607b      	str	r3, [r7, #4]
    }
 80030c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80030c2:	f001 fdc7 	bl	8004c54 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030c6:	f7ff fbd1 	bl	800286c <xTaskIncrementTick>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80030d0:	f001 fe1e 	bl	8004d10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <SysTick_Handler+0x50>)
 80030d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e001      	b.n	80030e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80030de:	f001 fdfb 	bl	8004cd8 <SEGGER_SYSVIEW_RecordExitISR>
 80030e2:	2300      	movs	r3, #0
 80030e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f383 8811 	msr	BASEPRI, r3
    }
 80030ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <vPortSetupTimerInterrupt+0x34>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <vPortSetupTimerInterrupt+0x38>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <vPortSetupTimerInterrupt+0x3c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <vPortSetupTimerInterrupt+0x40>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <vPortSetupTimerInterrupt+0x44>)
 800311a:	3b01      	subs	r3, #1
 800311c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <vPortSetupTimerInterrupt+0x34>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010
 8003134:	e000e018 	.word	0xe000e018
 8003138:	20000000 	.word	0x20000000
 800313c:	10624dd3 	.word	0x10624dd3
 8003140:	e000e014 	.word	0xe000e014

08003144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003154 <vPortEnableVFP+0x10>
 8003148:	6801      	ldr	r1, [r0, #0]
 800314a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800314e:	6001      	str	r1, [r0, #0]
 8003150:	4770      	bx	lr
 8003152:	0000      	.short	0x0000
 8003154:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop

0800315c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003162:	f3ef 8305 	mrs	r3, IPSR
 8003166:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	d914      	bls.n	8003198 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <vPortValidateInterruptPriority+0x70>)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <vPortValidateInterruptPriority+0x74>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	7afa      	ldrb	r2, [r7, #11]
 800317e:	429a      	cmp	r2, r3
 8003180:	d20a      	bcs.n	8003198 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	607b      	str	r3, [r7, #4]
    }
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <vPortValidateInterruptPriority+0x78>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <vPortValidateInterruptPriority+0x7c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d90a      	bls.n	80031be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	603b      	str	r3, [r7, #0]
    }
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <vPortValidateInterruptPriority+0x60>
    }
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e3f0 	.word	0xe000e3f0
 80031d0:	20000134 	.word	0x20000134
 80031d4:	e000ed0c 	.word	0xe000ed0c
 80031d8:	20000138 	.word	0x20000138

080031dc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00e      	beq.n	8003210 <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f023 0307 	bic.w	r3, r3, #7
 80031f8:	3308      	adds	r3, #8
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d205      	bcs.n	800320c <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f023 0307 	bic.w	r3, r3, #7
 8003206:	3308      	adds	r3, #8
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	e001      	b.n	8003210 <pvPortMalloc+0x34>
                } 
                else 
                {
                    xWantedSize = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 8003210:	f7ff fa6c 	bl	80026ec <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <pvPortMalloc+0x98>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800321c:	4b16      	ldr	r3, [pc, #88]	; (8003278 <pvPortMalloc+0x9c>)
 800321e:	f023 0307 	bic.w	r3, r3, #7
 8003222:	461a      	mov	r2, r3
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <pvPortMalloc+0x98>)
 8003226:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01a      	beq.n	8003264 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <pvPortMalloc+0xa0>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 8003236:	4a12      	ldr	r2, [pc, #72]	; (8003280 <pvPortMalloc+0xa4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d813      	bhi.n	8003264 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <pvPortMalloc+0xa0>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	441a      	add	r2, r3
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <pvPortMalloc+0xa0>)
 8003246:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003248:	429a      	cmp	r2, r3
 800324a:	d90b      	bls.n	8003264 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <pvPortMalloc+0x98>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <pvPortMalloc+0xa0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4413      	add	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <pvPortMalloc+0xa0>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	4a06      	ldr	r2, [pc, #24]	; (800327c <pvPortMalloc+0xa0>)
 8003262:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003264:	f7ff fa50 	bl	8002708 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20012d40 	.word	0x20012d40
 8003278:	20000144 	.word	0x20000144
 800327c:	20012d3c 	.word	0x20012d3c
 8003280:	00012bf7 	.word	0x00012bf7

08003284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <vPortFree+0x24>
        __asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	60fb      	str	r3, [r7, #12]
    }
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <vPortFree+0x22>
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80032b8:	4803      	ldr	r0, [pc, #12]	; (80032c8 <_cbSendSystemDesc+0x14>)
 80032ba:	f001 fc75 	bl	8004ba8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80032be:	4803      	ldr	r0, [pc, #12]	; (80032cc <_cbSendSystemDesc+0x18>)
 80032c0:	f001 fc72 	bl	8004ba8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	080052e4 	.word	0x080052e4
 80032cc:	08005324 	.word	0x08005324

080032d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80032de:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <SEGGER_SYSVIEW_Conf+0x28>)
 80032e0:	f001 f8e6 	bl	80044b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80032e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80032e8:	f001 f926 	bl	8004538 <SEGGER_SYSVIEW_SetRAMBase>
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000000 	.word	0x20000000
 80032f4:	080032b5 	.word	0x080032b5
 80032f8:	080053c4 	.word	0x080053c4

080032fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80032fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fe:	b085      	sub	sp, #20
 8003300:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	e033      	b.n	8003370 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003308:	491e      	ldr	r1, [pc, #120]	; (8003384 <_cbSendTaskList+0x88>)
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	491a      	ldr	r1, [pc, #104]	; (8003384 <_cbSendTaskList+0x88>)
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3304      	adds	r3, #4
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	4c16      	ldr	r4, [pc, #88]	; (8003384 <_cbSendTaskList+0x88>)
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4423      	add	r3, r4
 8003338:	3308      	adds	r3, #8
 800333a:	681c      	ldr	r4, [r3, #0]
 800333c:	4d11      	ldr	r5, [pc, #68]	; (8003384 <_cbSendTaskList+0x88>)
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	442b      	add	r3, r5
 800334a:	330c      	adds	r3, #12
 800334c:	681d      	ldr	r5, [r3, #0]
 800334e:	4e0d      	ldr	r6, [pc, #52]	; (8003384 <_cbSendTaskList+0x88>)
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4433      	add	r3, r6
 800335c:	3310      	adds	r3, #16
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	462b      	mov	r3, r5
 8003364:	4622      	mov	r2, r4
 8003366:	f000 f8b5 	bl	80034d4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3301      	adds	r3, #1
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <_cbSendTaskList+0x8c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	429a      	cmp	r2, r3
 8003378:	d3c6      	bcc.n	8003308 <_cbSendTaskList+0xc>
  }
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003384:	20012d44 	.word	0x20012d44
 8003388:	20012de4 	.word	0x20012de4

0800338c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800338c:	b5b0      	push	{r4, r5, r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003392:	f7ff fa59 	bl	8002848 <xTaskGetTickCountFromISR>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80033a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	f04f 0400 	mov.w	r4, #0
 80033ae:	f04f 0500 	mov.w	r5, #0
 80033b2:	015d      	lsls	r5, r3, #5
 80033b4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80033b8:	0154      	lsls	r4, r2, #5
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	1a12      	subs	r2, r2, r0
 80033c0:	eb63 0301 	sbc.w	r3, r3, r1
 80033c4:	f04f 0400 	mov.w	r4, #0
 80033c8:	f04f 0500 	mov.w	r5, #0
 80033cc:	009d      	lsls	r5, r3, #2
 80033ce:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80033d2:	0094      	lsls	r4, r2, #2
 80033d4:	4622      	mov	r2, r4
 80033d6:	462b      	mov	r3, r5
 80033d8:	1812      	adds	r2, r2, r0
 80033da:	eb41 0303 	adc.w	r3, r1, r3
 80033de:	f04f 0000 	mov.w	r0, #0
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	00d9      	lsls	r1, r3, #3
 80033e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ec:	00d0      	lsls	r0, r2, #3
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80033f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bdb0      	pop	{r4, r5, r7, pc}

08003404 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003412:	2205      	movs	r2, #5
 8003414:	492b      	ldr	r1, [pc, #172]	; (80034c4 <SYSVIEW_AddTask+0xc0>)
 8003416:	68b8      	ldr	r0, [r7, #8]
 8003418:	f001 fee8 	bl	80051ec <memcmp>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04b      	beq.n	80034ba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003422:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <SYSVIEW_AddTask+0xc4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b07      	cmp	r3, #7
 8003428:	d903      	bls.n	8003432 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800342a:	4828      	ldr	r0, [pc, #160]	; (80034cc <SYSVIEW_AddTask+0xc8>)
 800342c:	f001 fe5e 	bl	80050ec <SEGGER_SYSVIEW_Warn>
    return;
 8003430:	e044      	b.n	80034bc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003432:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <SYSVIEW_AddTask+0xc4>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4926      	ldr	r1, [pc, #152]	; (80034d0 <SYSVIEW_AddTask+0xcc>)
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <SYSVIEW_AddTask+0xc4>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4921      	ldr	r1, [pc, #132]	; (80034d0 <SYSVIEW_AddTask+0xcc>)
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3304      	adds	r3, #4
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <SYSVIEW_AddTask+0xc4>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	491b      	ldr	r1, [pc, #108]	; (80034d0 <SYSVIEW_AddTask+0xcc>)
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	3308      	adds	r3, #8
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <SYSVIEW_AddTask+0xc4>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4916      	ldr	r1, [pc, #88]	; (80034d0 <SYSVIEW_AddTask+0xcc>)
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	330c      	adds	r3, #12
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <SYSVIEW_AddTask+0xc4>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4910      	ldr	r1, [pc, #64]	; (80034d0 <SYSVIEW_AddTask+0xcc>)
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3310      	adds	r3, #16
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <SYSVIEW_AddTask+0xc4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3301      	adds	r3, #1
 80034a4:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <SYSVIEW_AddTask+0xc4>)
 80034a6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f80e 	bl	80034d4 <SYSVIEW_SendTaskInfo>
 80034b8:	e000      	b.n	80034bc <SYSVIEW_AddTask+0xb8>
    return;
 80034ba:	bf00      	nop

}
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	08005334 	.word	0x08005334
 80034c8:	20012de4 	.word	0x20012de4
 80034cc:	0800533c 	.word	0x0800533c
 80034d0:	20012d44 	.word	0x20012d44

080034d4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	2214      	movs	r2, #20
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 fe9a 	bl	8005224 <memset>
  TaskInfo.TaskID     = TaskID;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fa55 	bl	80049b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800350e:	bf00      	nop
 8003510:	3728      	adds	r7, #40	; 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <USART2_IRQHandler+0x80>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d011      	beq.n	8003552 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <USART2_IRQHandler+0x84>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 030b 	and.w	r3, r3, #11
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003540:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <USART2_IRQHandler+0x88>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d004      	beq.n	8003552 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <USART2_IRQHandler+0x88>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	79fa      	ldrb	r2, [r7, #7]
 800354e:	4610      	mov	r0, r2
 8003550:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01a      	beq.n	8003592 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <USART2_IRQHandler+0x8c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d015      	beq.n	8003590 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <USART2_IRQHandler+0x8c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	1dfa      	adds	r2, r7, #7
 800356a:	4610      	mov	r0, r2
 800356c:	4798      	blx	r3
 800356e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <USART2_IRQHandler+0x90>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <USART2_IRQHandler+0x90>)
 800357c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e006      	b.n	8003592 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <USART2_IRQHandler+0x80>)
 8003586:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003588:	79fa      	ldrb	r2, [r7, #7]
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <USART2_IRQHandler+0x84>)
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e000      	b.n	8003592 <USART2_IRQHandler+0x7a>
      return;
 8003590:	bf00      	nop
    }
  }
}
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40004400 	.word	0x40004400
 800359c:	40004404 	.word	0x40004404
 80035a0:	20012de8 	.word	0x20012de8
 80035a4:	20012dec 	.word	0x20012dec
 80035a8:	4000440c 	.word	0x4000440c

080035ac <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80035b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	4000440c 	.word	0x4000440c

080035cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <_DoInit+0x98>)
 80035d4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2203      	movs	r2, #3
 80035e0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <_DoInit+0x9c>)
 80035e6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a20      	ldr	r2, [pc, #128]	; (800366c <_DoInit+0xa0>)
 80035ec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <_DoInit+0x9c>)
 800360c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a17      	ldr	r2, [pc, #92]	; (8003670 <_DoInit+0xa4>)
 8003612:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2210      	movs	r2, #16
 8003618:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3307      	adds	r3, #7
 8003630:	4a10      	ldr	r2, [pc, #64]	; (8003674 <_DoInit+0xa8>)
 8003632:	6810      	ldr	r0, [r2, #0]
 8003634:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003636:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <_DoInit+0xac>)
 800363e:	6810      	ldr	r0, [r2, #0]
 8003640:	6018      	str	r0, [r3, #0]
 8003642:	8891      	ldrh	r1, [r2, #4]
 8003644:	7992      	ldrb	r2, [r2, #6]
 8003646:	8099      	strh	r1, [r3, #4]
 8003648:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800364a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003654:	f3bf 8f5f 	dmb	sy
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	20014368 	.word	0x20014368
 8003668:	0800538c 	.word	0x0800538c
 800366c:	20012df0 	.word	0x20012df0
 8003670:	200131f0 	.word	0x200131f0
 8003674:	08005398 	.word	0x08005398
 8003678:	0800539c 	.word	0x0800539c

0800367c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	; 0x30
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003688:	4b3e      	ldr	r3, [pc, #248]	; (8003784 <SEGGER_RTT_ReadNoLock+0x108>)
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <SEGGER_RTT_ReadNoLock+0x1e>
 8003696:	f7ff ff99 	bl	80035cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	3360      	adds	r3, #96	; 0x60
 80036a6:	4a37      	ldr	r2, [pc, #220]	; (8003784 <SEGGER_RTT_ReadNoLock+0x108>)
 80036a8:	4413      	add	r3, r2
 80036aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80036c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d92b      	bls.n	8003720 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4293      	cmp	r3, r2
 80036d8:	bf28      	it	cs
 80036da:	4613      	movcs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	4413      	add	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6939      	ldr	r1, [r7, #16]
 80036ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ee:	f001 fd8b 	bl	8005208 <memcpy>
    NumBytesRead += NumBytesRem;
 80036f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	4413      	add	r3, r2
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4413      	add	r3, r2
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800370a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4413      	add	r3, r2
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003718:	429a      	cmp	r2, r3
 800371a:	d101      	bne.n	8003720 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800371c:	2300      	movs	r3, #0
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4293      	cmp	r3, r2
 800372e:	bf28      	it	cs
 8003730:	4613      	movcs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d019      	beq.n	800376e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	4413      	add	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6939      	ldr	r1, [r7, #16]
 8003748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800374a:	f001 fd5d 	bl	8005208 <memcpy>
    NumBytesRead += NumBytesRem;
 800374e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4413      	add	r3, r2
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4413      	add	r3, r2
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	4413      	add	r3, r2
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003778:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800377c:	4618      	mov	r0, r3
 800377e:	3730      	adds	r7, #48	; 0x30
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20014368 	.word	0x20014368

08003788 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80037a4:	f7ff ff12 	bl	80035cc <_DoInit>
  SEGGER_RTT_LOCK();
 80037a8:	f3ef 8311 	mrs	r3, BASEPRI
 80037ac:	f04f 0120 	mov.w	r1, #32
 80037b0:	f381 8811 	msr	BASEPRI, r1
 80037b4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80037b6:	4b35      	ldr	r3, [pc, #212]	; (800388c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80037b8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	3304      	adds	r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3301      	adds	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	dbeb      	blt.n	80037be <SEGGER_RTT_AllocUpBuffer+0x36>
 80037e6:	e000      	b.n	80037ea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80037e8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	da3f      	bge.n	8003874 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80037f4:	6939      	ldr	r1, [r7, #16]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	440b      	add	r3, r1
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003808:	6939      	ldr	r1, [r7, #16]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	3304      	adds	r3, #4
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800381e:	6939      	ldr	r1, [r7, #16]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	440b      	add	r3, r1
 800382c:	3320      	adds	r3, #32
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003832:	6939      	ldr	r1, [r7, #16]
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	440b      	add	r3, r1
 8003840:	3328      	adds	r3, #40	; 0x28
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003846:	6939      	ldr	r1, [r7, #16]
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	3324      	adds	r3, #36	; 0x24
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	332c      	adds	r3, #44	; 0x2c
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800386e:	f3bf 8f5f 	dmb	sy
 8003872:	e002      	b.n	800387a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
 8003878:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003880:	69fb      	ldr	r3, [r7, #28]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20014368 	.word	0x20014368

08003890 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800389e:	4b21      	ldr	r3, [pc, #132]	; (8003924 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80038ac:	f7ff fe8e 	bl	80035cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80038b0:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80038b2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d82c      	bhi.n	8003914 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80038ba:	f3ef 8311 	mrs	r3, BASEPRI
 80038be:	f04f 0120 	mov.w	r1, #32
 80038c2:	f381 8811 	msr	BASEPRI, r1
 80038c6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	3360      	adds	r3, #96	; 0x60
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2200      	movs	r2, #0
 80038fc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003902:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003904:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
 8003912:	e002      	b.n	800391a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003914:	f04f 33ff 	mov.w	r3, #4294967295
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800391c:	4618      	mov	r0, r3
 800391e:	3728      	adds	r7, #40	; 0x28
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20014368 	.word	0x20014368

08003928 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00f      	beq.n	800395e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800393e:	e002      	b.n	8003946 <_EncodeStr+0x1e>
      Len++;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	3301      	adds	r3, #1
 8003944:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4413      	add	r3, r2
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f6      	bne.n	8003940 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d901      	bls.n	800395e <_EncodeStr+0x36>
      Len = Limit;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2bfe      	cmp	r3, #254	; 0xfe
 8003962:	d806      	bhi.n	8003972 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	60fa      	str	r2, [r7, #12]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e011      	b.n	8003996 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	60fa      	str	r2, [r7, #12]
 8003978:	22ff      	movs	r2, #255	; 0xff
 800397a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	60fa      	str	r2, [r7, #12]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	0a19      	lsrs	r1, r3, #8
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	60fa      	str	r2, [r7, #12]
 8003992:	b2ca      	uxtb	r2, r1
 8003994:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800399a:	e00a      	b.n	80039b2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	1c53      	adds	r3, r2, #1
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1c59      	adds	r1, r3, #1
 80039a6:	60f9      	str	r1, [r7, #12]
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	701a      	strb	r2, [r3, #0]
    n++;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	3301      	adds	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d3f0      	bcc.n	800399c <_EncodeStr+0x74>
  }
  return pPayload;
 80039ba:	68fb      	ldr	r3, [r7, #12]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80039e6:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <_HandleIncomingPacket+0xe0>)
 80039e8:	7e1b      	ldrb	r3, [r3, #24]
 80039ea:	4618      	mov	r0, r3
 80039ec:	1cfb      	adds	r3, r7, #3
 80039ee:	2201      	movs	r2, #1
 80039f0:	4619      	mov	r1, r3
 80039f2:	f7ff fe43 	bl	800367c <SEGGER_RTT_ReadNoLock>
 80039f6:	4603      	mov	r3, r0
 80039f8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	dd54      	ble.n	8003aaa <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d032      	beq.n	8003a6c <_HandleIncomingPacket+0x8c>
 8003a06:	2b80      	cmp	r3, #128	; 0x80
 8003a08:	dc42      	bgt.n	8003a90 <_HandleIncomingPacket+0xb0>
 8003a0a:	2b07      	cmp	r3, #7
 8003a0c:	dc16      	bgt.n	8003a3c <_HandleIncomingPacket+0x5c>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	dd3e      	ble.n	8003a90 <_HandleIncomingPacket+0xb0>
 8003a12:	3b01      	subs	r3, #1
 8003a14:	2b06      	cmp	r3, #6
 8003a16:	d83b      	bhi.n	8003a90 <_HandleIncomingPacket+0xb0>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <_HandleIncomingPacket+0x40>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a43 	.word	0x08003a43
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a4f 	.word	0x08003a4f
 8003a2c:	08003a55 	.word	0x08003a55
 8003a30:	08003a5b 	.word	0x08003a5b
 8003a34:	08003a61 	.word	0x08003a61
 8003a38:	08003a67 	.word	0x08003a67
 8003a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a3e:	d036      	beq.n	8003aae <_HandleIncomingPacket+0xce>
 8003a40:	e026      	b.n	8003a90 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003a42:	f000 fe3d 	bl	80046c0 <SEGGER_SYSVIEW_Start>
      break;
 8003a46:	e037      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003a48:	f000 fef6 	bl	8004838 <SEGGER_SYSVIEW_Stop>
      break;
 8003a4c:	e034      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003a4e:	f001 f8cf 	bl	8004bf0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003a52:	e031      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003a54:	f001 f894 	bl	8004b80 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003a58:	e02e      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003a5a:	f000 ff13 	bl	8004884 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003a5e:	e02b      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003a60:	f001 faf2 	bl	8005048 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003a64:	e028      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003a66:	f001 fad1 	bl	800500c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003a6a:	e025      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a6c:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <_HandleIncomingPacket+0xe0>)
 8003a6e:	7e1b      	ldrb	r3, [r3, #24]
 8003a70:	4618      	mov	r0, r3
 8003a72:	1cfb      	adds	r3, r7, #3
 8003a74:	2201      	movs	r2, #1
 8003a76:	4619      	mov	r1, r3
 8003a78:	f7ff fe00 	bl	800367c <SEGGER_RTT_ReadNoLock>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	dd15      	ble.n	8003ab2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 fa3f 	bl	8004f0c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003a8e:	e010      	b.n	8003ab2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	b25b      	sxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	da0e      	bge.n	8003ab6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <_HandleIncomingPacket+0xe0>)
 8003a9a:	7e1b      	ldrb	r3, [r3, #24]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	1cfb      	adds	r3, r7, #3
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f7ff fdea 	bl	800367c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003aa8:	e005      	b.n	8003ab6 <_HandleIncomingPacket+0xd6>
    }
  }
 8003aaa:	bf00      	nop
 8003aac:	e004      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <_HandleIncomingPacket+0xd8>
      break;
 8003ab6:	bf00      	nop
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20014208 	.word	0x20014208

08003ac4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	; 0x30
 8003ac8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003aca:	2301      	movs	r3, #1
 8003acc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <_TrySendOverflowPacket+0xe0>)
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	e00b      	b.n	8003af8 <_TrySendOverflowPacket+0x34>
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	09db      	lsrs	r3, r3, #7
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	2b7f      	cmp	r3, #127	; 0x7f
 8003afc:	d8f0      	bhi.n	8003ae0 <_TrySendOverflowPacket+0x1c>
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <_TrySendOverflowPacket+0xe4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <_TrySendOverflowPacket+0xe0>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	e00b      	b.n	8003b40 <_TrySendOverflowPacket+0x7c>
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	6279      	str	r1, [r7, #36]	; 0x24
 8003b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	09db      	lsrs	r3, r3, #7
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2b7f      	cmp	r3, #127	; 0x7f
 8003b44:	d8f0      	bhi.n	8003b28 <_TrySendOverflowPacket+0x64>
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <_TrySendOverflowPacket+0xe0>)
 8003b58:	785b      	ldrb	r3, [r3, #1]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	f7fc fb52 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003b70:	f7ff fd1c 	bl	80035ac <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <_TrySendOverflowPacket+0xe0>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <_TrySendOverflowPacket+0xe0>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <_TrySendOverflowPacket+0xe0>)
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	e004      	b.n	8003b98 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <_TrySendOverflowPacket+0xe0>)
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a03      	ldr	r2, [pc, #12]	; (8003ba4 <_TrySendOverflowPacket+0xe0>)
 8003b96:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003b98:	693b      	ldr	r3, [r7, #16]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3730      	adds	r7, #48	; 0x30
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20014208 	.word	0x20014208
 8003ba8:	e0001004 	.word	0xe0001004

08003bac <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	; 0x28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003bb8:	4b6d      	ldr	r3, [pc, #436]	; (8003d70 <_SendPacket+0x1c4>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d010      	beq.n	8003be2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003bc0:	4b6b      	ldr	r3, [pc, #428]	; (8003d70 <_SendPacket+0x1c4>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80a5 	beq.w	8003d14 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003bca:	4b69      	ldr	r3, [pc, #420]	; (8003d70 <_SendPacket+0x1c4>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d109      	bne.n	8003be6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003bd2:	f7ff ff77 	bl	8003ac4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003bd6:	4b66      	ldr	r3, [pc, #408]	; (8003d70 <_SendPacket+0x1c4>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	f040 809c 	bne.w	8003d18 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003be0:	e001      	b.n	8003be6 <_SendPacket+0x3a>
    goto Send;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <_SendPacket+0x3c>
Send:
 8003be6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b1f      	cmp	r3, #31
 8003bec:	d809      	bhi.n	8003c02 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003bee:	4b60      	ldr	r3, [pc, #384]	; (8003d70 <_SendPacket+0x1c4>)
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f040 808d 	bne.w	8003d1c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b17      	cmp	r3, #23
 8003c06:	d807      	bhi.n	8003c18 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e03d      	b.n	8003c94 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b7f      	cmp	r3, #127	; 0x7f
 8003c24:	d912      	bls.n	8003c4c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	09da      	lsrs	r2, r3, #7
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	60fa      	str	r2, [r7, #12]
 8003c40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e006      	b.n	8003c5a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c5e:	d912      	bls.n	8003c86 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	09da      	lsrs	r2, r3, #7
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	3a01      	subs	r2, #1
 8003c78:	60fa      	str	r2, [r7, #12]
 8003c7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	e006      	b.n	8003c94 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003c94:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <_SendPacket+0x1c8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003c9a:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <_SendPacket+0x1c4>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	e00b      	b.n	8003cc6 <_SendPacket+0x11a>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1c59      	adds	r1, r3, #1
 8003cb6:	6279      	str	r1, [r7, #36]	; 0x24
 8003cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	09db      	lsrs	r3, r3, #7
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003cca:	d8f0      	bhi.n	8003cae <_SendPacket+0x102>
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003cdc:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <_SendPacket+0x1c4>)
 8003cde:	785b      	ldrb	r3, [r3, #1]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	f7fc fa90 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003cf4:	f7ff fc5a 	bl	80035ac <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <_SendPacket+0x1c4>)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	60d3      	str	r3, [r2, #12]
 8003d04:	e00b      	b.n	8003d1e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003d06:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <_SendPacket+0x1c4>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <_SendPacket+0x1c4>)
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e004      	b.n	8003d1e <_SendPacket+0x172>
    goto SendDone;
 8003d14:	bf00      	nop
 8003d16:	e002      	b.n	8003d1e <_SendPacket+0x172>
      goto SendDone;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <_SendPacket+0x172>
      goto SendDone;
 8003d1c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <_SendPacket+0x1c4>)
 8003d20:	7e1b      	ldrb	r3, [r3, #24]
 8003d22:	4619      	mov	r1, r3
 8003d24:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <_SendPacket+0x1cc>)
 8003d26:	460b      	mov	r3, r1
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	440b      	add	r3, r1
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	4413      	add	r3, r2
 8003d30:	336c      	adds	r3, #108	; 0x6c
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <_SendPacket+0x1c4>)
 8003d36:	7e1b      	ldrb	r3, [r3, #24]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	490f      	ldr	r1, [pc, #60]	; (8003d78 <_SendPacket+0x1cc>)
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4403      	add	r3, r0
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	3370      	adds	r3, #112	; 0x70
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d00b      	beq.n	8003d66 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <_SendPacket+0x1c4>)
 8003d50:	789b      	ldrb	r3, [r3, #2]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <_SendPacket+0x1c4>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003d5c:	f7ff fe40 	bl	80039e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003d60:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <_SendPacket+0x1c4>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003d66:	bf00      	nop
 8003d68:	3728      	adds	r7, #40	; 0x28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20014208 	.word	0x20014208
 8003d74:	e0001004 	.word	0xe0001004
 8003d78:	20014368 	.word	0x20014368

08003d7c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	3301      	adds	r3, #1
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d80a      	bhi.n	8003dac <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6051      	str	r1, [r2, #4]
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d15a      	bne.n	8003e6a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	e00b      	b.n	8003dee <_StoreChar+0x72>
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1c59      	adds	r1, r3, #1
 8003dde:	6279      	str	r1, [r7, #36]	; 0x24
 8003de0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	09db      	lsrs	r3, r3, #7
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	2b7f      	cmp	r3, #127	; 0x7f
 8003df2:	d8f0      	bhi.n	8003dd6 <_StoreChar+0x5a>
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	627a      	str	r2, [r7, #36]	; 0x24
 8003dfa:	6a3a      	ldr	r2, [r7, #32]
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	e00b      	b.n	8003e26 <_StoreChar+0xaa>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	1c59      	adds	r1, r3, #1
 8003e16:	61f9      	str	r1, [r7, #28]
 8003e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	09db      	lsrs	r3, r3, #7
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b7f      	cmp	r3, #127	; 0x7f
 8003e2a:	d8f0      	bhi.n	8003e0e <_StoreChar+0x92>
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	61fa      	str	r2, [r7, #28]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	221a      	movs	r2, #26
 8003e42:	6939      	ldr	r1, [r7, #16]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff feb1 	bl	8003bac <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fdba 	bl	80039c8 <_PreparePacket>
 8003e54:	4602      	mov	r2, r0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	3728      	adds	r7, #40	; 0x28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003e86:	2301      	movs	r3, #1
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003e8e:	e007      	b.n	8003ea0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	623b      	str	r3, [r7, #32]
    Width++;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d2f3      	bcs.n	8003e90 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d901      	bls.n	8003eb4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d11f      	bne.n	8003efe <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01c      	beq.n	8003efe <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <_PrintUnsigned+0x66>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_PrintUnsigned+0x66>
        c = '0';
 8003ed4:	2330      	movs	r3, #48	; 0x30
 8003ed6:	76fb      	strb	r3, [r7, #27]
 8003ed8:	e001      	b.n	8003ede <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8003eda:	2320      	movs	r3, #32
 8003edc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ede:	e007      	b.n	8003ef0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8003ee6:	7efb      	ldrb	r3, [r7, #27]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff ff46 	bl	8003d7c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <_PrintUnsigned+0x8a>
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3f0      	bcc.n	8003ee0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d903      	bls.n	8003f0c <_PrintUnsigned+0x98>
      NumDigits--;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	e009      	b.n	8003f20 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d200      	bcs.n	8003f20 <_PrintUnsigned+0xac>
        break;
 8003f1e:	e005      	b.n	8003f2c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003f2a:	e7e8      	b.n	8003efe <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003f44:	4a15      	ldr	r2, [pc, #84]	; (8003f9c <_PrintUnsigned+0x128>)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4413      	add	r3, r2
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff ff14 	bl	8003d7c <_StoreChar>
    Digit /= Base;
 8003f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d011      	beq.n	8003f92 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f74:	e006      	b.n	8003f84 <_PrintUnsigned+0x110>
        FieldWidth--;
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003f7c:	2120      	movs	r1, #32
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff fefc 	bl	8003d7c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <_PrintUnsigned+0x11e>
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d3f1      	bcc.n	8003f76 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003f92:	bf00      	nop
 8003f94:	3728      	adds	r7, #40	; 0x28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	080053d8 	.word	0x080053d8

08003fa0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bfb8      	it	lt
 8003fb4:	425b      	neglt	r3, r3
 8003fb6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003fbc:	e007      	b.n	8003fce <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fc6:	613b      	str	r3, [r7, #16]
    Width++;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	daf3      	bge.n	8003fbe <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d901      	bls.n	8003fe2 <_PrintInt+0x42>
    Width = NumDigits;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <_PrintInt+0x5e>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	db04      	blt.n	8003ff8 <_PrintInt+0x58>
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <_PrintInt+0x5e>
    FieldWidth--;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <_PrintInt+0x6e>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <_PrintInt+0x9c>
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d111      	bne.n	800403c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00e      	beq.n	800403c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800401e:	e006      	b.n	800402e <_PrintInt+0x8e>
        FieldWidth--;
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	3b01      	subs	r3, #1
 8004024:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004026:	2120      	movs	r1, #32
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff fea7 	bl	8003d7c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <_PrintInt+0x9c>
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	429a      	cmp	r2, r3
 800403a:	d3f1      	bcc.n	8004020 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	da07      	bge.n	8004052 <_PrintInt+0xb2>
    v = -v;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	425b      	negs	r3, r3
 8004046:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004048:	212d      	movs	r1, #45	; 0x2d
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f7ff fe96 	bl	8003d7c <_StoreChar>
 8004050:	e008      	b.n	8004064 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800405c:	212b      	movs	r1, #43	; 0x2b
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff fe8c 	bl	8003d7c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d019      	beq.n	80040a2 <_PrintInt+0x102>
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d114      	bne.n	80040a2 <_PrintInt+0x102>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d111      	bne.n	80040a2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004084:	e006      	b.n	8004094 <_PrintInt+0xf4>
        FieldWidth--;
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	3b01      	subs	r3, #1
 800408a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800408c:	2130      	movs	r1, #48	; 0x30
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff fe74 	bl	8003d7c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <_PrintInt+0x102>
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3f1      	bcc.n	8004086 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fedf 	bl	8003e74 <_PrintUnsigned>
}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b098      	sub	sp, #96	; 0x60
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80040cc:	f3ef 8311 	mrs	r3, BASEPRI
 80040d0:	f04f 0120 	mov.w	r1, #32
 80040d4:	f381 8811 	msr	BASEPRI, r1
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
 80040da:	48b7      	ldr	r0, [pc, #732]	; (80043b8 <_VPrintTarget+0x2f8>)
 80040dc:	f7ff fc74 	bl	80039c8 <_PreparePacket>
 80040e0:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80040e2:	4bb5      	ldr	r3, [pc, #724]	; (80043b8 <_VPrintTarget+0x2f8>)
 80040e4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004106:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 8183 	beq.w	8004416 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004114:	2b25      	cmp	r3, #37	; 0x25
 8004116:	f040 8170 	bne.w	80043fa <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800411a:	2300      	movs	r3, #0
 800411c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800412a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800412e:	3b23      	subs	r3, #35	; 0x23
 8004130:	2b0d      	cmp	r3, #13
 8004132:	d83f      	bhi.n	80041b4 <_VPrintTarget+0xf4>
 8004134:	a201      	add	r2, pc, #4	; (adr r2, 800413c <_VPrintTarget+0x7c>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	080041a5 	.word	0x080041a5
 8004140:	080041b5 	.word	0x080041b5
 8004144:	080041b5 	.word	0x080041b5
 8004148:	080041b5 	.word	0x080041b5
 800414c:	080041b5 	.word	0x080041b5
 8004150:	080041b5 	.word	0x080041b5
 8004154:	080041b5 	.word	0x080041b5
 8004158:	080041b5 	.word	0x080041b5
 800415c:	08004195 	.word	0x08004195
 8004160:	080041b5 	.word	0x080041b5
 8004164:	08004175 	.word	0x08004175
 8004168:	080041b5 	.word	0x080041b5
 800416c:	080041b5 	.word	0x080041b5
 8004170:	08004185 	.word	0x08004185
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	64bb      	str	r3, [r7, #72]	; 0x48
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e01a      	b.n	80041ba <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	64bb      	str	r3, [r7, #72]	; 0x48
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e012      	b.n	80041ba <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	64bb      	str	r3, [r7, #72]	; 0x48
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e00a      	b.n	80041ba <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80041a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a6:	f043 0308 	orr.w	r3, r3, #8
 80041aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3301      	adds	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e002      	b.n	80041ba <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80041b4:	2300      	movs	r3, #0
 80041b6:	653b      	str	r3, [r7, #80]	; 0x50
 80041b8:	bf00      	nop
        }
      } while (v);
 80041ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1b0      	bne.n	8004122 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80041c0:	2300      	movs	r3, #0
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80041cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041d0:	2b2f      	cmp	r3, #47	; 0x2f
 80041d2:	d912      	bls.n	80041fa <_VPrintTarget+0x13a>
 80041d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041d8:	2b39      	cmp	r3, #57	; 0x39
 80041da:	d80e      	bhi.n	80041fa <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3301      	adds	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80041e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	461a      	mov	r2, r3
 80041ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041f2:	4413      	add	r3, r2
 80041f4:	3b30      	subs	r3, #48	; 0x30
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80041f8:	e7e4      	b.n	80041c4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80041fa:	2300      	movs	r3, #0
 80041fc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800420a:	2b2e      	cmp	r3, #46	; 0x2e
 800420c:	d11d      	bne.n	800424a <_VPrintTarget+0x18a>
        sFormat++;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3301      	adds	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800421c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004220:	2b2f      	cmp	r3, #47	; 0x2f
 8004222:	d912      	bls.n	800424a <_VPrintTarget+0x18a>
 8004224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004228:	2b39      	cmp	r3, #57	; 0x39
 800422a:	d80e      	bhi.n	800424a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004232:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	461a      	mov	r2, r3
 800423e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004242:	4413      	add	r3, r2
 8004244:	3b30      	subs	r3, #48	; 0x30
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004248:	e7e4      	b.n	8004214 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004252:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004256:	2b6c      	cmp	r3, #108	; 0x6c
 8004258:	d003      	beq.n	8004262 <_VPrintTarget+0x1a2>
 800425a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800425e:	2b68      	cmp	r3, #104	; 0x68
 8004260:	d107      	bne.n	8004272 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004270:	e7ef      	b.n	8004252 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004272:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004276:	2b25      	cmp	r3, #37	; 0x25
 8004278:	f000 80b3 	beq.w	80043e2 <_VPrintTarget+0x322>
 800427c:	2b25      	cmp	r3, #37	; 0x25
 800427e:	f2c0 80b7 	blt.w	80043f0 <_VPrintTarget+0x330>
 8004282:	2b78      	cmp	r3, #120	; 0x78
 8004284:	f300 80b4 	bgt.w	80043f0 <_VPrintTarget+0x330>
 8004288:	2b58      	cmp	r3, #88	; 0x58
 800428a:	f2c0 80b1 	blt.w	80043f0 <_VPrintTarget+0x330>
 800428e:	3b58      	subs	r3, #88	; 0x58
 8004290:	2b20      	cmp	r3, #32
 8004292:	f200 80ad 	bhi.w	80043f0 <_VPrintTarget+0x330>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <_VPrintTarget+0x1dc>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	08004393 	.word	0x08004393
 80042a0:	080043f1 	.word	0x080043f1
 80042a4:	080043f1 	.word	0x080043f1
 80042a8:	080043f1 	.word	0x080043f1
 80042ac:	080043f1 	.word	0x080043f1
 80042b0:	080043f1 	.word	0x080043f1
 80042b4:	080043f1 	.word	0x080043f1
 80042b8:	080043f1 	.word	0x080043f1
 80042bc:	080043f1 	.word	0x080043f1
 80042c0:	080043f1 	.word	0x080043f1
 80042c4:	080043f1 	.word	0x080043f1
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004347 	.word	0x08004347
 80042d0:	080043f1 	.word	0x080043f1
 80042d4:	080043f1 	.word	0x080043f1
 80042d8:	080043f1 	.word	0x080043f1
 80042dc:	080043f1 	.word	0x080043f1
 80042e0:	080043f1 	.word	0x080043f1
 80042e4:	080043f1 	.word	0x080043f1
 80042e8:	080043f1 	.word	0x080043f1
 80042ec:	080043f1 	.word	0x080043f1
 80042f0:	080043f1 	.word	0x080043f1
 80042f4:	080043f1 	.word	0x080043f1
 80042f8:	080043f1 	.word	0x080043f1
 80042fc:	080043bd 	.word	0x080043bd
 8004300:	080043f1 	.word	0x080043f1
 8004304:	080043f1 	.word	0x080043f1
 8004308:	080043f1 	.word	0x080043f1
 800430c:	080043f1 	.word	0x080043f1
 8004310:	0800436d 	.word	0x0800436d
 8004314:	080043f1 	.word	0x080043f1
 8004318:	080043f1 	.word	0x080043f1
 800431c:	08004393 	.word	0x08004393
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1d19      	adds	r1, r3, #4
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6011      	str	r1, [r2, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800432e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004334:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004338:	f107 0314 	add.w	r3, r7, #20
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fd1c 	bl	8003d7c <_StoreChar>
        break;
 8004344:	e055      	b.n	80043f2 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	1d19      	adds	r1, r3, #4
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6011      	str	r1, [r2, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004354:	f107 0014 	add.w	r0, r7, #20
 8004358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004362:	220a      	movs	r2, #10
 8004364:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004366:	f7ff fe1b 	bl	8003fa0 <_PrintInt>
        break;
 800436a:	e042      	b.n	80043f2 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	1d19      	adds	r1, r3, #4
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6011      	str	r1, [r2, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800437a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800437c:	f107 0014 	add.w	r0, r7, #20
 8004380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438a:	220a      	movs	r2, #10
 800438c:	f7ff fd72 	bl	8003e74 <_PrintUnsigned>
        break;
 8004390:	e02f      	b.n	80043f2 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1d19      	adds	r1, r3, #4
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6011      	str	r1, [r2, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80043a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043a2:	f107 0014 	add.w	r0, r7, #20
 80043a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b0:	2210      	movs	r2, #16
 80043b2:	f7ff fd5f 	bl	8003e74 <_PrintUnsigned>
        break;
 80043b6:	e01c      	b.n	80043f2 <_VPrintTarget+0x332>
 80043b8:	20014238 	.word	0x20014238
      case 'p':
        v = va_arg(*pParamList, int);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1d19      	adds	r1, r3, #4
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80043ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043cc:	f107 0014 	add.w	r0, r7, #20
 80043d0:	2300      	movs	r3, #0
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	2308      	movs	r3, #8
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2308      	movs	r3, #8
 80043da:	2210      	movs	r2, #16
 80043dc:	f7ff fd4a 	bl	8003e74 <_PrintUnsigned>
        break;
 80043e0:	e007      	b.n	80043f2 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80043e2:	f107 0314 	add.w	r3, r7, #20
 80043e6:	2125      	movs	r1, #37	; 0x25
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fcc7 	bl	8003d7c <_StoreChar>
        break;
 80043ee:	e000      	b.n	80043f2 <_VPrintTarget+0x332>
      default:
        break;
 80043f0:	bf00      	nop
      }
      sFormat++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3301      	adds	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e007      	b.n	800440a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80043fa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80043fe:	f107 0314 	add.w	r3, r7, #20
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fcb9 	bl	8003d7c <_StoreChar>
    }
  } while (*sFormat);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f47f ae72 	bne.w	80040f8 <_VPrintTarget+0x38>
 8004414:	e000      	b.n	8004418 <_VPrintTarget+0x358>
      break;
 8004416:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d041      	beq.n	80044a2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	643b      	str	r3, [r7, #64]	; 0x40
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800442e:	e00b      	b.n	8004448 <_VPrintTarget+0x388>
 8004430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004432:	b2da      	uxtb	r2, r3
 8004434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004436:	1c59      	adds	r1, r3, #1
 8004438:	6439      	str	r1, [r7, #64]	; 0x40
 800443a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004444:	09db      	lsrs	r3, r3, #7
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444a:	2b7f      	cmp	r3, #127	; 0x7f
 800444c:	d8f0      	bhi.n	8004430 <_VPrintTarget+0x370>
 800444e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	643a      	str	r2, [r7, #64]	; 0x40
 8004454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
 8004462:	2300      	movs	r3, #0
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
 8004466:	e00b      	b.n	8004480 <_VPrintTarget+0x3c0>
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	b2da      	uxtb	r2, r3
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	1c59      	adds	r1, r3, #1
 8004470:	63b9      	str	r1, [r7, #56]	; 0x38
 8004472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447c:	09db      	lsrs	r3, r3, #7
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
 8004480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004482:	2b7f      	cmp	r3, #127	; 0x7f
 8004484:	d8f0      	bhi.n	8004468 <_VPrintTarget+0x3a8>
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	63ba      	str	r2, [r7, #56]	; 0x38
 800448c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	221a      	movs	r2, #26
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fb85 	bl	8003bac <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80044a8:	bf00      	nop
 80044aa:	3758      	adds	r7, #88	; 0x58
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044be:	2300      	movs	r3, #0
 80044c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044c4:	4917      	ldr	r1, [pc, #92]	; (8004524 <SEGGER_SYSVIEW_Init+0x74>)
 80044c6:	4818      	ldr	r0, [pc, #96]	; (8004528 <SEGGER_SYSVIEW_Init+0x78>)
 80044c8:	f7ff f95e 	bl	8003788 <SEGGER_RTT_AllocUpBuffer>
 80044cc:	4603      	mov	r3, r0
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	4b16      	ldr	r3, [pc, #88]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 80044d2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80044d4:	4b15      	ldr	r3, [pc, #84]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 80044d6:	785a      	ldrb	r2, [r3, #1]
 80044d8:	4b14      	ldr	r3, [pc, #80]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 80044da:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80044dc:	4b13      	ldr	r3, [pc, #76]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 80044de:	7e1b      	ldrb	r3, [r3, #24]
 80044e0:	4618      	mov	r0, r3
 80044e2:	2300      	movs	r3, #0
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2308      	movs	r3, #8
 80044e8:	4a11      	ldr	r2, [pc, #68]	; (8004530 <SEGGER_SYSVIEW_Init+0x80>)
 80044ea:	490f      	ldr	r1, [pc, #60]	; (8004528 <SEGGER_SYSVIEW_Init+0x78>)
 80044ec:	f7ff f9d0 	bl	8003890 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80044f0:	4b0e      	ldr	r3, [pc, #56]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <SEGGER_SYSVIEW_Init+0x84>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a0c      	ldr	r2, [pc, #48]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 80044fc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80044fe:	4a0b      	ldr	r2, [pc, #44]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004504:	4a09      	ldr	r2, [pc, #36]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004510:	4a06      	ldr	r2, [pc, #24]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <SEGGER_SYSVIEW_Init+0x7c>)
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20013200 	.word	0x20013200
 8004528:	080053a4 	.word	0x080053a4
 800452c:	20014208 	.word	0x20014208
 8004530:	20014200 	.word	0x20014200
 8004534:	e0001004 	.word	0xe0001004

08004538 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004540:	4a04      	ldr	r2, [pc, #16]	; (8004554 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6113      	str	r3, [r2, #16]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20014208 	.word	0x20014208

08004558 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004560:	f3ef 8311 	mrs	r3, BASEPRI
 8004564:	f04f 0120 	mov.w	r1, #32
 8004568:	f381 8811 	msr	BASEPRI, r1
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	4808      	ldr	r0, [pc, #32]	; (8004590 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004570:	f7ff fa2a 	bl	80039c8 <_PreparePacket>
 8004574:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	68b8      	ldr	r0, [r7, #8]
 800457c:	f7ff fb16 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f383 8811 	msr	BASEPRI, r3
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20014238 	.word	0x20014238

08004594 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800459e:	f3ef 8311 	mrs	r3, BASEPRI
 80045a2:	f04f 0120 	mov.w	r1, #32
 80045a6:	f381 8811 	msr	BASEPRI, r1
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	4816      	ldr	r0, [pc, #88]	; (8004608 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80045ae:	f7ff fa0b 	bl	80039c8 <_PreparePacket>
 80045b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e00b      	b.n	80045da <SEGGER_SYSVIEW_RecordU32+0x46>
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	1c59      	adds	r1, r3, #1
 80045ca:	61f9      	str	r1, [r7, #28]
 80045cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	09db      	lsrs	r3, r3, #7
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b7f      	cmp	r3, #127	; 0x7f
 80045de:	d8f0      	bhi.n	80045c2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	61fa      	str	r2, [r7, #28]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68f9      	ldr	r1, [r7, #12]
 80045f4:	6938      	ldr	r0, [r7, #16]
 80045f6:	f7ff fad9 	bl	8003bac <_SendPacket>
  RECORD_END();
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f383 8811 	msr	BASEPRI, r3
}
 8004600:	bf00      	nop
 8004602:	3720      	adds	r7, #32
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20014238 	.word	0x20014238

0800460c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800460c:	b580      	push	{r7, lr}
 800460e:	b08c      	sub	sp, #48	; 0x30
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004618:	f3ef 8311 	mrs	r3, BASEPRI
 800461c:	f04f 0120 	mov.w	r1, #32
 8004620:	f381 8811 	msr	BASEPRI, r1
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	4825      	ldr	r0, [pc, #148]	; (80046bc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004628:	f7ff f9ce 	bl	80039c8 <_PreparePacket>
 800462c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
 800463a:	e00b      	b.n	8004654 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	b2da      	uxtb	r2, r3
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	1c59      	adds	r1, r3, #1
 8004644:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	09db      	lsrs	r3, r3, #7
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	2b7f      	cmp	r3, #127	; 0x7f
 8004658:	d8f0      	bhi.n	800463c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	e00b      	b.n	800468c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	1c59      	adds	r1, r3, #1
 800467c:	6279      	str	r1, [r7, #36]	; 0x24
 800467e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	09db      	lsrs	r3, r3, #7
 800468a:	623b      	str	r3, [r7, #32]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	2b7f      	cmp	r3, #127	; 0x7f
 8004690:	d8f0      	bhi.n	8004674 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	627a      	str	r2, [r7, #36]	; 0x24
 8004698:	6a3a      	ldr	r2, [r7, #32]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	6979      	ldr	r1, [r7, #20]
 80046a6:	69b8      	ldr	r0, [r7, #24]
 80046a8:	f7ff fa80 	bl	8003bac <_SendPacket>
  RECORD_END();
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f383 8811 	msr	BASEPRI, r3
}
 80046b2:	bf00      	nop
 80046b4:	3730      	adds	r7, #48	; 0x30
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20014238 	.word	0x20014238

080046c0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08c      	sub	sp, #48	; 0x30
 80046c4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80046c6:	4b59      	ldr	r3, [pc, #356]	; (800482c <SEGGER_SYSVIEW_Start+0x16c>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80046cc:	f3ef 8311 	mrs	r3, BASEPRI
 80046d0:	f04f 0120 	mov.w	r1, #32
 80046d4:	f381 8811 	msr	BASEPRI, r1
 80046d8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80046da:	4b54      	ldr	r3, [pc, #336]	; (800482c <SEGGER_SYSVIEW_Start+0x16c>)
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	220a      	movs	r2, #10
 80046e0:	4953      	ldr	r1, [pc, #332]	; (8004830 <SEGGER_SYSVIEW_Start+0x170>)
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb fd94 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80046ee:	f7fe ff5d 	bl	80035ac <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80046f2:	200a      	movs	r0, #10
 80046f4:	f7ff ff30 	bl	8004558 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80046f8:	f3ef 8311 	mrs	r3, BASEPRI
 80046fc:	f04f 0120 	mov.w	r1, #32
 8004700:	f381 8811 	msr	BASEPRI, r1
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	484b      	ldr	r0, [pc, #300]	; (8004834 <SEGGER_SYSVIEW_Start+0x174>)
 8004708:	f7ff f95e 	bl	80039c8 <_PreparePacket>
 800470c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004716:	4b45      	ldr	r3, [pc, #276]	; (800482c <SEGGER_SYSVIEW_Start+0x16c>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
 800471c:	e00b      	b.n	8004736 <SEGGER_SYSVIEW_Start+0x76>
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	b2da      	uxtb	r2, r3
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	09db      	lsrs	r3, r3, #7
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	2b7f      	cmp	r3, #127	; 0x7f
 800473a:	d8f0      	bhi.n	800471e <SEGGER_SYSVIEW_Start+0x5e>
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <SEGGER_SYSVIEW_Start+0x16c>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	e00b      	b.n	8004770 <SEGGER_SYSVIEW_Start+0xb0>
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	6279      	str	r1, [r7, #36]	; 0x24
 8004762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	09db      	lsrs	r3, r3, #7
 800476e:	623b      	str	r3, [r7, #32]
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b7f      	cmp	r3, #127	; 0x7f
 8004774:	d8f0      	bhi.n	8004758 <SEGGER_SYSVIEW_Start+0x98>
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	627a      	str	r2, [r7, #36]	; 0x24
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	4b28      	ldr	r3, [pc, #160]	; (800482c <SEGGER_SYSVIEW_Start+0x16c>)
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e00b      	b.n	80047aa <SEGGER_SYSVIEW_Start+0xea>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	61f9      	str	r1, [r7, #28]
 800479c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	09db      	lsrs	r3, r3, #7
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b7f      	cmp	r3, #127	; 0x7f
 80047ae:	d8f0      	bhi.n	8004792 <SEGGER_SYSVIEW_Start+0xd2>
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	61fa      	str	r2, [r7, #28]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e00b      	b.n	80047e2 <SEGGER_SYSVIEW_Start+0x122>
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1c59      	adds	r1, r3, #1
 80047d2:	6179      	str	r1, [r7, #20]
 80047d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	09db      	lsrs	r3, r3, #7
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b7f      	cmp	r3, #127	; 0x7f
 80047e6:	d8f0      	bhi.n	80047ca <SEGGER_SYSVIEW_Start+0x10a>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	617a      	str	r2, [r7, #20]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80047f8:	2218      	movs	r2, #24
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff f9d5 	bl	8003bac <_SendPacket>
      RECORD_END();
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <SEGGER_SYSVIEW_Start+0x16c>)
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <SEGGER_SYSVIEW_Start+0x16c>)
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004816:	f000 f9eb 	bl	8004bf0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800481a:	f000 f9b1 	bl	8004b80 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800481e:	f000 fc13 	bl	8005048 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004822:	bf00      	nop
 8004824:	3730      	adds	r7, #48	; 0x30
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20014208 	.word	0x20014208
 8004830:	080053cc 	.word	0x080053cc
 8004834:	20014238 	.word	0x20014238

08004838 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800483e:	f3ef 8311 	mrs	r3, BASEPRI
 8004842:	f04f 0120 	mov.w	r1, #32
 8004846:	f381 8811 	msr	BASEPRI, r1
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	480b      	ldr	r0, [pc, #44]	; (800487c <SEGGER_SYSVIEW_Stop+0x44>)
 800484e:	f7ff f8bb 	bl	80039c8 <_PreparePacket>
 8004852:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <SEGGER_SYSVIEW_Stop+0x48>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800485c:	220b      	movs	r2, #11
 800485e:	6839      	ldr	r1, [r7, #0]
 8004860:	6838      	ldr	r0, [r7, #0]
 8004862:	f7ff f9a3 	bl	8003bac <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <SEGGER_SYSVIEW_Stop+0x48>)
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f383 8811 	msr	BASEPRI, r3
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20014238 	.word	0x20014238
 8004880:	20014208 	.word	0x20014208

08004884 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800488a:	f3ef 8311 	mrs	r3, BASEPRI
 800488e:	f04f 0120 	mov.w	r1, #32
 8004892:	f381 8811 	msr	BASEPRI, r1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	4845      	ldr	r0, [pc, #276]	; (80049b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800489a:	f7ff f895 	bl	80039c8 <_PreparePacket>
 800489e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ae:	e00b      	b.n	80048c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	1c59      	adds	r1, r3, #1
 80048b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	09db      	lsrs	r3, r3, #7
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	2b7f      	cmp	r3, #127	; 0x7f
 80048cc:	d8f0      	bhi.n	80048b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	4b34      	ldr	r3, [pc, #208]	; (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	e00b      	b.n	8004902 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1c59      	adds	r1, r3, #1
 80048f2:	6279      	str	r1, [r7, #36]	; 0x24
 80048f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	09db      	lsrs	r3, r3, #7
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	2b7f      	cmp	r3, #127	; 0x7f
 8004906:	d8f0      	bhi.n	80048ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	627a      	str	r2, [r7, #36]	; 0x24
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	e00b      	b.n	800493c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	1c59      	adds	r1, r3, #1
 800492c:	61f9      	str	r1, [r7, #28]
 800492e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	09db      	lsrs	r3, r3, #7
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b7f      	cmp	r3, #127	; 0x7f
 8004940:	d8f0      	bhi.n	8004924 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	61fa      	str	r2, [r7, #28]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	e00b      	b.n	8004974 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	1c59      	adds	r1, r3, #1
 8004964:	6179      	str	r1, [r7, #20]
 8004966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	09db      	lsrs	r3, r3, #7
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b7f      	cmp	r3, #127	; 0x7f
 8004978:	d8f0      	bhi.n	800495c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	617a      	str	r2, [r7, #20]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800498a:	2218      	movs	r2, #24
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	68b8      	ldr	r0, [r7, #8]
 8004990:	f7ff f90c 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049a2:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	4798      	blx	r3
  }
}
 80049a8:	bf00      	nop
 80049aa:	3730      	adds	r7, #48	; 0x30
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20014238 	.word	0x20014238
 80049b4:	20014208 	.word	0x20014208

080049b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b092      	sub	sp, #72	; 0x48
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80049c0:	f3ef 8311 	mrs	r3, BASEPRI
 80049c4:	f04f 0120 	mov.w	r1, #32
 80049c8:	f381 8811 	msr	BASEPRI, r1
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	486a      	ldr	r0, [pc, #424]	; (8004b78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80049d0:	f7fe fffa 	bl	80039c8 <_PreparePacket>
 80049d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	647b      	str	r3, [r7, #68]	; 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b66      	ldr	r3, [pc, #408]	; (8004b7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ea:	e00b      	b.n	8004a04 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80049ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f2:	1c59      	adds	r1, r3, #1
 80049f4:	6479      	str	r1, [r7, #68]	; 0x44
 80049f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a00:	09db      	lsrs	r3, r3, #7
 8004a02:	643b      	str	r3, [r7, #64]	; 0x40
 8004a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a06:	2b7f      	cmp	r3, #127	; 0x7f
 8004a08:	d8f0      	bhi.n	80049ec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a24:	e00b      	b.n	8004a3e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	09db      	lsrs	r3, r3, #7
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b7f      	cmp	r3, #127	; 0x7f
 8004a42:	d8f0      	bhi.n	8004a26 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a52:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7fe ff63 	bl	8003928 <_EncodeStr>
 8004a62:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a64:	2209      	movs	r2, #9
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	6938      	ldr	r0, [r7, #16]
 8004a6a:	f7ff f89f 	bl	8003bac <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30
 8004a82:	e00b      	b.n	8004a9c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	6379      	str	r1, [r7, #52]	; 0x34
 8004a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	09db      	lsrs	r3, r3, #7
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa0:	d8f0      	bhi.n	8004a84 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004abc:	e00b      	b.n	8004ad6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	09db      	lsrs	r3, r3, #7
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8004ada:	d8f0      	bhi.n	8004abe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	e00b      	b.n	8004b10 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	6279      	str	r1, [r7, #36]	; 0x24
 8004b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	09db      	lsrs	r3, r3, #7
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	2b7f      	cmp	r3, #127	; 0x7f
 8004b14:	d8f0      	bhi.n	8004af8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b1c:	6a3a      	ldr	r2, [r7, #32]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	e00b      	b.n	8004b48 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	1c59      	adds	r1, r3, #1
 8004b38:	61f9      	str	r1, [r7, #28]
 8004b3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	09db      	lsrs	r3, r3, #7
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b4c:	d8f0      	bhi.n	8004b30 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	61fa      	str	r2, [r7, #28]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b5e:	2215      	movs	r2, #21
 8004b60:	68f9      	ldr	r1, [r7, #12]
 8004b62:	6938      	ldr	r0, [r7, #16]
 8004b64:	f7ff f822 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f383 8811 	msr	BASEPRI, r3
}
 8004b6e:	bf00      	nop
 8004b70:	3748      	adds	r7, #72	; 0x48
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20014238 	.word	0x20014238
 8004b7c:	20014208 	.word	0x20014208

08004b80 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004b96:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4798      	blx	r3
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20014208 	.word	0x20014208

08004ba8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb4:	f04f 0120 	mov.w	r1, #32
 8004bb8:	f381 8811 	msr	BASEPRI, r1
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	480b      	ldr	r0, [pc, #44]	; (8004bec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004bc0:	f7fe ff02 	bl	80039c8 <_PreparePacket>
 8004bc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	6938      	ldr	r0, [r7, #16]
 8004bcc:	f7fe feac 	bl	8003928 <_EncodeStr>
 8004bd0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004bd2:	220e      	movs	r2, #14
 8004bd4:	68f9      	ldr	r1, [r7, #12]
 8004bd6:	6938      	ldr	r0, [r7, #16]
 8004bd8:	f7fe ffe8 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f383 8811 	msr	BASEPRI, r3
}
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20014238 	.word	0x20014238

08004bf0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004bf6:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01a      	beq.n	8004c34 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4798      	blx	r3
 8004c10:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c14:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	000a      	movs	r2, r1
 8004c24:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c26:	4613      	mov	r3, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	200d      	movs	r0, #13
 8004c2e:	f7ff fced 	bl	800460c <SEGGER_SYSVIEW_RecordU32x2>
 8004c32:	e006      	b.n	8004c42 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	200c      	movs	r0, #12
 8004c3c:	f7ff fcaa 	bl	8004594 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd90      	pop	{r4, r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20014208 	.word	0x20014208
 8004c50:	e0001004 	.word	0xe0001004

08004c54 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5e:	f04f 0120 	mov.w	r1, #32
 8004c62:	f381 8811 	msr	BASEPRI, r1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	4819      	ldr	r0, [pc, #100]	; (8004cd0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c6a:	f7fe fead 	bl	80039c8 <_PreparePacket>
 8004c6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e00b      	b.n	8004ca0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	6179      	str	r1, [r7, #20]
 8004c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	09db      	lsrs	r3, r3, #7
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca4:	d8f0      	bhi.n	8004c88 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	617a      	str	r2, [r7, #20]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	68b8      	ldr	r0, [r7, #8]
 8004cbc:	f7fe ff76 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f383 8811 	msr	BASEPRI, r3
}
 8004cc6:	bf00      	nop
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20014238 	.word	0x20014238
 8004cd4:	e000ed04 	.word	0xe000ed04

08004cd8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cde:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce2:	f04f 0120 	mov.w	r1, #32
 8004ce6:	f381 8811 	msr	BASEPRI, r1
 8004cea:	607b      	str	r3, [r7, #4]
 8004cec:	4807      	ldr	r0, [pc, #28]	; (8004d0c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004cee:	f7fe fe6b 	bl	80039c8 <_PreparePacket>
 8004cf2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	6838      	ldr	r0, [r7, #0]
 8004cfa:	f7fe ff57 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f383 8811 	msr	BASEPRI, r3
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20014238 	.word	0x20014238

08004d10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d16:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1a:	f04f 0120 	mov.w	r1, #32
 8004d1e:	f381 8811 	msr	BASEPRI, r1
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	4807      	ldr	r0, [pc, #28]	; (8004d44 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d26:	f7fe fe4f 	bl	80039c8 <_PreparePacket>
 8004d2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d2c:	2212      	movs	r2, #18
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	6838      	ldr	r0, [r7, #0]
 8004d32:	f7fe ff3b 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f383 8811 	msr	BASEPRI, r3
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20014238 	.word	0x20014238

08004d48 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d52:	f04f 0120 	mov.w	r1, #32
 8004d56:	f381 8811 	msr	BASEPRI, r1
 8004d5a:	607b      	str	r3, [r7, #4]
 8004d5c:	4807      	ldr	r0, [pc, #28]	; (8004d7c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004d5e:	f7fe fe33 	bl	80039c8 <_PreparePacket>
 8004d62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004d64:	2211      	movs	r2, #17
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	6838      	ldr	r0, [r7, #0]
 8004d6a:	f7fe ff1f 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f383 8811 	msr	BASEPRI, r3
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20014238 	.word	0x20014238

08004d80 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d88:	f3ef 8311 	mrs	r3, BASEPRI
 8004d8c:	f04f 0120 	mov.w	r1, #32
 8004d90:	f381 8811 	msr	BASEPRI, r1
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	4819      	ldr	r0, [pc, #100]	; (8004dfc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004d98:	f7fe fe16 	bl	80039c8 <_PreparePacket>
 8004d9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004da2:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e00b      	b.n	8004dce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	61f9      	str	r1, [r7, #28]
 8004dc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	09db      	lsrs	r3, r3, #7
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd2:	d8f0      	bhi.n	8004db6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	61fa      	str	r2, [r7, #28]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004de4:	2208      	movs	r2, #8
 8004de6:	68f9      	ldr	r1, [r7, #12]
 8004de8:	6938      	ldr	r0, [r7, #16]
 8004dea:	f7fe fedf 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f383 8811 	msr	BASEPRI, r3
}
 8004df4:	bf00      	nop
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20014238 	.word	0x20014238
 8004e00:	20014208 	.word	0x20014208

08004e04 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e10:	f04f 0120 	mov.w	r1, #32
 8004e14:	f381 8811 	msr	BASEPRI, r1
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	4819      	ldr	r0, [pc, #100]	; (8004e80 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e1c:	f7fe fdd4 	bl	80039c8 <_PreparePacket>
 8004e20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e26:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	e00b      	b.n	8004e52 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	1c59      	adds	r1, r3, #1
 8004e42:	61f9      	str	r1, [r7, #28]
 8004e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	09db      	lsrs	r3, r3, #7
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b7f      	cmp	r3, #127	; 0x7f
 8004e56:	d8f0      	bhi.n	8004e3a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	61fa      	str	r2, [r7, #28]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004e68:	2204      	movs	r2, #4
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	6938      	ldr	r0, [r7, #16]
 8004e6e:	f7fe fe9d 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f383 8811 	msr	BASEPRI, r3
}
 8004e78:	bf00      	nop
 8004e7a:	3720      	adds	r7, #32
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20014238 	.word	0x20014238
 8004e84:	20014208 	.word	0x20014208

08004e88 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e90:	f3ef 8311 	mrs	r3, BASEPRI
 8004e94:	f04f 0120 	mov.w	r1, #32
 8004e98:	f381 8811 	msr	BASEPRI, r1
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	4819      	ldr	r0, [pc, #100]	; (8004f04 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ea0:	f7fe fd92 	bl	80039c8 <_PreparePacket>
 8004ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004eaa:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	e00b      	b.n	8004ed6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	1c59      	adds	r1, r3, #1
 8004ec6:	61f9      	str	r1, [r7, #28]
 8004ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	09db      	lsrs	r3, r3, #7
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eda:	d8f0      	bhi.n	8004ebe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	61fa      	str	r2, [r7, #28]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004eec:	2206      	movs	r2, #6
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	6938      	ldr	r0, [r7, #16]
 8004ef2:	f7fe fe5b 	bl	8003bac <_SendPacket>
  RECORD_END();
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f383 8811 	msr	BASEPRI, r3
}
 8004efc:	bf00      	nop
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20014238 	.word	0x20014238
 8004f08:	20014208 	.word	0x20014208

08004f0c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08c      	sub	sp, #48	; 0x30
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f16:	4b3b      	ldr	r3, [pc, #236]	; (8005004 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d06d      	beq.n	8004ffa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004f1e:	4b39      	ldr	r3, [pc, #228]	; (8005004 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f24:	2300      	movs	r3, #0
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f28:	e008      	b.n	8004f3c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	3301      	adds	r3, #1
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d3f2      	bcc.n	8004f2a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004f44:	e000      	b.n	8004f48 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004f46:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d055      	beq.n	8004ffa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f52:	f04f 0120 	mov.w	r1, #32
 8004f56:	f381 8811 	msr	BASEPRI, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	482a      	ldr	r0, [pc, #168]	; (8005008 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004f5e:	f7fe fd33 	bl	80039c8 <_PreparePacket>
 8004f62:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	623b      	str	r3, [r7, #32]
 8004f70:	e00b      	b.n	8004f8a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1c59      	adds	r1, r3, #1
 8004f7a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	09db      	lsrs	r3, r3, #7
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f8e:	d8f0      	bhi.n	8004f72 <SEGGER_SYSVIEW_SendModule+0x66>
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	627a      	str	r2, [r7, #36]	; 0x24
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	e00b      	b.n	8004fc4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	1c59      	adds	r1, r3, #1
 8004fb4:	61f9      	str	r1, [r7, #28]
 8004fb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	09db      	lsrs	r3, r3, #7
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc8:	d8f0      	bhi.n	8004fac <SEGGER_SYSVIEW_SendModule+0xa0>
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	61fa      	str	r2, [r7, #28]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2280      	movs	r2, #128	; 0x80
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7fe fca0 	bl	8003928 <_EncodeStr>
 8004fe8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004fea:	2216      	movs	r2, #22
 8004fec:	68f9      	ldr	r1, [r7, #12]
 8004fee:	6938      	ldr	r0, [r7, #16]
 8004ff0:	f7fe fddc 	bl	8003bac <_SendPacket>
      RECORD_END();
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	3730      	adds	r7, #48	; 0x30
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20014230 	.word	0x20014230
 8005008:	20014238 	.word	0x20014238

0800500c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005012:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00f      	beq.n	800503a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f2      	bne.n	8005020 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20014230 	.word	0x20014230

08005048 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800504e:	f3ef 8311 	mrs	r3, BASEPRI
 8005052:	f04f 0120 	mov.w	r1, #32
 8005056:	f381 8811 	msr	BASEPRI, r1
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	4817      	ldr	r0, [pc, #92]	; (80050bc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800505e:	f7fe fcb3 	bl	80039c8 <_PreparePacket>
 8005062:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e00b      	b.n	800508c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	1c59      	adds	r1, r3, #1
 800507c:	6179      	str	r1, [r7, #20]
 800507e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	09db      	lsrs	r3, r3, #7
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b7f      	cmp	r3, #127	; 0x7f
 8005090:	d8f0      	bhi.n	8005074 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	617a      	str	r2, [r7, #20]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80050a2:	221b      	movs	r2, #27
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	68b8      	ldr	r0, [r7, #8]
 80050a8:	f7fe fd80 	bl	8003bac <_SendPacket>
  RECORD_END();
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f383 8811 	msr	BASEPRI, r3
}
 80050b2:	bf00      	nop
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20014238 	.word	0x20014238
 80050c0:	20014234 	.word	0x20014234

080050c4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80050c4:	b40f      	push	{r0, r1, r2, r3}
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80050cc:	f107 0314 	add.w	r3, r7, #20
 80050d0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80050d2:	1d3b      	adds	r3, r7, #4
 80050d4:	461a      	mov	r2, r3
 80050d6:	2100      	movs	r1, #0
 80050d8:	6938      	ldr	r0, [r7, #16]
 80050da:	f7fe fff1 	bl	80040c0 <_VPrintTarget>
  va_end(ParamList);
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050e8:	b004      	add	sp, #16
 80050ea:	4770      	bx	lr

080050ec <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08a      	sub	sp, #40	; 0x28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050f4:	f3ef 8311 	mrs	r3, BASEPRI
 80050f8:	f04f 0120 	mov.w	r1, #32
 80050fc:	f381 8811 	msr	BASEPRI, r1
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	4827      	ldr	r0, [pc, #156]	; (80051a0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005104:	f7fe fc60 	bl	80039c8 <_PreparePacket>
 8005108:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	6938      	ldr	r0, [r7, #16]
 8005110:	f7fe fc0a 	bl	8003928 <_EncodeStr>
 8005114:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	2301      	movs	r3, #1
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	e00b      	b.n	8005138 <SEGGER_SYSVIEW_Warn+0x4c>
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	6279      	str	r1, [r7, #36]	; 0x24
 800512a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	09db      	lsrs	r3, r3, #7
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	2b7f      	cmp	r3, #127	; 0x7f
 800513c:	d8f0      	bhi.n	8005120 <SEGGER_SYSVIEW_Warn+0x34>
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	627a      	str	r2, [r7, #36]	; 0x24
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	2300      	movs	r3, #0
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e00b      	b.n	8005170 <SEGGER_SYSVIEW_Warn+0x84>
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	b2da      	uxtb	r2, r3
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	61f9      	str	r1, [r7, #28]
 8005162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	09db      	lsrs	r3, r3, #7
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b7f      	cmp	r3, #127	; 0x7f
 8005174:	d8f0      	bhi.n	8005158 <SEGGER_SYSVIEW_Warn+0x6c>
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	61fa      	str	r2, [r7, #28]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005186:	221a      	movs	r2, #26
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	6938      	ldr	r0, [r7, #16]
 800518c:	f7fe fd0e 	bl	8003bac <_SendPacket>
  RECORD_END();
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f383 8811 	msr	BASEPRI, r3
}
 8005196:	bf00      	nop
 8005198:	3728      	adds	r7, #40	; 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20014238 	.word	0x20014238

080051a4 <__libc_init_array>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	4d0d      	ldr	r5, [pc, #52]	; (80051dc <__libc_init_array+0x38>)
 80051a8:	4c0d      	ldr	r4, [pc, #52]	; (80051e0 <__libc_init_array+0x3c>)
 80051aa:	1b64      	subs	r4, r4, r5
 80051ac:	10a4      	asrs	r4, r4, #2
 80051ae:	2600      	movs	r6, #0
 80051b0:	42a6      	cmp	r6, r4
 80051b2:	d109      	bne.n	80051c8 <__libc_init_array+0x24>
 80051b4:	4d0b      	ldr	r5, [pc, #44]	; (80051e4 <__libc_init_array+0x40>)
 80051b6:	4c0c      	ldr	r4, [pc, #48]	; (80051e8 <__libc_init_array+0x44>)
 80051b8:	f000 f83c 	bl	8005234 <_init>
 80051bc:	1b64      	subs	r4, r4, r5
 80051be:	10a4      	asrs	r4, r4, #2
 80051c0:	2600      	movs	r6, #0
 80051c2:	42a6      	cmp	r6, r4
 80051c4:	d105      	bne.n	80051d2 <__libc_init_array+0x2e>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051cc:	4798      	blx	r3
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7ee      	b.n	80051b0 <__libc_init_array+0xc>
 80051d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d6:	4798      	blx	r3
 80051d8:	3601      	adds	r6, #1
 80051da:	e7f2      	b.n	80051c2 <__libc_init_array+0x1e>
 80051dc:	080053f0 	.word	0x080053f0
 80051e0:	080053f0 	.word	0x080053f0
 80051e4:	080053f0 	.word	0x080053f0
 80051e8:	080053f4 	.word	0x080053f4

080051ec <memcmp>:
 80051ec:	b530      	push	{r4, r5, lr}
 80051ee:	3901      	subs	r1, #1
 80051f0:	2400      	movs	r4, #0
 80051f2:	42a2      	cmp	r2, r4
 80051f4:	d101      	bne.n	80051fa <memcmp+0xe>
 80051f6:	2000      	movs	r0, #0
 80051f8:	e005      	b.n	8005206 <memcmp+0x1a>
 80051fa:	5d03      	ldrb	r3, [r0, r4]
 80051fc:	3401      	adds	r4, #1
 80051fe:	5d0d      	ldrb	r5, [r1, r4]
 8005200:	42ab      	cmp	r3, r5
 8005202:	d0f6      	beq.n	80051f2 <memcmp+0x6>
 8005204:	1b58      	subs	r0, r3, r5
 8005206:	bd30      	pop	{r4, r5, pc}

08005208 <memcpy>:
 8005208:	440a      	add	r2, r1
 800520a:	4291      	cmp	r1, r2
 800520c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005210:	d100      	bne.n	8005214 <memcpy+0xc>
 8005212:	4770      	bx	lr
 8005214:	b510      	push	{r4, lr}
 8005216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521e:	4291      	cmp	r1, r2
 8005220:	d1f9      	bne.n	8005216 <memcpy+0xe>
 8005222:	bd10      	pop	{r4, pc}

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <_init>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	bf00      	nop
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr

08005240 <_fini>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	bf00      	nop
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr
