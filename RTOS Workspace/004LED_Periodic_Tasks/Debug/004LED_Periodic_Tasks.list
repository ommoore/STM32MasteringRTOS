
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005c1c  08005c1c  00015c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dbc  08005dbc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc4  08005dc4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc4  08005dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014410  2000001c  08005de8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001442c  08005de8  0002442c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180fc  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003349  00000000  00000000  00038148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248e7  00000000  00000000  0003d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f0e  00000000  00000000  00062117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc66a  00000000  00000000  0007c025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015868f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c8c  00000000  00000000  001586e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c04 	.word	0x08005c04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08005c04 	.word	0x08005c04

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014384 	.word	0x20014384

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 faff 	bl	8000ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f897 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f907 	bl	80007bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005ae:	483b      	ldr	r0, [pc, #236]	; (800069c <main+0x100>)
 80005b0:	f003 f9bc 	bl	800392c <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <main+0x104>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a39      	ldr	r2, [pc, #228]	; (80006a0 <main+0x104>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c0:	f002 ffe6 	bl	8003590 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start(); //comment out if using UART based continuous recording

  //Create Task 1: Red LED
  status = xTaskCreate(led_red_handler, "LED_RED_TASK", 200, NULL, 2, &ledr_task_handle);
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <main+0x108>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	4935      	ldr	r1, [pc, #212]	; (80006a8 <main+0x10c>)
 80005d2:	4836      	ldr	r0, [pc, #216]	; (80006ac <main+0x110>)
 80005d4:	f001 ff28 	bl	8002428 <xTaskCreate>
 80005d8:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d00a      	beq.n	80005f6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e4:	f383 8811 	msr	BASEPRI, r3
 80005e8:	f3bf 8f6f 	isb	sy
 80005ec:	f3bf 8f4f 	dsb	sy
 80005f0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f2:	bf00      	nop
 80005f4:	e7fe      	b.n	80005f4 <main+0x58>

  next_task_handle = ledy_task_handle;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <main+0x114>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <main+0x118>)
 80005fc:	6013      	str	r3, [r2, #0]

  //Create Task 2: Yellow LED
  status = xTaskCreate(led_yellow_handler, "LED_YELLOW_TASK", 200, NULL, 2, &ledy_task_handle);
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <main+0x114>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	492b      	ldr	r1, [pc, #172]	; (80006b8 <main+0x11c>)
 800060c:	482b      	ldr	r0, [pc, #172]	; (80006bc <main+0x120>)
 800060e:	f001 ff0b 	bl	8002428 <xTaskCreate>
 8000612:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00a      	beq.n	8000630 <main+0x94>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	60fb      	str	r3, [r7, #12]
    }
 800062c:	bf00      	nop
 800062e:	e7fe      	b.n	800062e <main+0x92>

  //Create Task 3: Blue LED
  status = xTaskCreate(led_blue_handler, "LED_BLUE_TASK", 200, NULL, 2, &ledb_task_handle);
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <main+0x124>)
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4921      	ldr	r1, [pc, #132]	; (80006c4 <main+0x128>)
 800063e:	4822      	ldr	r0, [pc, #136]	; (80006c8 <main+0x12c>)
 8000640:	f001 fef2 	bl	8002428 <xTaskCreate>
 8000644:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0xc6>
        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	60bb      	str	r3, [r7, #8]
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0xc4>

  //Create Task 4: Green LED
  status = xTaskCreate(led_green_handler, "LED_GREEN_TASK", 200, NULL, 2, &ledg_task_handle);
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <main+0x130>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	4918      	ldr	r1, [pc, #96]	; (80006d0 <main+0x134>)
 8000670:	4818      	ldr	r0, [pc, #96]	; (80006d4 <main+0x138>)
 8000672:	f001 fed9 	bl	8002428 <xTaskCreate>
 8000676:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0xf8>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	607b      	str	r3, [r7, #4]
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0xf6>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000694:	f002 f8ae 	bl	80027f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0xfc>
 800069a:	bf00      	nop
 800069c:	0007a120 	.word	0x0007a120
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	20014330 	.word	0x20014330
 80006a8:	08005c1c 	.word	0x08005c1c
 80006ac:	080008c9 	.word	0x080008c9
 80006b0:	2001432c 	.word	0x2001432c
 80006b4:	20000038 	.word	0x20000038
 80006b8:	08005c2c 	.word	0x08005c2c
 80006bc:	08000901 	.word	0x08000901
 80006c0:	20014334 	.word	0x20014334
 80006c4:	08005c3c 	.word	0x08005c3c
 80006c8:	08000939 	.word	0x08000939
 80006cc:	20014328 	.word	0x20014328
 80006d0:	08005c4c 	.word	0x08005c4c
 80006d4:	08000971 	.word	0x08000971

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	; 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 fa84 	bl	8005bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <SystemClock_Config+0xdc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a2b      	ldr	r2, [pc, #172]	; (80007b4 <SystemClock_Config+0xdc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <SystemClock_Config+0xdc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <SystemClock_Config+0xe0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <SystemClock_Config+0xe0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <SystemClock_Config+0xe0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800074c:	23b4      	movs	r3, #180	; 0xb4
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f861 	bl	8001828 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800076c:	f000 f936 	bl	80009dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000770:	f000 fd20 	bl	80011b4 <HAL_PWREx_EnableOverDrive>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800077a:	f000 f92f 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2105      	movs	r1, #5
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fd59 	bl	8001254 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a8:	f000 f918 	bl	80009dc <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	; 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_GPIO_Init+0x100>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a38      	ldr	r2, [pc, #224]	; (80008bc <MX_GPIO_Init+0x100>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_GPIO_Init+0x100>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <MX_GPIO_Init+0x100>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a31      	ldr	r2, [pc, #196]	; (80008bc <MX_GPIO_Init+0x100>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <MX_GPIO_Init+0x100>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_GPIO_Init+0x100>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <MX_GPIO_Init+0x100>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <MX_GPIO_Init+0x100>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_GPIO_Init+0x100>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <MX_GPIO_Init+0x100>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_GPIO_Init+0x100>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	481e      	ldr	r0, [pc, #120]	; (80008c0 <MX_GPIO_Init+0x104>)
 8000848:	f000 fc64 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000852:	481c      	ldr	r0, [pc, #112]	; (80008c4 <MX_GPIO_Init+0x108>)
 8000854:	f000 fc5e 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000858:	230c      	movs	r3, #12
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000868:	2307      	movs	r3, #7
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_GPIO_Init+0x104>)
 8000874:	f000 faba 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000878:	2320      	movs	r3, #32
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_GPIO_Init+0x104>)
 8000890:	f000 faac 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_YELLOW_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin;
 8000894:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_GPIO_Init+0x108>)
 80008ae:	f000 fa9d 	bl	8000dec <HAL_GPIO_Init>

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40020400 	.word	0x40020400

080008c8 <led_red_handler>:

/* USER CODE BEGIN 4 */
static void led_red_handler(void* parameters) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeupTime;

	//Initialize the xLastWakeTime variable with the current time
	xLastWakeupTime = xTaskGetTickCount();
 80008d0:	f002 f89a 	bl	8002a08 <xTaskGetTickCount>
 80008d4:	4603      	mov	r3, r0
 80008d6:	60fb      	str	r3, [r7, #12]

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <led_red_handler+0x30>)
 80008da:	f005 f8ad 	bl	8005a38 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <led_red_handler+0x34>)
 80008e2:	f000 fc30 	bl	8001146 <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		vTaskDelayUntil(&xLastWakeupTime, pdMS_TO_TICKS(1000));
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fefe 	bl	80026f0 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008f4:	e7f0      	b.n	80008d8 <led_red_handler+0x10>
 80008f6:	bf00      	nop
 80008f8:	08005c5c 	.word	0x08005c5c
 80008fc:	40020400 	.word	0x40020400

08000900 <led_yellow_handler>:
	}
}

static void led_yellow_handler(void* parameters) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeupTime;

	//Initialize the xLastWakeTime variable with the current time
	xLastWakeupTime = xTaskGetTickCount();
 8000908:	f002 f87e 	bl	8002a08 <xTaskGetTickCount>
 800090c:	4603      	mov	r3, r0
 800090e:	60fb      	str	r3, [r7, #12]

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <led_yellow_handler+0x30>)
 8000912:	f005 f891 	bl	8005a38 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <led_yellow_handler+0x34>)
 800091c:	f000 fc13 	bl	8001146 <HAL_GPIO_TogglePin>
		//HAL_Delay(800);
		vTaskDelayUntil(&xLastWakeupTime, pdMS_TO_TICKS(800));
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fee1 	bl	80026f0 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 800092e:	e7ef      	b.n	8000910 <led_yellow_handler+0x10>
 8000930:	08005c70 	.word	0x08005c70
 8000934:	40020400 	.word	0x40020400

08000938 <led_blue_handler>:
	}
}

static void led_blue_handler(void* parameters) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeupTime;

	//Initialize the xLastWakeTime variable with the current time
	xLastWakeupTime = xTaskGetTickCount();
 8000940:	f002 f862 	bl	8002a08 <xTaskGetTickCount>
 8000944:	4603      	mov	r3, r0
 8000946:	60fb      	str	r3, [r7, #12]

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <led_blue_handler+0x30>)
 800094a:	f005 f875 	bl	8005a38 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800094e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <led_blue_handler+0x34>)
 8000954:	f000 fbf7 	bl	8001146 <HAL_GPIO_TogglePin>
		//HAL_Delay(600);
		vTaskDelayUntil(&xLastWakeupTime, pdMS_TO_TICKS(600));
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fec5 	bl	80026f0 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000966:	e7ef      	b.n	8000948 <led_blue_handler+0x10>
 8000968:	08005c84 	.word	0x08005c84
 800096c:	40020400 	.word	0x40020400

08000970 <led_green_handler>:
	}
}

static void led_green_handler(void* parameters) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeupTime;

	//Initialize the xLastWakeTime variable with the current time
	xLastWakeupTime = xTaskGetTickCount();
 8000978:	f002 f846 	bl	8002a08 <xTaskGetTickCount>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000980:	4807      	ldr	r0, [pc, #28]	; (80009a0 <led_green_handler+0x30>)
 8000982:	f005 f859 	bl	8005a38 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <led_green_handler+0x34>)
 800098c:	f000 fbdb 	bl	8001146 <HAL_GPIO_TogglePin>
		//HAL_Delay(400);
		vTaskDelayUntil(&xLastWakeupTime, pdMS_TO_TICKS(400));
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fea9 	bl	80026f0 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 800099e:	e7ef      	b.n	8000980 <led_green_handler+0x10>
 80009a0:	08005c98 	.word	0x08005c98
 80009a4:	40020400 	.word	0x40020400

080009a8 <vApplicationIdleHook>:
	}
}

void vApplicationIdleHook( void )
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80009ac:	2101      	movs	r1, #1
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fbe4 	bl	800117c <HAL_PWR_EnterSLEEPMode>

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 f90d 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40001000 	.word	0x40001000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a26:	f002 fb8f 	bl	8003148 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2036      	movs	r0, #54	; 0x36
 8000a4e:	f000 f9a3 	bl	8000d98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a52:	2036      	movs	r0, #54	; 0x36
 8000a54:	f000 f9bc 	bl	8000dd0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_InitTick+0xa4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <HAL_InitTick+0xa4>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0xa4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a74:	f107 0210 	add.w	r2, r7, #16
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fcee 	bl	8001460 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a84:	f000 fcd8 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	0c9b      	lsrs	r3, r3, #18
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_InitTick+0xac>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_InitTick+0xb0>)
 8000aa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_InitTick+0xac>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_InitTick+0xac>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_InitTick+0xac>)
 8000abe:	f001 f951 	bl	8001d64 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d104      	bne.n	8000ad2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aca:	f001 f9a5 	bl	8001e18 <HAL_TIM_Base_Start_IT>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20014338 	.word	0x20014338
 8000ae8:	40001000 	.word	0x40001000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b1c:	4802      	ldr	r0, [pc, #8]	; (8000b28 <TIM6_DAC_IRQHandler+0x10>)
 8000b1e:	f001 f9eb 	bl	8001ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20014338 	.word	0x20014338

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b6c:	4c0b      	ldr	r4, [pc, #44]	; (8000b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b7a:	f7ff ffd7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f004 fff9 	bl	8005b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b82:	f7ff fd0b 	bl	800059c <main>
  bx  lr    
 8000b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b94:	08005dcc 	.word	0x08005dcc
  ldr r2, =_sbss
 8000b98:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b9c:	2001442c 	.word	0x2001442c

08000ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC_IRQHandler>
	...

08000ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <HAL_Init+0x40>)
 8000bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_Init+0x40>)
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_Init+0x40>)
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f8d8 	bl	8000d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff ff30 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd8:	f7ff ff06 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023c00 	.word	0x40023c00

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20014380 	.word	0x20014380

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20014380 	.word	0x20014380

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ff4c 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	6978      	ldr	r0, [r7, #20]
 8000db6:	f7ff ffb1 	bl	8000d1c <NVIC_EncodePriority>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff80 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc8:	bf00      	nop
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff54 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	; 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	e165      	b.n	80010d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8154 	bne.w	80010ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d005      	beq.n	8000e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d130      	bne.n	8000ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80ae 	beq.w	80010ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <HAL_GPIO_Init+0x300>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a5c      	ldr	r2, [pc, #368]	; (80010ec <HAL_GPIO_Init+0x300>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <HAL_GPIO_Init+0x300>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8e:	4a58      	ldr	r2, [pc, #352]	; (80010f0 <HAL_GPIO_Init+0x304>)
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <HAL_GPIO_Init+0x308>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d025      	beq.n	8001006 <HAL_GPIO_Init+0x21a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4e      	ldr	r2, [pc, #312]	; (80010f8 <HAL_GPIO_Init+0x30c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d01f      	beq.n	8001002 <HAL_GPIO_Init+0x216>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	; (80010fc <HAL_GPIO_Init+0x310>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d019      	beq.n	8000ffe <HAL_GPIO_Init+0x212>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4c      	ldr	r2, [pc, #304]	; (8001100 <HAL_GPIO_Init+0x314>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x20e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4b      	ldr	r2, [pc, #300]	; (8001104 <HAL_GPIO_Init+0x318>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x20a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <HAL_GPIO_Init+0x31c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x206>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a49      	ldr	r2, [pc, #292]	; (800110c <HAL_GPIO_Init+0x320>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x202>
 8000fea:	2306      	movs	r3, #6
 8000fec:	e00c      	b.n	8001008 <HAL_GPIO_Init+0x21c>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e00a      	b.n	8001008 <HAL_GPIO_Init+0x21c>
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	e008      	b.n	8001008 <HAL_GPIO_Init+0x21c>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x21c>
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e004      	b.n	8001008 <HAL_GPIO_Init+0x21c>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e002      	b.n	8001008 <HAL_GPIO_Init+0x21c>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <HAL_GPIO_Init+0x21c>
 8001006:	2300      	movs	r3, #0
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	f002 0203 	and.w	r2, r2, #3
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4093      	lsls	r3, r2
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x304>)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <HAL_GPIO_Init+0x324>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <HAL_GPIO_Init+0x324>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_GPIO_Init+0x324>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001074:	4a26      	ldr	r2, [pc, #152]	; (8001110 <HAL_GPIO_Init+0x324>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <HAL_GPIO_Init+0x324>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <HAL_GPIO_Init+0x324>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_GPIO_Init+0x324>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <HAL_GPIO_Init+0x324>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3301      	adds	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	f67f ae96 	bls.w	8000e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020c00 	.word	0x40020c00
 8001104:	40021000 	.word	0x40021000
 8001108:	40021400 	.word	0x40021400
 800110c:	40021800 	.word	0x40021800
 8001110:	40013c00 	.word	0x40013c00

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001158:	887a      	ldrh	r2, [r7, #2]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	041a      	lsls	r2, r3, #16
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43d9      	mvns	r1, r3
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	400b      	ands	r3, r1
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_PWR_EnterSLEEPMode+0x34>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_PWR_EnterSLEEPMode+0x34>)
 800118e:	f023 0304 	bic.w	r3, r3, #4
 8001192:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800119a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800119c:	e002      	b.n	80011a4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800119e:	bf40      	sev
    __WFE();
 80011a0:	bf20      	wfe
    __WFE();
 80011a2:	bf20      	wfe
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_PWREx_EnableOverDrive+0x94>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e0:	f7ff fd16 	bl	8000c10 <HAL_GetTick>
 80011e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011e6:	e009      	b.n	80011fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011e8:	f7ff fd12 	bl	8000c10 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f6:	d901      	bls.n	80011fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e01f      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_PWREx_EnableOverDrive+0x98>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d1ee      	bne.n	80011e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_PWREx_EnableOverDrive+0x9c>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001210:	f7ff fcfe 	bl	8000c10 <HAL_GetTick>
 8001214:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001216:	e009      	b.n	800122c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001218:	f7ff fcfa 	bl	8000c10 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001226:	d901      	bls.n	800122c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e007      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_PWREx_EnableOverDrive+0x98>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001238:	d1ee      	bne.n	8001218 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	420e0040 	.word	0x420e0040
 800124c:	40007000 	.word	0x40007000
 8001250:	420e0044 	.word	0x420e0044

08001254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0cc      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b68      	ldr	r3, [pc, #416]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d90c      	bls.n	8001290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b8      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	494d      	ldr	r1, [pc, #308]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d044      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d119      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e07f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d003      	beq.n	8001312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130e:	2b03      	cmp	r3, #3
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e06f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e067      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4934      	ldr	r1, [pc, #208]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	4313      	orrs	r3, r2
 8001342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff fc64 	bl	8000c10 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff fc60 	bl	8000c10 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e04f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d20c      	bcs.n	800139c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e032      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4916      	ldr	r1, [pc, #88]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	490e      	ldr	r1, [pc, #56]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013da:	f000 f873 	bl	80014c4 <HAL_RCC_GetSysClockFreq>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	490a      	ldr	r1, [pc, #40]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	5ccb      	ldrb	r3, [r1, r3]
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb1c 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00
 8001410:	40023800 	.word	0x40023800
 8001414:	08005d7c 	.word	0x08005d7c
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_RCC_GetHCLKFreq+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000

08001438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800143c:	f7ff fff0 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001440:	4602      	mov	r2, r0
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	0a9b      	lsrs	r3, r3, #10
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	4903      	ldr	r1, [pc, #12]	; (800145c <HAL_RCC_GetPCLK1Freq+0x24>)
 800144e:	5ccb      	ldrb	r3, [r1, r3]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	08005d8c 	.word	0x08005d8c

08001460 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	220f      	movs	r2, #15
 800146e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_RCC_GetClockConfig+0x5c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_RCC_GetClockConfig+0x60>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 020f 	and.w	r2, r3, #15
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40023c00 	.word	0x40023c00

080014c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014c8:	b088      	sub	sp, #32
 80014ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014e0:	4bce      	ldr	r3, [pc, #824]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 030c 	and.w	r3, r3, #12
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	f200 818d 	bhi.w	8001808 <HAL_RCC_GetSysClockFreq+0x344>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001529 	.word	0x08001529
 80014f8:	08001809 	.word	0x08001809
 80014fc:	08001809 	.word	0x08001809
 8001500:	08001809 	.word	0x08001809
 8001504:	0800152f 	.word	0x0800152f
 8001508:	08001809 	.word	0x08001809
 800150c:	08001809 	.word	0x08001809
 8001510:	08001809 	.word	0x08001809
 8001514:	08001535 	.word	0x08001535
 8001518:	08001809 	.word	0x08001809
 800151c:	08001809 	.word	0x08001809
 8001520:	08001809 	.word	0x08001809
 8001524:	080016a9 	.word	0x080016a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001528:	4bbd      	ldr	r3, [pc, #756]	; (8001820 <HAL_RCC_GetSysClockFreq+0x35c>)
 800152a:	61bb      	str	r3, [r7, #24]
       break;
 800152c:	e16f      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800152e:	4bbd      	ldr	r3, [pc, #756]	; (8001824 <HAL_RCC_GetSysClockFreq+0x360>)
 8001530:	61bb      	str	r3, [r7, #24]
      break;
 8001532:	e16c      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001534:	4bb9      	ldr	r3, [pc, #740]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800153c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800153e:	4bb7      	ldr	r3, [pc, #732]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d053      	beq.n	80015f2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154a:	4bb4      	ldr	r3, [pc, #720]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	099b      	lsrs	r3, r3, #6
 8001550:	461a      	mov	r2, r3
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	f240 10ff 	movw	r0, #511	; 0x1ff
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	ea02 0400 	and.w	r4, r2, r0
 8001562:	603c      	str	r4, [r7, #0]
 8001564:	400b      	ands	r3, r1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	e9d7 4500 	ldrd	r4, r5, [r7]
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	014b      	lsls	r3, r1, #5
 800157a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800157e:	0142      	lsls	r2, r0, #5
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	4623      	mov	r3, r4
 8001586:	1ac0      	subs	r0, r0, r3
 8001588:	462b      	mov	r3, r5
 800158a:	eb61 0103 	sbc.w	r1, r1, r3
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	018b      	lsls	r3, r1, #6
 8001598:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800159c:	0182      	lsls	r2, r0, #6
 800159e:	1a12      	subs	r2, r2, r0
 80015a0:	eb63 0301 	sbc.w	r3, r3, r1
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	f04f 0100 	mov.w	r1, #0
 80015ac:	00d9      	lsls	r1, r3, #3
 80015ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015b2:	00d0      	lsls	r0, r2, #3
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4621      	mov	r1, r4
 80015ba:	1852      	adds	r2, r2, r1
 80015bc:	4629      	mov	r1, r5
 80015be:	eb43 0101 	adc.w	r1, r3, r1
 80015c2:	460b      	mov	r3, r1
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	0259      	lsls	r1, r3, #9
 80015ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015d2:	0250      	lsls	r0, r2, #9
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	461a      	mov	r2, r3
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	f7fe fe5e 	bl	80002a4 <__aeabi_uldivmod>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4613      	mov	r3, r2
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	e04c      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f2:	4b8a      	ldr	r3, [pc, #552]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	099b      	lsrs	r3, r3, #6
 80015f8:	461a      	mov	r2, r3
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001602:	f04f 0100 	mov.w	r1, #0
 8001606:	ea02 0a00 	and.w	sl, r2, r0
 800160a:	ea03 0b01 	and.w	fp, r3, r1
 800160e:	4650      	mov	r0, sl
 8001610:	4659      	mov	r1, fp
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	014b      	lsls	r3, r1, #5
 800161c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001620:	0142      	lsls	r2, r0, #5
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	ebb0 000a 	subs.w	r0, r0, sl
 800162a:	eb61 010b 	sbc.w	r1, r1, fp
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	018b      	lsls	r3, r1, #6
 8001638:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800163c:	0182      	lsls	r2, r0, #6
 800163e:	1a12      	subs	r2, r2, r0
 8001640:	eb63 0301 	sbc.w	r3, r3, r1
 8001644:	f04f 0000 	mov.w	r0, #0
 8001648:	f04f 0100 	mov.w	r1, #0
 800164c:	00d9      	lsls	r1, r3, #3
 800164e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001652:	00d0      	lsls	r0, r2, #3
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	eb12 020a 	adds.w	r2, r2, sl
 800165c:	eb43 030b 	adc.w	r3, r3, fp
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	0299      	lsls	r1, r3, #10
 800166a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800166e:	0290      	lsls	r0, r2, #10
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	461a      	mov	r2, r3
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	f7fe fe10 	bl	80002a4 <__aeabi_uldivmod>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4613      	mov	r3, r2
 800168a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800168c:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	3301      	adds	r3, #1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	61bb      	str	r3, [r7, #24]
      break;
 80016a6:	e0b2      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a8:	4b5c      	ldr	r3, [pc, #368]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d04d      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	461a      	mov	r2, r3
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	ea02 0800 	and.w	r8, r2, r0
 80016d6:	ea03 0901 	and.w	r9, r3, r1
 80016da:	4640      	mov	r0, r8
 80016dc:	4649      	mov	r1, r9
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	014b      	lsls	r3, r1, #5
 80016e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016ec:	0142      	lsls	r2, r0, #5
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	ebb0 0008 	subs.w	r0, r0, r8
 80016f6:	eb61 0109 	sbc.w	r1, r1, r9
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	018b      	lsls	r3, r1, #6
 8001704:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001708:	0182      	lsls	r2, r0, #6
 800170a:	1a12      	subs	r2, r2, r0
 800170c:	eb63 0301 	sbc.w	r3, r3, r1
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	00d9      	lsls	r1, r3, #3
 800171a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800171e:	00d0      	lsls	r0, r2, #3
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	eb12 0208 	adds.w	r2, r2, r8
 8001728:	eb43 0309 	adc.w	r3, r3, r9
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	f04f 0100 	mov.w	r1, #0
 8001734:	0259      	lsls	r1, r3, #9
 8001736:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800173a:	0250      	lsls	r0, r2, #9
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	461a      	mov	r2, r3
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	f7fe fdaa 	bl	80002a4 <__aeabi_uldivmod>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4613      	mov	r3, r2
 8001756:	61fb      	str	r3, [r7, #28]
 8001758:	e04a      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	461a      	mov	r2, r3
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800176a:	f04f 0100 	mov.w	r1, #0
 800176e:	ea02 0400 	and.w	r4, r2, r0
 8001772:	ea03 0501 	and.w	r5, r3, r1
 8001776:	4620      	mov	r0, r4
 8001778:	4629      	mov	r1, r5
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	014b      	lsls	r3, r1, #5
 8001784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001788:	0142      	lsls	r2, r0, #5
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	1b00      	subs	r0, r0, r4
 8001790:	eb61 0105 	sbc.w	r1, r1, r5
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	018b      	lsls	r3, r1, #6
 800179e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017a2:	0182      	lsls	r2, r0, #6
 80017a4:	1a12      	subs	r2, r2, r0
 80017a6:	eb63 0301 	sbc.w	r3, r3, r1
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	00d9      	lsls	r1, r3, #3
 80017b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017b8:	00d0      	lsls	r0, r2, #3
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	1912      	adds	r2, r2, r4
 80017c0:	eb45 0303 	adc.w	r3, r5, r3
 80017c4:	f04f 0000 	mov.w	r0, #0
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	0299      	lsls	r1, r3, #10
 80017ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017d2:	0290      	lsls	r0, r2, #10
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	461a      	mov	r2, r3
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	f7fe fd5e 	bl	80002a4 <__aeabi_uldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4613      	mov	r3, r2
 80017ee:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_RCC_GetSysClockFreq+0x358>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0f1b      	lsrs	r3, r3, #28
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	61bb      	str	r3, [r7, #24]
      break;
 8001806:	e002      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_GetSysClockFreq+0x35c>)
 800180a:	61bb      	str	r3, [r7, #24]
      break;
 800180c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180e:	69bb      	ldr	r3, [r7, #24]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	00f42400 	.word	0x00f42400
 8001824:	007a1200 	.word	0x007a1200

08001828 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e28d      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8083 	beq.w	800194e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001848:	4b94      	ldr	r3, [pc, #592]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b04      	cmp	r3, #4
 8001852:	d019      	beq.n	8001888 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001854:	4b91      	ldr	r3, [pc, #580]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800185c:	2b08      	cmp	r3, #8
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001860:	4b8e      	ldr	r3, [pc, #568]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800186c:	d00c      	beq.n	8001888 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186e:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d112      	bne.n	80018a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05b      	beq.n	800194c <HAL_RCC_OscConfig+0x124>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d157      	bne.n	800194c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e25a      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x90>
 80018aa:	4b7c      	ldr	r3, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7b      	ldr	r2, [pc, #492]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xcc>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0xb4>
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a75      	ldr	r2, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a72      	ldr	r2, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xcc>
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6b      	ldr	r2, [pc, #428]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f988 	bl	8000c10 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f984 	bl	8000c10 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e21f      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xdc>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f974 	bl	8000c10 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f970 	bl	8000c10 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e20b      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x104>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d06f      	beq.n	8001a3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800195a:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d017      	beq.n	8001996 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001966:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800196e:	2b08      	cmp	r3, #8
 8001970:	d105      	bne.n	800197e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d11c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198a:	4b44      	ldr	r3, [pc, #272]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d116      	bne.n	80019c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <HAL_RCC_OscConfig+0x186>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d001      	beq.n	80019ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e1d3      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4937      	ldr	r1, [pc, #220]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	e03a      	b.n	8001a3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d020      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <HAL_RCC_OscConfig+0x278>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff f91d 	bl	8000c10 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff f919 	bl	8000c10 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e1b4      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4925      	ldr	r1, [pc, #148]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]
 8001a0c:	e015      	b.n	8001a3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_OscConfig+0x278>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff f8fc 	bl	8000c10 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7ff f8f8 	bl	8000c10 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e193      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d036      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d016      	beq.n	8001a7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_RCC_OscConfig+0x27c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff f8dc 	bl	8000c10 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff f8d8 	bl	8000c10 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e173      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x234>
 8001a7a:	e01b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_OscConfig+0x27c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff f8c5 	bl	8000c10 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	e00e      	b.n	8001aa8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8a:	f7ff f8c1 	bl	8000c10 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d907      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e15c      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	42470000 	.word	0x42470000
 8001aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1ea      	bne.n	8001a8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8097 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10f      	bne.n	8001af2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b7f      	ldr	r3, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a7e      	ldr	r2, [pc, #504]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aee:	2301      	movs	r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af2:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_RCC_OscConfig+0x4b0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afe:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <HAL_RCC_OscConfig+0x4b0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a75      	ldr	r2, [pc, #468]	; (8001cd8 <HAL_RCC_OscConfig+0x4b0>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f881 	bl	8000c10 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b12:	f7ff f87d 	bl	8000c10 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e118      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b24:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <HAL_RCC_OscConfig+0x4b0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x31e>
 8001b38:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	e01c      	b.n	8001b80 <HAL_RCC_OscConfig+0x358>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x340>
 8001b4e:	4b61      	ldr	r3, [pc, #388]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a60      	ldr	r2, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5a:	4b5e      	ldr	r3, [pc, #376]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a5d      	ldr	r2, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0x358>
 8001b68:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a59      	ldr	r2, [pc, #356]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	4b57      	ldr	r3, [pc, #348]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a56      	ldr	r2, [pc, #344]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	f023 0304 	bic.w	r3, r3, #4
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d015      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f842 	bl	8000c10 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff f83e 	bl	8000c10 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e0d7      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0ee      	beq.n	8001b90 <HAL_RCC_OscConfig+0x368>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f82c 	bl	8000c10 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f828 	bl	8000c10 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0c1      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd2:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ee      	bne.n	8001bbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80ad 	beq.w	8001d54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bfa:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d060      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d145      	bne.n	8001c9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <HAL_RCC_OscConfig+0x4b4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7fe fffc 	bl	8000c10 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe fff8 	bl	8000c10 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e093      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	019b      	lsls	r3, r3, #6
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	3b01      	subs	r3, #1
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	071b      	lsls	r3, r3, #28
 8001c66:	491b      	ldr	r1, [pc, #108]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x4b4>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7fe ffcd 	bl	8000c10 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe ffc9 	bl	8000c10 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e064      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x452>
 8001c98:	e05c      	b.n	8001d54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_RCC_OscConfig+0x4b4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7fe ffb6 	bl	8000c10 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe ffb2 	bl	8000c10 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e04d      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x480>
 8001cc6:	e045      	b.n	8001d54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e040      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <HAL_RCC_OscConfig+0x538>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d030      	beq.n	8001d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d129      	bne.n	8001d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d122      	bne.n	8001d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d119      	bne.n	8001d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	085b      	lsrs	r3, r3, #1
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d10f      	bne.n	8001d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e041      	b.n	8001dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f839 	bl	8001e02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 f9d8 	bl	8002158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d001      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e04e      	b.n	8001ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d022      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5a:	d01d      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d018      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00e      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <HAL_TIM_Base_Start_IT+0xd4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d010      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	e007      	b.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40010400 	.word	0x40010400
 8001ef0:	40014000 	.word	0x40014000
 8001ef4:	40001800 	.word	0x40001800

08001ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d122      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0202 	mvn.w	r2, #2
 8001f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f8ee 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8e0 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f8f1 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d122      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0204 	mvn.w	r2, #4
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8c4 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8b6 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8c7 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0208 	mvn.w	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f89a 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f88c 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f89d 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b10      	cmp	r3, #16
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b10      	cmp	r3, #16
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0210 	mvn.w	r2, #16
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2208      	movs	r2, #8
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f870 	bl	800211c <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f862 	bl	8002108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f873 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0201 	mvn.w	r2, #1
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fc9e 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b80      	cmp	r3, #128	; 0x80
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f902 	bl	80022ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f838 	bl	8002144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0220 	mvn.w	r2, #32
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8cc 	bl	8002298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a40      	ldr	r2, [pc, #256]	; (800226c <TIM_Base_SetConfig+0x114>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d00f      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3d      	ldr	r2, [pc, #244]	; (8002270 <TIM_Base_SetConfig+0x118>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00b      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3c      	ldr	r2, [pc, #240]	; (8002274 <TIM_Base_SetConfig+0x11c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3b      	ldr	r2, [pc, #236]	; (8002278 <TIM_Base_SetConfig+0x120>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3a      	ldr	r2, [pc, #232]	; (800227c <TIM_Base_SetConfig+0x124>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d108      	bne.n	80021aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <TIM_Base_SetConfig+0x114>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d027      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <TIM_Base_SetConfig+0x118>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d023      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <TIM_Base_SetConfig+0x11c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d01f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <TIM_Base_SetConfig+0x120>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <TIM_Base_SetConfig+0x124>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d017      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <TIM_Base_SetConfig+0x128>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <TIM_Base_SetConfig+0x12c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00f      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a26      	ldr	r2, [pc, #152]	; (8002288 <TIM_Base_SetConfig+0x130>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a25      	ldr	r2, [pc, #148]	; (800228c <TIM_Base_SetConfig+0x134>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a24      	ldr	r2, [pc, #144]	; (8002290 <TIM_Base_SetConfig+0x138>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a23      	ldr	r2, [pc, #140]	; (8002294 <TIM_Base_SetConfig+0x13c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d108      	bne.n	800221c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <TIM_Base_SetConfig+0x114>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_Base_SetConfig+0xf8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <TIM_Base_SetConfig+0x124>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	615a      	str	r2, [r3, #20]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40010400 	.word	0x40010400
 8002280:	40014000 	.word	0x40014000
 8002284:	40014400 	.word	0x40014400
 8002288:	40014800 	.word	0x40014800
 800228c:	40001800 	.word	0x40001800
 8002290:	40001c00 	.word	0x40001c00
 8002294:	40002000 	.word	0x40002000

08002298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0208 	add.w	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 0208 	add.w	r2, r3, #8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 0208 	add.w	r2, r3, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800231a:	b480      	push	{r7}
 800231c:	b085      	sub	sp, #20
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d103      	bne.n	8002382 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e00c      	b.n	800239c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3308      	adds	r3, #8
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e002      	b.n	8002390 <vListInsert+0x2e>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	d2f6      	bcs.n	800238a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	601a      	str	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6892      	ldr	r2, [r2, #8]
 80023ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6852      	ldr	r2, [r2, #4]
 80023f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d103      	bne.n	8002408 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1e5a      	subs	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af04      	add	r7, sp, #16
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f001 f82d 	bl	800349c <pvPortMalloc>
 8002442:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00e      	beq.n	8002468 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800244a:	2058      	movs	r0, #88	; 0x58
 800244c:	f001 f826 	bl	800349c <pvPortMalloc>
 8002450:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	631a      	str	r2, [r3, #48]	; 0x30
 800245e:	e005      	b.n	800246c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002460:	6978      	ldr	r0, [r7, #20]
 8002462:	f001 f86f 	bl	8003544 <vPortFree>
 8002466:	e001      	b.n	800246c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002472:	88fa      	ldrh	r2, [r7, #6]
 8002474:	2300      	movs	r3, #0
 8002476:	9303      	str	r3, [sp, #12]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f80e 	bl	80024aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800248e:	69f8      	ldr	r0, [r7, #28]
 8002490:	f000 f8a2 	bl	80025d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002494:	2301      	movs	r3, #1
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	e002      	b.n	80024a0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024a0:	69bb      	ldr	r3, [r7, #24]
    }
 80024a2:	4618      	mov	r0, r3
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	461a      	mov	r2, r3
 80024c2:	21a5      	movs	r1, #165	; 0xa5
 80024c4:	f003 fb96 	bl	8005bf4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024d2:	3b01      	subs	r3, #1
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f023 0307 	bic.w	r3, r3, #7
 80024e0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <prvInitialiseNewTask+0x58>
        __asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	617b      	str	r3, [r7, #20]
    }
 80024fe:	bf00      	nop
 8002500:	e7fe      	b.n	8002500 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01f      	beq.n	8002548 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	e012      	b.n	8002534 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	7819      	ldrb	r1, [r3, #0]
 8002516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	3334      	adds	r3, #52	; 0x34
 800251e:	460a      	mov	r2, r1
 8002520:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b09      	cmp	r3, #9
 8002538:	d9e9      	bls.n	800250e <prvInitialiseNewTask+0x64>
 800253a:	e000      	b.n	800253e <prvInitialiseNewTask+0x94>
            {
                break;
 800253c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002546:	e003      	b.n	8002550 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	2b04      	cmp	r3, #4
 8002554:	d901      	bls.n	800255a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002556:	2304      	movs	r3, #4
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002564:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	2200      	movs	r2, #0
 800256a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	3304      	adds	r3, #4
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fec5 	bl	8002300 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	3318      	adds	r3, #24
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fec0 	bl	8002300 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002584:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	f1c3 0205 	rsb	r2, r3, #5
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	3350      	adds	r3, #80	; 0x50
 800259a:	2204      	movs	r2, #4
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fb28 	bl	8005bf4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	3354      	adds	r3, #84	; 0x54
 80025a8:	2201      	movs	r2, #1
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fb21 	bl	8005bf4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	69b8      	ldr	r0, [r7, #24]
 80025b8:	f000 fc9a 	bl	8002ef0 <pxPortInitialiseStack>
 80025bc:	4602      	mov	r2, r0
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025ce:	bf00      	nop
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80025d8:	b5b0      	push	{r4, r5, r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af02      	add	r7, sp, #8
 80025de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80025e0:	f000 fe30 	bl	8003244 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <prvAddNewTaskToReadyList+0xfc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3301      	adds	r3, #1
 80025ea:	4a3a      	ldr	r2, [pc, #232]	; (80026d4 <prvAddNewTaskToReadyList+0xfc>)
 80025ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025f6:	4a38      	ldr	r2, [pc, #224]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <prvAddNewTaskToReadyList+0xfc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d110      	bne.n	8002626 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002604:	f000 fb62 	bl	8002ccc <prvInitialiseTaskLists>
 8002608:	e00d      	b.n	8002626 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <prvAddNewTaskToReadyList+0x104>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	429a      	cmp	r2, r3
 800261e:	d802      	bhi.n	8002626 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002620:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <prvAddNewTaskToReadyList+0x108>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	4a2c      	ldr	r2, [pc, #176]	; (80026e0 <prvAddNewTaskToReadyList+0x108>)
 800262e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <prvAddNewTaskToReadyList+0x108>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <prvAddNewTaskToReadyList+0x94>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4618      	mov	r0, r3
 8002642:	f002 fff7 	bl	8005634 <SEGGER_SYSVIEW_OnTaskCreate>
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	461d      	mov	r5, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461c      	mov	r4, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	1ae3      	subs	r3, r4, r3
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	462b      	mov	r3, r5
 8002668:	f001 f82c 	bl	80036c4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 f864 	bl	800573c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2201      	movs	r2, #1
 800267a:	409a      	lsls	r2, r3
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <prvAddNewTaskToReadyList+0x10c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <prvAddNewTaskToReadyList+0x10c>)
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <prvAddNewTaskToReadyList+0x110>)
 8002694:	441a      	add	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f7ff fe3c 	bl	800231a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026a2:	f000 fdff 	bl	80032a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <prvAddNewTaskToReadyList+0x104>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00e      	beq.n	80026cc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <prvAddNewTaskToReadyList+0x100>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d207      	bcs.n	80026cc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <prvAddNewTaskToReadyList+0x114>)
 80026be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bdb0      	pop	{r4, r5, r7, pc}
 80026d4:	20000114 	.word	0x20000114
 80026d8:	2000003c 	.word	0x2000003c
 80026dc:	20000120 	.word	0x20000120
 80026e0:	20000130 	.word	0x20000130
 80026e4:	2000011c 	.word	0x2000011c
 80026e8:	20000040 	.word	0x20000040
 80026ec:	e000ed04 	.word	0xe000ed04

080026f0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <xTaskDelayUntil+0x2a>
        __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	617b      	str	r3, [r7, #20]
    }
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <xTaskDelayUntil+0x46>
        __asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	613b      	str	r3, [r7, #16]
    }
 8002732:	bf00      	nop
 8002734:	e7fe      	b.n	8002734 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002736:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <xTaskDelayUntil+0xf8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <xTaskDelayUntil+0x64>
        __asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	60fb      	str	r3, [r7, #12]
    }
 8002750:	bf00      	nop
 8002752:	e7fe      	b.n	8002752 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002754:	f000 f8aa 	bl	80028ac <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <xTaskDelayUntil+0xfc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	4413      	add	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	429a      	cmp	r2, r3
 8002770:	d20b      	bcs.n	800278a <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	429a      	cmp	r2, r3
 800277a:	d211      	bcs.n	80027a0 <xTaskDelayUntil+0xb0>
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	429a      	cmp	r2, r3
 8002782:	d90d      	bls.n	80027a0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002784:	2301      	movs	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	e00a      	b.n	80027a0 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	429a      	cmp	r2, r3
 8002792:	d303      	bcc.n	800279c <xTaskDelayUntil+0xac>
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	429a      	cmp	r2, r3
 800279a:	d901      	bls.n	80027a0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800279c:	2301      	movs	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80027ac:	2024      	movs	r0, #36	; 0x24
 80027ae:	f002 fb2d 	bl	8004e0c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fb20 	bl	8002e00 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80027c0:	f000 f882 	bl	80028c8 <xTaskResumeAll>
 80027c4:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <xTaskDelayUntil+0x100>)
 80027ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027de:	4618      	mov	r0, r3
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000013c 	.word	0x2000013c
 80027ec:	20000118 	.word	0x20000118
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <vTaskStartScheduler+0x98>)
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2300      	movs	r3, #0
 8002804:	2282      	movs	r2, #130	; 0x82
 8002806:	4922      	ldr	r1, [pc, #136]	; (8002890 <vTaskStartScheduler+0x9c>)
 8002808:	4822      	ldr	r0, [pc, #136]	; (8002894 <vTaskStartScheduler+0xa0>)
 800280a:	f7ff fe0d 	bl	8002428 <xTaskCreate>
 800280e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d124      	bne.n	8002860 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	60bb      	str	r3, [r7, #8]
    }
 8002828:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <vTaskStartScheduler+0xa4>)
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002832:	4b1a      	ldr	r3, [pc, #104]	; (800289c <vTaskStartScheduler+0xa8>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <vTaskStartScheduler+0xac>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <vTaskStartScheduler+0xb0>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <vTaskStartScheduler+0x98>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d102      	bne.n	8002850 <vTaskStartScheduler+0x5c>
 800284a:	f002 fed7 	bl	80055fc <SEGGER_SYSVIEW_OnIdle>
 800284e:	e004      	b.n	800285a <vTaskStartScheduler+0x66>
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <vTaskStartScheduler+0xb0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f002 ff2f 	bl	80056b8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800285a:	f000 fbd3 	bl	8003004 <xPortStartScheduler>
 800285e:	e00e      	b.n	800287e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d10a      	bne.n	800287e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	607b      	str	r3, [r7, #4]
    }
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <vTaskStartScheduler+0xb4>)
 8002880:	681b      	ldr	r3, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000138 	.word	0x20000138
 8002890:	08005cac 	.word	0x08005cac
 8002894:	08002c99 	.word	0x08002c99
 8002898:	20000134 	.word	0x20000134
 800289c:	20000120 	.word	0x20000120
 80028a0:	20000118 	.word	0x20000118
 80028a4:	2000003c 	.word	0x2000003c
 80028a8:	2000000c 	.word	0x2000000c

080028ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <vTaskSuspendAll+0x18>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4a03      	ldr	r2, [pc, #12]	; (80028c4 <vTaskSuspendAll+0x18>)
 80028b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	2000013c 	.word	0x2000013c

080028c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80028d6:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <xTaskResumeAll+0x11c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	603b      	str	r3, [r7, #0]
    }
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80028f4:	f000 fca6 	bl	8003244 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <xTaskResumeAll+0x11c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	4a39      	ldr	r2, [pc, #228]	; (80029e4 <xTaskResumeAll+0x11c>)
 8002900:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002902:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <xTaskResumeAll+0x11c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d165      	bne.n	80029d6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <xTaskResumeAll+0x120>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d061      	beq.n	80029d6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002912:	e032      	b.n	800297a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002914:	4b35      	ldr	r3, [pc, #212]	; (80029ec <xTaskResumeAll+0x124>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3318      	adds	r3, #24
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fd57 	bl	80023d4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3304      	adds	r3, #4
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fd52 	bl	80023d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	f002 ff02 	bl	800573c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2201      	movs	r2, #1
 800293e:	409a      	lsls	r2, r3
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <xTaskResumeAll+0x128>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <xTaskResumeAll+0x128>)
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <xTaskResumeAll+0x12c>)
 8002958:	441a      	add	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3304      	adds	r3, #4
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f7ff fcda 	bl	800231a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296a:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <xTaskResumeAll+0x130>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	429a      	cmp	r2, r3
 8002972:	d302      	bcc.n	800297a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002974:	4b21      	ldr	r3, [pc, #132]	; (80029fc <xTaskResumeAll+0x134>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800297a:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <xTaskResumeAll+0x124>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1c8      	bne.n	8002914 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002988:	f000 fa1e 	bl	8002dc8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <xTaskResumeAll+0x138>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d010      	beq.n	80029ba <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002998:	f000 f858 	bl	8002a4c <xTaskIncrementTick>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <xTaskResumeAll+0x134>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f1      	bne.n	8002998 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <xTaskResumeAll+0x138>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <xTaskResumeAll+0x134>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <xTaskResumeAll+0x13c>)
 80029c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80029d6:	f000 fc65 	bl	80032a4 <vPortExitCritical>

    return xAlreadyYielded;
 80029da:	68bb      	ldr	r3, [r7, #8]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000013c 	.word	0x2000013c
 80029e8:	20000114 	.word	0x20000114
 80029ec:	200000d4 	.word	0x200000d4
 80029f0:	2000011c 	.word	0x2000011c
 80029f4:	20000040 	.word	0x20000040
 80029f8:	2000003c 	.word	0x2000003c
 80029fc:	20000128 	.word	0x20000128
 8002a00:	20000124 	.word	0x20000124
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <xTaskGetTickCount+0x1c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002a14:	687b      	ldr	r3, [r7, #4]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000118 	.word	0x20000118

08002a28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a2e:	f000 fcf5 	bl	800341c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <xTaskGetTickCountFromISR+0x20>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a3c:	683b      	ldr	r3, [r7, #0]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000118 	.word	0x20000118

08002a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a56:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <xTaskIncrementTick+0x14c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 8092 	bne.w	8002b84 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a60:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <xTaskIncrementTick+0x150>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a68:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <xTaskIncrementTick+0x150>)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d120      	bne.n	8002ab6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a74:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <xTaskIncrementTick+0x154>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <xTaskIncrementTick+0x48>
        __asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	603b      	str	r3, [r7, #0]
    }
 8002a90:	bf00      	nop
 8002a92:	e7fe      	b.n	8002a92 <xTaskIncrementTick+0x46>
 8002a94:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <xTaskIncrementTick+0x154>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <xTaskIncrementTick+0x158>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a40      	ldr	r2, [pc, #256]	; (8002ba0 <xTaskIncrementTick+0x154>)
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4a40      	ldr	r2, [pc, #256]	; (8002ba4 <xTaskIncrementTick+0x158>)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <xTaskIncrementTick+0x15c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	4a3e      	ldr	r2, [pc, #248]	; (8002ba8 <xTaskIncrementTick+0x15c>)
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	f000 f989 	bl	8002dc8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <xTaskIncrementTick+0x160>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d34c      	bcc.n	8002b5a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ac0:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <xTaskIncrementTick+0x154>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d104      	bne.n	8002ad4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <xTaskIncrementTick+0x160>)
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	601a      	str	r2, [r3, #0]
                    break;
 8002ad2:	e042      	b.n	8002b5a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad4:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <xTaskIncrementTick+0x154>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d203      	bcs.n	8002af4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002aec:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <xTaskIncrementTick+0x160>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002af2:	e032      	b.n	8002b5a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	3304      	adds	r3, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fc6b 	bl	80023d4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3318      	adds	r3, #24
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fc62 	bl	80023d4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fe12 	bl	800573c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <xTaskIncrementTick+0x164>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <xTaskIncrementTick+0x164>)
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <xTaskIncrementTick+0x168>)
 8002b38:	441a      	add	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f7ff fbea 	bl	800231a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <xTaskIncrementTick+0x16c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d3b5      	bcc.n	8002ac0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b58:	e7b2      	b.n	8002ac0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <xTaskIncrementTick+0x16c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	4914      	ldr	r1, [pc, #80]	; (8002bb4 <xTaskIncrementTick+0x168>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d901      	bls.n	8002b76 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <xTaskIncrementTick+0x170>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e004      	b.n	8002b8e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <xTaskIncrementTick+0x174>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <xTaskIncrementTick+0x174>)
 8002b8c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002b8e:	697b      	ldr	r3, [r7, #20]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	2000013c 	.word	0x2000013c
 8002b9c:	20000118 	.word	0x20000118
 8002ba0:	200000cc 	.word	0x200000cc
 8002ba4:	200000d0 	.word	0x200000d0
 8002ba8:	2000012c 	.word	0x2000012c
 8002bac:	20000134 	.word	0x20000134
 8002bb0:	2000011c 	.word	0x2000011c
 8002bb4:	20000040 	.word	0x20000040
 8002bb8:	2000003c 	.word	0x2000003c
 8002bbc:	20000128 	.word	0x20000128
 8002bc0:	20000124 	.word	0x20000124

08002bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bca:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <vTaskSwitchContext+0xbc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <vTaskSwitchContext+0xc0>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002bd8:	e04d      	b.n	8002c76 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002bda:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <vTaskSwitchContext+0xc0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002be0:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <vTaskSwitchContext+0xc4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	f1c3 031f 	rsb	r3, r3, #31
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	4925      	ldr	r1, [pc, #148]	; (8002c8c <vTaskSwitchContext+0xc8>)
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	607b      	str	r3, [r7, #4]
    }
 8002c1c:	bf00      	nop
 8002c1e:	e7fe      	b.n	8002c1e <vTaskSwitchContext+0x5a>
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <vTaskSwitchContext+0xc8>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	3308      	adds	r3, #8
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d104      	bne.n	8002c50 <vTaskSwitchContext+0x8c>
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <vTaskSwitchContext+0xcc>)
 8002c58:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <vTaskSwitchContext+0xcc>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <vTaskSwitchContext+0xd0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d102      	bne.n	8002c6c <vTaskSwitchContext+0xa8>
 8002c66:	f002 fcc9 	bl	80055fc <SEGGER_SYSVIEW_OnIdle>
}
 8002c6a:	e004      	b.n	8002c76 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <vTaskSwitchContext+0xcc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 fd21 	bl	80056b8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002c76:	bf00      	nop
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000013c 	.word	0x2000013c
 8002c84:	20000128 	.word	0x20000128
 8002c88:	2000011c 	.word	0x2000011c
 8002c8c:	20000040 	.word	0x20000040
 8002c90:	2000003c 	.word	0x2000003c
 8002c94:	20000138 	.word	0x20000138

08002c98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ca0:	f000 f854 	bl	8002d4c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <prvIdleTask+0x2c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d907      	bls.n	8002cbc <prvIdleTask+0x24>
                {
                    taskYIELD();
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <prvIdleTask+0x30>)
 8002cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8002cbc:	f7fd fe74 	bl	80009a8 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8002cc0:	e7ee      	b.n	8002ca0 <prvIdleTask+0x8>
 8002cc2:	bf00      	nop
 8002cc4:	20000040 	.word	0x20000040
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	e00c      	b.n	8002cf2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <prvInitialiseTaskLists+0x60>)
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff faea 	bl	80022c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d9ef      	bls.n	8002cd8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002cf8:	480d      	ldr	r0, [pc, #52]	; (8002d30 <prvInitialiseTaskLists+0x64>)
 8002cfa:	f7ff fae1 	bl	80022c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002cfe:	480d      	ldr	r0, [pc, #52]	; (8002d34 <prvInitialiseTaskLists+0x68>)
 8002d00:	f7ff fade 	bl	80022c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d04:	480c      	ldr	r0, [pc, #48]	; (8002d38 <prvInitialiseTaskLists+0x6c>)
 8002d06:	f7ff fadb 	bl	80022c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d0a:	480c      	ldr	r0, [pc, #48]	; (8002d3c <prvInitialiseTaskLists+0x70>)
 8002d0c:	f7ff fad8 	bl	80022c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d10:	480b      	ldr	r0, [pc, #44]	; (8002d40 <prvInitialiseTaskLists+0x74>)
 8002d12:	f7ff fad5 	bl	80022c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <prvInitialiseTaskLists+0x78>)
 8002d18:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <prvInitialiseTaskLists+0x64>)
 8002d1a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <prvInitialiseTaskLists+0x7c>)
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <prvInitialiseTaskLists+0x68>)
 8002d20:	601a      	str	r2, [r3, #0]
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000040 	.word	0x20000040
 8002d30:	200000a4 	.word	0x200000a4
 8002d34:	200000b8 	.word	0x200000b8
 8002d38:	200000d4 	.word	0x200000d4
 8002d3c:	200000e8 	.word	0x200000e8
 8002d40:	20000100 	.word	0x20000100
 8002d44:	200000cc 	.word	0x200000cc
 8002d48:	200000d0 	.word	0x200000d0

08002d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d52:	e019      	b.n	8002d88 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d54:	f000 fa76 	bl	8003244 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <prvCheckTasksWaitingTermination+0x50>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fb35 	bl	80023d4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <prvCheckTasksWaitingTermination+0x54>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <prvCheckTasksWaitingTermination+0x54>)
 8002d72:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <prvCheckTasksWaitingTermination+0x58>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <prvCheckTasksWaitingTermination+0x58>)
 8002d7c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d7e:	f000 fa91 	bl	80032a4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f810 	bl	8002da8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <prvCheckTasksWaitingTermination+0x58>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e1      	bne.n	8002d54 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200000e8 	.word	0x200000e8
 8002da0:	20000114 	.word	0x20000114
 8002da4:	200000fc 	.word	0x200000fc

08002da8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fbc5 	bl	8003544 <vPortFree>
                vPortFree( pxTCB );
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fbc2 	bl	8003544 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <prvResetNextTaskUnblockTime+0x30>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <prvResetNextTaskUnblockTime+0x34>)
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002dde:	e005      	b.n	8002dec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <prvResetNextTaskUnblockTime+0x30>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <prvResetNextTaskUnblockTime+0x34>)
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	200000cc 	.word	0x200000cc
 8002dfc:	20000134 	.word	0x20000134

08002e00 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e10:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fadc 	bl	80023d4 <uxListRemove>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e22:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2201      	movs	r2, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4013      	ands	r3, r2
 8002e36:	4a29      	ldr	r2, [pc, #164]	; (8002edc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002e38:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d110      	bne.n	8002e64 <prvAddCurrentTaskToDelayedList+0x64>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	211b      	movs	r1, #27
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fcb6 	bl	80057c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4820      	ldr	r0, [pc, #128]	; (8002ee0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002e5e:	f7ff fa5c 	bl	800231a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e62:	e032      	b.n	8002eca <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d20f      	bcs.n	8002e9c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2104      	movs	r1, #4
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 fc9c 	bl	80057c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f7ff fa64 	bl	8002362 <vListInsert>
}
 8002e9a:	e016      	b.n	8002eca <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 fc8c 	bl	80057c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	f7ff fa54 	bl	8002362 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <prvAddCurrentTaskToDelayedList+0xec>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d202      	bcs.n	8002eca <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002ec4:	4a09      	ldr	r2, [pc, #36]	; (8002eec <prvAddCurrentTaskToDelayedList+0xec>)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6013      	str	r3, [r2, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000118 	.word	0x20000118
 8002ed8:	2000003c 	.word	0x2000003c
 8002edc:	2000011c 	.word	0x2000011c
 8002ee0:	20000100 	.word	0x20000100
 8002ee4:	200000d0 	.word	0x200000d0
 8002ee8:	200000cc 	.word	0x200000cc
 8002eec:	20000134 	.word	0x20000134

08002ef0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3b04      	subs	r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b04      	subs	r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f023 0201 	bic.w	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3b04      	subs	r3, #4
 8002f1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f20:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <pxPortInitialiseStack+0x64>)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3b14      	subs	r3, #20
 8002f2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3b04      	subs	r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f06f 0202 	mvn.w	r2, #2
 8002f3e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3b20      	subs	r3, #32
 8002f44:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	08002f59 	.word	0x08002f59

08002f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <prvTaskExitError+0x54>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d00a      	beq.n	8002f82 <prvTaskExitError+0x2a>
        __asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	60fb      	str	r3, [r7, #12]
    }
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <prvTaskExitError+0x28>
        __asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	60bb      	str	r3, [r7, #8]
    }
 8002f94:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f96:	bf00      	nop
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0fc      	beq.n	8002f98 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	20000010 	.word	0x20000010

08002fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <pxCurrentTCBConst2>)
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	6808      	ldr	r0, [r1, #0]
 8002fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fba:	f380 8809 	msr	PSP, r0
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f380 8811 	msr	BASEPRI, r0
 8002fca:	4770      	bx	lr
 8002fcc:	f3af 8000 	nop.w

08002fd0 <pxCurrentTCBConst2>:
 8002fd0:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop

08002fd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002fd8:	4808      	ldr	r0, [pc, #32]	; (8002ffc <prvPortStartFirstTask+0x24>)
 8002fda:	6800      	ldr	r0, [r0, #0]
 8002fdc:	6800      	ldr	r0, [r0, #0]
 8002fde:	f380 8808 	msr	MSP, r0
 8002fe2:	f04f 0000 	mov.w	r0, #0
 8002fe6:	f380 8814 	msr	CONTROL, r0
 8002fea:	b662      	cpsie	i
 8002fec:	b661      	cpsie	f
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	df00      	svc	0
 8002ff8:	bf00      	nop
 8002ffa:	0000      	.short	0x0000
 8002ffc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop

08003004 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800300a:	4b46      	ldr	r3, [pc, #280]	; (8003124 <xPortStartScheduler+0x120>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a46      	ldr	r2, [pc, #280]	; (8003128 <xPortStartScheduler+0x124>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d10a      	bne.n	800302a <xPortStartScheduler+0x26>
        __asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	613b      	str	r3, [r7, #16]
    }
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800302a:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <xPortStartScheduler+0x120>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3f      	ldr	r2, [pc, #252]	; (800312c <xPortStartScheduler+0x128>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d10a      	bne.n	800304a <xPortStartScheduler+0x46>
        __asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	60fb      	str	r3, [r7, #12]
    }
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800304a:	4b39      	ldr	r3, [pc, #228]	; (8003130 <xPortStartScheduler+0x12c>)
 800304c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	22ff      	movs	r2, #255	; 0xff
 800305a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <xPortStartScheduler+0x130>)
 8003070:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <xPortStartScheduler+0x134>)
 8003074:	2207      	movs	r2, #7
 8003076:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003078:	e009      	b.n	800308e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <xPortStartScheduler+0x134>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3b01      	subs	r3, #1
 8003080:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <xPortStartScheduler+0x134>)
 8003082:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d0ef      	beq.n	800307a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800309a:	4b27      	ldr	r3, [pc, #156]	; (8003138 <xPortStartScheduler+0x134>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1c3 0307 	rsb	r3, r3, #7
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d00a      	beq.n	80030bc <xPortStartScheduler+0xb8>
        __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	60bb      	str	r3, [r7, #8]
    }
 80030b8:	bf00      	nop
 80030ba:	e7fe      	b.n	80030ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <xPortStartScheduler+0x134>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <xPortStartScheduler+0x134>)
 80030c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <xPortStartScheduler+0x134>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030ce:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <xPortStartScheduler+0x134>)
 80030d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <xPortStartScheduler+0x138>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <xPortStartScheduler+0x138>)
 80030e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030e6:	4b15      	ldr	r3, [pc, #84]	; (800313c <xPortStartScheduler+0x138>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a14      	ldr	r2, [pc, #80]	; (800313c <xPortStartScheduler+0x138>)
 80030ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030f2:	f000 f963 	bl	80033bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <xPortStartScheduler+0x13c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80030fc:	f000 f982 	bl	8003404 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <xPortStartScheduler+0x140>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <xPortStartScheduler+0x140>)
 8003106:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800310a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800310c:	f7ff ff64 	bl	8002fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003110:	f7ff fd58 	bl	8002bc4 <vTaskSwitchContext>
    prvTaskExitError();
 8003114:	f7ff ff20 	bl	8002f58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000ed00 	.word	0xe000ed00
 8003128:	410fc271 	.word	0x410fc271
 800312c:	410fc270 	.word	0x410fc270
 8003130:	e000e400 	.word	0xe000e400
 8003134:	20000140 	.word	0x20000140
 8003138:	20000144 	.word	0x20000144
 800313c:	e000ed20 	.word	0xe000ed20
 8003140:	20000010 	.word	0x20000010
 8003144:	e000ef34 	.word	0xe000ef34

08003148 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800314e:	4b37      	ldr	r3, [pc, #220]	; (800322c <vInitPrioGroupValue+0xe4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a37      	ldr	r2, [pc, #220]	; (8003230 <vInitPrioGroupValue+0xe8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d10a      	bne.n	800316e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	613b      	str	r3, [r7, #16]
    }
 800316a:	bf00      	nop
 800316c:	e7fe      	b.n	800316c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <vInitPrioGroupValue+0xe4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a30      	ldr	r2, [pc, #192]	; (8003234 <vInitPrioGroupValue+0xec>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10a      	bne.n	800318e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	60fb      	str	r3, [r7, #12]
    }
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800318e:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <vInitPrioGroupValue+0xf0>)
 8003190:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <vInitPrioGroupValue+0xf4>)
 80031b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <vInitPrioGroupValue+0xf8>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031bc:	e009      	b.n	80031d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <vInitPrioGroupValue+0xf8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <vInitPrioGroupValue+0xf8>)
 80031c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d0ef      	beq.n	80031be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <vInitPrioGroupValue+0xf8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d00a      	beq.n	8003200 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	60bb      	str	r3, [r7, #8]
    }
 80031fc:	bf00      	nop
 80031fe:	e7fe      	b.n	80031fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <vInitPrioGroupValue+0xf8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <vInitPrioGroupValue+0xf8>)
 8003208:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <vInitPrioGroupValue+0xf8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <vInitPrioGroupValue+0xf8>)
 8003214:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000ed00 	.word	0xe000ed00
 8003230:	410fc271 	.word	0x410fc271
 8003234:	410fc270 	.word	0x410fc270
 8003238:	e000e400 	.word	0xe000e400
 800323c:	20000140 	.word	0x20000140
 8003240:	20000144 	.word	0x20000144

08003244 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
        __asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	607b      	str	r3, [r7, #4]
    }
 800325c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <vPortEnterCritical+0x58>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <vPortEnterCritical+0x58>)
 8003266:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <vPortEnterCritical+0x58>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d10f      	bne.n	8003290 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <vPortEnterCritical+0x5c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <vPortEnterCritical+0x4c>
        __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	603b      	str	r3, [r7, #0]
    }
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <vPortEnterCritical+0x4a>
    }
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	20000010 	.word	0x20000010
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <vPortExitCritical+0x50>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <vPortExitCritical+0x24>
        __asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	607b      	str	r3, [r7, #4]
    }
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <vPortExitCritical+0x50>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <vPortExitCritical+0x50>)
 80032d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <vPortExitCritical+0x50>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <vPortExitCritical+0x42>
 80032da:	2300      	movs	r3, #0
 80032dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000010 	.word	0x20000010
	...

08003300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003300:	f3ef 8009 	mrs	r0, PSP
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <pxCurrentTCBConst>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f01e 0f10 	tst.w	lr, #16
 8003310:	bf08      	it	eq
 8003312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331a:	6010      	str	r0, [r2, #0]
 800331c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003324:	f380 8811 	msr	BASEPRI, r0
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f7ff fc48 	bl	8002bc4 <vTaskSwitchContext>
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f380 8811 	msr	BASEPRI, r0
 800333c:	bc09      	pop	{r0, r3}
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	6808      	ldr	r0, [r1, #0]
 8003342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003346:	f01e 0f10 	tst.w	lr, #16
 800334a:	bf08      	it	eq
 800334c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003350:	f380 8809 	msr	PSP, r0
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	f3af 8000 	nop.w

08003360 <pxCurrentTCBConst>:
 8003360:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop

08003368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
        __asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	607b      	str	r3, [r7, #4]
    }
 8003380:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003382:	f002 f8c1 	bl	8005508 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003386:	f7ff fb61 	bl	8002a4c <xTaskIncrementTick>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003390:	f002 f918 	bl	80055c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <SysTick_Handler+0x50>)
 8003396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e001      	b.n	80033a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800339e:	f002 f8f5 	bl	800558c <SEGGER_SYSVIEW_RecordExitISR>
 80033a2:	2300      	movs	r3, #0
 80033a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f383 8811 	msr	BASEPRI, r3
    }
 80033ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <vPortSetupTimerInterrupt+0x34>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <vPortSetupTimerInterrupt+0x38>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <vPortSetupTimerInterrupt+0x3c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <vPortSetupTimerInterrupt+0x40>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	4a09      	ldr	r2, [pc, #36]	; (8003400 <vPortSetupTimerInterrupt+0x44>)
 80033da:	3b01      	subs	r3, #1
 80033dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033de:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <vPortSetupTimerInterrupt+0x34>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e010 	.word	0xe000e010
 80033f4:	e000e018 	.word	0xe000e018
 80033f8:	20000000 	.word	0x20000000
 80033fc:	10624dd3 	.word	0x10624dd3
 8003400:	e000e014 	.word	0xe000e014

08003404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003414 <vPortEnableVFP+0x10>
 8003408:	6801      	ldr	r1, [r0, #0]
 800340a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800340e:	6001      	str	r1, [r0, #0]
 8003410:	4770      	bx	lr
 8003412:	0000      	.short	0x0000
 8003414:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop

0800341c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003422:	f3ef 8305 	mrs	r3, IPSR
 8003426:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d914      	bls.n	8003458 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <vPortValidateInterruptPriority+0x70>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <vPortValidateInterruptPriority+0x74>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	7afa      	ldrb	r2, [r7, #11]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20a      	bcs.n	8003458 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	607b      	str	r3, [r7, #4]
    }
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <vPortValidateInterruptPriority+0x78>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <vPortValidateInterruptPriority+0x7c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d90a      	bls.n	800347e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	603b      	str	r3, [r7, #0]
    }
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vPortValidateInterruptPriority+0x60>
    }
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e3f0 	.word	0xe000e3f0
 8003490:	20000140 	.word	0x20000140
 8003494:	e000ed0c 	.word	0xe000ed0c
 8003498:	20000144 	.word	0x20000144

0800349c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f023 0307 	bic.w	r3, r3, #7
 80034b8:	3308      	adds	r3, #8
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d205      	bcs.n	80034cc <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	3308      	adds	r3, #8
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	e001      	b.n	80034d0 <pvPortMalloc+0x34>
                } 
                else 
                {
                    xWantedSize = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 80034d0:	f7ff f9ec 	bl	80028ac <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <pvPortMalloc+0x98>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <pvPortMalloc+0x9c>)
 80034de:	f023 0307 	bic.w	r3, r3, #7
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <pvPortMalloc+0x98>)
 80034e6:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01a      	beq.n	8003524 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <pvPortMalloc+0xa0>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <pvPortMalloc+0xa4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d813      	bhi.n	8003524 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <pvPortMalloc+0xa0>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	441a      	add	r2, r3
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <pvPortMalloc+0xa0>)
 8003506:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003508:	429a      	cmp	r2, r3
 800350a:	d90b      	bls.n	8003524 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <pvPortMalloc+0x98>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <pvPortMalloc+0xa0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4413      	add	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <pvPortMalloc+0xa0>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	4a06      	ldr	r2, [pc, #24]	; (800353c <pvPortMalloc+0xa0>)
 8003522:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003524:	f7ff f9d0 	bl	80028c8 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20012d4c 	.word	0x20012d4c
 8003538:	20000150 	.word	0x20000150
 800353c:	20012d48 	.word	0x20012d48
 8003540:	00012bf7 	.word	0x00012bf7

08003544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <vPortFree+0x24>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
    }
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <vPortFree+0x22>
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003578:	4803      	ldr	r0, [pc, #12]	; (8003588 <_cbSendSystemDesc+0x14>)
 800357a:	f001 ff6f 	bl	800545c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800357e:	4803      	ldr	r0, [pc, #12]	; (800358c <_cbSendSystemDesc+0x18>)
 8003580:	f001 ff6c 	bl	800545c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}
 8003588:	08005cb4 	.word	0x08005cb4
 800358c:	08005cf4 	.word	0x08005cf4

08003590 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <SEGGER_SYSVIEW_Conf+0x20>)
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SEGGER_SYSVIEW_Conf+0x24>)
 800359e:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <SEGGER_SYSVIEW_Conf+0x28>)
 80035a0:	f001 fbe0 	bl	8004d64 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80035a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80035a8:	f001 fc20 	bl	8004dec <SEGGER_SYSVIEW_SetRAMBase>
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000000 	.word	0x20000000
 80035b4:	08003575 	.word	0x08003575
 80035b8:	08005d94 	.word	0x08005d94

080035bc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80035bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035be:	b085      	sub	sp, #20
 80035c0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	e033      	b.n	8003630 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80035c8:	491e      	ldr	r1, [pc, #120]	; (8003644 <_cbSendTaskList+0x88>)
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	491a      	ldr	r1, [pc, #104]	; (8003644 <_cbSendTaskList+0x88>)
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3304      	adds	r3, #4
 80035e8:	6819      	ldr	r1, [r3, #0]
 80035ea:	4c16      	ldr	r4, [pc, #88]	; (8003644 <_cbSendTaskList+0x88>)
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4423      	add	r3, r4
 80035f8:	3308      	adds	r3, #8
 80035fa:	681c      	ldr	r4, [r3, #0]
 80035fc:	4d11      	ldr	r5, [pc, #68]	; (8003644 <_cbSendTaskList+0x88>)
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	442b      	add	r3, r5
 800360a:	330c      	adds	r3, #12
 800360c:	681d      	ldr	r5, [r3, #0]
 800360e:	4e0d      	ldr	r6, [pc, #52]	; (8003644 <_cbSendTaskList+0x88>)
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4433      	add	r3, r6
 800361c:	3310      	adds	r3, #16
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	462b      	mov	r3, r5
 8003624:	4622      	mov	r2, r4
 8003626:	f000 f8b5 	bl	8003794 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3301      	adds	r3, #1
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <_cbSendTaskList+0x8c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d3c6      	bcc.n	80035c8 <_cbSendTaskList+0xc>
  }
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003644:	20012d50 	.word	0x20012d50
 8003648:	20012df0 	.word	0x20012df0

0800364c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800364c:	b5b0      	push	{r4, r5, r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003652:	f7ff f9e9 	bl	8002a28 <xTaskGetTickCountFromISR>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	f04f 0400 	mov.w	r4, #0
 800366e:	f04f 0500 	mov.w	r5, #0
 8003672:	015d      	lsls	r5, r3, #5
 8003674:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003678:	0154      	lsls	r4, r2, #5
 800367a:	4622      	mov	r2, r4
 800367c:	462b      	mov	r3, r5
 800367e:	1a12      	subs	r2, r2, r0
 8003680:	eb63 0301 	sbc.w	r3, r3, r1
 8003684:	f04f 0400 	mov.w	r4, #0
 8003688:	f04f 0500 	mov.w	r5, #0
 800368c:	009d      	lsls	r5, r3, #2
 800368e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003692:	0094      	lsls	r4, r2, #2
 8003694:	4622      	mov	r2, r4
 8003696:	462b      	mov	r3, r5
 8003698:	1812      	adds	r2, r2, r0
 800369a:	eb41 0303 	adc.w	r3, r1, r3
 800369e:	f04f 0000 	mov.w	r0, #0
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	00d9      	lsls	r1, r3, #3
 80036a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ac:	00d0      	lsls	r0, r2, #3
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80036b6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bdb0      	pop	{r4, r5, r7, pc}

080036c4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80036d2:	2205      	movs	r2, #5
 80036d4:	492b      	ldr	r1, [pc, #172]	; (8003784 <SYSVIEW_AddTask+0xc0>)
 80036d6:	68b8      	ldr	r0, [r7, #8]
 80036d8:	f002 fa70 	bl	8005bbc <memcmp>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d04b      	beq.n	800377a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <SYSVIEW_AddTask+0xc4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b07      	cmp	r3, #7
 80036e8:	d903      	bls.n	80036f2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80036ea:	4828      	ldr	r0, [pc, #160]	; (800378c <SYSVIEW_AddTask+0xc8>)
 80036ec:	f002 f9b8 	bl	8005a60 <SEGGER_SYSVIEW_Warn>
    return;
 80036f0:	e044      	b.n	800377c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80036f2:	4b25      	ldr	r3, [pc, #148]	; (8003788 <SYSVIEW_AddTask+0xc4>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4926      	ldr	r1, [pc, #152]	; (8003790 <SYSVIEW_AddTask+0xcc>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <SYSVIEW_AddTask+0xc4>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4921      	ldr	r1, [pc, #132]	; (8003790 <SYSVIEW_AddTask+0xcc>)
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3304      	adds	r3, #4
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <SYSVIEW_AddTask+0xc4>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	491b      	ldr	r1, [pc, #108]	; (8003790 <SYSVIEW_AddTask+0xcc>)
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3308      	adds	r3, #8
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <SYSVIEW_AddTask+0xc4>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4916      	ldr	r1, [pc, #88]	; (8003790 <SYSVIEW_AddTask+0xcc>)
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	330c      	adds	r3, #12
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <SYSVIEW_AddTask+0xc4>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4910      	ldr	r1, [pc, #64]	; (8003790 <SYSVIEW_AddTask+0xcc>)
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3310      	adds	r3, #16
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <SYSVIEW_AddTask+0xc4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	4a08      	ldr	r2, [pc, #32]	; (8003788 <SYSVIEW_AddTask+0xc4>)
 8003766:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f80e 	bl	8003794 <SYSVIEW_SendTaskInfo>
 8003778:	e000      	b.n	800377c <SYSVIEW_AddTask+0xb8>
    return;
 800377a:	bf00      	nop

}
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08005d04 	.word	0x08005d04
 8003788:	20012df0 	.word	0x20012df0
 800378c:	08005d0c 	.word	0x08005d0c
 8003790:	20012d50 	.word	0x20012d50

08003794 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	2214      	movs	r2, #20
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f002 fa22 	bl	8005bf4 <memset>
  TaskInfo.TaskID     = TaskID;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 fd4f 	bl	800526c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80037ce:	bf00      	nop
 80037d0:	3728      	adds	r7, #40	; 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <__NVIC_EnableIRQ>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	db0b      	blt.n	8003802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	f003 021f 	and.w	r2, r3, #31
 80037f0:	4907      	ldr	r1, [pc, #28]	; (8003810 <__NVIC_EnableIRQ+0x38>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2001      	movs	r0, #1
 80037fa:	fa00 f202 	lsl.w	r2, r0, r2
 80037fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	; (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	; (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800386e:	f002 f953 	bl	8005b18 <SEGGER_SYSVIEW_IsStarted>
 8003872:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800387a:	f001 fb7b 	bl	8004f74 <SEGGER_SYSVIEW_Start>
  }
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <_cbOnUARTRx+0x3c>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d806      	bhi.n	80038a8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <_cbOnUARTRx+0x3c>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <_cbOnUARTRx+0x3c>)
 80038a4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80038a6:	e009      	b.n	80038bc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80038a8:	f7ff ffde 	bl	8003868 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <_cbOnUARTRx+0x3c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4618      	mov	r0, r3
 80038b2:	1dfb      	adds	r3, r7, #7
 80038b4:	2201      	movs	r2, #1
 80038b6:	4619      	mov	r1, r3
 80038b8:	f000 fb9a 	bl	8003ff0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80038bc:	bf00      	nop
}
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000014 	.word	0x20000014

080038c8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80038d0:	4b14      	ldr	r3, [pc, #80]	; (8003924 <_cbOnUARTTx+0x5c>)
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d80f      	bhi.n	80038f8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <_cbOnUARTTx+0x5c>)
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	461a      	mov	r2, r3
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <_cbOnUARTTx+0x60>)
 80038e0:	5c9a      	ldrb	r2, [r3, r2]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <_cbOnUARTTx+0x5c>)
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	3301      	adds	r3, #1
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <_cbOnUARTTx+0x5c>)
 80038f0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80038f6:	e00f      	b.n	8003918 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <_cbOnUARTTx+0x5c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fa19 	bl	8003d38 <SEGGER_RTT_ReadUpBufferNoLock>
 8003906:	4603      	mov	r3, r0
 8003908:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da02      	bge.n	8003916 <_cbOnUARTTx+0x4e>
    r = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	e000      	b.n	8003918 <_cbOnUARTTx+0x50>
  }
Done:
 8003916:	bf00      	nop
  return r;
 8003918:	68fb      	ldr	r3, [r7, #12]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000014 	.word	0x20000014
 8003928:	08005d9c 	.word	0x08005d9c

0800392c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <SEGGER_UART_init+0x1c>)
 8003936:	4905      	ldr	r1, [pc, #20]	; (800394c <SEGGER_UART_init+0x20>)
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f863 	bl	8003a04 <HIF_UART_Init>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	08003889 	.word	0x08003889
 800394c:	080038c9 	.word	0x080038c9

08003950 <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <USART2_IRQHandler+0x80>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d011      	beq.n	800398a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <USART2_IRQHandler+0x84>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 030b 	and.w	r3, r3, #11
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <USART2_IRQHandler+0x88>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d004      	beq.n	800398a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003980:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <USART2_IRQHandler+0x88>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	79fa      	ldrb	r2, [r7, #7]
 8003986:	4610      	mov	r0, r2
 8003988:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01a      	beq.n	80039ca <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <USART2_IRQHandler+0x8c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d015      	beq.n	80039c8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <USART2_IRQHandler+0x8c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	1dfa      	adds	r2, r7, #7
 80039a2:	4610      	mov	r0, r2
 80039a4:	4798      	blx	r3
 80039a6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <USART2_IRQHandler+0x90>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <USART2_IRQHandler+0x90>)
 80039b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e006      	b.n	80039ca <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <USART2_IRQHandler+0x80>)
 80039be:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80039c0:	79fa      	ldrb	r2, [r7, #7]
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <USART2_IRQHandler+0x84>)
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e000      	b.n	80039ca <USART2_IRQHandler+0x7a>
      return;
 80039c8:	bf00      	nop
    }
  }
}
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40004400 	.word	0x40004400
 80039d4:	40004404 	.word	0x40004404
 80039d8:	20012df4 	.word	0x20012df4
 80039dc:	20012df8 	.word	0x20012df8
 80039e0:	4000440c 	.word	0x4000440c

080039e4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	6013      	str	r3, [r2, #0]
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	4000440c 	.word	0x4000440c

08003a04 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003a10:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <HIF_UART_Init+0xc8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2d      	ldr	r2, [pc, #180]	; (8003acc <HIF_UART_Init+0xc8>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003a1c:	4b2c      	ldr	r3, [pc, #176]	; (8003ad0 <HIF_UART_Init+0xcc>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2b      	ldr	r2, [pc, #172]	; (8003ad0 <HIF_UART_Init+0xcc>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003a28:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HIF_UART_Init+0xd0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a34:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003a3c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003a3e:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <HIF_UART_Init+0xd0>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HIF_UART_Init+0xd4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a50:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003a58:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003a5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ad8 <HIF_UART_Init+0xd4>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003a60:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <HIF_UART_Init+0xd8>)
 8003a62:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003a66:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <HIF_UART_Init+0xdc>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HIF_UART_Init+0xe0>)
 8003a70:	2280      	movs	r2, #128	; 0x80
 8003a72:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HIF_UART_Init+0xe4>)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	d302      	bcc.n	8003a9a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003a94:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a98:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	4a11      	ldr	r2, [pc, #68]	; (8003aec <HIF_UART_Init+0xe8>)
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003aaa:	4a11      	ldr	r2, [pc, #68]	; (8003af0 <HIF_UART_Init+0xec>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003ab0:	4a10      	ldr	r2, [pc, #64]	; (8003af4 <HIF_UART_Init+0xf0>)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003ab6:	2106      	movs	r1, #6
 8003ab8:	2026      	movs	r0, #38	; 0x26
 8003aba:	f7ff feab 	bl	8003814 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003abe:	2026      	movs	r0, #38	; 0x26
 8003ac0:	f7ff fe8a 	bl	80037d8 <__NVIC_EnableIRQ>
}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40023840 	.word	0x40023840
 8003ad0:	40023830 	.word	0x40023830
 8003ad4:	40020020 	.word	0x40020020
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	4000440c 	.word	0x4000440c
 8003ae0:	40004410 	.word	0x40004410
 8003ae4:	40004414 	.word	0x40004414
 8003ae8:	055d4a80 	.word	0x055d4a80
 8003aec:	40004408 	.word	0x40004408
 8003af0:	20012df4 	.word	0x20012df4
 8003af4:	20012df8 	.word	0x20012df8

08003af8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <_DoInit+0x98>)
 8003b00:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2203      	movs	r2, #3
 8003b06:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <_DoInit+0x9c>)
 8003b12:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a20      	ldr	r2, [pc, #128]	; (8003b98 <_DoInit+0xa0>)
 8003b18:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b20:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <_DoInit+0x9c>)
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <_DoInit+0xa4>)
 8003b3e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2210      	movs	r2, #16
 8003b44:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3307      	adds	r3, #7
 8003b5c:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <_DoInit+0xa8>)
 8003b5e:	6810      	ldr	r0, [r2, #0]
 8003b60:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b62:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <_DoInit+0xac>)
 8003b6a:	6810      	ldr	r0, [r2, #0]
 8003b6c:	6018      	str	r0, [r3, #0]
 8003b6e:	8891      	ldrh	r1, [r2, #4]
 8003b70:	7992      	ldrb	r2, [r2, #6]
 8003b72:	8099      	strh	r1, [r3, #4]
 8003b74:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b76:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b80:	f3bf 8f5f 	dmb	sy
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	20014384 	.word	0x20014384
 8003b94:	08005d5c 	.word	0x08005d5c
 8003b98:	20012dfc 	.word	0x20012dfc
 8003b9c:	200131fc 	.word	0x200131fc
 8003ba0:	08005d68 	.word	0x08005d68
 8003ba4:	08005d6c 	.word	0x08005d6c

08003ba8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d905      	bls.n	8003bd8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e007      	b.n	8003be8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	1acb      	subs	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	3b01      	subs	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	bf28      	it	cs
 8003bf6:	4613      	movcs	r3, r2
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	bf28      	it	cs
 8003c02:	4613      	movcs	r3, r2
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	6978      	ldr	r0, [r7, #20]
 8003c16:	f001 ffdf 	bl	8005bd8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	4413      	add	r3, r2
 8003c20:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	4413      	add	r3, r2
 8003c28:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	4413      	add	r3, r2
 8003c38:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d101      	bne.n	8003c48 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1b2      	bne.n	8003bbe <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003c58:	6a3b      	ldr	r3, [r7, #32]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3728      	adds	r7, #40	; 0x28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b088      	sub	sp, #32
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d911      	bls.n	8003caa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	6938      	ldr	r0, [r7, #16]
 8003c96:	f001 ff9f 	bl	8005bd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c9a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	441a      	add	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003ca8:	e01f      	b.n	8003cea <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	6938      	ldr	r0, [r7, #16]
 8003cbe:	f001 ff8b 	bl	8005bd8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6938      	ldr	r0, [r7, #16]
 8003cdc:	f001 ff7c 	bl	8005bd8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ce0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	60da      	str	r2, [r3, #12]
}
 8003cea:	bf00      	nop
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d808      	bhi.n	8003d20 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad2      	subs	r2, r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e004      	b.n	8003d2a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003d2a:	697b      	ldr	r3, [r7, #20]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003d44:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003d46:	623b      	str	r3, [r7, #32]
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003d52:	f7ff fed1 	bl	8003af8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4a37      	ldr	r2, [pc, #220]	; (8003e40 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003d64:	4413      	add	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d92b      	bls.n	8003ddc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bf28      	it	cs
 8003d96:	4613      	movcs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	4413      	add	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6939      	ldr	r1, [r7, #16]
 8003da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003daa:	f001 ff15 	bl	8005bd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4413      	add	r3, r2
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d101      	bne.n	8003ddc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4293      	cmp	r3, r2
 8003dea:	bf28      	it	cs
 8003dec:	4613      	movcs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d019      	beq.n	8003e2a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	4413      	add	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	6939      	ldr	r1, [r7, #16]
 8003e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e06:	f001 fee7 	bl	8005bd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	4413      	add	r3, r2
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4413      	add	r3, r2
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3730      	adds	r7, #48	; 0x30
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20014384 	.word	0x20014384

08003e44 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	; 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003e50:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <SEGGER_RTT_ReadNoLock+0x108>)
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <SEGGER_RTT_ReadNoLock+0x1e>
 8003e5e:	f7ff fe4b 	bl	8003af8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	3360      	adds	r3, #96	; 0x60
 8003e6e:	4a37      	ldr	r2, [pc, #220]	; (8003f4c <SEGGER_RTT_ReadNoLock+0x108>)
 8003e70:	4413      	add	r3, r2
 8003e72:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d92b      	bls.n	8003ee8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	bf28      	it	cs
 8003ea2:	4613      	movcs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	4413      	add	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eb6:	f001 fe8f 	bl	8005bd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d101      	bne.n	8003ee8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bf28      	it	cs
 8003ef8:	4613      	movcs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d019      	beq.n	8003f36 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	4413      	add	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6939      	ldr	r1, [r7, #16]
 8003f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f12:	f001 fe61 	bl	8005bd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4413      	add	r3, r2
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f40:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3730      	adds	r7, #48	; 0x30
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20014384 	.word	0x20014384

08003f50 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	3360      	adds	r3, #96	; 0x60
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003f6e:	4413      	add	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d029      	beq.n	8003fce <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d82e      	bhi.n	8003fdc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d013      	beq.n	8003fae <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003f86:	e029      	b.n	8003fdc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f88:	6978      	ldr	r0, [r7, #20]
 8003f8a:	f7ff feb2 	bl	8003cf2 <_GetAvailWriteSpace>
 8003f8e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d202      	bcs.n	8003f9e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f9c:	e021      	b.n	8003fe2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	6978      	ldr	r0, [r7, #20]
 8003fa8:	f7ff fe5b 	bl	8003c62 <_WriteNoCheck>
    break;
 8003fac:	e019      	b.n	8003fe2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f7ff fe9f 	bl	8003cf2 <_GetAvailWriteSpace>
 8003fb4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	bf28      	it	cs
 8003fbe:	4613      	movcs	r3, r2
 8003fc0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	69b9      	ldr	r1, [r7, #24]
 8003fc6:	6978      	ldr	r0, [r7, #20]
 8003fc8:	f7ff fe4b 	bl	8003c62 <_WriteNoCheck>
    break;
 8003fcc:	e009      	b.n	8003fe2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	6978      	ldr	r0, [r7, #20]
 8003fd4:	f7ff fde8 	bl	8003ba8 <_WriteBlocking>
 8003fd8:	61f8      	str	r0, [r7, #28]
    break;
 8003fda:	e002      	b.n	8003fe2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61fb      	str	r3, [r7, #28]
    break;
 8003fe0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20014384 	.word	0x20014384

08003ff0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800400a:	f7ff fd75 	bl	8003af8 <_DoInit>
  SEGGER_RTT_LOCK();
 800400e:	f3ef 8311 	mrs	r3, BASEPRI
 8004012:	f04f 0120 	mov.w	r1, #32
 8004016:	f381 8811 	msr	BASEPRI, r1
 800401a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ff95 	bl	8003f50 <SEGGER_RTT_WriteDownBufferNoLock>
 8004026:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800402e:	697b      	ldr	r3, [r7, #20]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20014384 	.word	0x20014384

0800403c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800404a:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004058:	f7ff fd4e 	bl	8003af8 <_DoInit>
  SEGGER_RTT_LOCK();
 800405c:	f3ef 8311 	mrs	r3, BASEPRI
 8004060:	f04f 0120 	mov.w	r1, #32
 8004064:	f381 8811 	msr	BASEPRI, r1
 8004068:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800406a:	4b35      	ldr	r3, [pc, #212]	; (8004140 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800406c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004072:	6939      	ldr	r1, [r7, #16]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	440b      	add	r3, r1
 8004082:	3304      	adds	r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	429a      	cmp	r2, r3
 8004098:	dbeb      	blt.n	8004072 <SEGGER_RTT_AllocUpBuffer+0x36>
 800409a:	e000      	b.n	800409e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800409c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	da3f      	bge.n	8004128 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80040a8:	6939      	ldr	r1, [r7, #16]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	440b      	add	r3, r1
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	3304      	adds	r3, #4
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80040d2:	6939      	ldr	r1, [r7, #16]
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	3320      	adds	r3, #32
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80040e6:	6939      	ldr	r1, [r7, #16]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	440b      	add	r3, r1
 80040f4:	3328      	adds	r3, #40	; 0x28
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	440b      	add	r3, r1
 8004108:	3324      	adds	r3, #36	; 0x24
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800410e:	6939      	ldr	r1, [r7, #16]
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	440b      	add	r3, r1
 800411c:	332c      	adds	r3, #44	; 0x2c
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004122:	f3bf 8f5f 	dmb	sy
 8004126:	e002      	b.n	800412e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004128:	f04f 33ff 	mov.w	r3, #4294967295
 800412c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004134:	69fb      	ldr	r3, [r7, #28]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20014384 	.word	0x20014384

08004144 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004160:	f7ff fcca 	bl	8003af8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004164:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004166:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d82c      	bhi.n	80041c8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800416e:	f3ef 8311 	mrs	r3, BASEPRI
 8004172:	f04f 0120 	mov.w	r1, #32
 8004176:	f381 8811 	msr	BASEPRI, r1
 800417a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	3360      	adds	r3, #96	; 0x60
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	4413      	add	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2200      	movs	r2, #0
 80041b0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041b8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	e002      	b.n	80041ce <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20014384 	.word	0x20014384

080041dc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00f      	beq.n	8004212 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80041f2:	e002      	b.n	80041fa <_EncodeStr+0x1e>
      Len++;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	3301      	adds	r3, #1
 80041f8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f6      	bne.n	80041f4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d901      	bls.n	8004212 <_EncodeStr+0x36>
      Len = Limit;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2bfe      	cmp	r3, #254	; 0xfe
 8004216:	d806      	bhi.n	8004226 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	60fa      	str	r2, [r7, #12]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e011      	b.n	800424a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	60fa      	str	r2, [r7, #12]
 800422c:	22ff      	movs	r2, #255	; 0xff
 800422e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	60fa      	str	r2, [r7, #12]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	0a19      	lsrs	r1, r3, #8
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	60fa      	str	r2, [r7, #12]
 8004246:	b2ca      	uxtb	r2, r1
 8004248:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800424e:	e00a      	b.n	8004266 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	1c53      	adds	r3, r2, #1
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1c59      	adds	r1, r3, #1
 800425a:	60f9      	str	r1, [r7, #12]
 800425c:	7812      	ldrb	r2, [r2, #0]
 800425e:	701a      	strb	r2, [r3, #0]
    n++;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3301      	adds	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d3f0      	bcc.n	8004250 <_EncodeStr+0x74>
  }
  return pPayload;
 800426e:	68fb      	ldr	r3, [r7, #12]
}
 8004270:	4618      	mov	r0, r3
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800429a:	4b36      	ldr	r3, [pc, #216]	; (8004374 <_HandleIncomingPacket+0xe0>)
 800429c:	7e1b      	ldrb	r3, [r3, #24]
 800429e:	4618      	mov	r0, r3
 80042a0:	1cfb      	adds	r3, r7, #3
 80042a2:	2201      	movs	r2, #1
 80042a4:	4619      	mov	r1, r3
 80042a6:	f7ff fdcd 	bl	8003e44 <SEGGER_RTT_ReadNoLock>
 80042aa:	4603      	mov	r3, r0
 80042ac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dd54      	ble.n	800435e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d032      	beq.n	8004320 <_HandleIncomingPacket+0x8c>
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	dc42      	bgt.n	8004344 <_HandleIncomingPacket+0xb0>
 80042be:	2b07      	cmp	r3, #7
 80042c0:	dc16      	bgt.n	80042f0 <_HandleIncomingPacket+0x5c>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	dd3e      	ble.n	8004344 <_HandleIncomingPacket+0xb0>
 80042c6:	3b01      	subs	r3, #1
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d83b      	bhi.n	8004344 <_HandleIncomingPacket+0xb0>
 80042cc:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <_HandleIncomingPacket+0x40>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042f7 	.word	0x080042f7
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	08004303 	.word	0x08004303
 80042e0:	08004309 	.word	0x08004309
 80042e4:	0800430f 	.word	0x0800430f
 80042e8:	08004315 	.word	0x08004315
 80042ec:	0800431b 	.word	0x0800431b
 80042f0:	2b7f      	cmp	r3, #127	; 0x7f
 80042f2:	d036      	beq.n	8004362 <_HandleIncomingPacket+0xce>
 80042f4:	e026      	b.n	8004344 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042f6:	f000 fe3d 	bl	8004f74 <SEGGER_SYSVIEW_Start>
      break;
 80042fa:	e037      	b.n	800436c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80042fc:	f000 fef6 	bl	80050ec <SEGGER_SYSVIEW_Stop>
      break;
 8004300:	e034      	b.n	800436c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004302:	f001 f8cf 	bl	80054a4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004306:	e031      	b.n	800436c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004308:	f001 f894 	bl	8005434 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800430c:	e02e      	b.n	800436c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800430e:	f000 ff13 	bl	8005138 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004312:	e02b      	b.n	800436c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004314:	f001 fb52 	bl	80059bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004318:	e028      	b.n	800436c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800431a:	f001 fb31 	bl	8005980 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800431e:	e025      	b.n	800436c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004320:	4b14      	ldr	r3, [pc, #80]	; (8004374 <_HandleIncomingPacket+0xe0>)
 8004322:	7e1b      	ldrb	r3, [r3, #24]
 8004324:	4618      	mov	r0, r3
 8004326:	1cfb      	adds	r3, r7, #3
 8004328:	2201      	movs	r2, #1
 800432a:	4619      	mov	r1, r3
 800432c:	f7ff fd8a 	bl	8003e44 <SEGGER_RTT_ReadNoLock>
 8004330:	4603      	mov	r3, r0
 8004332:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	dd15      	ble.n	8004366 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	4618      	mov	r0, r3
 800433e:	f001 fa9f 	bl	8005880 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004342:	e010      	b.n	8004366 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	b25b      	sxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	da0e      	bge.n	800436a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <_HandleIncomingPacket+0xe0>)
 800434e:	7e1b      	ldrb	r3, [r3, #24]
 8004350:	4618      	mov	r0, r3
 8004352:	1cfb      	adds	r3, r7, #3
 8004354:	2201      	movs	r2, #1
 8004356:	4619      	mov	r1, r3
 8004358:	f7ff fd74 	bl	8003e44 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800435c:	e005      	b.n	800436a <_HandleIncomingPacket+0xd6>
    }
  }
 800435e:	bf00      	nop
 8004360:	e004      	b.n	800436c <_HandleIncomingPacket+0xd8>
      break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <_HandleIncomingPacket+0xd8>
      break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <_HandleIncomingPacket+0xd8>
      break;
 800436a:	bf00      	nop
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20014214 	.word	0x20014214

08004378 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	; 0x30
 800437c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800437e:	2301      	movs	r3, #1
 8004380:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	3301      	adds	r3, #1
 8004386:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
 8004392:	e00b      	b.n	80043ac <_TrySendOverflowPacket+0x34>
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	b2da      	uxtb	r2, r3
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800439e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	09db      	lsrs	r3, r3, #7
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b7f      	cmp	r3, #127	; 0x7f
 80043b0:	d8f0      	bhi.n	8004394 <_TrySendOverflowPacket+0x1c>
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <_TrySendOverflowPacket+0xe4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043c8:	4b23      	ldr	r3, [pc, #140]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	e00b      	b.n	80043f4 <_TrySendOverflowPacket+0x7c>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	6279      	str	r1, [r7, #36]	; 0x24
 80043e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	09db      	lsrs	r3, r3, #7
 80043f2:	623b      	str	r3, [r7, #32]
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	2b7f      	cmp	r3, #127	; 0x7f
 80043f8:	d8f0      	bhi.n	80043dc <_TrySendOverflowPacket+0x64>
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004400:	6a3a      	ldr	r2, [r7, #32]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	4618      	mov	r0, r3
 8004410:	1d3b      	adds	r3, r7, #4
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	461a      	mov	r2, r3
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	4619      	mov	r1, r3
 800441c:	f7fb fef8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004420:	4603      	mov	r3, r0
 8004422:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004424:	f7ff fade 	bl	80039e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	3b01      	subs	r3, #1
 800443a:	b2da      	uxtb	r2, r3
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e004      	b.n	800444c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	3301      	adds	r3, #1
 8004448:	4a03      	ldr	r2, [pc, #12]	; (8004458 <_TrySendOverflowPacket+0xe0>)
 800444a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800444c:	693b      	ldr	r3, [r7, #16]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3730      	adds	r7, #48	; 0x30
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20014214 	.word	0x20014214
 800445c:	e0001004 	.word	0xe0001004

08004460 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800446c:	4b6d      	ldr	r3, [pc, #436]	; (8004624 <_SendPacket+0x1c4>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d010      	beq.n	8004496 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004474:	4b6b      	ldr	r3, [pc, #428]	; (8004624 <_SendPacket+0x1c4>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80a5 	beq.w	80045c8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800447e:	4b69      	ldr	r3, [pc, #420]	; (8004624 <_SendPacket+0x1c4>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d109      	bne.n	800449a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004486:	f7ff ff77 	bl	8004378 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800448a:	4b66      	ldr	r3, [pc, #408]	; (8004624 <_SendPacket+0x1c4>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 809c 	bne.w	80045cc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004494:	e001      	b.n	800449a <_SendPacket+0x3a>
    goto Send;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <_SendPacket+0x3c>
Send:
 800449a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b1f      	cmp	r3, #31
 80044a0:	d809      	bhi.n	80044b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80044a2:	4b60      	ldr	r3, [pc, #384]	; (8004624 <_SendPacket+0x1c4>)
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 808d 	bne.w	80045d0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b17      	cmp	r3, #23
 80044ba:	d807      	bhi.n	80044cc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3b01      	subs	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e03d      	b.n	8004548 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b7f      	cmp	r3, #127	; 0x7f
 80044d8:	d912      	bls.n	8004500 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	09da      	lsrs	r2, r3, #7
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	3a01      	subs	r2, #1
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e006      	b.n	800450e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b7f      	cmp	r3, #127	; 0x7f
 8004512:	d912      	bls.n	800453a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	09da      	lsrs	r2, r3, #7
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3b01      	subs	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	3a01      	subs	r2, #1
 800452c:	60fa      	str	r2, [r7, #12]
 800452e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e006      	b.n	8004548 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3b01      	subs	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004548:	4b37      	ldr	r3, [pc, #220]	; (8004628 <_SendPacket+0x1c8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800454e:	4b35      	ldr	r3, [pc, #212]	; (8004624 <_SendPacket+0x1c4>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	623b      	str	r3, [r7, #32]
 8004560:	e00b      	b.n	800457a <_SendPacket+0x11a>
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	1c59      	adds	r1, r3, #1
 800456a:	6279      	str	r1, [r7, #36]	; 0x24
 800456c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	09db      	lsrs	r3, r3, #7
 8004578:	623b      	str	r3, [r7, #32]
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	2b7f      	cmp	r3, #127	; 0x7f
 800457e:	d8f0      	bhi.n	8004562 <_SendPacket+0x102>
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	627a      	str	r2, [r7, #36]	; 0x24
 8004586:	6a3a      	ldr	r2, [r7, #32]
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004590:	4b24      	ldr	r3, [pc, #144]	; (8004624 <_SendPacket+0x1c4>)
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	4618      	mov	r0, r3
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	461a      	mov	r2, r3
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	f7fb fe36 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045a4:	4603      	mov	r3, r0
 80045a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80045a8:	f7ff fa1c 	bl	80039e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <_SendPacket+0x1c4>)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	60d3      	str	r3, [r2, #12]
 80045b8:	e00b      	b.n	80045d2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80045ba:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <_SendPacket+0x1c4>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4b18      	ldr	r3, [pc, #96]	; (8004624 <_SendPacket+0x1c4>)
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e004      	b.n	80045d2 <_SendPacket+0x172>
    goto SendDone;
 80045c8:	bf00      	nop
 80045ca:	e002      	b.n	80045d2 <_SendPacket+0x172>
      goto SendDone;
 80045cc:	bf00      	nop
 80045ce:	e000      	b.n	80045d2 <_SendPacket+0x172>
      goto SendDone;
 80045d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <_SendPacket+0x1c4>)
 80045d4:	7e1b      	ldrb	r3, [r3, #24]
 80045d6:	4619      	mov	r1, r3
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <_SendPacket+0x1cc>)
 80045da:	460b      	mov	r3, r1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	440b      	add	r3, r1
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	336c      	adds	r3, #108	; 0x6c
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <_SendPacket+0x1c4>)
 80045ea:	7e1b      	ldrb	r3, [r3, #24]
 80045ec:	4618      	mov	r0, r3
 80045ee:	490f      	ldr	r1, [pc, #60]	; (800462c <_SendPacket+0x1cc>)
 80045f0:	4603      	mov	r3, r0
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4403      	add	r3, r0
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	3370      	adds	r3, #112	; 0x70
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d00b      	beq.n	800461a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <_SendPacket+0x1c4>)
 8004604:	789b      	ldrb	r3, [r3, #2]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <_SendPacket+0x1c4>)
 800460c:	2201      	movs	r2, #1
 800460e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004610:	f7ff fe40 	bl	8004294 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <_SendPacket+0x1c4>)
 8004616:	2200      	movs	r2, #0
 8004618:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800461a:	bf00      	nop
 800461c:	3728      	adds	r7, #40	; 0x28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20014214 	.word	0x20014214
 8004628:	e0001004 	.word	0xe0001004
 800462c:	20014384 	.word	0x20014384

08004630 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	3301      	adds	r3, #1
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d80a      	bhi.n	8004660 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6051      	str	r1, [r2, #4]
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d15a      	bne.n	800471e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	623b      	str	r3, [r7, #32]
 8004688:	e00b      	b.n	80046a2 <_StoreChar+0x72>
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	1c59      	adds	r1, r3, #1
 8004692:	6279      	str	r1, [r7, #36]	; 0x24
 8004694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	09db      	lsrs	r3, r3, #7
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2b7f      	cmp	r3, #127	; 0x7f
 80046a6:	d8f0      	bhi.n	800468a <_StoreChar+0x5a>
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	627a      	str	r2, [r7, #36]	; 0x24
 80046ae:	6a3a      	ldr	r2, [r7, #32]
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e00b      	b.n	80046da <_StoreChar+0xaa>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	1c59      	adds	r1, r3, #1
 80046ca:	61f9      	str	r1, [r7, #28]
 80046cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	09db      	lsrs	r3, r3, #7
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b7f      	cmp	r3, #127	; 0x7f
 80046de:	d8f0      	bhi.n	80046c2 <_StoreChar+0x92>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	61fa      	str	r2, [r7, #28]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	221a      	movs	r2, #26
 80046f6:	6939      	ldr	r1, [r7, #16]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff feb1 	bl	8004460 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fdba 	bl	800427c <_PreparePacket>
 8004708:	4602      	mov	r2, r0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
  }
}
 800471e:	bf00      	nop
 8004720:	3728      	adds	r7, #40	; 0x28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800473a:	2301      	movs	r3, #1
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800473e:	2301      	movs	r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004742:	e007      	b.n	8004754 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004744:	6a3a      	ldr	r2, [r7, #32]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	623b      	str	r3, [r7, #32]
    Width++;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3301      	adds	r3, #1
 8004752:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004754:	6a3a      	ldr	r2, [r7, #32]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d2f3      	bcs.n	8004744 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	429a      	cmp	r2, r3
 8004762:	d901      	bls.n	8004768 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d11f      	bne.n	80047b2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01c      	beq.n	80047b2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <_PrintUnsigned+0x66>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <_PrintUnsigned+0x66>
        c = '0';
 8004788:	2330      	movs	r3, #48	; 0x30
 800478a:	76fb      	strb	r3, [r7, #27]
 800478c:	e001      	b.n	8004792 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800478e:	2320      	movs	r3, #32
 8004790:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004792:	e007      	b.n	80047a4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	3b01      	subs	r3, #1
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800479a:	7efb      	ldrb	r3, [r7, #27]
 800479c:	4619      	mov	r1, r3
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff ff46 	bl	8004630 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <_PrintUnsigned+0x8a>
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d3f0      	bcc.n	8004794 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d903      	bls.n	80047c0 <_PrintUnsigned+0x98>
      NumDigits--;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	e009      	b.n	80047d4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d200      	bcs.n	80047d4 <_PrintUnsigned+0xac>
        break;
 80047d2:	e005      	b.n	80047e0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80047de:	e7e8      	b.n	80047b2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ee:	fb02 f303 	mul.w	r3, r2, r3
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80047f8:	4a15      	ldr	r2, [pc, #84]	; (8004850 <_PrintUnsigned+0x128>)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4413      	add	r3, r2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	4619      	mov	r1, r3
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7ff ff14 	bl	8004630 <_StoreChar>
    Digit /= Base;
 8004808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e3      	bne.n	80047e0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d011      	beq.n	8004846 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00e      	beq.n	8004846 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004828:	e006      	b.n	8004838 <_PrintUnsigned+0x110>
        FieldWidth--;
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	3b01      	subs	r3, #1
 800482e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004830:	2120      	movs	r1, #32
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff fefc 	bl	8004630 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <_PrintUnsigned+0x11e>
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	429a      	cmp	r2, r3
 8004844:	d3f1      	bcc.n	800482a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004846:	bf00      	nop
 8004848:	3728      	adds	r7, #40	; 0x28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	08005dac 	.word	0x08005dac

08004854 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	bfb8      	it	lt
 8004868:	425b      	neglt	r3, r3
 800486a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800486c:	2301      	movs	r3, #1
 800486e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004870:	e007      	b.n	8004882 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	fb92 f3f3 	sdiv	r3, r2, r3
 800487a:	613b      	str	r3, [r7, #16]
    Width++;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	daf3      	bge.n	8004872 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	429a      	cmp	r2, r3
 8004890:	d901      	bls.n	8004896 <_PrintInt+0x42>
    Width = NumDigits;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <_PrintInt+0x5e>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	db04      	blt.n	80048ac <_PrintInt+0x58>
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <_PrintInt+0x5e>
    FieldWidth--;
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <_PrintInt+0x6e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <_PrintInt+0x9c>
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d111      	bne.n	80048f0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00e      	beq.n	80048f0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048d2:	e006      	b.n	80048e2 <_PrintInt+0x8e>
        FieldWidth--;
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80048da:	2120      	movs	r1, #32
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff fea7 	bl	8004630 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <_PrintInt+0x9c>
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d3f1      	bcc.n	80048d4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da07      	bge.n	8004906 <_PrintInt+0xb2>
    v = -v;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	425b      	negs	r3, r3
 80048fa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80048fc:	212d      	movs	r1, #45	; 0x2d
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff fe96 	bl	8004630 <_StoreChar>
 8004904:	e008      	b.n	8004918 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004910:	212b      	movs	r1, #43	; 0x2b
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f7ff fe8c 	bl	8004630 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d019      	beq.n	8004956 <_PrintInt+0x102>
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d114      	bne.n	8004956 <_PrintInt+0x102>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d111      	bne.n	8004956 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00e      	beq.n	8004956 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004938:	e006      	b.n	8004948 <_PrintInt+0xf4>
        FieldWidth--;
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	3b01      	subs	r3, #1
 800493e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004940:	2130      	movs	r1, #48	; 0x30
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff fe74 	bl	8004630 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <_PrintInt+0x102>
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	429a      	cmp	r2, r3
 8004954:	d3f1      	bcc.n	800493a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7ff fedf 	bl	8004728 <_PrintUnsigned>
}
 800496a:	bf00      	nop
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b098      	sub	sp, #96	; 0x60
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004980:	f3ef 8311 	mrs	r3, BASEPRI
 8004984:	f04f 0120 	mov.w	r1, #32
 8004988:	f381 8811 	msr	BASEPRI, r1
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
 800498e:	48b7      	ldr	r0, [pc, #732]	; (8004c6c <_VPrintTarget+0x2f8>)
 8004990:	f7ff fc74 	bl	800427c <_PreparePacket>
 8004994:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004996:	4bb5      	ldr	r3, [pc, #724]	; (8004c6c <_VPrintTarget+0x2f8>)
 8004998:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800499a:	2300      	movs	r3, #0
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3301      	adds	r3, #1
 80049a6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80049ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8183 	beq.w	8004cca <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80049c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049c8:	2b25      	cmp	r3, #37	; 0x25
 80049ca:	f040 8170 	bne.w	8004cae <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80049ce:	2300      	movs	r3, #0
 80049d0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80049de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049e2:	3b23      	subs	r3, #35	; 0x23
 80049e4:	2b0d      	cmp	r3, #13
 80049e6:	d83f      	bhi.n	8004a68 <_VPrintTarget+0xf4>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <_VPrintTarget+0x7c>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a59 	.word	0x08004a59
 80049f4:	08004a69 	.word	0x08004a69
 80049f8:	08004a69 	.word	0x08004a69
 80049fc:	08004a69 	.word	0x08004a69
 8004a00:	08004a69 	.word	0x08004a69
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004a69 	.word	0x08004a69
 8004a0c:	08004a69 	.word	0x08004a69
 8004a10:	08004a49 	.word	0x08004a49
 8004a14:	08004a69 	.word	0x08004a69
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004a69 	.word	0x08004a69
 8004a20:	08004a69 	.word	0x08004a69
 8004a24:	08004a39 	.word	0x08004a39
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3301      	adds	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e01a      	b.n	8004a6e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3a:	f043 0302 	orr.w	r3, r3, #2
 8004a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e012      	b.n	8004a6e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4a:	f043 0304 	orr.w	r3, r3, #4
 8004a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e00a      	b.n	8004a6e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5a:	f043 0308 	orr.w	r3, r3, #8
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e002      	b.n	8004a6e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a6c:	bf00      	nop
        }
      } while (v);
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1b0      	bne.n	80049d6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004a74:	2300      	movs	r3, #0
 8004a76:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004a80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a84:	2b2f      	cmp	r3, #47	; 0x2f
 8004a86:	d912      	bls.n	8004aae <_VPrintTarget+0x13a>
 8004a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a8c:	2b39      	cmp	r3, #57	; 0x39
 8004a8e:	d80e      	bhi.n	8004aae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b30      	subs	r3, #48	; 0x30
 8004aaa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004aac:	e7e4      	b.n	8004a78 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004abe:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac0:	d11d      	bne.n	8004afe <_VPrintTarget+0x18a>
        sFormat++;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8004ad6:	d912      	bls.n	8004afe <_VPrintTarget+0x18a>
 8004ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004adc:	2b39      	cmp	r3, #57	; 0x39
 8004ade:	d80e      	bhi.n	8004afe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	461a      	mov	r2, r3
 8004af2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004af6:	4413      	add	r3, r2
 8004af8:	3b30      	subs	r3, #48	; 0x30
 8004afa:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004afc:	e7e4      	b.n	8004ac8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004b06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b0a:	2b6c      	cmp	r3, #108	; 0x6c
 8004b0c:	d003      	beq.n	8004b16 <_VPrintTarget+0x1a2>
 8004b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b12:	2b68      	cmp	r3, #104	; 0x68
 8004b14:	d107      	bne.n	8004b26 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004b24:	e7ef      	b.n	8004b06 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004b26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b2a:	2b25      	cmp	r3, #37	; 0x25
 8004b2c:	f000 80b3 	beq.w	8004c96 <_VPrintTarget+0x322>
 8004b30:	2b25      	cmp	r3, #37	; 0x25
 8004b32:	f2c0 80b7 	blt.w	8004ca4 <_VPrintTarget+0x330>
 8004b36:	2b78      	cmp	r3, #120	; 0x78
 8004b38:	f300 80b4 	bgt.w	8004ca4 <_VPrintTarget+0x330>
 8004b3c:	2b58      	cmp	r3, #88	; 0x58
 8004b3e:	f2c0 80b1 	blt.w	8004ca4 <_VPrintTarget+0x330>
 8004b42:	3b58      	subs	r3, #88	; 0x58
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	f200 80ad 	bhi.w	8004ca4 <_VPrintTarget+0x330>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <_VPrintTarget+0x1dc>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004c47 	.word	0x08004c47
 8004b54:	08004ca5 	.word	0x08004ca5
 8004b58:	08004ca5 	.word	0x08004ca5
 8004b5c:	08004ca5 	.word	0x08004ca5
 8004b60:	08004ca5 	.word	0x08004ca5
 8004b64:	08004ca5 	.word	0x08004ca5
 8004b68:	08004ca5 	.word	0x08004ca5
 8004b6c:	08004ca5 	.word	0x08004ca5
 8004b70:	08004ca5 	.word	0x08004ca5
 8004b74:	08004ca5 	.word	0x08004ca5
 8004b78:	08004ca5 	.word	0x08004ca5
 8004b7c:	08004bd5 	.word	0x08004bd5
 8004b80:	08004bfb 	.word	0x08004bfb
 8004b84:	08004ca5 	.word	0x08004ca5
 8004b88:	08004ca5 	.word	0x08004ca5
 8004b8c:	08004ca5 	.word	0x08004ca5
 8004b90:	08004ca5 	.word	0x08004ca5
 8004b94:	08004ca5 	.word	0x08004ca5
 8004b98:	08004ca5 	.word	0x08004ca5
 8004b9c:	08004ca5 	.word	0x08004ca5
 8004ba0:	08004ca5 	.word	0x08004ca5
 8004ba4:	08004ca5 	.word	0x08004ca5
 8004ba8:	08004ca5 	.word	0x08004ca5
 8004bac:	08004ca5 	.word	0x08004ca5
 8004bb0:	08004c71 	.word	0x08004c71
 8004bb4:	08004ca5 	.word	0x08004ca5
 8004bb8:	08004ca5 	.word	0x08004ca5
 8004bbc:	08004ca5 	.word	0x08004ca5
 8004bc0:	08004ca5 	.word	0x08004ca5
 8004bc4:	08004c21 	.word	0x08004c21
 8004bc8:	08004ca5 	.word	0x08004ca5
 8004bcc:	08004ca5 	.word	0x08004ca5
 8004bd0:	08004c47 	.word	0x08004c47
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	1d19      	adds	r1, r3, #4
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6011      	str	r1, [r2, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004be8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fd1c 	bl	8004630 <_StoreChar>
        break;
 8004bf8:	e055      	b.n	8004ca6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	1d19      	adds	r1, r3, #4
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6011      	str	r1, [r2, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c08:	f107 0014 	add.w	r0, r7, #20
 8004c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c16:	220a      	movs	r2, #10
 8004c18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c1a:	f7ff fe1b 	bl	8004854 <_PrintInt>
        break;
 8004c1e:	e042      	b.n	8004ca6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	1d19      	adds	r1, r3, #4
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004c2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c30:	f107 0014 	add.w	r0, r7, #20
 8004c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3e:	220a      	movs	r2, #10
 8004c40:	f7ff fd72 	bl	8004728 <_PrintUnsigned>
        break;
 8004c44:	e02f      	b.n	8004ca6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1d19      	adds	r1, r3, #4
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6011      	str	r1, [r2, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004c54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c56:	f107 0014 	add.w	r0, r7, #20
 8004c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5c:	9301      	str	r3, [sp, #4]
 8004c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c64:	2210      	movs	r2, #16
 8004c66:	f7ff fd5f 	bl	8004728 <_PrintUnsigned>
        break;
 8004c6a:	e01c      	b.n	8004ca6 <_VPrintTarget+0x332>
 8004c6c:	20014244 	.word	0x20014244
      case 'p':
        v = va_arg(*pParamList, int);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	1d19      	adds	r1, r3, #4
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6011      	str	r1, [r2, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004c7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c80:	f107 0014 	add.w	r0, r7, #20
 8004c84:	2300      	movs	r3, #0
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	2308      	movs	r3, #8
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	2210      	movs	r2, #16
 8004c90:	f7ff fd4a 	bl	8004728 <_PrintUnsigned>
        break;
 8004c94:	e007      	b.n	8004ca6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004c96:	f107 0314 	add.w	r3, r7, #20
 8004c9a:	2125      	movs	r1, #37	; 0x25
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fcc7 	bl	8004630 <_StoreChar>
        break;
 8004ca2:	e000      	b.n	8004ca6 <_VPrintTarget+0x332>
      default:
        break;
 8004ca4:	bf00      	nop
      }
      sFormat++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	e007      	b.n	8004cbe <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004cae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fcb9 	bl	8004630 <_StoreChar>
    }
  } while (*sFormat);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f47f ae72 	bne.w	80049ac <_VPrintTarget+0x38>
 8004cc8:	e000      	b.n	8004ccc <_VPrintTarget+0x358>
      break;
 8004cca:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d041      	beq.n	8004d56 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce2:	e00b      	b.n	8004cfc <_VPrintTarget+0x388>
 8004ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	6439      	str	r1, [r7, #64]	; 0x40
 8004cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf8:	09db      	lsrs	r3, r3, #7
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004d00:	d8f0      	bhi.n	8004ce4 <_VPrintTarget+0x370>
 8004d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	643a      	str	r2, [r7, #64]	; 0x40
 8004d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d10:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d16:	2300      	movs	r3, #0
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1a:	e00b      	b.n	8004d34 <_VPrintTarget+0x3c0>
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	1c59      	adds	r1, r3, #1
 8004d24:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	09db      	lsrs	r3, r3, #7
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	2b7f      	cmp	r3, #127	; 0x7f
 8004d38:	d8f0      	bhi.n	8004d1c <_VPrintTarget+0x3a8>
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	69b9      	ldr	r1, [r7, #24]
 8004d4e:	221a      	movs	r2, #26
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fb85 	bl	8004460 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004d5c:	bf00      	nop
 8004d5e:	3758      	adds	r7, #88	; 0x58
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d72:	2300      	movs	r3, #0
 8004d74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d78:	4917      	ldr	r1, [pc, #92]	; (8004dd8 <SEGGER_SYSVIEW_Init+0x74>)
 8004d7a:	4818      	ldr	r0, [pc, #96]	; (8004ddc <SEGGER_SYSVIEW_Init+0x78>)
 8004d7c:	f7ff f95e 	bl	800403c <SEGGER_RTT_AllocUpBuffer>
 8004d80:	4603      	mov	r3, r0
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d86:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004d88:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d8a:	785a      	ldrb	r2, [r3, #1]
 8004d8c:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d8e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d92:	7e1b      	ldrb	r3, [r3, #24]
 8004d94:	4618      	mov	r0, r3
 8004d96:	2300      	movs	r3, #0
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <SEGGER_SYSVIEW_Init+0x80>)
 8004d9e:	490f      	ldr	r1, [pc, #60]	; (8004ddc <SEGGER_SYSVIEW_Init+0x78>)
 8004da0:	f7ff f9d0 	bl	8004144 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <SEGGER_SYSVIEW_Init+0x84>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a0c      	ldr	r2, [pc, #48]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004db0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004db2:	4a0b      	ldr	r2, [pc, #44]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004dbe:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004dc4:	4a06      	ldr	r2, [pc, #24]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	2001320c 	.word	0x2001320c
 8004ddc:	08005d74 	.word	0x08005d74
 8004de0:	20014214 	.word	0x20014214
 8004de4:	2001420c 	.word	0x2001420c
 8004de8:	e0001004 	.word	0xe0001004

08004dec <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004df4:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6113      	str	r3, [r2, #16]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20014214 	.word	0x20014214

08004e0c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e14:	f3ef 8311 	mrs	r3, BASEPRI
 8004e18:	f04f 0120 	mov.w	r1, #32
 8004e1c:	f381 8811 	msr	BASEPRI, r1
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	4808      	ldr	r0, [pc, #32]	; (8004e44 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004e24:	f7ff fa2a 	bl	800427c <_PreparePacket>
 8004e28:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f7ff fb16 	bl	8004460 <_SendPacket>
  RECORD_END();
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f383 8811 	msr	BASEPRI, r3
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20014244 	.word	0x20014244

08004e48 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e52:	f3ef 8311 	mrs	r3, BASEPRI
 8004e56:	f04f 0120 	mov.w	r1, #32
 8004e5a:	f381 8811 	msr	BASEPRI, r1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	4816      	ldr	r0, [pc, #88]	; (8004ebc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004e62:	f7ff fa0b 	bl	800427c <_PreparePacket>
 8004e66:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	e00b      	b.n	8004e8e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	1c59      	adds	r1, r3, #1
 8004e7e:	61f9      	str	r1, [r7, #28]
 8004e80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	09db      	lsrs	r3, r3, #7
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b7f      	cmp	r3, #127	; 0x7f
 8004e92:	d8f0      	bhi.n	8004e76 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	61fa      	str	r2, [r7, #28]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	6938      	ldr	r0, [r7, #16]
 8004eaa:	f7ff fad9 	bl	8004460 <_SendPacket>
  RECORD_END();
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f383 8811 	msr	BASEPRI, r3
}
 8004eb4:	bf00      	nop
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20014244 	.word	0x20014244

08004ec0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ecc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed0:	f04f 0120 	mov.w	r1, #32
 8004ed4:	f381 8811 	msr	BASEPRI, r1
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	4825      	ldr	r0, [pc, #148]	; (8004f70 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004edc:	f7ff f9ce 	bl	800427c <_PreparePacket>
 8004ee0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eee:	e00b      	b.n	8004f08 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	1c59      	adds	r1, r3, #1
 8004ef8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	09db      	lsrs	r3, r3, #7
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f0c:	d8f0      	bhi.n	8004ef0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	623b      	str	r3, [r7, #32]
 8004f26:	e00b      	b.n	8004f40 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	1c59      	adds	r1, r3, #1
 8004f30:	6279      	str	r1, [r7, #36]	; 0x24
 8004f32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	09db      	lsrs	r3, r3, #7
 8004f3e:	623b      	str	r3, [r7, #32]
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	2b7f      	cmp	r3, #127	; 0x7f
 8004f44:	d8f0      	bhi.n	8004f28 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	6979      	ldr	r1, [r7, #20]
 8004f5a:	69b8      	ldr	r0, [r7, #24]
 8004f5c:	f7ff fa80 	bl	8004460 <_SendPacket>
  RECORD_END();
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f383 8811 	msr	BASEPRI, r3
}
 8004f66:	bf00      	nop
 8004f68:	3730      	adds	r7, #48	; 0x30
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20014244 	.word	0x20014244

08004f74 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08c      	sub	sp, #48	; 0x30
 8004f78:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f7a:	4b59      	ldr	r3, [pc, #356]	; (80050e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f80:	f3ef 8311 	mrs	r3, BASEPRI
 8004f84:	f04f 0120 	mov.w	r1, #32
 8004f88:	f381 8811 	msr	BASEPRI, r1
 8004f8c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f8e:	4b54      	ldr	r3, [pc, #336]	; (80050e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	220a      	movs	r2, #10
 8004f94:	4953      	ldr	r1, [pc, #332]	; (80050e4 <SEGGER_SYSVIEW_Start+0x170>)
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb f93a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004fa2:	f7fe fd1f 	bl	80039e4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004fa6:	200a      	movs	r0, #10
 8004fa8:	f7ff ff30 	bl	8004e0c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fac:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb0:	f04f 0120 	mov.w	r1, #32
 8004fb4:	f381 8811 	msr	BASEPRI, r1
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	484b      	ldr	r0, [pc, #300]	; (80050e8 <SEGGER_SYSVIEW_Start+0x174>)
 8004fbc:	f7ff f95e 	bl	800427c <_PreparePacket>
 8004fc0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fca:	4b45      	ldr	r3, [pc, #276]	; (80050e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd0:	e00b      	b.n	8004fea <SEGGER_SYSVIEW_Start+0x76>
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	1c59      	adds	r1, r3, #1
 8004fda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	09db      	lsrs	r3, r3, #7
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	2b7f      	cmp	r3, #127	; 0x7f
 8004fee:	d8f0      	bhi.n	8004fd2 <SEGGER_SYSVIEW_Start+0x5e>
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
 8005004:	4b36      	ldr	r3, [pc, #216]	; (80050e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	e00b      	b.n	8005024 <SEGGER_SYSVIEW_Start+0xb0>
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	b2da      	uxtb	r2, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	6279      	str	r1, [r7, #36]	; 0x24
 8005016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	09db      	lsrs	r3, r3, #7
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2b7f      	cmp	r3, #127	; 0x7f
 8005028:	d8f0      	bhi.n	800500c <SEGGER_SYSVIEW_Start+0x98>
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	627a      	str	r2, [r7, #36]	; 0x24
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	4b28      	ldr	r3, [pc, #160]	; (80050e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	61bb      	str	r3, [r7, #24]
 8005044:	e00b      	b.n	800505e <SEGGER_SYSVIEW_Start+0xea>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	61f9      	str	r1, [r7, #28]
 8005050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	09db      	lsrs	r3, r3, #7
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b7f      	cmp	r3, #127	; 0x7f
 8005062:	d8f0      	bhi.n	8005046 <SEGGER_SYSVIEW_Start+0xd2>
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	61fa      	str	r2, [r7, #28]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e00b      	b.n	8005096 <SEGGER_SYSVIEW_Start+0x122>
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	6179      	str	r1, [r7, #20]
 8005088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	09db      	lsrs	r3, r3, #7
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b7f      	cmp	r3, #127	; 0x7f
 800509a:	d8f0      	bhi.n	800507e <SEGGER_SYSVIEW_Start+0x10a>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	617a      	str	r2, [r7, #20]
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80050ac:	2218      	movs	r2, #24
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff f9d5 	bl	8004460 <_SendPacket>
      RECORD_END();
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050bc:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <SEGGER_SYSVIEW_Start+0x16c>)
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <SEGGER_SYSVIEW_Start+0x16c>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050ca:	f000 f9eb 	bl	80054a4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050ce:	f000 f9b1 	bl	8005434 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050d2:	f000 fc73 	bl	80059bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050d6:	bf00      	nop
 80050d8:	3730      	adds	r7, #48	; 0x30
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20014214 	.word	0x20014214
 80050e4:	08005da0 	.word	0x08005da0
 80050e8:	20014244 	.word	0x20014244

080050ec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050f2:	f3ef 8311 	mrs	r3, BASEPRI
 80050f6:	f04f 0120 	mov.w	r1, #32
 80050fa:	f381 8811 	msr	BASEPRI, r1
 80050fe:	607b      	str	r3, [r7, #4]
 8005100:	480b      	ldr	r0, [pc, #44]	; (8005130 <SEGGER_SYSVIEW_Stop+0x44>)
 8005102:	f7ff f8bb 	bl	800427c <_PreparePacket>
 8005106:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <SEGGER_SYSVIEW_Stop+0x48>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005110:	220b      	movs	r2, #11
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6838      	ldr	r0, [r7, #0]
 8005116:	f7ff f9a3 	bl	8004460 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <SEGGER_SYSVIEW_Stop+0x48>)
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f383 8811 	msr	BASEPRI, r3
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20014244 	.word	0x20014244
 8005134:	20014214 	.word	0x20014214

08005138 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b08c      	sub	sp, #48	; 0x30
 800513c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800513e:	f3ef 8311 	mrs	r3, BASEPRI
 8005142:	f04f 0120 	mov.w	r1, #32
 8005146:	f381 8811 	msr	BASEPRI, r1
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	4845      	ldr	r0, [pc, #276]	; (8005264 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800514e:	f7ff f895 	bl	800427c <_PreparePacket>
 8005152:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515c:	4b42      	ldr	r3, [pc, #264]	; (8005268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
 8005162:	e00b      	b.n	800517c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	b2da      	uxtb	r2, r3
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516a:	1c59      	adds	r1, r3, #1
 800516c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800516e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	09db      	lsrs	r3, r3, #7
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	2b7f      	cmp	r3, #127	; 0x7f
 8005180:	d8f0      	bhi.n	8005164 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
 8005196:	4b34      	ldr	r3, [pc, #208]	; (8005268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	e00b      	b.n	80051b6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	1c59      	adds	r1, r3, #1
 80051a6:	6279      	str	r1, [r7, #36]	; 0x24
 80051a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	09db      	lsrs	r3, r3, #7
 80051b4:	623b      	str	r3, [r7, #32]
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ba:	d8f0      	bhi.n	800519e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	627a      	str	r2, [r7, #36]	; 0x24
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	4b25      	ldr	r3, [pc, #148]	; (8005268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e00b      	b.n	80051f0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	61f9      	str	r1, [r7, #28]
 80051e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b7f      	cmp	r3, #127	; 0x7f
 80051f4:	d8f0      	bhi.n	80051d8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	61fa      	str	r2, [r7, #28]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	2300      	movs	r3, #0
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	e00b      	b.n	8005228 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	6179      	str	r1, [r7, #20]
 800521a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	09db      	lsrs	r3, r3, #7
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b7f      	cmp	r3, #127	; 0x7f
 800522c:	d8f0      	bhi.n	8005210 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	617a      	str	r2, [r7, #20]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800523e:	2218      	movs	r2, #24
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	68b8      	ldr	r0, [r7, #8]
 8005244:	f7ff f90c 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800524e:	4b06      	ldr	r3, [pc, #24]	; (8005268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	4798      	blx	r3
  }
}
 800525c:	bf00      	nop
 800525e:	3730      	adds	r7, #48	; 0x30
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20014244 	.word	0x20014244
 8005268:	20014214 	.word	0x20014214

0800526c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b092      	sub	sp, #72	; 0x48
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005274:	f3ef 8311 	mrs	r3, BASEPRI
 8005278:	f04f 0120 	mov.w	r1, #32
 800527c:	f381 8811 	msr	BASEPRI, r1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	486a      	ldr	r0, [pc, #424]	; (800542c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005284:	f7fe fffa 	bl	800427c <_PreparePacket>
 8005288:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	647b      	str	r3, [r7, #68]	; 0x44
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b66      	ldr	r3, [pc, #408]	; (8005430 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	643b      	str	r3, [r7, #64]	; 0x40
 800529e:	e00b      	b.n	80052b8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80052a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a6:	1c59      	adds	r1, r3, #1
 80052a8:	6479      	str	r1, [r7, #68]	; 0x44
 80052aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b4:	09db      	lsrs	r3, r3, #7
 80052b6:	643b      	str	r3, [r7, #64]	; 0x40
 80052b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ba:	2b7f      	cmp	r3, #127	; 0x7f
 80052bc:	d8f0      	bhi.n	80052a0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	647a      	str	r2, [r7, #68]	; 0x44
 80052c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052d8:	e00b      	b.n	80052f2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e0:	1c59      	adds	r1, r3, #1
 80052e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	09db      	lsrs	r3, r3, #7
 80052f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	2b7f      	cmp	r3, #127	; 0x7f
 80052f6:	d8f0      	bhi.n	80052da <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80052f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005306:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7fe ff63 	bl	80041dc <_EncodeStr>
 8005316:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005318:	2209      	movs	r2, #9
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	6938      	ldr	r0, [r7, #16]
 800531e:	f7ff f89f 	bl	8004460 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b40      	ldr	r3, [pc, #256]	; (8005430 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
 8005336:	e00b      	b.n	8005350 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	b2da      	uxtb	r2, r3
 800533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	6379      	str	r1, [r7, #52]	; 0x34
 8005342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	09db      	lsrs	r3, r3, #7
 800534e:	633b      	str	r3, [r7, #48]	; 0x30
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	2b7f      	cmp	r3, #127	; 0x7f
 8005354:	d8f0      	bhi.n	8005338 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	637a      	str	r2, [r7, #52]	; 0x34
 800535c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005364:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005370:	e00b      	b.n	800538a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	b2da      	uxtb	r2, r3
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	1c59      	adds	r1, r3, #1
 800537a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800537c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	09db      	lsrs	r3, r3, #7
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	2b7f      	cmp	r3, #127	; 0x7f
 800538e:	d8f0      	bhi.n	8005372 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	e00b      	b.n	80053c4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	6279      	str	r1, [r7, #36]	; 0x24
 80053b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	09db      	lsrs	r3, r3, #7
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b7f      	cmp	r3, #127	; 0x7f
 80053c8:	d8f0      	bhi.n	80053ac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	627a      	str	r2, [r7, #36]	; 0x24
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	e00b      	b.n	80053fc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	1c59      	adds	r1, r3, #1
 80053ec:	61f9      	str	r1, [r7, #28]
 80053ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	09db      	lsrs	r3, r3, #7
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005400:	d8f0      	bhi.n	80053e4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	61fa      	str	r2, [r7, #28]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005412:	2215      	movs	r2, #21
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	6938      	ldr	r0, [r7, #16]
 8005418:	f7ff f822 	bl	8004460 <_SendPacket>
  RECORD_END();
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f383 8811 	msr	BASEPRI, r3
}
 8005422:	bf00      	nop
 8005424:	3748      	adds	r7, #72	; 0x48
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20014244 	.word	0x20014244
 8005430:	20014214 	.word	0x20014214

08005434 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005438:	4b07      	ldr	r3, [pc, #28]	; (8005458 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800544a:	4b03      	ldr	r3, [pc, #12]	; (8005458 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4798      	blx	r3
  }
}
 8005452:	bf00      	nop
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20014214 	.word	0x20014214

0800545c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005464:	f3ef 8311 	mrs	r3, BASEPRI
 8005468:	f04f 0120 	mov.w	r1, #32
 800546c:	f381 8811 	msr	BASEPRI, r1
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	480b      	ldr	r0, [pc, #44]	; (80054a0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005474:	f7fe ff02 	bl	800427c <_PreparePacket>
 8005478:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800547a:	2280      	movs	r2, #128	; 0x80
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	6938      	ldr	r0, [r7, #16]
 8005480:	f7fe feac 	bl	80041dc <_EncodeStr>
 8005484:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005486:	220e      	movs	r2, #14
 8005488:	68f9      	ldr	r1, [r7, #12]
 800548a:	6938      	ldr	r0, [r7, #16]
 800548c:	f7fe ffe8 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f383 8811 	msr	BASEPRI, r3
}
 8005496:	bf00      	nop
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20014244 	.word	0x20014244

080054a4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01a      	beq.n	80054e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80054b2:	4b13      	ldr	r3, [pc, #76]	; (8005500 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054bc:	4b10      	ldr	r3, [pc, #64]	; (8005500 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4798      	blx	r3
 80054c4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054c8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	000a      	movs	r2, r1
 80054d8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054da:	4613      	mov	r3, r2
 80054dc:	461a      	mov	r2, r3
 80054de:	4621      	mov	r1, r4
 80054e0:	200d      	movs	r0, #13
 80054e2:	f7ff fced 	bl	8004ec0 <SEGGER_SYSVIEW_RecordU32x2>
 80054e6:	e006      	b.n	80054f6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054e8:	4b06      	ldr	r3, [pc, #24]	; (8005504 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4619      	mov	r1, r3
 80054ee:	200c      	movs	r0, #12
 80054f0:	f7ff fcaa 	bl	8004e48 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd90      	pop	{r4, r7, pc}
 80054fe:	bf00      	nop
 8005500:	20014214 	.word	0x20014214
 8005504:	e0001004 	.word	0xe0001004

08005508 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800550e:	f3ef 8311 	mrs	r3, BASEPRI
 8005512:	f04f 0120 	mov.w	r1, #32
 8005516:	f381 8811 	msr	BASEPRI, r1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	4819      	ldr	r0, [pc, #100]	; (8005584 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800551e:	f7fe fead 	bl	800427c <_PreparePacket>
 8005522:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005528:	4b17      	ldr	r3, [pc, #92]	; (8005588 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005530:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e00b      	b.n	8005554 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	b2da      	uxtb	r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	6179      	str	r1, [r7, #20]
 8005546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	09db      	lsrs	r3, r3, #7
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2b7f      	cmp	r3, #127	; 0x7f
 8005558:	d8f0      	bhi.n	800553c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	617a      	str	r2, [r7, #20]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800556a:	2202      	movs	r2, #2
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	68b8      	ldr	r0, [r7, #8]
 8005570:	f7fe ff76 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f383 8811 	msr	BASEPRI, r3
}
 800557a:	bf00      	nop
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20014244 	.word	0x20014244
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005592:	f3ef 8311 	mrs	r3, BASEPRI
 8005596:	f04f 0120 	mov.w	r1, #32
 800559a:	f381 8811 	msr	BASEPRI, r1
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	4807      	ldr	r0, [pc, #28]	; (80055c0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80055a2:	f7fe fe6b 	bl	800427c <_PreparePacket>
 80055a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055a8:	2203      	movs	r2, #3
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6838      	ldr	r0, [r7, #0]
 80055ae:	f7fe ff57 	bl	8004460 <_SendPacket>
  RECORD_END();
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f383 8811 	msr	BASEPRI, r3
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20014244 	.word	0x20014244

080055c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055ca:	f3ef 8311 	mrs	r3, BASEPRI
 80055ce:	f04f 0120 	mov.w	r1, #32
 80055d2:	f381 8811 	msr	BASEPRI, r1
 80055d6:	607b      	str	r3, [r7, #4]
 80055d8:	4807      	ldr	r0, [pc, #28]	; (80055f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055da:	f7fe fe4f 	bl	800427c <_PreparePacket>
 80055de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055e0:	2212      	movs	r2, #18
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6838      	ldr	r0, [r7, #0]
 80055e6:	f7fe ff3b 	bl	8004460 <_SendPacket>
  RECORD_END();
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f383 8811 	msr	BASEPRI, r3
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20014244 	.word	0x20014244

080055fc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005602:	f3ef 8311 	mrs	r3, BASEPRI
 8005606:	f04f 0120 	mov.w	r1, #32
 800560a:	f381 8811 	msr	BASEPRI, r1
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	4807      	ldr	r0, [pc, #28]	; (8005630 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005612:	f7fe fe33 	bl	800427c <_PreparePacket>
 8005616:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005618:	2211      	movs	r2, #17
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6838      	ldr	r0, [r7, #0]
 800561e:	f7fe ff1f 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f383 8811 	msr	BASEPRI, r3
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20014244 	.word	0x20014244

08005634 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800563c:	f3ef 8311 	mrs	r3, BASEPRI
 8005640:	f04f 0120 	mov.w	r1, #32
 8005644:	f381 8811 	msr	BASEPRI, r1
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	4819      	ldr	r0, [pc, #100]	; (80056b0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800564c:	f7fe fe16 	bl	800427c <_PreparePacket>
 8005650:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e00b      	b.n	8005682 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	61f9      	str	r1, [r7, #28]
 8005674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b7f      	cmp	r3, #127	; 0x7f
 8005686:	d8f0      	bhi.n	800566a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	61fa      	str	r2, [r7, #28]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005698:	2208      	movs	r2, #8
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6938      	ldr	r0, [r7, #16]
 800569e:	f7fe fedf 	bl	8004460 <_SendPacket>
  RECORD_END();
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f383 8811 	msr	BASEPRI, r3
}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20014244 	.word	0x20014244
 80056b4:	20014214 	.word	0x20014214

080056b8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056c0:	f3ef 8311 	mrs	r3, BASEPRI
 80056c4:	f04f 0120 	mov.w	r1, #32
 80056c8:	f381 8811 	msr	BASEPRI, r1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	4819      	ldr	r0, [pc, #100]	; (8005734 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056d0:	f7fe fdd4 	bl	800427c <_PreparePacket>
 80056d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056da:	4b17      	ldr	r3, [pc, #92]	; (8005738 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	e00b      	b.n	8005706 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	1c59      	adds	r1, r3, #1
 80056f6:	61f9      	str	r1, [r7, #28]
 80056f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b7f      	cmp	r3, #127	; 0x7f
 800570a:	d8f0      	bhi.n	80056ee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	61fa      	str	r2, [r7, #28]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800571c:	2204      	movs	r2, #4
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	6938      	ldr	r0, [r7, #16]
 8005722:	f7fe fe9d 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f383 8811 	msr	BASEPRI, r3
}
 800572c:	bf00      	nop
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20014244 	.word	0x20014244
 8005738:	20014214 	.word	0x20014214

0800573c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005744:	f3ef 8311 	mrs	r3, BASEPRI
 8005748:	f04f 0120 	mov.w	r1, #32
 800574c:	f381 8811 	msr	BASEPRI, r1
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	4819      	ldr	r0, [pc, #100]	; (80057b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005754:	f7fe fd92 	bl	800427c <_PreparePacket>
 8005758:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800575e:	4b17      	ldr	r3, [pc, #92]	; (80057bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e00b      	b.n	800578a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	61f9      	str	r1, [r7, #28]
 800577c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	09db      	lsrs	r3, r3, #7
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b7f      	cmp	r3, #127	; 0x7f
 800578e:	d8f0      	bhi.n	8005772 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	61fa      	str	r2, [r7, #28]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057a0:	2206      	movs	r2, #6
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	6938      	ldr	r0, [r7, #16]
 80057a6:	f7fe fe5b 	bl	8004460 <_SendPacket>
  RECORD_END();
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f383 8811 	msr	BASEPRI, r3
}
 80057b0:	bf00      	nop
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20014244 	.word	0x20014244
 80057bc:	20014214 	.word	0x20014214

080057c0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	; 0x28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057ca:	f3ef 8311 	mrs	r3, BASEPRI
 80057ce:	f04f 0120 	mov.w	r1, #32
 80057d2:	f381 8811 	msr	BASEPRI, r1
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	4827      	ldr	r0, [pc, #156]	; (8005878 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057da:	f7fe fd4f 	bl	800427c <_PreparePacket>
 80057de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057e4:	4b25      	ldr	r3, [pc, #148]	; (800587c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	e00b      	b.n	8005810 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	6279      	str	r1, [r7, #36]	; 0x24
 8005802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	09db      	lsrs	r3, r3, #7
 800580e:	623b      	str	r3, [r7, #32]
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	2b7f      	cmp	r3, #127	; 0x7f
 8005814:	d8f0      	bhi.n	80057f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	627a      	str	r2, [r7, #36]	; 0x24
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e00b      	b.n	8005848 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	61f9      	str	r1, [r7, #28]
 800583a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	09db      	lsrs	r3, r3, #7
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b7f      	cmp	r3, #127	; 0x7f
 800584c:	d8f0      	bhi.n	8005830 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	61fa      	str	r2, [r7, #28]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800585e:	2207      	movs	r2, #7
 8005860:	68f9      	ldr	r1, [r7, #12]
 8005862:	6938      	ldr	r0, [r7, #16]
 8005864:	f7fe fdfc 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f383 8811 	msr	BASEPRI, r3
}
 800586e:	bf00      	nop
 8005870:	3728      	adds	r7, #40	; 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20014244 	.word	0x20014244
 800587c:	20014214 	.word	0x20014214

08005880 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b08c      	sub	sp, #48	; 0x30
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800588a:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d06d      	beq.n	800596e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005892:	4b39      	ldr	r3, [pc, #228]	; (8005978 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005898:	2300      	movs	r3, #0
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
 800589c:	e008      	b.n	80058b0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	3301      	adds	r3, #1
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d3f2      	bcc.n	800589e <SEGGER_SYSVIEW_SendModule+0x1e>
 80058b8:	e000      	b.n	80058bc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058ba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d055      	beq.n	800596e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058c2:	f3ef 8311 	mrs	r3, BASEPRI
 80058c6:	f04f 0120 	mov.w	r1, #32
 80058ca:	f381 8811 	msr	BASEPRI, r1
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	482a      	ldr	r0, [pc, #168]	; (800597c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058d2:	f7fe fcd3 	bl	800427c <_PreparePacket>
 80058d6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	623b      	str	r3, [r7, #32]
 80058e4:	e00b      	b.n	80058fe <SEGGER_SYSVIEW_SendModule+0x7e>
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	6279      	str	r1, [r7, #36]	; 0x24
 80058f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	09db      	lsrs	r3, r3, #7
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	2b7f      	cmp	r3, #127	; 0x7f
 8005902:	d8f0      	bhi.n	80058e6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	627a      	str	r2, [r7, #36]	; 0x24
 800590a:	6a3a      	ldr	r2, [r7, #32]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	e00b      	b.n	8005938 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	1c59      	adds	r1, r3, #1
 8005928:	61f9      	str	r1, [r7, #28]
 800592a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	09db      	lsrs	r3, r3, #7
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b7f      	cmp	r3, #127	; 0x7f
 800593c:	d8f0      	bhi.n	8005920 <SEGGER_SYSVIEW_SendModule+0xa0>
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	61fa      	str	r2, [r7, #28]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2280      	movs	r2, #128	; 0x80
 8005954:	4619      	mov	r1, r3
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7fe fc40 	bl	80041dc <_EncodeStr>
 800595c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800595e:	2216      	movs	r2, #22
 8005960:	68f9      	ldr	r1, [r7, #12]
 8005962:	6938      	ldr	r0, [r7, #16]
 8005964:	f7fe fd7c 	bl	8004460 <_SendPacket>
      RECORD_END();
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800596e:	bf00      	nop
 8005970:	3730      	adds	r7, #48	; 0x30
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	2001423c 	.word	0x2001423c
 800597c:	20014244 	.word	0x20014244

08005980 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005986:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00f      	beq.n	80059ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f2      	bne.n	8005994 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	2001423c 	.word	0x2001423c

080059bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059c2:	f3ef 8311 	mrs	r3, BASEPRI
 80059c6:	f04f 0120 	mov.w	r1, #32
 80059ca:	f381 8811 	msr	BASEPRI, r1
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	4817      	ldr	r0, [pc, #92]	; (8005a30 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059d2:	f7fe fc53 	bl	800427c <_PreparePacket>
 80059d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	4b14      	ldr	r3, [pc, #80]	; (8005a34 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	e00b      	b.n	8005a00 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	1c59      	adds	r1, r3, #1
 80059f0:	6179      	str	r1, [r7, #20]
 80059f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	09db      	lsrs	r3, r3, #7
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b7f      	cmp	r3, #127	; 0x7f
 8005a04:	d8f0      	bhi.n	80059e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	617a      	str	r2, [r7, #20]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a16:	221b      	movs	r2, #27
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	68b8      	ldr	r0, [r7, #8]
 8005a1c:	f7fe fd20 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f383 8811 	msr	BASEPRI, r3
}
 8005a26:	bf00      	nop
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20014244 	.word	0x20014244
 8005a34:	20014240 	.word	0x20014240

08005a38 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a38:	b40f      	push	{r0, r1, r2, r3}
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a46:	1d3b      	adds	r3, r7, #4
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	6938      	ldr	r0, [r7, #16]
 8005a4e:	f7fe ff91 	bl	8004974 <_VPrintTarget>
  va_end(ParamList);
}
 8005a52:	bf00      	nop
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a5c:	b004      	add	sp, #16
 8005a5e:	4770      	bx	lr

08005a60 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a68:	f3ef 8311 	mrs	r3, BASEPRI
 8005a6c:	f04f 0120 	mov.w	r1, #32
 8005a70:	f381 8811 	msr	BASEPRI, r1
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	4827      	ldr	r0, [pc, #156]	; (8005b14 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a78:	f7fe fc00 	bl	800427c <_PreparePacket>
 8005a7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a7e:	2280      	movs	r2, #128	; 0x80
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	6938      	ldr	r0, [r7, #16]
 8005a84:	f7fe fbaa 	bl	80041dc <_EncodeStr>
 8005a88:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	2301      	movs	r3, #1
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	e00b      	b.n	8005aac <SEGGER_SYSVIEW_Warn+0x4c>
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	09db      	lsrs	r3, r3, #7
 8005aaa:	623b      	str	r3, [r7, #32]
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab0:	d8f0      	bhi.n	8005a94 <SEGGER_SYSVIEW_Warn+0x34>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e00b      	b.n	8005ae4 <SEGGER_SYSVIEW_Warn+0x84>
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	1c59      	adds	r1, r3, #1
 8005ad4:	61f9      	str	r1, [r7, #28]
 8005ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	09db      	lsrs	r3, r3, #7
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae8:	d8f0      	bhi.n	8005acc <SEGGER_SYSVIEW_Warn+0x6c>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	61fa      	str	r2, [r7, #28]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005afa:	221a      	movs	r2, #26
 8005afc:	68f9      	ldr	r1, [r7, #12]
 8005afe:	6938      	ldr	r0, [r7, #16]
 8005b00:	f7fe fcae 	bl	8004460 <_SendPacket>
  RECORD_END();
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f383 8811 	msr	BASEPRI, r3
}
 8005b0a:	bf00      	nop
 8005b0c:	3728      	adds	r7, #40	; 0x28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20014244 	.word	0x20014244

08005b18 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b1c:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b1e:	7e1b      	ldrb	r3, [r3, #24]
 8005b20:	4619      	mov	r1, r3
 8005b22:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b24:	460b      	mov	r3, r1
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	440b      	add	r3, r1
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	336c      	adds	r3, #108	; 0x6c
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b34:	7e1b      	ldrb	r3, [r3, #24]
 8005b36:	4618      	mov	r0, r3
 8005b38:	490d      	ldr	r1, [pc, #52]	; (8005b70 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	4403      	add	r3, r0
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	440b      	add	r3, r1
 8005b44:	3370      	adds	r3, #112	; 0x70
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d00b      	beq.n	8005b64 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b4c:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b4e:	789b      	ldrb	r3, [r3, #2]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d107      	bne.n	8005b64 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b5a:	f7fe fb9b 	bl	8004294 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b64:	4b01      	ldr	r3, [pc, #4]	; (8005b6c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20014214 	.word	0x20014214
 8005b70:	20014384 	.word	0x20014384

08005b74 <__libc_init_array>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	4d0d      	ldr	r5, [pc, #52]	; (8005bac <__libc_init_array+0x38>)
 8005b78:	4c0d      	ldr	r4, [pc, #52]	; (8005bb0 <__libc_init_array+0x3c>)
 8005b7a:	1b64      	subs	r4, r4, r5
 8005b7c:	10a4      	asrs	r4, r4, #2
 8005b7e:	2600      	movs	r6, #0
 8005b80:	42a6      	cmp	r6, r4
 8005b82:	d109      	bne.n	8005b98 <__libc_init_array+0x24>
 8005b84:	4d0b      	ldr	r5, [pc, #44]	; (8005bb4 <__libc_init_array+0x40>)
 8005b86:	4c0c      	ldr	r4, [pc, #48]	; (8005bb8 <__libc_init_array+0x44>)
 8005b88:	f000 f83c 	bl	8005c04 <_init>
 8005b8c:	1b64      	subs	r4, r4, r5
 8005b8e:	10a4      	asrs	r4, r4, #2
 8005b90:	2600      	movs	r6, #0
 8005b92:	42a6      	cmp	r6, r4
 8005b94:	d105      	bne.n	8005ba2 <__libc_init_array+0x2e>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9c:	4798      	blx	r3
 8005b9e:	3601      	adds	r6, #1
 8005ba0:	e7ee      	b.n	8005b80 <__libc_init_array+0xc>
 8005ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba6:	4798      	blx	r3
 8005ba8:	3601      	adds	r6, #1
 8005baa:	e7f2      	b.n	8005b92 <__libc_init_array+0x1e>
 8005bac:	08005dc4 	.word	0x08005dc4
 8005bb0:	08005dc4 	.word	0x08005dc4
 8005bb4:	08005dc4 	.word	0x08005dc4
 8005bb8:	08005dc8 	.word	0x08005dc8

08005bbc <memcmp>:
 8005bbc:	b530      	push	{r4, r5, lr}
 8005bbe:	3901      	subs	r1, #1
 8005bc0:	2400      	movs	r4, #0
 8005bc2:	42a2      	cmp	r2, r4
 8005bc4:	d101      	bne.n	8005bca <memcmp+0xe>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e005      	b.n	8005bd6 <memcmp+0x1a>
 8005bca:	5d03      	ldrb	r3, [r0, r4]
 8005bcc:	3401      	adds	r4, #1
 8005bce:	5d0d      	ldrb	r5, [r1, r4]
 8005bd0:	42ab      	cmp	r3, r5
 8005bd2:	d0f6      	beq.n	8005bc2 <memcmp+0x6>
 8005bd4:	1b58      	subs	r0, r3, r5
 8005bd6:	bd30      	pop	{r4, r5, pc}

08005bd8 <memcpy>:
 8005bd8:	440a      	add	r2, r1
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be0:	d100      	bne.n	8005be4 <memcpy+0xc>
 8005be2:	4770      	bx	lr
 8005be4:	b510      	push	{r4, lr}
 8005be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	d1f9      	bne.n	8005be6 <memcpy+0xe>
 8005bf2:	bd10      	pop	{r4, pc}

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <_init>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr

08005c10 <_fini>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr
