
013Queue_Processing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006828  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b64  08006b64  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b6c  08006b6c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b6c  08006b6c  00016b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08006b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012fb8  20000164  08006cd8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001311c  08006cd8  0002311c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181e8  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ac  00000000  00000000  0003837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024699  00000000  00000000  0003d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019382  00000000  00000000  00062069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df23d  00000000  00000000  0007b3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005310  00000000  00000000  0015a67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000164 	.word	0x20000164
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080069e0 	.word	0x080069e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000168 	.word	0x20000168
 800020c:	080069e0 	.word	0x080069e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	//SEGGER_UART_init(500000);
	// Used to collect SEGGER Event time-stamps
	DWT->CTRL |= (1 << 0); //Enable CYCCNT in DWT_CTRL
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <main+0xd0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a31      	ldr	r2, [pc, #196]	; (8000688 <main+0xd0>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fd5b 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f87f 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f965 	bl	80008a0 <MX_GPIO_Init>
  MX_RTC_Init();
 80005d6:	f000 f913 	bl	8000800 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f937 	bl	800084c <MX_USART2_UART_Init>

  //Start Recording with Segger SystemView
  	//SEGGER_SYSVIEW_Conf();
  	//SEGGER_SYSVIEW_Start();

	sprintf(usr_msg, "\r\nThis is Queue Command Processing Demo\r\n");
 80005de:	492b      	ldr	r1, [pc, #172]	; (800068c <main+0xd4>)
 80005e0:	482b      	ldr	r0, [pc, #172]	; (8000690 <main+0xd8>)
 80005e2:	f005 fdcf 	bl	8006184 <siprintf>
	printmsg(usr_msg);
 80005e6:	482a      	ldr	r0, [pc, #168]	; (8000690 <main+0xd8>)
 80005e8:	f000 fa80 	bl	8000aec <printmsg>

	//Queue creations
	command_queue = xQueueCreate(10, sizeof(APP_CMD_t*));
 80005ec:	2200      	movs	r2, #0
 80005ee:	2104      	movs	r1, #4
 80005f0:	200a      	movs	r0, #10
 80005f2:	f003 fa6f 	bl	8003ad4 <xQueueGenericCreate>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a26      	ldr	r2, [pc, #152]	; (8000694 <main+0xdc>)
 80005fa:	6013      	str	r3, [r2, #0]
	uart_write_queue = xQueueCreate(10, sizeof(char*));
 80005fc:	2200      	movs	r2, #0
 80005fe:	2104      	movs	r1, #4
 8000600:	200a      	movs	r0, #10
 8000602:	f003 fa67 	bl	8003ad4 <xQueueGenericCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a23      	ldr	r2, [pc, #140]	; (8000698 <main+0xe0>)
 800060a:	6013      	str	r3, [r2, #0]

	if((command_queue != NULL) && (uart_write_queue != NULL)) {
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <main+0xdc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d031      	beq.n	8000678 <main+0xc0>
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <main+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d02d      	beq.n	8000678 <main+0xc0>

		xTaskCreate(vTask1_menu_display, "TASK1-MENU", 500, NULL, 1, &xTaskHandle1);
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <main+0xe4>)
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2301      	movs	r3, #1
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800062a:	491d      	ldr	r1, [pc, #116]	; (80006a0 <main+0xe8>)
 800062c:	481d      	ldr	r0, [pc, #116]	; (80006a4 <main+0xec>)
 800062e:	f003 fec9 	bl	80043c4 <xTaskCreate>
		xTaskCreate(vTask2_cmd_handling, "TASK2-CMD-HANDLING", 500, NULL, 2, &xTaskHandle2);
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <main+0xf0>)
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000640:	491a      	ldr	r1, [pc, #104]	; (80006ac <main+0xf4>)
 8000642:	481b      	ldr	r0, [pc, #108]	; (80006b0 <main+0xf8>)
 8000644:	f003 febe 	bl	80043c4 <xTaskCreate>
		xTaskCreate(vTask3_cmd_processing, "TASK3-CMD-PROCESS", 500, NULL, 2, &xTaskHandle3);
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <main+0xfc>)
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2302      	movs	r3, #2
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000656:	4918      	ldr	r1, [pc, #96]	; (80006b8 <main+0x100>)
 8000658:	4818      	ldr	r0, [pc, #96]	; (80006bc <main+0x104>)
 800065a:	f003 feb3 	bl	80043c4 <xTaskCreate>
		xTaskCreate(vTask4_uart_write, "TASK4-UART-WRITE", 500, NULL, 2, &xTaskHandle4);
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <main+0x108>)
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2302      	movs	r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800066c:	4915      	ldr	r1, [pc, #84]	; (80006c4 <main+0x10c>)
 800066e:	4816      	ldr	r0, [pc, #88]	; (80006c8 <main+0x110>)
 8000670:	f003 fea8 	bl	80043c4 <xTaskCreate>

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
 8000674:	f003 ffec 	bl	8004650 <vTaskStartScheduler>
	}

	sprintf(usr_msg, "Queue creation failed... \r\n");
 8000678:	4914      	ldr	r1, [pc, #80]	; (80006cc <main+0x114>)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <main+0xd8>)
 800067c:	f005 fd82 	bl	8006184 <siprintf>
	printmsg(usr_msg);
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <main+0xd8>)
 8000682:	f000 fa33 	bl	8000aec <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
 8000686:	e7fe      	b.n	8000686 <main+0xce>
 8000688:	e0001000 	.word	0xe0001000
 800068c:	080069f8 	.word	0x080069f8
 8000690:	20000184 	.word	0x20000184
 8000694:	20000290 	.word	0x20000290
 8000698:	20000294 	.word	0x20000294
 800069c:	20000280 	.word	0x20000280
 80006a0:	08006a24 	.word	0x08006a24
 80006a4:	08000981 	.word	0x08000981
 80006a8:	20000284 	.word	0x20000284
 80006ac:	08006a30 	.word	0x08006a30
 80006b0:	080009bd 	.word	0x080009bd
 80006b4:	20000288 	.word	0x20000288
 80006b8:	08006a44 	.word	0x08006a44
 80006bc:	08000a25 	.word	0x08000a25
 80006c0:	2000028c 	.word	0x2000028c
 80006c4:	08006a58 	.word	0x08006a58
 80006c8:	08000ac1 	.word	0x08000ac1
 80006cc:	08006a6c 	.word	0x08006a6c

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0ac      	sub	sp, #176	; 0xb0
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 fd48 	bl	8006174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	225c      	movs	r2, #92	; 0x5c
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fd39 	bl	8006174 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b3c      	ldr	r3, [pc, #240]	; (80007f8 <SystemClock_Config+0x128>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	4a3b      	ldr	r2, [pc, #236]	; (80007f8 <SystemClock_Config+0x128>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6413      	str	r3, [r2, #64]	; 0x40
 8000712:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <SystemClock_Config+0x128>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b36      	ldr	r3, [pc, #216]	; (80007fc <SystemClock_Config+0x12c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a35      	ldr	r2, [pc, #212]	; (80007fc <SystemClock_Config+0x12c>)
 8000728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	4b33      	ldr	r3, [pc, #204]	; (80007fc <SystemClock_Config+0x12c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800073a:	230a      	movs	r3, #10
 800073c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2310      	movs	r3, #16
 800074c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000762:	2308      	movs	r3, #8
 8000764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000768:	23b4      	movs	r3, #180	; 0xb4
 800076a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fdf9 	bl	800237c <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000790:	f000 fb2e 	bl	8000df0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000794:	f000 ff7a 	bl	800168c <HAL_PWREx_EnableOverDrive>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800079e:	f000 fb27 	bl	8000df0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007be:	2105      	movs	r1, #5
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 ffb3 	bl	800172c <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80007cc:	f000 fb10 	bl	8000df0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007d0:	2320      	movs	r3, #32
 80007d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 f8f0 	bl	80019c4 <HAL_RCCEx_PeriphCLKConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80007ea:	f000 fb01 	bl	8000df0 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	37b0      	adds	r7, #176	; 0xb0
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_RTC_Init+0x44>)
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <MX_RTC_Init+0x48>)
 8000808:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_RTC_Init+0x44>)
 800080c:	2240      	movs	r2, #64	; 0x40
 800080e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_RTC_Init+0x44>)
 8000812:	227f      	movs	r2, #127	; 0x7f
 8000814:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_RTC_Init+0x44>)
 8000818:	22ff      	movs	r2, #255	; 0xff
 800081a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_RTC_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_RTC_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_RTC_Init+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_RTC_Init+0x44>)
 8000830:	f002 f842 	bl	80028b8 <HAL_RTC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800083a:	f000 fad9 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20013004 	.word	0x20013004
 8000848:	40002800 	.word	0x40002800

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_USART2_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000884:	f002 fc76 	bl	8003174 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 faaf 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2001303c 	.word	0x2001303c
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a2c      	ldr	r2, [pc, #176]	; (8000970 <MX_GPIO_Init+0xd0>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a25      	ldr	r2, [pc, #148]	; (8000970 <MX_GPIO_Init+0xd0>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <MX_GPIO_Init+0xd0>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <MX_GPIO_Init+0xd0>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2120      	movs	r1, #32
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <MX_GPIO_Init+0xd4>)
 800092c:	f000 fe7a 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_GPIO_Init+0xd8>)
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_GPIO_Init+0xdc>)
 8000946:	f000 fcc1 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800094a:	2320      	movs	r3, #32
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_GPIO_Init+0xd4>)
 8000962:	f000 fcb3 	bl	80012cc <HAL_GPIO_Init>

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000
 8000978:	10110000 	.word	0x10110000
 800097c:	40020800 	.word	0x40020800

08000980 <vTask1_menu_display>:

/* USER CODE BEGIN 4 */
void vTask1_menu_display(void *pvParameters) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]

	char *pData = menu;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <vTask1_menu_display+0x34>)
 800098a:	60fb      	str	r3, [r7, #12]

	for(;;) {
		xQueueSend(uart_write_queue, &pData, portMAX_DELAY);
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <vTask1_menu_display+0x38>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	f107 010c 	add.w	r1, r7, #12
 8000994:	2300      	movs	r3, #0
 8000996:	f04f 32ff 	mov.w	r2, #4294967295
 800099a:	f003 f91d 	bl	8003bd8 <xQueueGenericSend>

		//wait until notification
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2300      	movs	r3, #0
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2000      	movs	r0, #0
 80009ac:	f004 faf4 	bl	8004f98 <xTaskGenericNotifyWait>
		xQueueSend(uart_write_queue, &pData, portMAX_DELAY);
 80009b0:	e7ec      	b.n	800098c <vTask1_menu_display+0xc>
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000294 	.word	0x20000294

080009bc <vTask2_cmd_handling>:
	}
}

void vTask2_cmd_handling(void *pvParameters) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af02      	add	r7, sp, #8
 80009c2:	6078      	str	r0, [r7, #4]

	uint8_t command_code = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]

	APP_CMD_t *new_cmd;

	for(;;) {
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2300      	movs	r3, #0
 80009d0:	2200      	movs	r2, #0
 80009d2:	2100      	movs	r1, #0
 80009d4:	2000      	movs	r0, #0
 80009d6:	f004 fadf 	bl	8004f98 <xTaskGenericNotifyWait>

		//1. send command to queue
		new_cmd = (APP_CMD_t*) pvPortMalloc(sizeof(APP_CMD_t));
 80009da:	200b      	movs	r0, #11
 80009dc:	f005 fa86 	bl	8005eec <pvPortMalloc>
 80009e0:	4603      	mov	r3, r0
 80009e2:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80009e4:	f005 f960 	bl	8005ca8 <vPortEnterCritical>
		command_code = getCommandCode(command_buffer);
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <vTask2_cmd_handling+0x60>)
 80009ea:	f000 f8f5 	bl	8000bd8 <getCommandCode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	73fb      	strb	r3, [r7, #15]
		new_cmd->COMMAND_NUM = command_code;
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	7bfa      	ldrb	r2, [r7, #15]
 80009f6:	701a      	strb	r2, [r3, #0]
		getArguments(new_cmd->COMMAND_ARGS);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f8f9 	bl	8000bf4 <getArguments>
		taskEXIT_CRITICAL();
 8000a02:	f005 f981 	bl	8005d08 <vPortExitCritical>

		//send the command to the command queue
		xQueueSend(command_queue,&new_cmd,portMAX_DELAY);
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <vTask2_cmd_handling+0x64>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	f107 0108 	add.w	r1, r7, #8
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	f003 f8e0 	bl	8003bd8 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000a18:	e7d6      	b.n	80009c8 <vTask2_cmd_handling+0xc>
 8000a1a:	bf00      	nop
 8000a1c:	20013028 	.word	0x20013028
 8000a20:	20000290 	.word	0x20000290

08000a24 <vTask3_cmd_processing>:
	}
}


void vTask3_cmd_processing(void *pvParameters) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b092      	sub	sp, #72	; 0x48
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

	APP_CMD_t *new_cmd;
	char task_msg[50];

	uint32_t toggle_duration = pdMS_TO_TICKS(500);
 8000a2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44

	for(;;) {
		xQueueReceive(command_queue, (void*)&new_cmd, portMAX_DELAY);
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <vTask3_cmd_processing+0x98>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fa72 	bl	8003f28 <xQueueReceive>

		if(new_cmd->COMMAND_NUM == LED_ON_COMMAND) {
 8000a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d102      	bne.n	8000a52 <vTask3_cmd_processing+0x2e>
			make_led_on();
 8000a4c:	f000 f8dc 	bl	8000c08 <make_led_on>
 8000a50:	e02e      	b.n	8000ab0 <vTask3_cmd_processing+0x8c>

		} else if(new_cmd->COMMAND_NUM == LED_OFF_COMMAND) {
 8000a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d102      	bne.n	8000a60 <vTask3_cmd_processing+0x3c>
			make_led_off();
 8000a5a:	f000 f8e1 	bl	8000c20 <make_led_off>
 8000a5e:	e027      	b.n	8000ab0 <vTask3_cmd_processing+0x8c>

		} else if(new_cmd->COMMAND_NUM == LED_TOGGLE_COMMAND) {
 8000a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d103      	bne.n	8000a70 <vTask3_cmd_processing+0x4c>
			led_toggle_start(toggle_duration);
 8000a68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000a6a:	f000 f8f3 	bl	8000c54 <led_toggle_start>
 8000a6e:	e01f      	b.n	8000ab0 <vTask3_cmd_processing+0x8c>

		} else if(new_cmd->COMMAND_NUM == LED_TOGGLE_STOP_COMMAND) {
 8000a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d102      	bne.n	8000a7e <vTask3_cmd_processing+0x5a>
			led_toggle_stop();
 8000a78:	f000 f924 	bl	8000cc4 <led_toggle_stop>
 8000a7c:	e018      	b.n	8000ab0 <vTask3_cmd_processing+0x8c>

		} else if(new_cmd->COMMAND_NUM == LED_READ_STATUS_COMMAND) {
 8000a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b05      	cmp	r3, #5
 8000a84:	d105      	bne.n	8000a92 <vTask3_cmd_processing+0x6e>
			read_led_status(task_msg);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f92c 	bl	8000ce8 <read_led_status>
 8000a90:	e00e      	b.n	8000ab0 <vTask3_cmd_processing+0x8c>

		} else if(new_cmd->COMMAND_NUM == RTC_READ_DATE_TIME_COMMAND) {
 8000a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d105      	bne.n	8000aa6 <vTask3_cmd_processing+0x82>
			read_rtc_info(task_msg);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f944 	bl	8000d2c <read_rtc_info>
 8000aa4:	e004      	b.n	8000ab0 <vTask3_cmd_processing+0x8c>

		} else {
			print_error_message(task_msg);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f974 	bl	8000d98 <print_error_message>
		}
		vPortFree(new_cmd);
 8000ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f005 fac8 	bl	8006048 <vPortFree>
		xQueueReceive(command_queue, (void*)&new_cmd, portMAX_DELAY);
 8000ab8:	e7bb      	b.n	8000a32 <vTask3_cmd_processing+0xe>
 8000aba:	bf00      	nop
 8000abc:	20000290 	.word	0x20000290

08000ac0 <vTask4_uart_write>:
	}
}


void vTask4_uart_write(void *pvParameters) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

	char *pData = NULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]

	for(;;) {
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <vTask4_uart_write+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f107 010c 	add.w	r1, r7, #12
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fa25 	bl	8003f28 <xQueueReceive>
		printmsg(pData);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f803 	bl	8000aec <printmsg>
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8000ae6:	e7f1      	b.n	8000acc <vTask4_uart_write+0xc>
 8000ae8:	20000294 	.word	0x20000294

08000aec <printmsg>:
	}
}


void printmsg(char *msg) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0; i < strlen(msg); i++) {
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	e00b      	b.n	8000b12 <printmsg+0x26>
		HAL_UART_Transmit(&huart2, (uint8_t*)&msg[i], sizeof(msg[i]), HAL_MAX_DELAY);
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	18d1      	adds	r1, r2, r3
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	2201      	movs	r2, #1
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <printmsg+0x40>)
 8000b08:	f002 fb81 	bl	800320e <HAL_UART_Transmit>
	for(uint32_t i = 0; i < strlen(msg); i++) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff fb7c 	bl	8000210 <strlen>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d3ec      	bcc.n	8000afa <printmsg+0xe>
	}
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2001303c 	.word	0x2001303c

08000b30 <USART2_IRQHandler>:
	tick_count_local = xTaskGetTickCount();

	while(xTaskGetTickCount() < (tick_count_local + delay_in_ticks));
}

void USART2_IRQHandler(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af02      	add	r7, sp, #8

	uint8_t data_byte;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]

	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <USART2_IRQHandler+0x90>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0320 	and.w	r3, r3, #32
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d12c      	bne.n	8000ba2 <USART2_IRQHandler+0x72>
		//a data byte is received from the user
		HAL_UART_Receive(&huart2, (uint8_t*)&data_byte, 1, HAL_MAX_DELAY);
 8000b48:	1df9      	adds	r1, r7, #7
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	2201      	movs	r2, #1
 8000b50:	481b      	ldr	r0, [pc, #108]	; (8000bc0 <USART2_IRQHandler+0x90>)
 8000b52:	f002 fbee 	bl	8003332 <HAL_UART_Receive>
		command_buffer[command_len++] = data_byte;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <USART2_IRQHandler+0x94>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	b2d1      	uxtb	r1, r2
 8000b5e:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <USART2_IRQHandler+0x94>)
 8000b60:	7011      	strb	r1, [r2, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	79f9      	ldrb	r1, [r7, #7]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <USART2_IRQHandler+0x98>)
 8000b68:	5499      	strb	r1, [r3, r2]

		if(data_byte == '\r') {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b0d      	cmp	r3, #13
 8000b6e:	d118      	bne.n	8000ba2 <USART2_IRQHandler+0x72>
			//then user is finished entering the data
			//reset the command_len variable
			command_len = 0;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <USART2_IRQHandler+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]

			//lets notify the command handling task
			xTaskNotifyFromISR(xTaskHandle2, 0, eNoAction, &xHigherPriorityTaskWoken);
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <USART2_IRQHandler+0x9c>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	f004 fa86 	bl	8005098 <xTaskGenericNotifyFromISR>
			xTaskNotifyFromISR(xTaskHandle1, 0, eNoAction, &xHigherPriorityTaskWoken);
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <USART2_IRQHandler+0xa0>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	463b      	mov	r3, r7
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	2300      	movs	r3, #0
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f004 fa7b 	bl	8005098 <xTaskGenericNotifyFromISR>
	}

	// if the above freertos apis wake up any higher priority task, then yield the processor to the
	//higher priority task which is just woken up.

	if(xHigherPriorityTaskWoken) {
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d007      	beq.n	8000bb8 <USART2_IRQHandler+0x88>
		taskYIELD();
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <USART2_IRQHandler+0xa4>)
 8000baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f3bf 8f4f 	dsb	sy
 8000bb4:	f3bf 8f6f 	isb	sy
	}
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2001303c 	.word	0x2001303c
 8000bc4:	20000180 	.word	0x20000180
 8000bc8:	20013028 	.word	0x20013028
 8000bcc:	20000284 	.word	0x20000284
 8000bd0:	20000280 	.word	0x20000280
 8000bd4:	e000ed04 	.word	0xe000ed04

08000bd8 <getCommandCode>:

uint8_t getCommandCode(uint8_t *buffer) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	return buffer[0] - 48;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	3b30      	subs	r3, #48	; 0x30
 8000be6:	b2db      	uxtb	r3, r3
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <getArguments>:

void getArguments(uint8_t *buffer) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <make_led_on>:

void make_led_on(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2120      	movs	r1, #32
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <make_led_on+0x14>)
 8000c12:	f000 fd07 	bl	8001624 <HAL_GPIO_WritePin>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40020000 	.word	0x40020000

08000c20 <make_led_off>:

void make_led_off(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2120      	movs	r1, #32
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <make_led_off+0x14>)
 8000c2a:	f000 fcfb 	bl	8001624 <HAL_GPIO_WritePin>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020000 	.word	0x40020000

08000c38 <led_toggle>:

void led_toggle(TimerHandle_t xTimer) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c40:	2120      	movs	r1, #32
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <led_toggle+0x18>)
 8000c44:	f000 fd07 	bl	8001656 <HAL_GPIO_TogglePin>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40020000 	.word	0x40020000

08000c54 <led_toggle_start>:

void led_toggle_start(uint32_t duration) {
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	6078      	str	r0, [r7, #4]

	if(led_timer_handle == NULL) {
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <led_toggle_start+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d118      	bne.n	8000c96 <led_toggle_start+0x42>
		//1. lets create the software timer
		led_timer_handle = xTimerCreate("LED-TIMER", duration, pdTRUE, NULL, led_toggle);
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <led_toggle_start+0x68>)
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <led_toggle_start+0x6c>)
 8000c70:	f004 fbac 	bl	80053cc <xTimerCreate>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <led_toggle_start+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

		//2. start the software timer
		xTimerStart(led_timer_handle, portMAX_DELAY);
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <led_toggle_start+0x64>)
 8000c7c:	681c      	ldr	r4, [r3, #0]
 8000c7e:	f003 fde3 	bl	8004848 <xTaskGetTickCount>
 8000c82:	4602      	mov	r2, r0
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f004 fbf8 	bl	8005484 <xTimerGenericCommand>
	} else {
		//start the software timer
		xTimerStart(led_timer_handle, portMAX_DELAY);
	}
}
 8000c94:	e00c      	b.n	8000cb0 <led_toggle_start+0x5c>
		xTimerStart(led_timer_handle, portMAX_DELAY);
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <led_toggle_start+0x64>)
 8000c98:	681c      	ldr	r4, [r3, #0]
 8000c9a:	f003 fdd5 	bl	8004848 <xTaskGetTickCount>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4620      	mov	r0, r4
 8000cac:	f004 fbea 	bl	8005484 <xTimerGenericCommand>
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	20000298 	.word	0x20000298
 8000cbc:	08000c39 	.word	0x08000c39
 8000cc0:	08006a88 	.word	0x08006a88

08000cc4 <led_toggle_stop>:

void led_toggle_stop(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af02      	add	r7, sp, #8

	 xTimerStop(led_timer_handle, portMAX_DELAY);
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <led_toggle_stop+0x20>)
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2103      	movs	r1, #3
 8000cda:	f004 fbd3 	bl	8005484 <xTimerGenericCommand>
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000298 	.word	0x20000298

08000ce8 <read_led_status>:

void read_led_status(char *task_msg) {
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

	sprintf(task_msg, "\r\nLED status is : %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5));
 8000cf0:	687c      	ldr	r4, [r7, #4]
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <read_led_status+0x38>)
 8000cf6:	f000 fc7d 	bl	80015f4 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4909      	ldr	r1, [pc, #36]	; (8000d24 <read_led_status+0x3c>)
 8000d00:	4620      	mov	r0, r4
 8000d02:	f005 fa3f 	bl	8006184 <siprintf>
	xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <read_led_status+0x40>)
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	1d39      	adds	r1, r7, #4
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d12:	f002 ff61 	bl	8003bd8 <xQueueGenericSend>
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020000 	.word	0x40020000
 8000d24:	08006a94 	.word	0x08006a94
 8000d28:	20000294 	.word	0x20000294

08000d2c <read_rtc_info>:

void read_rtc_info(char *task_msg)
{
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	b08d      	sub	sp, #52	; 0x34
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef RTC_time;
	RTC_DateTypeDef RTC_date;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &RTC_time, RTC_FORMAT_BIN);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <read_rtc_info+0x60>)
 8000d3e:	f001 fe4c 	bl	80029da <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &RTC_date, RTC_FORMAT_BIN);
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <read_rtc_info+0x60>)
 8000d4c:	f001 fea3 	bl	8002a96 <HAL_RTC_GetDate>

	sprintf(task_msg,"\r\nTime: %02d:%02d:%02d \r\n Date : %02d-%2d-%2d \r\n", RTC_time.Hours, RTC_time.Minutes, RTC_time.Seconds, \
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	461d      	mov	r5, r3
 8000d56:	7b7b      	ldrb	r3, [r7, #13]
 8000d58:	461e      	mov	r6, r3
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
									RTC_date.Date, RTC_date.Month, RTC_date.Year);
 8000d5c:	7aba      	ldrb	r2, [r7, #10]
 8000d5e:	7a79      	ldrb	r1, [r7, #9]
 8000d60:	7afc      	ldrb	r4, [r7, #11]
	sprintf(task_msg,"\r\nTime: %02d:%02d:%02d \r\n Date : %02d-%2d-%2d \r\n", RTC_time.Hours, RTC_time.Minutes, RTC_time.Seconds, \
 8000d62:	9403      	str	r4, [sp, #12]
 8000d64:	9102      	str	r1, [sp, #8]
 8000d66:	9201      	str	r2, [sp, #4]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	4633      	mov	r3, r6
 8000d6c:	462a      	mov	r2, r5
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <read_rtc_info+0x64>)
 8000d70:	f005 fa08 	bl	8006184 <siprintf>
	xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <read_rtc_info+0x68>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	1d39      	adds	r1, r7, #4
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	f002 ff2a 	bl	8003bd8 <xQueueGenericSend>
}
 8000d84:	bf00      	nop
 8000d86:	3724      	adds	r7, #36	; 0x24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8c:	20013004 	.word	0x20013004
 8000d90:	08006aac 	.word	0x08006aac
 8000d94:	20000294 	.word	0x20000294

08000d98 <print_error_message>:

void print_error_message(char *task_msg) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	sprintf(task_msg, "\r\nInvalid command received\r\n");
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <print_error_message+0x2c>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f005 f9ed 	bl	8006184 <siprintf>
	xQueueSend(uart_write_queue, &task_msg, portMAX_DELAY);
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <print_error_message+0x30>)
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	1d39      	adds	r1, r7, #4
 8000db0:	2300      	movs	r3, #0
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295
 8000db6:	f002 ff0f 	bl	8003bd8 <xQueueGenericSend>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08006ae0 	.word	0x08006ae0
 8000dc8:	20000294 	.word	0x20000294

08000dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dde:	f000 f973 	bl	80010c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40001000 	.word	0x40001000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <HAL_RTC_MspInit+0x24>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d102      	bne.n	8000e64 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_RTC_MspInit+0x28>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40002800 	.word	0x40002800
 8000e74:	42470e3c 	.word	0x42470e3c

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1d      	ldr	r2, [pc, #116]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d133      	bne.n	8000f02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_UART_MspInit+0x98>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <HAL_UART_MspInit+0x9c>)
 8000eee:	f000 f9ed 	bl	80012cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2106      	movs	r1, #6
 8000ef6:	2026      	movs	r0, #38	; 0x26
 8000ef8:	f000 f9be 	bl	8001278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efc:	2026      	movs	r0, #38	; 0x26
 8000efe:	f000 f9d7 	bl	80012b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40004400 	.word	0x40004400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000

08000f18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	2036      	movs	r0, #54	; 0x36
 8000f2e:	f000 f9a3 	bl	8001278 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f32:	2036      	movs	r0, #54	; 0x36
 8000f34:	f000 f9bc 	bl	80012b0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_InitTick+0xa4>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a1e      	ldr	r2, [pc, #120]	; (8000fbc <HAL_InitTick+0xa4>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_InitTick+0xa4>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f54:	f107 0210 	add.w	r2, r7, #16
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fcfe 	bl	8001960 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f64:	f000 fcd4 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_InitTick+0xa8>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9b      	lsrs	r3, r3, #18
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_InitTick+0xac>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_InitTick+0xb0>)
 8000f80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_InitTick+0xac>)
 8000f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_InitTick+0xac>)
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_InitTick+0xac>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_InitTick+0xac>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <HAL_InitTick+0xac>)
 8000f9e:	f001 fe3b 	bl	8002c18 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d104      	bne.n	8000fb2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <HAL_InitTick+0xac>)
 8000faa:	f001 fe8f 	bl	8002ccc <HAL_TIM_Base_Start_IT>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3730      	adds	r7, #48	; 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	20013080 	.word	0x20013080
 8000fc8:	40001000 	.word	0x40001000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM6_DAC_IRQHandler+0x10>)
 8000ffe:	f001 fed5 	bl	8002dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20013080 	.word	0x20013080

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800104c:	4c0b      	ldr	r4, [pc, #44]	; (800107c <LoopFillZerobss+0x26>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800105a:	f7ff ffd7 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f005 f857 	bl	8006110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff faa9 	bl	80005b8 <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001074:	08006b74 	.word	0x08006b74
  ldr r2, =_sbss
 8001078:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800107c:	2001311c 	.word	0x2001311c

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_Init+0x40>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_Init+0x40>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x40>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f8d8 	bl	8001262 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff ff30 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fea0 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200000f0 	.word	0x200000f0
 80010ec:	200130c8 	.word	0x200130c8

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200130c8 	.word	0x200130c8

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <__NVIC_EnableIRQ+0x38>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff4c 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128a:	f7ff ff61 	bl	8001150 <__NVIC_GetPriorityGrouping>
 800128e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	68b9      	ldr	r1, [r7, #8]
 8001294:	6978      	ldr	r0, [r7, #20]
 8001296:	f7ff ffb1 	bl	80011fc <NVIC_EncodePriority>
 800129a:	4602      	mov	r2, r0
 800129c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ff80 	bl	80011a8 <__NVIC_SetPriority>
}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff54 	bl	800116c <__NVIC_EnableIRQ>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e165      	b.n	80015b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8154 	bne.w	80015ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80ae 	beq.w	80015ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <HAL_GPIO_Init+0x300>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a5c      	ldr	r2, [pc, #368]	; (80015cc <HAL_GPIO_Init+0x300>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <HAL_GPIO_Init+0x300>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <HAL_GPIO_Init+0x304>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4f      	ldr	r2, [pc, #316]	; (80015d4 <HAL_GPIO_Init+0x308>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d025      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4e      	ldr	r2, [pc, #312]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01f      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4d      	ldr	r2, [pc, #308]	; (80015dc <HAL_GPIO_Init+0x310>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4c      	ldr	r2, [pc, #304]	; (80015e0 <HAL_GPIO_Init+0x314>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4b      	ldr	r2, [pc, #300]	; (80015e4 <HAL_GPIO_Init+0x318>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4a      	ldr	r2, [pc, #296]	; (80015e8 <HAL_GPIO_Init+0x31c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x206>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a49      	ldr	r2, [pc, #292]	; (80015ec <HAL_GPIO_Init+0x320>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x202>
 80014ca:	2306      	movs	r3, #6
 80014cc:	e00c      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e00a      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014d2:	2305      	movs	r3, #5
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x21c>
 80014e6:	2300      	movs	r3, #0
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f8:	4935      	ldr	r1, [pc, #212]	; (80015d0 <HAL_GPIO_Init+0x304>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001506:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152a:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <HAL_GPIO_Init+0x324>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001554:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <HAL_GPIO_Init+0x324>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	f67f ae96 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020c00 	.word	0x40020c00
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40021400 	.word	0x40021400
 80015ec:	40021800 	.word	0x40021800
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e001      	b.n	8001616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	041a      	lsls	r2, r3, #16
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43d9      	mvns	r1, r3
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	400b      	ands	r3, r1
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_PWREx_EnableOverDrive+0x90>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_PWREx_EnableOverDrive+0x90>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_PWREx_EnableOverDrive+0x90>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_PWREx_EnableOverDrive+0x94>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff fd1a 	bl	80010f0 <HAL_GetTick>
 80016bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016be:	e009      	b.n	80016d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016c0:	f7ff fd16 	bl	80010f0 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ce:	d901      	bls.n	80016d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e01f      	b.n	8001714 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_PWREx_EnableOverDrive+0x98>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d1ee      	bne.n	80016c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e8:	f7ff fd02 	bl	80010f0 <HAL_GetTick>
 80016ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016ee:	e009      	b.n	8001704 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016f0:	f7ff fcfe 	bl	80010f0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016fe:	d901      	bls.n	8001704 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e007      	b.n	8001714 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <HAL_PWREx_EnableOverDrive+0x98>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001710:	d1ee      	bne.n	80016f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	420e0040 	.word	0x420e0040
 8001724:	40007000 	.word	0x40007000
 8001728:	420e0044 	.word	0x420e0044

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff fc68 	bl	80010f0 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff fc64 	bl	80010f0 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 fbb1 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fb20 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08006b18 	.word	0x08006b18
 80018f0:	200000e8 	.word	0x200000e8
 80018f4:	200000ec 	.word	0x200000ec

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200000e8 	.word	0x200000e8

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08006b28 	.word	0x08006b28

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffdc 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0b5b      	lsrs	r3, r3, #13
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08006b28 	.word	0x08006b28

08001960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	220f      	movs	r2, #15
 800196e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	08db      	lsrs	r3, r3, #3
 800199a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_RCC_GetClockConfig+0x60>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 020f 	and.w	r2, r3, #15
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019fc:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a02:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	496c      	ldr	r1, [pc, #432]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d010      	beq.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a30:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a38:	4960      	ldr	r1, [pc, #384]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d017      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a58:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4955      	ldr	r1, [pc, #340]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a76:	d101      	bne.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d017      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a94:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa2:	4946      	ldr	r1, [pc, #280]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0320 	and.w	r3, r3, #32
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 808a 	beq.w	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a38      	ldr	r2, [pc, #224]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001aee:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a33      	ldr	r2, [pc, #204]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001afa:	f7ff faf9 	bl	80010f0 <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7ff faf5 	bl	80010f0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e278      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b14:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b28:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d02f      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d028      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d114      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fac3 	bl	80010f0 <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fabf 	bl	80010f0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e240      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b9c:	d114      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb2:	4902      	ldr	r1, [pc, #8]	; (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]
 8001bb8:	e00c      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42470e40 	.word	0x42470e40
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a49      	ldr	r2, [pc, #292]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bd2:	6093      	str	r3, [r2, #8]
 8001bd4:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	4944      	ldr	r1, [pc, #272]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d004      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001bfa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00a      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4937      	ldr	r1, [pc, #220]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00a      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c30:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	492e      	ldr	r1, [pc, #184]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d011      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c52:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	4926      	ldr	r1, [pc, #152]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d011      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cac:	4911      	ldr	r1, [pc, #68]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd0:	f040 80ff 	bne.w	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cda:	f7ff fa09 	bl	80010f0 <HAL_GetTick>
 8001cde:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ce0:	e00e      	b.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ce2:	f7ff fa05 	bl	80010f0 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d907      	bls.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e188      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	424711e0 	.word	0x424711e0
 8001cfc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d00:	4b7e      	ldr	r3, [pc, #504]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ea      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d028      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d124      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d34:	4b71      	ldr	r3, [pc, #452]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	3301      	adds	r3, #1
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d46:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d4c:	0e1b      	lsrs	r3, r3, #24
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	019b      	lsls	r3, r3, #6
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	071b      	lsls	r3, r3, #28
 8001d76:	4961      	ldr	r1, [pc, #388]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d92:	d00a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d035      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da8:	d130      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001daa:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dbc:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc2:	0f1b      	lsrs	r3, r3, #28
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	019b      	lsls	r3, r3, #6
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	085b      	lsrs	r3, r3, #1
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	041b      	lsls	r3, r3, #16
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	431a      	orrs	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	071b      	lsls	r3, r3, #28
 8001dec:	4943      	ldr	r1, [pc, #268]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001df4:	4b41      	ldr	r3, [pc, #260]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfa:	f023 021f 	bic.w	r2, r3, #31
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	3b01      	subs	r3, #1
 8001e04:	493d      	ldr	r1, [pc, #244]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d029      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e20:	d124      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e3a:	0f1b      	lsrs	r3, r3, #28
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	071b      	lsls	r3, r3, #28
 8001e64:	4925      	ldr	r1, [pc, #148]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d016      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	019b      	lsls	r3, r3, #6
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	085b      	lsrs	r3, r3, #1
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	071b      	lsls	r3, r3, #28
 8001e9e:	4917      	ldr	r1, [pc, #92]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eac:	f7ff f920 	bl	80010f0 <HAL_GetTick>
 8001eb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001eb4:	f7ff f91c 	bl	80010f0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e09f      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	f040 8095 	bne.w	8002004 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7ff f906 	bl	80010f0 <HAL_GetTick>
 8001ee4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ee8:	f7ff f902 	bl	80010f0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d908      	bls.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e085      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	42470068 	.word	0x42470068
 8001f04:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f14:	d0e8      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02b      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d127      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	3b01      	subs	r3, #1
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	061b      	lsls	r3, r3, #24
 8001f6c:	4928      	ldr	r1, [pc, #160]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	3b01      	subs	r3, #1
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	4922      	ldr	r1, [pc, #136]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01d      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa2:	d118      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	0e1b      	lsrs	r3, r3, #24
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	019b      	lsls	r3, r3, #6
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	4910      	ldr	r1, [pc, #64]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f888 	bl	80010f0 <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fe4:	f7ff f884 	bl	80010f0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e007      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002002:	d1ef      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3730      	adds	r7, #48	; 0x30
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	42470070 	.word	0x42470070

08002018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800201c:	b088      	sub	sp, #32
 800201e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002034:	4bce      	ldr	r3, [pc, #824]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b0c      	cmp	r3, #12
 800203e:	f200 818d 	bhi.w	800235c <HAL_RCC_GetSysClockFreq+0x344>
 8002042:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <HAL_RCC_GetSysClockFreq+0x30>)
 8002044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002048:	0800207d 	.word	0x0800207d
 800204c:	0800235d 	.word	0x0800235d
 8002050:	0800235d 	.word	0x0800235d
 8002054:	0800235d 	.word	0x0800235d
 8002058:	08002083 	.word	0x08002083
 800205c:	0800235d 	.word	0x0800235d
 8002060:	0800235d 	.word	0x0800235d
 8002064:	0800235d 	.word	0x0800235d
 8002068:	08002089 	.word	0x08002089
 800206c:	0800235d 	.word	0x0800235d
 8002070:	0800235d 	.word	0x0800235d
 8002074:	0800235d 	.word	0x0800235d
 8002078:	080021fd 	.word	0x080021fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4bbd      	ldr	r3, [pc, #756]	; (8002374 <HAL_RCC_GetSysClockFreq+0x35c>)
 800207e:	61bb      	str	r3, [r7, #24]
       break;
 8002080:	e16f      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002082:	4bbd      	ldr	r3, [pc, #756]	; (8002378 <HAL_RCC_GetSysClockFreq+0x360>)
 8002084:	61bb      	str	r3, [r7, #24]
      break;
 8002086:	e16c      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002088:	4bb9      	ldr	r3, [pc, #740]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002090:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002092:	4bb7      	ldr	r3, [pc, #732]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d053      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4bb4      	ldr	r3, [pc, #720]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	461a      	mov	r2, r3
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	ea02 0400 	and.w	r4, r2, r0
 80020b6:	603c      	str	r4, [r7, #0]
 80020b8:	400b      	ands	r3, r1
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c0:	4620      	mov	r0, r4
 80020c2:	4629      	mov	r1, r5
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	014b      	lsls	r3, r1, #5
 80020ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020d2:	0142      	lsls	r2, r0, #5
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	4623      	mov	r3, r4
 80020da:	1ac0      	subs	r0, r0, r3
 80020dc:	462b      	mov	r3, r5
 80020de:	eb61 0103 	sbc.w	r1, r1, r3
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	018b      	lsls	r3, r1, #6
 80020ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020f0:	0182      	lsls	r2, r0, #6
 80020f2:	1a12      	subs	r2, r2, r0
 80020f4:	eb63 0301 	sbc.w	r3, r3, r1
 80020f8:	f04f 0000 	mov.w	r0, #0
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	00d9      	lsls	r1, r3, #3
 8002102:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002106:	00d0      	lsls	r0, r2, #3
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4621      	mov	r1, r4
 800210e:	1852      	adds	r2, r2, r1
 8002110:	4629      	mov	r1, r5
 8002112:	eb43 0101 	adc.w	r1, r3, r1
 8002116:	460b      	mov	r3, r1
 8002118:	f04f 0000 	mov.w	r0, #0
 800211c:	f04f 0100 	mov.w	r1, #0
 8002120:	0259      	lsls	r1, r3, #9
 8002122:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002126:	0250      	lsls	r0, r2, #9
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	461a      	mov	r2, r3
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	f7fe f8c2 	bl	80002c0 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	e04c      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002146:	4b8a      	ldr	r3, [pc, #552]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	099b      	lsrs	r3, r3, #6
 800214c:	461a      	mov	r2, r3
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	ea02 0a00 	and.w	sl, r2, r0
 800215e:	ea03 0b01 	and.w	fp, r3, r1
 8002162:	4650      	mov	r0, sl
 8002164:	4659      	mov	r1, fp
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	014b      	lsls	r3, r1, #5
 8002170:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002174:	0142      	lsls	r2, r0, #5
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	ebb0 000a 	subs.w	r0, r0, sl
 800217e:	eb61 010b 	sbc.w	r1, r1, fp
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	018b      	lsls	r3, r1, #6
 800218c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002190:	0182      	lsls	r2, r0, #6
 8002192:	1a12      	subs	r2, r2, r0
 8002194:	eb63 0301 	sbc.w	r3, r3, r1
 8002198:	f04f 0000 	mov.w	r0, #0
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	00d9      	lsls	r1, r3, #3
 80021a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021a6:	00d0      	lsls	r0, r2, #3
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	eb12 020a 	adds.w	r2, r2, sl
 80021b0:	eb43 030b 	adc.w	r3, r3, fp
 80021b4:	f04f 0000 	mov.w	r0, #0
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	0299      	lsls	r1, r3, #10
 80021be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021c2:	0290      	lsls	r0, r2, #10
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	f7fe f874 	bl	80002c0 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4613      	mov	r3, r2
 80021de:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e0:	4b63      	ldr	r3, [pc, #396]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	3301      	adds	r3, #1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	61bb      	str	r3, [r7, #24]
      break;
 80021fa:	e0b2      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4b5c      	ldr	r3, [pc, #368]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002206:	4b5a      	ldr	r3, [pc, #360]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d04d      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b57      	ldr	r3, [pc, #348]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	461a      	mov	r2, r3
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	ea02 0800 	and.w	r8, r2, r0
 800222a:	ea03 0901 	and.w	r9, r3, r1
 800222e:	4640      	mov	r0, r8
 8002230:	4649      	mov	r1, r9
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	014b      	lsls	r3, r1, #5
 800223c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002240:	0142      	lsls	r2, r0, #5
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	ebb0 0008 	subs.w	r0, r0, r8
 800224a:	eb61 0109 	sbc.w	r1, r1, r9
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	018b      	lsls	r3, r1, #6
 8002258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800225c:	0182      	lsls	r2, r0, #6
 800225e:	1a12      	subs	r2, r2, r0
 8002260:	eb63 0301 	sbc.w	r3, r3, r1
 8002264:	f04f 0000 	mov.w	r0, #0
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	00d9      	lsls	r1, r3, #3
 800226e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002272:	00d0      	lsls	r0, r2, #3
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	eb12 0208 	adds.w	r2, r2, r8
 800227c:	eb43 0309 	adc.w	r3, r3, r9
 8002280:	f04f 0000 	mov.w	r0, #0
 8002284:	f04f 0100 	mov.w	r1, #0
 8002288:	0259      	lsls	r1, r3, #9
 800228a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800228e:	0250      	lsls	r0, r2, #9
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	461a      	mov	r2, r3
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	f7fe f80e 	bl	80002c0 <__aeabi_uldivmod>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4613      	mov	r3, r2
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	e04a      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ae:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	461a      	mov	r2, r3
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	ea02 0400 	and.w	r4, r2, r0
 80022c6:	ea03 0501 	and.w	r5, r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	014b      	lsls	r3, r1, #5
 80022d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022dc:	0142      	lsls	r2, r0, #5
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	1b00      	subs	r0, r0, r4
 80022e4:	eb61 0105 	sbc.w	r1, r1, r5
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	018b      	lsls	r3, r1, #6
 80022f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022f6:	0182      	lsls	r2, r0, #6
 80022f8:	1a12      	subs	r2, r2, r0
 80022fa:	eb63 0301 	sbc.w	r3, r3, r1
 80022fe:	f04f 0000 	mov.w	r0, #0
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	00d9      	lsls	r1, r3, #3
 8002308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800230c:	00d0      	lsls	r0, r2, #3
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	1912      	adds	r2, r2, r4
 8002314:	eb45 0303 	adc.w	r3, r5, r3
 8002318:	f04f 0000 	mov.w	r0, #0
 800231c:	f04f 0100 	mov.w	r1, #0
 8002320:	0299      	lsls	r1, r3, #10
 8002322:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002326:	0290      	lsls	r0, r2, #10
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	461a      	mov	r2, r3
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	f7fd ffc2 	bl	80002c0 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4613      	mov	r3, r2
 8002342:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_RCC_GetSysClockFreq+0x358>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	0f1b      	lsrs	r3, r3, #28
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	61bb      	str	r3, [r7, #24]
      break;
 800235a:	e002      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetSysClockFreq+0x35c>)
 800235e:	61bb      	str	r3, [r7, #24]
      break;
 8002360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002362:	69bb      	ldr	r3, [r7, #24]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	00f42400 	.word	0x00f42400
 8002378:	007a1200 	.word	0x007a1200

0800237c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e28d      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8083 	beq.w	80024a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800239c:	4b94      	ldr	r3, [pc, #592]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d019      	beq.n	80023dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023a8:	4b91      	ldr	r3, [pc, #580]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023b4:	4b8e      	ldr	r3, [pc, #568]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c0:	d00c      	beq.n	80023dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d112      	bne.n	80023f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023da:	d10b      	bne.n	80023f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05b      	beq.n	80024a0 <HAL_RCC_OscConfig+0x124>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d157      	bne.n	80024a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e25a      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x90>
 80023fe:	4b7c      	ldr	r3, [pc, #496]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7b      	ldr	r2, [pc, #492]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xcc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0xb4>
 8002416:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a75      	ldr	r2, [pc, #468]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b73      	ldr	r3, [pc, #460]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xcc>
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6b      	ldr	r2, [pc, #428]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fe4e 	bl	80010f0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fe4a 	bl	80010f0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e21f      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xdc>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fe3a 	bl	80010f0 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe fe36 	bl	80010f0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e20b      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x104>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d06f      	beq.n	800258e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ae:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d017      	beq.n	80024ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ba:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024c6:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x186>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1d3      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4937      	ldr	r1, [pc, #220]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e03a      	b.n	800258e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fde3 	bl	80010f0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252e:	f7fe fddf 	bl	80010f0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1b4      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4925      	ldr	r1, [pc, #148]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_RCC_OscConfig+0x278>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fdc2 	bl	80010f0 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe fdbe 	bl	80010f0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e193      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d036      	beq.n	8002608 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7fe fda2 	bl	80010f0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b0:	f7fe fd9e 	bl	80010f0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e173      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80025c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x234>
 80025ce:	e01b      	b.n	8002608 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe fd8b 	bl	80010f0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	e00e      	b.n	80025fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025de:	f7fe fd87 	bl	80010f0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d907      	bls.n	80025fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e15c      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	42470000 	.word	0x42470000
 80025f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	4b8a      	ldr	r3, [pc, #552]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80025fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ea      	bne.n	80025de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8097 	beq.w	8002744 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261a:	4b83      	ldr	r3, [pc, #524]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10f      	bne.n	8002646 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b7f      	ldr	r3, [pc, #508]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a7e      	ldr	r2, [pc, #504]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b7c      	ldr	r3, [pc, #496]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002646:	4b79      	ldr	r3, [pc, #484]	; (800282c <HAL_RCC_OscConfig+0x4b0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d118      	bne.n	8002684 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002652:	4b76      	ldr	r3, [pc, #472]	; (800282c <HAL_RCC_OscConfig+0x4b0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a75      	ldr	r2, [pc, #468]	; (800282c <HAL_RCC_OscConfig+0x4b0>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265e:	f7fe fd47 	bl	80010f0 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002666:	f7fe fd43 	bl	80010f0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e118      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b6c      	ldr	r3, [pc, #432]	; (800282c <HAL_RCC_OscConfig+0x4b0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x31e>
 800268c:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4a65      	ldr	r2, [pc, #404]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6713      	str	r3, [r2, #112]	; 0x70
 8002698:	e01c      	b.n	80026d4 <HAL_RCC_OscConfig+0x358>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x340>
 80026a2:	4b61      	ldr	r3, [pc, #388]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	4a60      	ldr	r2, [pc, #384]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6713      	str	r3, [r2, #112]	; 0x70
 80026ae:	4b5e      	ldr	r3, [pc, #376]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a5d      	ldr	r2, [pc, #372]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0x358>
 80026bc:	4b5a      	ldr	r3, [pc, #360]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	4a59      	ldr	r2, [pc, #356]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70
 80026c8:	4b57      	ldr	r3, [pc, #348]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	4a56      	ldr	r2, [pc, #344]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	f023 0304 	bic.w	r3, r3, #4
 80026d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d015      	beq.n	8002708 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe fd08 	bl	80010f0 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7fe fd04 	bl	80010f0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0d7      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0ee      	beq.n	80026e4 <HAL_RCC_OscConfig+0x368>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe fcf2 	bl	80010f0 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7fe fcee 	bl	80010f0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0c1      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002726:	4b40      	ldr	r3, [pc, #256]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ee      	bne.n	8002710 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	4a3a      	ldr	r2, [pc, #232]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 800273e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002742:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80ad 	beq.w	80028a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b08      	cmp	r3, #8
 8002758:	d060      	beq.n	800281c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d145      	bne.n	80027ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <HAL_RCC_OscConfig+0x4b4>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fcc2 	bl	80010f0 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fcbe 	bl	80010f0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e093      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	4b29      	ldr	r3, [pc, #164]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	019b      	lsls	r3, r3, #6
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	071b      	lsls	r3, r3, #28
 80027ba:	491b      	ldr	r1, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_OscConfig+0x4b4>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fc93 	bl	80010f0 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fc8f 	bl	80010f0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e064      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x452>
 80027ec:	e05c      	b.n	80028a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_RCC_OscConfig+0x4b4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fc7c 	bl	80010f0 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fc78 	bl	80010f0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e04d      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_RCC_OscConfig+0x4ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x480>
 800281a:	e045      	b.n	80028a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e040      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
 8002828:	40023800 	.word	0x40023800
 800282c:	40007000 	.word	0x40007000
 8002830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002834:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <HAL_RCC_OscConfig+0x538>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d030      	beq.n	80028a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d129      	bne.n	80028a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d122      	bne.n	80028a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800286a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800286c:	4293      	cmp	r3, r2
 800286e:	d119      	bne.n	80028a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	3b01      	subs	r3, #1
 800287e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d10f      	bne.n	80028a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800

080028b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e083      	b.n	80029d2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7f5b      	ldrb	r3, [r3, #29]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe fab6 	bl	8000e4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	22ca      	movs	r2, #202	; 0xca
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2253      	movs	r2, #83	; 0x53
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f944 	bl	8002b84 <RTC_EnterInitMode>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	22ff      	movs	r2, #255	; 0xff
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2204      	movs	r2, #4
 800290e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e05e      	b.n	80029d2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002926:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6919      	ldr	r1, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	041a      	lsls	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002972:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10e      	bne.n	80029a0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8d6 	bl	8002b34 <HAL_RTC_WaitForSynchro>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e018      	b.n	80029d2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	22ff      	movs	r2, #255	; 0xff
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002a0c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a10:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d11a      	bne.n	8002a8c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f8be 	bl	8002bdc <RTC_Bcd2ToByte>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f8b5 	bl	8002bdc <RTC_Bcd2ToByte>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	789b      	ldrb	r3, [r3, #2]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f8ac 	bl	8002bdc <RTC_Bcd2ToByte>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ab0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	0b5b      	lsrs	r3, r3, #13
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11a      	bne.n	8002b2a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	78db      	ldrb	r3, [r3, #3]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f86f 	bl	8002bdc <RTC_Bcd2ToByte>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	785b      	ldrb	r3, [r3, #1]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f866 	bl	8002bdc <RTC_Bcd2ToByte>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	789b      	ldrb	r3, [r3, #2]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f85d 	bl	8002bdc <RTC_Bcd2ToByte>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b4e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fe face 	bl	80010f0 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002b56:	e009      	b.n	8002b6c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b58:	f7fe faca 	bl	80010f0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b66:	d901      	bls.n	8002b6c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e007      	b.n	8002b7c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ee      	beq.n	8002b58 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d119      	bne.n	8002bd2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe faa2 	bl	80010f0 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bae:	e009      	b.n	8002bc4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bb0:	f7fe fa9e 	bl	80010f0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bbe:	d901      	bls.n	8002bc4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e007      	b.n	8002bd4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ee      	beq.n	8002bb0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	b2db      	uxtb	r3, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e041      	b.n	8002cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f839 	bl	8002cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 f9d8 	bl	800300c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e04e      	b.n	8002d82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a23      	ldr	r2, [pc, #140]	; (8002d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d022      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d01d      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d018      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00e      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x80>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d010      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	e007      	b.n	8002d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40010400 	.word	0x40010400
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40001800 	.word	0x40001800

08002dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d122      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d11b      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0202 	mvn.w	r2, #2
 8002dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f8ee 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002df4:	e005      	b.n	8002e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8e0 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f8f1 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d122      	bne.n	8002e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d11b      	bne.n	8002e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0204 	mvn.w	r2, #4
 8002e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8c4 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f8b6 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8c7 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0208 	mvn.w	r2, #8
 8002e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2204      	movs	r2, #4
 8002e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f89a 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f88c 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f89d 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0210 	mvn.w	r2, #16
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2208      	movs	r2, #8
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f870 	bl	8002fd0 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f862 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f873 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10e      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0201 	mvn.w	r2, #1
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fd ff4e 	bl	8000dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	d10e      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d107      	bne.n	8002f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f902 	bl	8003160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	d10e      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d107      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f838 	bl	8002ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	d10e      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d107      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0220 	mvn.w	r2, #32
 8002fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f8cc 	bl	800314c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a40      	ldr	r2, [pc, #256]	; (8003120 <TIM_Base_SetConfig+0x114>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302a:	d00f      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3d      	ldr	r2, [pc, #244]	; (8003124 <TIM_Base_SetConfig+0x118>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3c      	ldr	r2, [pc, #240]	; (8003128 <TIM_Base_SetConfig+0x11c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3b      	ldr	r2, [pc, #236]	; (800312c <TIM_Base_SetConfig+0x120>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3a      	ldr	r2, [pc, #232]	; (8003130 <TIM_Base_SetConfig+0x124>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <TIM_Base_SetConfig+0x114>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02b      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d027      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <TIM_Base_SetConfig+0x118>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d023      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a2b      	ldr	r2, [pc, #172]	; (8003128 <TIM_Base_SetConfig+0x11c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01f      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2a      	ldr	r2, [pc, #168]	; (800312c <TIM_Base_SetConfig+0x120>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d01b      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a29      	ldr	r2, [pc, #164]	; (8003130 <TIM_Base_SetConfig+0x124>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d017      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a28      	ldr	r2, [pc, #160]	; (8003134 <TIM_Base_SetConfig+0x128>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a27      	ldr	r2, [pc, #156]	; (8003138 <TIM_Base_SetConfig+0x12c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00f      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a26      	ldr	r2, [pc, #152]	; (800313c <TIM_Base_SetConfig+0x130>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00b      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a25      	ldr	r2, [pc, #148]	; (8003140 <TIM_Base_SetConfig+0x134>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <TIM_Base_SetConfig+0x138>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d003      	beq.n	80030be <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a23      	ldr	r2, [pc, #140]	; (8003148 <TIM_Base_SetConfig+0x13c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d108      	bne.n	80030d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <TIM_Base_SetConfig+0x114>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_Base_SetConfig+0xf8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a0c      	ldr	r2, [pc, #48]	; (8003130 <TIM_Base_SetConfig+0x124>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d103      	bne.n	800310c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	615a      	str	r2, [r3, #20]
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40010400 	.word	0x40010400
 8003134:	40014000 	.word	0x40014000
 8003138:	40014400 	.word	0x40014400
 800313c:	40014800 	.word	0x40014800
 8003140:	40001800 	.word	0x40001800
 8003144:	40001c00 	.word	0x40001c00
 8003148:	40002000 	.word	0x40002000

0800314c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e03f      	b.n	8003206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fe6c 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f9a7 	bl	800350c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b08a      	sub	sp, #40	; 0x28
 8003212:	af02      	add	r7, sp, #8
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	d17c      	bne.n	8003328 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_UART_Transmit+0x2c>
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e075      	b.n	800332a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_UART_Transmit+0x3e>
 8003248:	2302      	movs	r3, #2
 800324a:	e06e      	b.n	800332a <HAL_UART_Transmit+0x11c>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2221      	movs	r2, #33	; 0x21
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003262:	f7fd ff45 	bl	80010f0 <HAL_GetTick>
 8003266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	88fa      	ldrh	r2, [r7, #6]
 8003272:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327c:	d108      	bne.n	8003290 <HAL_UART_Transmit+0x82>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	e003      	b.n	8003298 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032a0:	e02a      	b.n	80032f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f8e2 	bl	8003476 <UART_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e036      	b.n	800332a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	3302      	adds	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e007      	b.n	80032ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	3301      	adds	r3, #1
 80032e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1cf      	bne.n	80032a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2200      	movs	r2, #0
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f8b2 	bl	8003476 <UART_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e006      	b.n	800332a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e000      	b.n	800332a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b08a      	sub	sp, #40	; 0x28
 8003336:	af02      	add	r7, sp, #8
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b20      	cmp	r3, #32
 8003350:	f040 808c 	bne.w	800346c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_UART_Receive+0x2e>
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e084      	b.n	800346e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_UART_Receive+0x40>
 800336e:	2302      	movs	r3, #2
 8003370:	e07d      	b.n	800346e <HAL_UART_Receive+0x13c>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2222      	movs	r2, #34	; 0x22
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338e:	f7fd feaf 	bl	80010f0 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a8:	d108      	bne.n	80033bc <HAL_UART_Receive+0x8a>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d104      	bne.n	80033bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e003      	b.n	80033c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033cc:	e043      	b.n	8003456 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2200      	movs	r2, #0
 80033d6:	2120      	movs	r1, #32
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f84c 	bl	8003476 <UART_WaitOnFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e042      	b.n	800346e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10c      	bne.n	8003408 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	3302      	adds	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	e01f      	b.n	8003448 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003410:	d007      	beq.n	8003422 <HAL_UART_Receive+0xf0>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <HAL_UART_Receive+0xfe>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e008      	b.n	8003442 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800343c:	b2da      	uxtb	r2, r3
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3301      	adds	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1b6      	bne.n	80033ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	e000      	b.n	800346e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	4613      	mov	r3, r2
 8003484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003486:	e02c      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d028      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003496:	f7fd fe2b 	bl	80010f0 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d21d      	bcs.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e00f      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d0c3      	beq.n	8003488 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	b09f      	sub	sp, #124	; 0x7c
 8003512:	af00      	add	r7, sp, #0
 8003514:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003522:	68d9      	ldr	r1, [r3, #12]
 8003524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	ea40 0301 	orr.w	r3, r0, r1
 800352c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800352e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	431a      	orrs	r2, r3
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	431a      	orrs	r2, r3
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4313      	orrs	r3, r2
 8003544:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003550:	f021 010c 	bic.w	r1, r1, #12
 8003554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800355a:	430b      	orrs	r3, r1
 800355c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356a:	6999      	ldr	r1, [r3, #24]
 800356c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	ea40 0301 	orr.w	r3, r0, r1
 8003574:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4bc5      	ldr	r3, [pc, #788]	; (8003890 <UART_SetConfig+0x384>)
 800357c:	429a      	cmp	r2, r3
 800357e:	d004      	beq.n	800358a <UART_SetConfig+0x7e>
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4bc3      	ldr	r3, [pc, #780]	; (8003894 <UART_SetConfig+0x388>)
 8003586:	429a      	cmp	r2, r3
 8003588:	d103      	bne.n	8003592 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800358a:	f7fe f9d5 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 800358e:	6778      	str	r0, [r7, #116]	; 0x74
 8003590:	e002      	b.n	8003598 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003592:	f7fe f9bd 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8003596:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a0:	f040 80b6 	bne.w	8003710 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a6:	461c      	mov	r4, r3
 80035a8:	f04f 0500 	mov.w	r5, #0
 80035ac:	4622      	mov	r2, r4
 80035ae:	462b      	mov	r3, r5
 80035b0:	1891      	adds	r1, r2, r2
 80035b2:	6439      	str	r1, [r7, #64]	; 0x40
 80035b4:	415b      	adcs	r3, r3
 80035b6:	647b      	str	r3, [r7, #68]	; 0x44
 80035b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035bc:	1912      	adds	r2, r2, r4
 80035be:	eb45 0303 	adc.w	r3, r5, r3
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	00d9      	lsls	r1, r3, #3
 80035cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035d0:	00d0      	lsls	r0, r2, #3
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	1911      	adds	r1, r2, r4
 80035d8:	6639      	str	r1, [r7, #96]	; 0x60
 80035da:	416b      	adcs	r3, r5
 80035dc:	667b      	str	r3, [r7, #100]	; 0x64
 80035de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035f8:	f7fc fe62 	bl	80002c0 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4ba5      	ldr	r3, [pc, #660]	; (8003898 <UART_SetConfig+0x38c>)
 8003602:	fba3 2302 	umull	r2, r3, r3, r2
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	011e      	lsls	r6, r3, #4
 800360a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360c:	461c      	mov	r4, r3
 800360e:	f04f 0500 	mov.w	r5, #0
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	1891      	adds	r1, r2, r2
 8003618:	6339      	str	r1, [r7, #48]	; 0x30
 800361a:	415b      	adcs	r3, r3
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
 800361e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003622:	1912      	adds	r2, r2, r4
 8003624:	eb45 0303 	adc.w	r3, r5, r3
 8003628:	f04f 0000 	mov.w	r0, #0
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	00d9      	lsls	r1, r3, #3
 8003632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003636:	00d0      	lsls	r0, r2, #3
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	1911      	adds	r1, r2, r4
 800363e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003640:	416b      	adcs	r3, r5
 8003642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	461a      	mov	r2, r3
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	1891      	adds	r1, r2, r2
 8003650:	62b9      	str	r1, [r7, #40]	; 0x28
 8003652:	415b      	adcs	r3, r3
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800365a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800365e:	f7fc fe2f 	bl	80002c0 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b8c      	ldr	r3, [pc, #560]	; (8003898 <UART_SetConfig+0x38c>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	; 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	; 0x32
 800367a:	4a87      	ldr	r2, [pc, #540]	; (8003898 <UART_SetConfig+0x38c>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003688:	441e      	add	r6, r3
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	4618      	mov	r0, r3
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	1894      	adds	r4, r2, r2
 8003698:	623c      	str	r4, [r7, #32]
 800369a:	415b      	adcs	r3, r3
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036a2:	1812      	adds	r2, r2, r0
 80036a4:	eb41 0303 	adc.w	r3, r1, r3
 80036a8:	f04f 0400 	mov.w	r4, #0
 80036ac:	f04f 0500 	mov.w	r5, #0
 80036b0:	00dd      	lsls	r5, r3, #3
 80036b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036b6:	00d4      	lsls	r4, r2, #3
 80036b8:	4622      	mov	r2, r4
 80036ba:	462b      	mov	r3, r5
 80036bc:	1814      	adds	r4, r2, r0
 80036be:	653c      	str	r4, [r7, #80]	; 0x50
 80036c0:	414b      	adcs	r3, r1
 80036c2:	657b      	str	r3, [r7, #84]	; 0x54
 80036c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	1891      	adds	r1, r2, r2
 80036d0:	61b9      	str	r1, [r7, #24]
 80036d2:	415b      	adcs	r3, r3
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036de:	f7fc fdef 	bl	80002c0 <__aeabi_uldivmod>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4b6c      	ldr	r3, [pc, #432]	; (8003898 <UART_SetConfig+0x38c>)
 80036e8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	2164      	movs	r1, #100	; 0x64
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	3332      	adds	r3, #50	; 0x32
 80036fa:	4a67      	ldr	r2, [pc, #412]	; (8003898 <UART_SetConfig+0x38c>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	f003 0207 	and.w	r2, r3, #7
 8003706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4432      	add	r2, r6
 800370c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800370e:	e0b9      	b.n	8003884 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003712:	461c      	mov	r4, r3
 8003714:	f04f 0500 	mov.w	r5, #0
 8003718:	4622      	mov	r2, r4
 800371a:	462b      	mov	r3, r5
 800371c:	1891      	adds	r1, r2, r2
 800371e:	6139      	str	r1, [r7, #16]
 8003720:	415b      	adcs	r3, r3
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003728:	1912      	adds	r2, r2, r4
 800372a:	eb45 0303 	adc.w	r3, r5, r3
 800372e:	f04f 0000 	mov.w	r0, #0
 8003732:	f04f 0100 	mov.w	r1, #0
 8003736:	00d9      	lsls	r1, r3, #3
 8003738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800373c:	00d0      	lsls	r0, r2, #3
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	eb12 0804 	adds.w	r8, r2, r4
 8003746:	eb43 0905 	adc.w	r9, r3, r5
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	008b      	lsls	r3, r1, #2
 800375e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003762:	0082      	lsls	r2, r0, #2
 8003764:	4640      	mov	r0, r8
 8003766:	4649      	mov	r1, r9
 8003768:	f7fc fdaa 	bl	80002c0 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b49      	ldr	r3, [pc, #292]	; (8003898 <UART_SetConfig+0x38c>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	011e      	lsls	r6, r3, #4
 800377a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377c:	4618      	mov	r0, r3
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	1894      	adds	r4, r2, r2
 8003788:	60bc      	str	r4, [r7, #8]
 800378a:	415b      	adcs	r3, r3
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003792:	1812      	adds	r2, r2, r0
 8003794:	eb41 0303 	adc.w	r3, r1, r3
 8003798:	f04f 0400 	mov.w	r4, #0
 800379c:	f04f 0500 	mov.w	r5, #0
 80037a0:	00dd      	lsls	r5, r3, #3
 80037a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037a6:	00d4      	lsls	r4, r2, #3
 80037a8:	4622      	mov	r2, r4
 80037aa:	462b      	mov	r3, r5
 80037ac:	1814      	adds	r4, r2, r0
 80037ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80037b0:	414b      	adcs	r3, r1
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	008b      	lsls	r3, r1, #2
 80037c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037cc:	0082      	lsls	r2, r0, #2
 80037ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037d2:	f7fc fd75 	bl	80002c0 <__aeabi_uldivmod>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <UART_SetConfig+0x38c>)
 80037dc:	fba3 1302 	umull	r1, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	2164      	movs	r1, #100	; 0x64
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	3332      	adds	r3, #50	; 0x32
 80037ee:	4a2a      	ldr	r2, [pc, #168]	; (8003898 <UART_SetConfig+0x38c>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fa:	441e      	add	r6, r3
 80037fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fe:	4618      	mov	r0, r3
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	1894      	adds	r4, r2, r2
 800380a:	603c      	str	r4, [r7, #0]
 800380c:	415b      	adcs	r3, r3
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003814:	1812      	adds	r2, r2, r0
 8003816:	eb41 0303 	adc.w	r3, r1, r3
 800381a:	f04f 0400 	mov.w	r4, #0
 800381e:	f04f 0500 	mov.w	r5, #0
 8003822:	00dd      	lsls	r5, r3, #3
 8003824:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003828:	00d4      	lsls	r4, r2, #3
 800382a:	4622      	mov	r2, r4
 800382c:	462b      	mov	r3, r5
 800382e:	eb12 0a00 	adds.w	sl, r2, r0
 8003832:	eb43 0b01 	adc.w	fp, r3, r1
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	008b      	lsls	r3, r1, #2
 800384a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800384e:	0082      	lsls	r2, r0, #2
 8003850:	4650      	mov	r0, sl
 8003852:	4659      	mov	r1, fp
 8003854:	f7fc fd34 	bl	80002c0 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <UART_SetConfig+0x38c>)
 800385e:	fba3 1302 	umull	r1, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2164      	movs	r1, #100	; 0x64
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a09      	ldr	r2, [pc, #36]	; (8003898 <UART_SetConfig+0x38c>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4432      	add	r2, r6
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	377c      	adds	r7, #124	; 0x7c
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	40011000 	.word	0x40011000
 8003894:	40011400 	.word	0x40011400
 8003898:	51eb851f 	.word	0x51eb851f

0800389c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f103 0208 	add.w	r2, r3, #8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f04f 32ff 	mov.w	r2, #4294967295
 80038b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f103 0208 	add.w	r2, r3, #8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f103 0208 	add.w	r2, r3, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d103      	bne.n	800395e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e00c      	b.n	8003978 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3308      	adds	r3, #8
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e002      	b.n	800396c <vListInsert+0x2e>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d2f6      	bcs.n	8003966 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6892      	ldr	r2, [r2, #8]
 80039c6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6852      	ldr	r2, [r2, #4]
 80039d0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d103      	bne.n	80039e4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1e5a      	subs	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003a2e:	f002 f93b 	bl	8005ca8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	441a      	add	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	441a      	add	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	22ff      	movs	r2, #255	; 0xff
 8003a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d114      	bne.n	8003aae <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01a      	beq.n	8003ac2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3310      	adds	r3, #16
 8003a90:	4618      	mov	r0, r3
 8003a92:	f001 f84d 	bl	8004b30 <xTaskRemoveFromEventList>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d012      	beq.n	8003ac2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xQueueGenericReset+0xcc>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	e009      	b.n	8003ac2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3310      	adds	r3, #16
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fef2 	bl	800389c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3324      	adds	r3, #36	; 0x24
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff feed 	bl	800389c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003ac2:	f002 f921 	bl	8005d08 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003ac6:	2301      	movs	r3, #1
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	; 0x30
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xQueueGenericCreate+0x2a>
        __asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	61bb      	str	r3, [r7, #24]
    }
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <xQueueGenericCreate+0x48>
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d101      	bne.n	8003b20 <xQueueGenericCreate+0x4c>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <xQueueGenericCreate+0x4e>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <xQueueGenericCreate+0x68>
        __asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	617b      	str	r3, [r7, #20]
    }
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003b42:	d90a      	bls.n	8003b5a <xQueueGenericCreate+0x86>
        __asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	613b      	str	r3, [r7, #16]
    }
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	3350      	adds	r3, #80	; 0x50
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f002 f9c4 	bl	8005eec <pvPortMalloc>
 8003b64:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	3350      	adds	r3, #80	; 0x50
 8003b74:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b76:	79fa      	ldrb	r2, [r7, #7]
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f805 	bl	8003b92 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003b88:	6a3b      	ldr	r3, [r7, #32]
    }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3728      	adds	r7, #40	; 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e002      	b.n	8003bb4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	69b8      	ldr	r0, [r7, #24]
 8003bc4:	f7ff ff1e 	bl	8003a04 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003be6:	2300      	movs	r3, #0
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <xQueueGenericSend+0x32>
        __asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003c06:	bf00      	nop
 8003c08:	e7fe      	b.n	8003c08 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d103      	bne.n	8003c18 <xQueueGenericSend+0x40>
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <xQueueGenericSend+0x44>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <xQueueGenericSend+0x46>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <xQueueGenericSend+0x60>
        __asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003c34:	bf00      	nop
 8003c36:	e7fe      	b.n	8003c36 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d103      	bne.n	8003c46 <xQueueGenericSend+0x6e>
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <xQueueGenericSend+0x72>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <xQueueGenericSend+0x74>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xQueueGenericSend+0x8e>
        __asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	623b      	str	r3, [r7, #32]
    }
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c66:	f001 f8ff 	bl	8004e68 <xTaskGetSchedulerState>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <xQueueGenericSend+0x9e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueGenericSend+0xa2>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueGenericSend+0xa4>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xQueueGenericSend+0xbe>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	61fb      	str	r3, [r7, #28]
    }
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c96:	f002 f807 	bl	8005ca8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <xQueueGenericSend+0xd4>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d129      	bne.n	8003d00 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cb2:	f000 fa19 	bl	80040e8 <prvCopyDataToQueue>
 8003cb6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	3324      	adds	r3, #36	; 0x24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 ff33 	bl	8004b30 <xTaskRemoveFromEventList>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <xQueueGenericSend+0x1f8>)
 8003cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	e00a      	b.n	8003cf8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <xQueueGenericSend+0x1f8>)
 8003cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003cf8:	f002 f806 	bl	8005d08 <vPortExitCritical>
                return pdPASS;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e063      	b.n	8003dc8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d06:	f001 ffff 	bl	8005d08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e05c      	b.n	8003dc8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 ff6b 	bl	8004bf4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d22:	f001 fff1 	bl	8005d08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d26:	f000 fce5 	bl	80046f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d2a:	f001 ffbd 	bl	8005ca8 <vPortEnterCritical>
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d103      	bne.n	8003d44 <xQueueGenericSend+0x16c>
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d4a:	b25b      	sxtb	r3, r3
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d103      	bne.n	8003d5a <xQueueGenericSend+0x182>
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d5a:	f001 ffd5 	bl	8005d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d5e:	1d3a      	adds	r2, r7, #4
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 ff5a 	bl	8004c20 <xTaskCheckForTimeOut>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d124      	bne.n	8003dbc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d74:	f000 fab0 	bl	80042d8 <prvIsQueueFull>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d018      	beq.n	8003db0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	3310      	adds	r3, #16
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fe82 	bl	8004a90 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d8e:	f000 fa3b 	bl	8004208 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003d92:	f000 fcbd 	bl	8004710 <xTaskResumeAll>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f47f af7c 	bne.w	8003c96 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <xQueueGenericSend+0x1f8>)
 8003da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	e772      	b.n	8003c96 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003db2:	f000 fa29 	bl	8004208 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003db6:	f000 fcab 	bl	8004710 <xTaskResumeAll>
 8003dba:	e76c      	b.n	8003c96 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dbe:	f000 fa23 	bl	8004208 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003dc2:	f000 fca5 	bl	8004710 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003dc6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3738      	adds	r7, #56	; 0x38
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b090      	sub	sp, #64	; 0x40
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <xQueueGenericSendFromISR+0x3c>
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <xQueueGenericSendFromISR+0x40>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <xQueueGenericSendFromISR+0x42>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d103      	bne.n	8003e3e <xQueueGenericSendFromISR+0x6a>
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <xQueueGenericSendFromISR+0x6e>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <xQueueGenericSendFromISR+0x70>
 8003e42:	2300      	movs	r3, #0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	623b      	str	r3, [r7, #32]
    }
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e5e:	f002 f805 	bl	8005e6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003e62:	f3ef 8211 	mrs	r2, BASEPRI
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	61fa      	str	r2, [r7, #28]
 8003e78:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <xQueueGenericSendFromISR+0xbc>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d13e      	bne.n	8003f0e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ea6:	f000 f91f 	bl	80040e8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003eaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d112      	bne.n	8003eda <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d025      	beq.n	8003f08 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	3324      	adds	r3, #36	; 0x24
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fe35 	bl	8004b30 <xTaskRemoveFromEventList>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01d      	beq.n	8003f08 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01a      	beq.n	8003f08 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e016      	b.n	8003f08 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003eda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ede:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee0:	d10a      	bne.n	8003ef8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	617b      	str	r3, [r7, #20]
    }
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003efc:	3301      	adds	r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	b25a      	sxtb	r2, r3
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003f0c:	e001      	b.n	8003f12 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003f1c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3740      	adds	r7, #64	; 0x40
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <xQueueReceive+0x30>
        __asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	623b      	str	r3, [r7, #32]
    }
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <xQueueReceive+0x3e>
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <xQueueReceive+0x42>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <xQueueReceive+0x44>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10a      	bne.n	8003f86 <xQueueReceive+0x5e>
        __asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	61fb      	str	r3, [r7, #28]
    }
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f86:	f000 ff6f 	bl	8004e68 <xTaskGetSchedulerState>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <xQueueReceive+0x6e>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <xQueueReceive+0x72>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <xQueueReceive+0x74>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <xQueueReceive+0x8e>
        __asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	61bb      	str	r3, [r7, #24]
    }
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003fb6:	f001 fe77 	bl	8005ca8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01f      	beq.n	8004006 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fca:	f000 f8f7 	bl	80041bc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	1e5a      	subs	r2, r3, #1
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00f      	beq.n	8003ffe <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	3310      	adds	r3, #16
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fda4 	bl	8004b30 <xTaskRemoveFromEventList>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <xQueueReceive+0x1bc>)
 8003ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003ffe:	f001 fe83 	bl	8005d08 <vPortExitCritical>
                return pdPASS;
 8004002:	2301      	movs	r3, #1
 8004004:	e069      	b.n	80040da <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800400c:	f001 fe7c 	bl	8005d08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004010:	2300      	movs	r3, #0
 8004012:	e062      	b.n	80040da <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800401a:	f107 0310 	add.w	r3, r7, #16
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fde8 	bl	8004bf4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004024:	2301      	movs	r3, #1
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004028:	f001 fe6e 	bl	8005d08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800402c:	f000 fb62 	bl	80046f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004030:	f001 fe3a 	bl	8005ca8 <vPortEnterCritical>
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800403a:	b25b      	sxtb	r3, r3
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004040:	d103      	bne.n	800404a <xQueueReceive+0x122>
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004050:	b25b      	sxtb	r3, r3
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d103      	bne.n	8004060 <xQueueReceive+0x138>
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004060:	f001 fe52 	bl	8005d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004064:	1d3a      	adds	r2, r7, #4
 8004066:	f107 0310 	add.w	r3, r7, #16
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fdd7 	bl	8004c20 <xTaskCheckForTimeOut>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d123      	bne.n	80040c0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407a:	f000 f917 	bl	80042ac <prvIsQueueEmpty>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d017      	beq.n	80040b4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	3324      	adds	r3, #36	; 0x24
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fcff 	bl	8004a90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004094:	f000 f8b8 	bl	8004208 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004098:	f000 fb3a 	bl	8004710 <xTaskResumeAll>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d189      	bne.n	8003fb6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <xQueueReceive+0x1bc>)
 80040a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	e780      	b.n	8003fb6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80040b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040b6:	f000 f8a7 	bl	8004208 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040ba:	f000 fb29 	bl	8004710 <xTaskResumeAll>
 80040be:	e77a      	b.n	8003fb6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80040c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c2:	f000 f8a1 	bl	8004208 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040c6:	f000 fb23 	bl	8004710 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040cc:	f000 f8ee 	bl	80042ac <prvIsQueueEmpty>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f43f af6f 	beq.w	8003fb6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80040d8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3730      	adds	r7, #48	; 0x30
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d14d      	bne.n	80041aa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fec6 	bl	8004ea4 <xTaskPriorityDisinherit>
 8004118:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	e043      	b.n	80041aa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d119      	bne.n	800415c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6858      	ldr	r0, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	461a      	mov	r2, r3
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	f002 f810 	bl	8006158 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	441a      	add	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d32b      	bcc.n	80041aa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	e026      	b.n	80041aa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68d8      	ldr	r0, [r3, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	461a      	mov	r2, r3
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	f001 fff6 	bl	8006158 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	425b      	negs	r3, r3
 8004176:	441a      	add	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d207      	bcs.n	8004198 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	425b      	negs	r3, r3
 8004192:	441a      	add	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d105      	bne.n	80041aa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80041b2:	697b      	ldr	r3, [r7, #20]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	441a      	add	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d303      	bcc.n	80041f0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68d9      	ldr	r1, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	461a      	mov	r2, r3
 80041fa:	6838      	ldr	r0, [r7, #0]
 80041fc:	f001 ffac 	bl	8006158 <memcpy>
    }
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004210:	f001 fd4a 	bl	8005ca8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800421a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800421c:	e011      	b.n	8004242 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fc80 	bl	8004b30 <xTaskRemoveFromEventList>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004236:	f000 fd59 	bl	8004cec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	3b01      	subs	r3, #1
 800423e:	b2db      	uxtb	r3, r3
 8004240:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	dce9      	bgt.n	800421e <prvUnlockQueue+0x16>
 800424a:	e000      	b.n	800424e <prvUnlockQueue+0x46>
                        break;
 800424c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	22ff      	movs	r2, #255	; 0xff
 8004252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004256:	f001 fd57 	bl	8005d08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800425a:	f001 fd25 	bl	8005ca8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004264:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004266:	e011      	b.n	800428c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d012      	beq.n	8004296 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3310      	adds	r3, #16
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fc5b 	bl	8004b30 <xTaskRemoveFromEventList>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004280:	f000 fd34 	bl	8004cec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004284:	7bbb      	ldrb	r3, [r7, #14]
 8004286:	3b01      	subs	r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800428c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004290:	2b00      	cmp	r3, #0
 8004292:	dce9      	bgt.n	8004268 <prvUnlockQueue+0x60>
 8004294:	e000      	b.n	8004298 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004296:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80042a0:	f001 fd32 	bl	8005d08 <vPortExitCritical>
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80042b4:	f001 fcf8 	bl	8005ca8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e001      	b.n	80042ca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80042ca:	f001 fd1d 	bl	8005d08 <vPortExitCritical>

    return xReturn;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80042e0:	f001 fce2 	bl	8005ca8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d102      	bne.n	80042f6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e001      	b.n	80042fa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80042fa:	f001 fd05 	bl	8005d08 <vPortExitCritical>

    return xReturn;
 80042fe:	68fb      	ldr	r3, [r7, #12]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e014      	b.n	8004342 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004318:	4a0f      	ldr	r2, [pc, #60]	; (8004358 <vQueueAddToRegistry+0x50>)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004324:	490c      	ldr	r1, [pc, #48]	; (8004358 <vQueueAddToRegistry+0x50>)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800432e:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <vQueueAddToRegistry+0x50>)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4413      	add	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800433a:	e006      	b.n	800434a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b07      	cmp	r3, #7
 8004346:	d9e7      	bls.n	8004318 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	200130cc 	.word	0x200130cc

0800435c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800436c:	f001 fc9c 	bl	8005ca8 <vPortEnterCritical>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004376:	b25b      	sxtb	r3, r3
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d103      	bne.n	8004386 <vQueueWaitForMessageRestricted+0x2a>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800438c:	b25b      	sxtb	r3, r3
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d103      	bne.n	800439c <vQueueWaitForMessageRestricted+0x40>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800439c:	f001 fcb4 	bl	8005d08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3324      	adds	r3, #36	; 0x24
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fb91 	bl	8004ad8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80043b6:	6978      	ldr	r0, [r7, #20]
 80043b8:	f7ff ff26 	bl	8004208 <prvUnlockQueue>
    }
 80043bc:	bf00      	nop
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08c      	sub	sp, #48	; 0x30
 80043c8:	af04      	add	r7, sp, #16
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 fd87 	bl	8005eec <pvPortMalloc>
 80043de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043e6:	2058      	movs	r0, #88	; 0x58
 80043e8:	f001 fd80 	bl	8005eec <pvPortMalloc>
 80043ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
 80043fa:	e005      	b.n	8004408 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80043fc:	6978      	ldr	r0, [r7, #20]
 80043fe:	f001 fe23 	bl	8006048 <vPortFree>
 8004402:	e001      	b.n	8004408 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	2300      	movs	r3, #0
 8004412:	9303      	str	r3, [sp, #12]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	9302      	str	r3, [sp, #8]
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f80e 	bl	8004446 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800442a:	69f8      	ldr	r0, [r7, #28]
 800442c:	f000 f8a2 	bl	8004574 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004430:	2301      	movs	r3, #1
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	e002      	b.n	800443c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800443c:	69bb      	ldr	r3, [r7, #24]
    }
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b088      	sub	sp, #32
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	461a      	mov	r2, r3
 800445e:	21a5      	movs	r1, #165	; 0xa5
 8004460:	f001 fe88 	bl	8006174 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800446e:	3b01      	subs	r3, #1
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f023 0307 	bic.w	r3, r3, #7
 800447c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <prvInitialiseNewTask+0x58>
        __asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	617b      	str	r3, [r7, #20]
    }
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01f      	beq.n	80044e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	e012      	b.n	80044d0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	4413      	add	r3, r2
 80044b0:	7819      	ldrb	r1, [r3, #0]
 80044b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	3334      	adds	r3, #52	; 0x34
 80044ba:	460a      	mov	r2, r1
 80044bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b09      	cmp	r3, #9
 80044d4:	d9e9      	bls.n	80044aa <prvInitialiseNewTask+0x64>
 80044d6:	e000      	b.n	80044da <prvInitialiseNewTask+0x94>
            {
                break;
 80044d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044e2:	e003      	b.n	80044ec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d901      	bls.n	80044f6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044f2:	2304      	movs	r3, #4
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004500:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2200      	movs	r2, #0
 8004506:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	3304      	adds	r3, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff f9e5 	bl	80038dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	3318      	adds	r3, #24
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f9e0 	bl	80038dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	f1c3 0205 	rsb	r2, r3, #5
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004530:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	3350      	adds	r3, #80	; 0x50
 8004536:	2204      	movs	r2, #4
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fe1a 	bl	8006174 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	3354      	adds	r3, #84	; 0x54
 8004544:	2201      	movs	r2, #1
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f001 fe13 	bl	8006174 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	69b8      	ldr	r0, [r7, #24]
 8004554:	f001 fa76 	bl	8005a44 <pxPortInitialiseStack>
 8004558:	4602      	mov	r2, r0
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004568:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800456a:	bf00      	nop
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800457c:	f001 fb94 	bl	8005ca8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004580:	4b2c      	ldr	r3, [pc, #176]	; (8004634 <prvAddNewTaskToReadyList+0xc0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	4a2b      	ldr	r2, [pc, #172]	; (8004634 <prvAddNewTaskToReadyList+0xc0>)
 8004588:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800458a:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <prvAddNewTaskToReadyList+0xc4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004592:	4a29      	ldr	r2, [pc, #164]	; (8004638 <prvAddNewTaskToReadyList+0xc4>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004598:	4b26      	ldr	r3, [pc, #152]	; (8004634 <prvAddNewTaskToReadyList+0xc0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d110      	bne.n	80045c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80045a0:	f000 fbc8 	bl	8004d34 <prvInitialiseTaskLists>
 80045a4:	e00d      	b.n	80045c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80045a6:	4b25      	ldr	r3, [pc, #148]	; (800463c <prvAddNewTaskToReadyList+0xc8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ae:	4b22      	ldr	r3, [pc, #136]	; (8004638 <prvAddNewTaskToReadyList+0xc4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d802      	bhi.n	80045c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80045bc:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <prvAddNewTaskToReadyList+0xc4>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80045c2:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <prvAddNewTaskToReadyList+0xcc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <prvAddNewTaskToReadyList+0xcc>)
 80045ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <prvAddNewTaskToReadyList+0xcc>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	2201      	movs	r2, #1
 80045da:	409a      	lsls	r2, r3
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <prvAddNewTaskToReadyList+0xd0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <prvAddNewTaskToReadyList+0xd0>)
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <prvAddNewTaskToReadyList+0xd4>)
 80045f4:	441a      	add	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7ff f97a 	bl	80038f6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004602:	f001 fb81 	bl	8005d08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <prvAddNewTaskToReadyList+0xc8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00e      	beq.n	800462c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <prvAddNewTaskToReadyList+0xc4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	429a      	cmp	r2, r3
 800461a:	d207      	bcs.n	800462c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <prvAddNewTaskToReadyList+0xd8>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000374 	.word	0x20000374
 8004638:	2000029c 	.word	0x2000029c
 800463c:	20000380 	.word	0x20000380
 8004640:	20000390 	.word	0x20000390
 8004644:	2000037c 	.word	0x2000037c
 8004648:	200002a0 	.word	0x200002a0
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <vTaskStartScheduler+0x88>)
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	2300      	movs	r3, #0
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	2300      	movs	r3, #0
 8004660:	2282      	movs	r2, #130	; 0x82
 8004662:	491e      	ldr	r1, [pc, #120]	; (80046dc <vTaskStartScheduler+0x8c>)
 8004664:	481e      	ldr	r0, [pc, #120]	; (80046e0 <vTaskStartScheduler+0x90>)
 8004666:	f7ff fead 	bl	80043c4 <xTaskCreate>
 800466a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d102      	bne.n	8004678 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004672:	f000 fe79 	bl	8005368 <xTimerCreateTimerTask>
 8004676:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d116      	bne.n	80046ac <vTaskStartScheduler+0x5c>
        __asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60bb      	str	r3, [r7, #8]
    }
 8004690:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <vTaskStartScheduler+0x94>)
 8004694:	f04f 32ff 	mov.w	r2, #4294967295
 8004698:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800469a:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <vTaskStartScheduler+0x98>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046a0:	4b12      	ldr	r3, [pc, #72]	; (80046ec <vTaskStartScheduler+0x9c>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80046a6:	f001 fa5d 	bl	8005b64 <xPortStartScheduler>
 80046aa:	e00e      	b.n	80046ca <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d10a      	bne.n	80046ca <vTaskStartScheduler+0x7a>
        __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	607b      	str	r3, [r7, #4]
    }
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <vTaskStartScheduler+0xa0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000398 	.word	0x20000398
 80046dc:	08006b00 	.word	0x08006b00
 80046e0:	08004d05 	.word	0x08004d05
 80046e4:	20000394 	.word	0x20000394
 80046e8:	20000380 	.word	0x20000380
 80046ec:	20000378 	.word	0x20000378
 80046f0:	200000f4 	.word	0x200000f4

080046f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <vTaskSuspendAll+0x18>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	4a03      	ldr	r2, [pc, #12]	; (800470c <vTaskSuspendAll+0x18>)
 8004700:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004702:	bf00      	nop
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	2000039c 	.word	0x2000039c

08004710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800471e:	4b41      	ldr	r3, [pc, #260]	; (8004824 <xTaskResumeAll+0x114>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <xTaskResumeAll+0x2c>
        __asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	603b      	str	r3, [r7, #0]
    }
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800473c:	f001 fab4 	bl	8005ca8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004740:	4b38      	ldr	r3, [pc, #224]	; (8004824 <xTaskResumeAll+0x114>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3b01      	subs	r3, #1
 8004746:	4a37      	ldr	r2, [pc, #220]	; (8004824 <xTaskResumeAll+0x114>)
 8004748:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <xTaskResumeAll+0x114>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d161      	bne.n	8004816 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004752:	4b35      	ldr	r3, [pc, #212]	; (8004828 <xTaskResumeAll+0x118>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d05d      	beq.n	8004816 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800475a:	e02e      	b.n	80047ba <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800475c:	4b33      	ldr	r3, [pc, #204]	; (800482c <xTaskResumeAll+0x11c>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3318      	adds	r3, #24
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff f921 	bl	80039b0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3304      	adds	r3, #4
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff f91c 	bl	80039b0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <xTaskResumeAll+0x120>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <xTaskResumeAll+0x120>)
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4a27      	ldr	r2, [pc, #156]	; (8004834 <xTaskResumeAll+0x124>)
 8004798:	441a      	add	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3304      	adds	r3, #4
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7ff f8a8 	bl	80038f6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047aa:	4b23      	ldr	r3, [pc, #140]	; (8004838 <xTaskResumeAll+0x128>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d302      	bcc.n	80047ba <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <xTaskResumeAll+0x12c>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ba:	4b1c      	ldr	r3, [pc, #112]	; (800482c <xTaskResumeAll+0x11c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1cc      	bne.n	800475c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80047c8:	f000 fb32 	bl	8004e30 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <xTaskResumeAll+0x130>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80047d8:	f000 f846 	bl	8004868 <xTaskIncrementTick>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80047e2:	4b16      	ldr	r3, [pc, #88]	; (800483c <xTaskResumeAll+0x12c>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f1      	bne.n	80047d8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <xTaskResumeAll+0x130>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <xTaskResumeAll+0x12c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004802:	2301      	movs	r3, #1
 8004804:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004806:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <xTaskResumeAll+0x134>)
 8004808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004816:	f001 fa77 	bl	8005d08 <vPortExitCritical>

    return xAlreadyYielded;
 800481a:	68bb      	ldr	r3, [r7, #8]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	2000039c 	.word	0x2000039c
 8004828:	20000374 	.word	0x20000374
 800482c:	20000334 	.word	0x20000334
 8004830:	2000037c 	.word	0x2000037c
 8004834:	200002a0 	.word	0x200002a0
 8004838:	2000029c 	.word	0x2000029c
 800483c:	20000388 	.word	0x20000388
 8004840:	20000384 	.word	0x20000384
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <xTaskGetTickCount+0x1c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004854:	687b      	ldr	r3, [r7, #4]
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000378 	.word	0x20000378

08004868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004872:	4b4e      	ldr	r3, [pc, #312]	; (80049ac <xTaskIncrementTick+0x144>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 808e 	bne.w	8004998 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <xTaskIncrementTick+0x148>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004884:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <xTaskIncrementTick+0x148>)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d120      	bne.n	80048d2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004890:	4b48      	ldr	r3, [pc, #288]	; (80049b4 <xTaskIncrementTick+0x14c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <xTaskIncrementTick+0x48>
        __asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	603b      	str	r3, [r7, #0]
    }
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <xTaskIncrementTick+0x46>
 80048b0:	4b40      	ldr	r3, [pc, #256]	; (80049b4 <xTaskIncrementTick+0x14c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <xTaskIncrementTick+0x150>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3e      	ldr	r2, [pc, #248]	; (80049b4 <xTaskIncrementTick+0x14c>)
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	4a3e      	ldr	r2, [pc, #248]	; (80049b8 <xTaskIncrementTick+0x150>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4b3d      	ldr	r3, [pc, #244]	; (80049bc <xTaskIncrementTick+0x154>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	4a3c      	ldr	r2, [pc, #240]	; (80049bc <xTaskIncrementTick+0x154>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	f000 faaf 	bl	8004e30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80048d2:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <xTaskIncrementTick+0x158>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d348      	bcc.n	800496e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048dc:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <xTaskIncrementTick+0x14c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e6:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <xTaskIncrementTick+0x158>)
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	601a      	str	r2, [r3, #0]
                    break;
 80048ee:	e03e      	b.n	800496e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f0:	4b30      	ldr	r3, [pc, #192]	; (80049b4 <xTaskIncrementTick+0x14c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d203      	bcs.n	8004910 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004908:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <xTaskIncrementTick+0x158>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800490e:	e02e      	b.n	800496e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff f84b 	bl	80039b0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	3318      	adds	r3, #24
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff f842 	bl	80039b0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	2201      	movs	r2, #1
 8004932:	409a      	lsls	r2, r3
 8004934:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <xTaskIncrementTick+0x15c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4313      	orrs	r3, r2
 800493a:	4a22      	ldr	r2, [pc, #136]	; (80049c4 <xTaskIncrementTick+0x15c>)
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <xTaskIncrementTick+0x160>)
 800494c:	441a      	add	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	3304      	adds	r3, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f7fe ffce 	bl	80038f6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <xTaskIncrementTick+0x164>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	429a      	cmp	r2, r3
 8004966:	d3b9      	bcc.n	80048dc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496c:	e7b6      	b.n	80048dc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <xTaskIncrementTick+0x164>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	4914      	ldr	r1, [pc, #80]	; (80049c8 <xTaskIncrementTick+0x160>)
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d901      	bls.n	800498a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004986:	2301      	movs	r3, #1
 8004988:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800498a:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <xTaskIncrementTick+0x168>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004992:	2301      	movs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e004      	b.n	80049a2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <xTaskIncrementTick+0x16c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <xTaskIncrementTick+0x16c>)
 80049a0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80049a2:	697b      	ldr	r3, [r7, #20]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	2000039c 	.word	0x2000039c
 80049b0:	20000378 	.word	0x20000378
 80049b4:	2000032c 	.word	0x2000032c
 80049b8:	20000330 	.word	0x20000330
 80049bc:	2000038c 	.word	0x2000038c
 80049c0:	20000394 	.word	0x20000394
 80049c4:	2000037c 	.word	0x2000037c
 80049c8:	200002a0 	.word	0x200002a0
 80049cc:	2000029c 	.word	0x2000029c
 80049d0:	20000388 	.word	0x20000388
 80049d4:	20000384 	.word	0x20000384

080049d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049de:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <vTaskSwitchContext+0xa4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80049e6:	4b26      	ldr	r3, [pc, #152]	; (8004a80 <vTaskSwitchContext+0xa8>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80049ec:	e03f      	b.n	8004a6e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <vTaskSwitchContext+0xa8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f4:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <vTaskSwitchContext+0xac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004a02:	7afb      	ldrb	r3, [r7, #11]
 8004a04:	f1c3 031f 	rsb	r3, r3, #31
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	491f      	ldr	r1, [pc, #124]	; (8004a88 <vTaskSwitchContext+0xb0>)
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	607b      	str	r3, [r7, #4]
    }
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <vTaskSwitchContext+0x5a>
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <vTaskSwitchContext+0xb0>)
 8004a40:	4413      	add	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3308      	adds	r3, #8
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d104      	bne.n	8004a64 <vTaskSwitchContext+0x8c>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <vTaskSwitchContext+0xb4>)
 8004a6c:	6013      	str	r3, [r2, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	2000039c 	.word	0x2000039c
 8004a80:	20000388 	.word	0x20000388
 8004a84:	2000037c 	.word	0x2000037c
 8004a88:	200002a0 	.word	0x200002a0
 8004a8c:	2000029c 	.word	0x2000029c

08004a90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
    }
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <vTaskPlaceOnEventList+0x44>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3318      	adds	r3, #24
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fe ff3d 	bl	800393e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	6838      	ldr	r0, [r7, #0]
 8004ac8:	f000 fbe8 	bl	800529c <prvAddCurrentTaskToDelayedList>
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	2000029c 	.word	0x2000029c

08004ad8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	617b      	str	r3, [r7, #20]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b00:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <vTaskPlaceOnEventListRestricted+0x54>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3318      	adds	r3, #24
 8004b06:	4619      	mov	r1, r3
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7fe fef4 	bl	80038f6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
 8004b18:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	68b8      	ldr	r0, [r7, #8]
 8004b1e:	f000 fbbd 	bl	800529c <prvAddCurrentTaskToDelayedList>
    }
 8004b22:	bf00      	nop
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000029c 	.word	0x2000029c

08004b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60fb      	str	r3, [r7, #12]
    }
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	3318      	adds	r3, #24
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe ff25 	bl	80039b0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b66:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <xTaskRemoveFromEventList+0xac>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d11c      	bne.n	8004ba8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe ff1c 	bl	80039b0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <xTaskRemoveFromEventList+0xb0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <xTaskRemoveFromEventList+0xb0>)
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <xTaskRemoveFromEventList+0xb4>)
 8004b98:	441a      	add	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe fea8 	bl	80038f6 <vListInsertEnd>
 8004ba6:	e005      	b.n	8004bb4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	3318      	adds	r3, #24
 8004bac:	4619      	mov	r1, r3
 8004bae:	480e      	ldr	r0, [pc, #56]	; (8004be8 <xTaskRemoveFromEventList+0xb8>)
 8004bb0:	f7fe fea1 	bl	80038f6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <xTaskRemoveFromEventList+0xbc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d905      	bls.n	8004bce <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <xTaskRemoveFromEventList+0xc0>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e001      	b.n	8004bd2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	2000039c 	.word	0x2000039c
 8004be0:	2000037c 	.word	0x2000037c
 8004be4:	200002a0 	.word	0x200002a0
 8004be8:	20000334 	.word	0x20000334
 8004bec:	2000029c 	.word	0x2000029c
 8004bf0:	20000388 	.word	0x20000388

08004bf4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <vTaskInternalSetTimeOutState+0x24>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <vTaskInternalSetTimeOutState+0x28>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	605a      	str	r2, [r3, #4]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	2000038c 	.word	0x2000038c
 8004c1c:	20000378 	.word	0x20000378

08004c20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
    }
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60fb      	str	r3, [r7, #12]
    }
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004c62:	f001 f821 	bl	8005ca8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004c66:	4b1f      	ldr	r3, [pc, #124]	; (8004ce4 <xTaskCheckForTimeOut+0xc4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d102      	bne.n	8004c86 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	e026      	b.n	8004cd4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <xTaskCheckForTimeOut+0xc8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d00a      	beq.n	8004ca8 <xTaskCheckForTimeOut+0x88>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d305      	bcc.n	8004ca8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e015      	b.n	8004cd4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d20b      	bcs.n	8004cca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	1ad2      	subs	r2, r2, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ff98 	bl	8004bf4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e004      	b.n	8004cd4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004cd4:	f001 f818 	bl	8005d08 <vPortExitCritical>

    return xReturn;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000378 	.word	0x20000378
 8004ce8:	2000038c 	.word	0x2000038c

08004cec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <vTaskMissedYield+0x14>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	20000388 	.word	0x20000388

08004d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004d0c:	f000 f852 	bl	8004db4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <prvIdleTask+0x28>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d9f9      	bls.n	8004d0c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <prvIdleTask+0x2c>)
 8004d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004d28:	e7f0      	b.n	8004d0c <prvIdleTask+0x8>
 8004d2a:	bf00      	nop
 8004d2c:	200002a0 	.word	0x200002a0
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	e00c      	b.n	8004d5a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <prvInitialiseTaskLists+0x60>)
 8004d4c:	4413      	add	r3, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fda4 	bl	800389c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3301      	adds	r3, #1
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d9ef      	bls.n	8004d40 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004d60:	480d      	ldr	r0, [pc, #52]	; (8004d98 <prvInitialiseTaskLists+0x64>)
 8004d62:	f7fe fd9b 	bl	800389c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004d66:	480d      	ldr	r0, [pc, #52]	; (8004d9c <prvInitialiseTaskLists+0x68>)
 8004d68:	f7fe fd98 	bl	800389c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004d6c:	480c      	ldr	r0, [pc, #48]	; (8004da0 <prvInitialiseTaskLists+0x6c>)
 8004d6e:	f7fe fd95 	bl	800389c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004d72:	480c      	ldr	r0, [pc, #48]	; (8004da4 <prvInitialiseTaskLists+0x70>)
 8004d74:	f7fe fd92 	bl	800389c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004d78:	480b      	ldr	r0, [pc, #44]	; (8004da8 <prvInitialiseTaskLists+0x74>)
 8004d7a:	f7fe fd8f 	bl	800389c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <prvInitialiseTaskLists+0x78>)
 8004d80:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <prvInitialiseTaskLists+0x64>)
 8004d82:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <prvInitialiseTaskLists+0x7c>)
 8004d86:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <prvInitialiseTaskLists+0x68>)
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	200002a0 	.word	0x200002a0
 8004d98:	20000304 	.word	0x20000304
 8004d9c:	20000318 	.word	0x20000318
 8004da0:	20000334 	.word	0x20000334
 8004da4:	20000348 	.word	0x20000348
 8004da8:	20000360 	.word	0x20000360
 8004dac:	2000032c 	.word	0x2000032c
 8004db0:	20000330 	.word	0x20000330

08004db4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dba:	e019      	b.n	8004df0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004dbc:	f000 ff74 	bl	8005ca8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc0:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <prvCheckTasksWaitingTermination+0x50>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fdef 	bl	80039b0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <prvCheckTasksWaitingTermination+0x54>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4a0b      	ldr	r2, [pc, #44]	; (8004e08 <prvCheckTasksWaitingTermination+0x54>)
 8004dda:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <prvCheckTasksWaitingTermination+0x58>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <prvCheckTasksWaitingTermination+0x58>)
 8004de4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004de6:	f000 ff8f 	bl	8005d08 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f810 	bl	8004e10 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <prvCheckTasksWaitingTermination+0x58>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e1      	bne.n	8004dbc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000348 	.word	0x20000348
 8004e08:	20000374 	.word	0x20000374
 8004e0c:	2000035c 	.word	0x2000035c

08004e10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 f913 	bl	8006048 <vPortFree>
                vPortFree( pxTCB );
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 f910 	bl	8006048 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <prvResetNextTaskUnblockTime+0x30>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004e3e:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <prvResetNextTaskUnblockTime+0x34>)
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004e46:	e005      	b.n	8004e54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <prvResetNextTaskUnblockTime+0x30>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <prvResetNextTaskUnblockTime+0x34>)
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	2000032c 	.word	0x2000032c
 8004e64:	20000394 	.word	0x20000394

08004e68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <xTaskGetSchedulerState+0x34>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d102      	bne.n	8004e7c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004e76:	2301      	movs	r3, #1
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	e008      	b.n	8004e8e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e7c:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <xTaskGetSchedulerState+0x38>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004e84:	2302      	movs	r3, #2
 8004e86:	607b      	str	r3, [r7, #4]
 8004e88:	e001      	b.n	8004e8e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004e8e:	687b      	ldr	r3, [r7, #4]
    }
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	20000380 	.word	0x20000380
 8004ea0:	2000039c 	.word	0x2000039c

08004ea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d063      	beq.n	8004f82 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004eba:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <xTaskPriorityDisinherit+0xe8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d00a      	beq.n	8004eda <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	60fb      	str	r3, [r7, #12]
    }
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60bb      	str	r3, [r7, #8]
    }
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efc:	1e5a      	subs	r2, r3, #1
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d039      	beq.n	8004f82 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d135      	bne.n	8004f82 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fd48 	bl	80039b0 <uxListRemove>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43da      	mvns	r2, r3
 8004f32:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <xTaskPriorityDisinherit+0xec>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4013      	ands	r3, r2
 8004f38:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <xTaskPriorityDisinherit+0xec>)
 8004f3a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	f1c3 0205 	rsb	r2, r3, #5
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <xTaskPriorityDisinherit+0xec>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <xTaskPriorityDisinherit+0xec>)
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <xTaskPriorityDisinherit+0xf0>)
 8004f70:	441a      	add	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7fe fcbc 	bl	80038f6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004f82:	697b      	ldr	r3, [r7, #20]
    }
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	2000029c 	.word	0x2000029c
 8004f90:	2000037c 	.word	0x2000037c
 8004f94:	200002a0 	.word	0x200002a0

08004f98 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	613b      	str	r3, [r7, #16]
    }
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004fc2:	f000 fe71 	bl	8005ca8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004fc6:	4b32      	ldr	r3, [pc, #200]	; (8005090 <xTaskGenericNotifyWait+0xf8>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	3354      	adds	r3, #84	; 0x54
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d022      	beq.n	800501e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	; (8005090 <xTaskGenericNotifyWait+0xf8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	3214      	adds	r2, #20
 8004fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	43d2      	mvns	r2, r2
 8004fe8:	4011      	ands	r1, r2
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	3214      	adds	r2, #20
 8004fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004ff2:	4b27      	ldr	r3, [pc, #156]	; (8005090 <xTaskGenericNotifyWait+0xf8>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3354      	adds	r3, #84	; 0x54
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00b      	beq.n	800501e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005006:	2101      	movs	r1, #1
 8005008:	6a38      	ldr	r0, [r7, #32]
 800500a:	f000 f947 	bl	800529c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800500e:	4b21      	ldr	r3, [pc, #132]	; (8005094 <xTaskGenericNotifyWait+0xfc>)
 8005010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800501e:	f000 fe73 	bl	8005d08 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005022:	f000 fe41 	bl	8005ca8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800502c:	4b18      	ldr	r3, [pc, #96]	; (8005090 <xTaskGenericNotifyWait+0xf8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	3214      	adds	r2, #20
 8005034:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <xTaskGenericNotifyWait+0xf8>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	3354      	adds	r3, #84	; 0x54
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d002      	beq.n	8005054 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e00e      	b.n	8005072 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <xTaskGenericNotifyWait+0xf8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	3214      	adds	r2, #20
 800505c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	43d2      	mvns	r2, r2
 8005064:	4011      	ands	r1, r2
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	3214      	adds	r2, #20
 800506a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800506e:	2301      	movs	r3, #1
 8005070:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <xTaskGenericNotifyWait+0xf8>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	3354      	adds	r3, #84	; 0x54
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005080:	f000 fe42 	bl	8005d08 <vPortExitCritical>

        return xReturn;
 8005084:	697b      	ldr	r3, [r7, #20]
    }
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	2000029c 	.word	0x2000029c
 8005094:	e000ed04 	.word	0xe000ed04

08005098 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005098:	b580      	push	{r7, lr}
 800509a:	b090      	sub	sp, #64	; 0x40
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80050a6:	2301      	movs	r3, #1
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050e2:	f000 fec3 	bl	8005e6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80050ea:	f3ef 8211 	mrs	r2, BASEPRI
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005100:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8005106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005108:	2b00      	cmp	r3, #0
 800510a:	d006      	beq.n	800511a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	3214      	adds	r2, #20
 8005112:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005118:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800511a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4413      	add	r3, r2
 8005120:	3354      	adds	r3, #84	; 0x54
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	3354      	adds	r3, #84	; 0x54
 8005130:	2202      	movs	r2, #2
 8005132:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	2b04      	cmp	r3, #4
 8005138:	d83b      	bhi.n	80051b2 <xTaskGenericNotifyFromISR+0x11a>
 800513a:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <xTaskGenericNotifyFromISR+0xa8>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	080051d1 	.word	0x080051d1
 8005144:	08005155 	.word	0x08005155
 8005148:	08005171 	.word	0x08005171
 800514c:	08005189 	.word	0x08005189
 8005150:	08005197 	.word	0x08005197
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	3214      	adds	r2, #20
 800515a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	ea42 0103 	orr.w	r1, r2, r3
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	3214      	adds	r2, #20
 800516a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800516e:	e032      	b.n	80051d6 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	3214      	adds	r2, #20
 8005176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	3214      	adds	r2, #20
 8005182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005186:	e026      	b.n	80051d6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	3214      	adds	r2, #20
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005194:	e01f      	b.n	80051d6 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005196:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800519a:	2b02      	cmp	r3, #2
 800519c:	d006      	beq.n	80051ac <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	3214      	adds	r2, #20
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80051aa:	e014      	b.n	80051d6 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80051b0:	e011      	b.n	80051d6 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80051b2:	4b33      	ldr	r3, [pc, #204]	; (8005280 <xTaskGenericNotifyFromISR+0x1e8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	61fb      	str	r3, [r7, #28]
    }
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <xTaskGenericNotifyFromISR+0x136>
                    break;
 80051d0:	bf00      	nop
 80051d2:	e000      	b.n	80051d6 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80051d4:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80051d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d145      	bne.n	800526a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	61bb      	str	r3, [r7, #24]
    }
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fc:	4b21      	ldr	r3, [pc, #132]	; (8005284 <xTaskGenericNotifyFromISR+0x1ec>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11c      	bne.n	800523e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fbd1 	bl	80039b0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	2201      	movs	r2, #1
 8005214:	409a      	lsls	r2, r3
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <xTaskGenericNotifyFromISR+0x1f0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <xTaskGenericNotifyFromISR+0x1f0>)
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4a17      	ldr	r2, [pc, #92]	; (800528c <xTaskGenericNotifyFromISR+0x1f4>)
 800522e:	441a      	add	r2, r3
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f7fe fb5d 	bl	80038f6 <vListInsertEnd>
 800523c:	e005      	b.n	800524a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	3318      	adds	r3, #24
 8005242:	4619      	mov	r1, r3
 8005244:	4812      	ldr	r0, [pc, #72]	; (8005290 <xTaskGenericNotifyFromISR+0x1f8>)
 8005246:	f7fe fb56 	bl	80038f6 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <xTaskGenericNotifyFromISR+0x1fc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	429a      	cmp	r2, r3
 8005256:	d908      	bls.n	800526a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005264:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <xTaskGenericNotifyFromISR+0x200>)
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526c:	617b      	str	r3, [r7, #20]
        __asm volatile
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f383 8811 	msr	BASEPRI, r3
    }
 8005274:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8005278:	4618      	mov	r0, r3
 800527a:	3740      	adds	r7, #64	; 0x40
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000378 	.word	0x20000378
 8005284:	2000039c 	.word	0x2000039c
 8005288:	2000037c 	.word	0x2000037c
 800528c:	200002a0 	.word	0x200002a0
 8005290:	20000334 	.word	0x20000334
 8005294:	2000029c 	.word	0x2000029c
 8005298:	20000388 	.word	0x20000388

0800529c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80052a6:	4b29      	ldr	r3, [pc, #164]	; (800534c <prvAddCurrentTaskToDelayedList+0xb0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ac:	4b28      	ldr	r3, [pc, #160]	; (8005350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe fb7c 	bl	80039b0 <uxListRemove>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10b      	bne.n	80052d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	2201      	movs	r2, #1
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	43da      	mvns	r2, r3
 80052cc:	4b21      	ldr	r3, [pc, #132]	; (8005354 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4013      	ands	r3, r2
 80052d2:	4a20      	ldr	r2, [pc, #128]	; (8005354 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d10a      	bne.n	80052f4 <prvAddCurrentTaskToDelayedList+0x58>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e4:	4b1a      	ldr	r3, [pc, #104]	; (8005350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	481a      	ldr	r0, [pc, #104]	; (8005358 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052ee:	f7fe fb02 	bl	80038f6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80052f2:	e026      	b.n	8005342 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4413      	add	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052fc:	4b14      	ldr	r3, [pc, #80]	; (8005350 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	429a      	cmp	r2, r3
 800530a:	d209      	bcs.n	8005320 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800530c:	4b13      	ldr	r3, [pc, #76]	; (800535c <prvAddCurrentTaskToDelayedList+0xc0>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3304      	adds	r3, #4
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7fe fb10 	bl	800393e <vListInsert>
}
 800531e:	e010      	b.n	8005342 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3304      	adds	r3, #4
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f7fe fb06 	bl	800393e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	429a      	cmp	r2, r3
 800533a:	d202      	bcs.n	8005342 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800533c:	4a09      	ldr	r2, [pc, #36]	; (8005364 <prvAddCurrentTaskToDelayedList+0xc8>)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6013      	str	r3, [r2, #0]
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000378 	.word	0x20000378
 8005350:	2000029c 	.word	0x2000029c
 8005354:	2000037c 	.word	0x2000037c
 8005358:	20000360 	.word	0x20000360
 800535c:	20000330 	.word	0x20000330
 8005360:	2000032c 	.word	0x2000032c
 8005364:	20000394 	.word	0x20000394

08005368 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005372:	f000 fb31 	bl	80059d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <xTimerCreateTimerTask+0x54>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800537e:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <xTimerCreateTimerTask+0x58>)
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	2302      	movs	r3, #2
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800538c:	490d      	ldr	r1, [pc, #52]	; (80053c4 <xTimerCreateTimerTask+0x5c>)
 800538e:	480e      	ldr	r0, [pc, #56]	; (80053c8 <xTimerCreateTimerTask+0x60>)
 8005390:	f7ff f818 	bl	80043c4 <xTaskCreate>
 8005394:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	603b      	str	r3, [r7, #0]
    }
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80053b2:	687b      	ldr	r3, [r7, #4]
    }
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	200003d0 	.word	0x200003d0
 80053c0:	200003d4 	.word	0x200003d4
 80053c4:	08006b08 	.word	0x08006b08
 80053c8:	080055b9 	.word	0x080055b9

080053cc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80053da:	202c      	movs	r0, #44	; 0x2c
 80053dc:	f000 fd86 	bl	8005eec <pvPortMalloc>
 80053e0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f805 	bl	800540e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005404:	697b      	ldr	r3, [r7, #20]
        }
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	617b      	str	r3, [r7, #20]
    }
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01e      	beq.n	800547c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800543e:	f000 facb 	bl	80059d8 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	6a3a      	ldr	r2, [r7, #32]
 8005458:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	3304      	adds	r3, #4
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fa3c 	bl	80038dc <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005470:	f043 0304 	orr.w	r3, r3, #4
 8005474:	b2da      	uxtb	r2, r3
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800547c:	bf00      	nop
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005492:	2300      	movs	r3, #0
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	623b      	str	r3, [r7, #32]
    }
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80054b2:	4b1a      	ldr	r3, [pc, #104]	; (800551c <xTimerGenericCommand+0x98>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d02a      	beq.n	8005510 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	dc18      	bgt.n	80054fe <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054cc:	f7ff fccc 	bl	8004e68 <xTaskGetSchedulerState>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d109      	bne.n	80054ea <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <xTimerGenericCommand+0x98>)
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	f107 0114 	add.w	r1, r7, #20
 80054de:	2300      	movs	r3, #0
 80054e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e2:	f7fe fb79 	bl	8003bd8 <xQueueGenericSend>
 80054e6:	6278      	str	r0, [r7, #36]	; 0x24
 80054e8:	e012      	b.n	8005510 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <xTimerGenericCommand+0x98>)
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f107 0114 	add.w	r1, r7, #20
 80054f2:	2300      	movs	r3, #0
 80054f4:	2200      	movs	r2, #0
 80054f6:	f7fe fb6f 	bl	8003bd8 <xQueueGenericSend>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24
 80054fc:	e008      	b.n	8005510 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054fe:	4b07      	ldr	r3, [pc, #28]	; (800551c <xTimerGenericCommand+0x98>)
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	f107 0114 	add.w	r1, r7, #20
 8005506:	2300      	movs	r3, #0
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	f7fe fc63 	bl	8003dd4 <xQueueGenericSendFromISR>
 800550e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005512:	4618      	mov	r0, r3
 8005514:	3728      	adds	r7, #40	; 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	200003d0 	.word	0x200003d0

08005520 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552a:	4b22      	ldr	r3, [pc, #136]	; (80055b4 <prvProcessExpiredTimer+0x94>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	3304      	adds	r3, #4
 8005538:	4618      	mov	r0, r3
 800553a:	f7fe fa39 	bl	80039b0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d022      	beq.n	8005592 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	18d1      	adds	r1, r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	6978      	ldr	r0, [r7, #20]
 800555a:	f000 f8d1 	bl	8005700 <prvInsertTimerInActiveList>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01f      	beq.n	80055a4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005564:	2300      	movs	r3, #0
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2300      	movs	r3, #0
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	2100      	movs	r1, #0
 800556e:	6978      	ldr	r0, [r7, #20]
 8005570:	f7ff ff88 	bl	8005484 <xTimerGenericCommand>
 8005574:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d113      	bne.n	80055a4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	60fb      	str	r3, [r7, #12]
    }
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	b2da      	uxtb	r2, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	6978      	ldr	r0, [r7, #20]
 80055aa:	4798      	blx	r3
    }
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	200003c8 	.word	0x200003c8

080055b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055c0:	f107 0308 	add.w	r3, r7, #8
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f857 	bl	8005678 <prvGetNextExpireTime>
 80055ca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4619      	mov	r1, r3
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f803 	bl	80055dc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80055d6:	f000 f8d5 	bl	8005784 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055da:	e7f1      	b.n	80055c0 <prvTimerTask+0x8>

080055dc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80055e6:	f7ff f885 	bl	80046f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 f866 	bl	80056c0 <prvSampleTimeNow>
 80055f4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d130      	bne.n	800565e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <prvProcessTimerOrBlockTask+0x3c>
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	429a      	cmp	r2, r3
 8005608:	d806      	bhi.n	8005618 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800560a:	f7ff f881 	bl	8004710 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff ff85 	bl	8005520 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005616:	e024      	b.n	8005662 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800561e:	4b13      	ldr	r3, [pc, #76]	; (800566c <prvProcessTimerOrBlockTask+0x90>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <prvProcessTimerOrBlockTask+0x50>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <prvProcessTimerOrBlockTask+0x52>
 800562c:	2300      	movs	r3, #0
 800562e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005630:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <prvProcessTimerOrBlockTask+0x94>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	4619      	mov	r1, r3
 800563e:	f7fe fe8d 	bl	800435c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005642:	f7ff f865 	bl	8004710 <xTaskResumeAll>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <prvProcessTimerOrBlockTask+0x98>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
    }
 800565c:	e001      	b.n	8005662 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800565e:	f7ff f857 	bl	8004710 <xTaskResumeAll>
    }
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	200003cc 	.word	0x200003cc
 8005670:	200003d0 	.word	0x200003d0
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <prvGetNextExpireTime+0x44>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <prvGetNextExpireTime+0x16>
 800568a:	2201      	movs	r2, #1
 800568c:	e000      	b.n	8005690 <prvGetNextExpireTime+0x18>
 800568e:	2200      	movs	r2, #0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <prvGetNextExpireTime+0x44>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e001      	b.n	80056ac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80056ac:	68fb      	ldr	r3, [r7, #12]
    }
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	200003c8 	.word	0x200003c8

080056c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80056c8:	f7ff f8be 	bl	8004848 <xTaskGetTickCount>
 80056cc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <prvSampleTimeNow+0x3c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d205      	bcs.n	80056e4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80056d8:	f000 f91a 	bl	8005910 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e002      	b.n	80056ea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80056ea:	4a04      	ldr	r2, [pc, #16]	; (80056fc <prvSampleTimeNow+0x3c>)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80056f0:	68fb      	ldr	r3, [r7, #12]
    }
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200003d8 	.word	0x200003d8

08005700 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d812      	bhi.n	800574c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	1ad2      	subs	r2, r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	429a      	cmp	r2, r3
 8005732:	d302      	bcc.n	800573a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005734:	2301      	movs	r3, #1
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e01b      	b.n	8005772 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <prvInsertTimerInActiveList+0x7c>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3304      	adds	r3, #4
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f7fe f8fa 	bl	800393e <vListInsert>
 800574a:	e012      	b.n	8005772 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d206      	bcs.n	8005762 <prvInsertTimerInActiveList+0x62>
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d302      	bcc.n	8005762 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e007      	b.n	8005772 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <prvInsertTimerInActiveList+0x80>)
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3304      	adds	r3, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7fe f8e6 	bl	800393e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005772:	697b      	ldr	r3, [r7, #20]
    }
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200003cc 	.word	0x200003cc
 8005780:	200003c8 	.word	0x200003c8

08005784 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	; 0x30
 8005788:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800578a:	e0ae      	b.n	80058ea <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f2c0 80aa 	blt.w	80058e8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	3304      	adds	r3, #4
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe f903 	bl	80039b0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff ff87 	bl	80056c0 <prvSampleTimeNow>
 80057b2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b09      	cmp	r3, #9
 80057b8:	f200 8097 	bhi.w	80058ea <prvProcessReceivedCommands+0x166>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <prvProcessReceivedCommands+0x40>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057ed 	.word	0x080057ed
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	080057ed 	.word	0x080057ed
 80057d0:	08005861 	.word	0x08005861
 80057d4:	08005875 	.word	0x08005875
 80057d8:	080058bf 	.word	0x080058bf
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	080057ed 	.word	0x080057ed
 80057e4:	08005861 	.word	0x08005861
 80057e8:	08005875 	.word	0x08005875
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	18d1      	adds	r1, r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a3a      	ldr	r2, [r7, #32]
 800580a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800580c:	f7ff ff78 	bl	8005700 <prvInsertTimerInActiveList>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d069      	beq.n	80058ea <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800581c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d05e      	beq.n	80058ea <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	441a      	add	r2, r3
 8005834:	2300      	movs	r3, #0
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2300      	movs	r3, #0
 800583a:	2100      	movs	r1, #0
 800583c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800583e:	f7ff fe21 	bl	8005484 <xTimerGenericCommand>
 8005842:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d14f      	bne.n	80058ea <prvProcessReceivedCommands+0x166>
        __asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	61bb      	str	r3, [r7, #24]
    }
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005866:	f023 0301 	bic.w	r3, r3, #1
 800586a:	b2da      	uxtb	r2, r3
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005872:	e03a      	b.n	80058ea <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	b2da      	uxtb	r2, r3
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	617b      	str	r3, [r7, #20]
    }
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	18d1      	adds	r1, r2, r3
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058b8:	f7ff ff22 	bl	8005700 <prvInsertTimerInActiveList>
                        break;
 80058bc:	e015      	b.n	80058ea <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80058cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ce:	f000 fbbb 	bl	8006048 <vPortFree>
 80058d2:	e00a      	b.n	80058ea <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80058e6:	e000      	b.n	80058ea <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80058e8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ea:	4b08      	ldr	r3, [pc, #32]	; (800590c <prvProcessReceivedCommands+0x188>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f107 0108 	add.w	r1, r7, #8
 80058f2:	2200      	movs	r2, #0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe fb17 	bl	8003f28 <xQueueReceive>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f47f af45 	bne.w	800578c <prvProcessReceivedCommands+0x8>
        }
    }
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	3728      	adds	r7, #40	; 0x28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	200003d0 	.word	0x200003d0

08005910 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005916:	e048      	b.n	80059aa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005918:	4b2d      	ldr	r3, [pc, #180]	; (80059d0 <prvSwitchTimerLists+0xc0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005922:	4b2b      	ldr	r3, [pc, #172]	; (80059d0 <prvSwitchTimerLists+0xc0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3304      	adds	r3, #4
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe f83d 	bl	80039b0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d02e      	beq.n	80059aa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4413      	add	r3, r2
 8005954:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	d90e      	bls.n	800597c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800596a:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <prvSwitchTimerLists+0xc0>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3304      	adds	r3, #4
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f7fd ffe2 	bl	800393e <vListInsert>
 800597a:	e016      	b.n	80059aa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800597c:	2300      	movs	r3, #0
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	2300      	movs	r3, #0
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	2100      	movs	r1, #0
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff fd7c 	bl	8005484 <xTimerGenericCommand>
 800598c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	603b      	str	r3, [r7, #0]
    }
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <prvSwitchTimerLists+0xc0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1b1      	bne.n	8005918 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <prvSwitchTimerLists+0xc0>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80059ba:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <prvSwitchTimerLists+0xc4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a04      	ldr	r2, [pc, #16]	; (80059d0 <prvSwitchTimerLists+0xc0>)
 80059c0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80059c2:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <prvSwitchTimerLists+0xc4>)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	6013      	str	r3, [r2, #0]
    }
 80059c8:	bf00      	nop
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	200003c8 	.word	0x200003c8
 80059d4:	200003cc 	.word	0x200003cc

080059d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80059dc:	f000 f964 	bl	8005ca8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80059e0:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <prvCheckForValidListAndQueue+0x54>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d11d      	bne.n	8005a24 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80059e8:	4811      	ldr	r0, [pc, #68]	; (8005a30 <prvCheckForValidListAndQueue+0x58>)
 80059ea:	f7fd ff57 	bl	800389c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80059ee:	4811      	ldr	r0, [pc, #68]	; (8005a34 <prvCheckForValidListAndQueue+0x5c>)
 80059f0:	f7fd ff54 	bl	800389c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80059f4:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <prvCheckForValidListAndQueue+0x60>)
 80059f6:	4a0e      	ldr	r2, [pc, #56]	; (8005a30 <prvCheckForValidListAndQueue+0x58>)
 80059f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80059fa:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <prvCheckForValidListAndQueue+0x64>)
 80059fc:	4a0d      	ldr	r2, [pc, #52]	; (8005a34 <prvCheckForValidListAndQueue+0x5c>)
 80059fe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005a00:	2200      	movs	r2, #0
 8005a02:	210c      	movs	r1, #12
 8005a04:	200a      	movs	r0, #10
 8005a06:	f7fe f865 	bl	8003ad4 <xQueueGenericCreate>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4a07      	ldr	r2, [pc, #28]	; (8005a2c <prvCheckForValidListAndQueue+0x54>)
 8005a0e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <prvCheckForValidListAndQueue+0x54>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a18:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <prvCheckForValidListAndQueue+0x54>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4908      	ldr	r1, [pc, #32]	; (8005a40 <prvCheckForValidListAndQueue+0x68>)
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fc72 	bl	8004308 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005a24:	f000 f970 	bl	8005d08 <vPortExitCritical>
    }
 8005a28:	bf00      	nop
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	200003d0 	.word	0x200003d0
 8005a30:	200003a0 	.word	0x200003a0
 8005a34:	200003b4 	.word	0x200003b4
 8005a38:	200003c8 	.word	0x200003c8
 8005a3c:	200003cc 	.word	0x200003cc
 8005a40:	08006b10 	.word	0x08006b10

08005a44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3b04      	subs	r3, #4
 8005a54:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3b04      	subs	r3, #4
 8005a62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b04      	subs	r3, #4
 8005a72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005a74:	4a0c      	ldr	r2, [pc, #48]	; (8005aa8 <pxPortInitialiseStack+0x64>)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3b14      	subs	r3, #20
 8005a7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3b04      	subs	r3, #4
 8005a8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f06f 0202 	mvn.w	r2, #2
 8005a92:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3b20      	subs	r3, #32
 8005a98:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	08005aad 	.word	0x08005aad

08005aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <prvTaskExitError+0x54>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d00a      	beq.n	8005ad6 <prvTaskExitError+0x2a>
        __asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60fb      	str	r3, [r7, #12]
    }
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <prvTaskExitError+0x28>
        __asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60bb      	str	r3, [r7, #8]
    }
 8005ae8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005aea:	bf00      	nop
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0fc      	beq.n	8005aec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	200000f8 	.word	0x200000f8
	...

08005b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <pxCurrentTCBConst2>)
 8005b12:	6819      	ldr	r1, [r3, #0]
 8005b14:	6808      	ldr	r0, [r1, #0]
 8005b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1a:	f380 8809 	msr	PSP, r0
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8811 	msr	BASEPRI, r0
 8005b2a:	4770      	bx	lr
 8005b2c:	f3af 8000 	nop.w

08005b30 <pxCurrentTCBConst2>:
 8005b30:	2000029c 	.word	0x2000029c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop

08005b38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005b38:	4808      	ldr	r0, [pc, #32]	; (8005b5c <prvPortStartFirstTask+0x24>)
 8005b3a:	6800      	ldr	r0, [r0, #0]
 8005b3c:	6800      	ldr	r0, [r0, #0]
 8005b3e:	f380 8808 	msr	MSP, r0
 8005b42:	f04f 0000 	mov.w	r0, #0
 8005b46:	f380 8814 	msr	CONTROL, r0
 8005b4a:	b662      	cpsie	i
 8005b4c:	b661      	cpsie	f
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	df00      	svc	0
 8005b58:	bf00      	nop
 8005b5a:	0000      	.short	0x0000
 8005b5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop

08005b64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b6a:	4b46      	ldr	r3, [pc, #280]	; (8005c84 <xPortStartScheduler+0x120>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a46      	ldr	r2, [pc, #280]	; (8005c88 <xPortStartScheduler+0x124>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10a      	bne.n	8005b8a <xPortStartScheduler+0x26>
        __asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	613b      	str	r3, [r7, #16]
    }
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b8a:	4b3e      	ldr	r3, [pc, #248]	; (8005c84 <xPortStartScheduler+0x120>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a3f      	ldr	r2, [pc, #252]	; (8005c8c <xPortStartScheduler+0x128>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10a      	bne.n	8005baa <xPortStartScheduler+0x46>
        __asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
    }
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005baa:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <xPortStartScheduler+0x12c>)
 8005bac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	22ff      	movs	r2, #255	; 0xff
 8005bba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4b31      	ldr	r3, [pc, #196]	; (8005c94 <xPortStartScheduler+0x130>)
 8005bd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bd2:	4b31      	ldr	r3, [pc, #196]	; (8005c98 <xPortStartScheduler+0x134>)
 8005bd4:	2207      	movs	r2, #7
 8005bd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bd8:	e009      	b.n	8005bee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005bda:	4b2f      	ldr	r3, [pc, #188]	; (8005c98 <xPortStartScheduler+0x134>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	4a2d      	ldr	r2, [pc, #180]	; (8005c98 <xPortStartScheduler+0x134>)
 8005be2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf6:	2b80      	cmp	r3, #128	; 0x80
 8005bf8:	d0ef      	beq.n	8005bda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bfa:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <xPortStartScheduler+0x134>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f1c3 0307 	rsb	r3, r3, #7
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d00a      	beq.n	8005c1c <xPortStartScheduler+0xb8>
        __asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60bb      	str	r3, [r7, #8]
    }
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c1c:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <xPortStartScheduler+0x134>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <xPortStartScheduler+0x134>)
 8005c24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c26:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <xPortStartScheduler+0x134>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c2e:	4a1a      	ldr	r2, [pc, #104]	; (8005c98 <xPortStartScheduler+0x134>)
 8005c30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005c3a:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <xPortStartScheduler+0x138>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <xPortStartScheduler+0x138>)
 8005c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005c46:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <xPortStartScheduler+0x138>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a14      	ldr	r2, [pc, #80]	; (8005c9c <xPortStartScheduler+0x138>)
 8005c4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005c52:	f000 f8db 	bl	8005e0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <xPortStartScheduler+0x13c>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005c5c:	f000 f8fa 	bl	8005e54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c60:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <xPortStartScheduler+0x140>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a0f      	ldr	r2, [pc, #60]	; (8005ca4 <xPortStartScheduler+0x140>)
 8005c66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005c6c:	f7ff ff64 	bl	8005b38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005c70:	f7fe feb2 	bl	80049d8 <vTaskSwitchContext>
    prvTaskExitError();
 8005c74:	f7ff ff1a 	bl	8005aac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	e000ed00 	.word	0xe000ed00
 8005c88:	410fc271 	.word	0x410fc271
 8005c8c:	410fc270 	.word	0x410fc270
 8005c90:	e000e400 	.word	0xe000e400
 8005c94:	200003dc 	.word	0x200003dc
 8005c98:	200003e0 	.word	0x200003e0
 8005c9c:	e000ed20 	.word	0xe000ed20
 8005ca0:	200000f8 	.word	0x200000f8
 8005ca4:	e000ef34 	.word	0xe000ef34

08005ca8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
        __asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	607b      	str	r3, [r7, #4]
    }
 8005cc0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <vPortEnterCritical+0x58>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	4a0d      	ldr	r2, [pc, #52]	; (8005d00 <vPortEnterCritical+0x58>)
 8005cca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <vPortEnterCritical+0x58>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d10f      	bne.n	8005cf4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <vPortEnterCritical+0x5c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <vPortEnterCritical+0x4c>
        __asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	603b      	str	r3, [r7, #0]
    }
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <vPortEnterCritical+0x4a>
    }
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	200000f8 	.word	0x200000f8
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <vPortExitCritical+0x50>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <vPortExitCritical+0x24>
        __asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	607b      	str	r3, [r7, #4]
    }
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <vPortExitCritical+0x50>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	4a09      	ldr	r2, [pc, #36]	; (8005d58 <vPortExitCritical+0x50>)
 8005d34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005d36:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <vPortExitCritical+0x50>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <vPortExitCritical+0x42>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f383 8811 	msr	BASEPRI, r3
    }
 8005d48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	200000f8 	.word	0x200000f8
 8005d5c:	00000000 	.word	0x00000000

08005d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005d60:	f3ef 8009 	mrs	r0, PSP
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <pxCurrentTCBConst>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f01e 0f10 	tst.w	lr, #16
 8005d70:	bf08      	it	eq
 8005d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	6010      	str	r0, [r2, #0]
 8005d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d84:	f380 8811 	msr	BASEPRI, r0
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f7fe fe22 	bl	80049d8 <vTaskSwitchContext>
 8005d94:	f04f 0000 	mov.w	r0, #0
 8005d98:	f380 8811 	msr	BASEPRI, r0
 8005d9c:	bc09      	pop	{r0, r3}
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da6:	f01e 0f10 	tst.w	lr, #16
 8005daa:	bf08      	it	eq
 8005dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005db0:	f380 8809 	msr	PSP, r0
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	f3af 8000 	nop.w

08005dc0 <pxCurrentTCBConst>:
 8005dc0:	2000029c 	.word	0x2000029c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop

08005dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
        __asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
    }
 8005de0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005de2:	f7fe fd41 	bl	8004868 <xTaskIncrementTick>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <SysTick_Handler+0x40>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f383 8811 	msr	BASEPRI, r3
    }
 8005dfe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005e00:	bf00      	nop
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <vPortSetupTimerInterrupt+0x34>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <vPortSetupTimerInterrupt+0x38>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <vPortSetupTimerInterrupt+0x3c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <vPortSetupTimerInterrupt+0x40>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	099b      	lsrs	r3, r3, #6
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <vPortSetupTimerInterrupt+0x44>)
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e2e:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <vPortSetupTimerInterrupt+0x34>)
 8005e30:	2207      	movs	r2, #7
 8005e32:	601a      	str	r2, [r3, #0]
}
 8005e34:	bf00      	nop
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	e000e010 	.word	0xe000e010
 8005e44:	e000e018 	.word	0xe000e018
 8005e48:	200000e8 	.word	0x200000e8
 8005e4c:	10624dd3 	.word	0x10624dd3
 8005e50:	e000e014 	.word	0xe000e014

08005e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e64 <vPortEnableVFP+0x10>
 8005e58:	6801      	ldr	r1, [r0, #0]
 8005e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e5e:	6001      	str	r1, [r0, #0]
 8005e60:	4770      	bx	lr
 8005e62:	0000      	.short	0x0000
 8005e64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop

08005e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005e72:	f3ef 8305 	mrs	r3, IPSR
 8005e76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b0f      	cmp	r3, #15
 8005e7c:	d914      	bls.n	8005ea8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e7e:	4a17      	ldr	r2, [pc, #92]	; (8005edc <vPortValidateInterruptPriority+0x70>)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e88:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <vPortValidateInterruptPriority+0x74>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	7afa      	ldrb	r2, [r7, #11]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d20a      	bcs.n	8005ea8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	607b      	str	r3, [r7, #4]
    }
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ea8:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <vPortValidateInterruptPriority+0x78>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005eb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <vPortValidateInterruptPriority+0x7c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d90a      	bls.n	8005ece <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	603b      	str	r3, [r7, #0]
    }
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <vPortValidateInterruptPriority+0x60>
    }
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	e000e3f0 	.word	0xe000e3f0
 8005ee0:	200003dc 	.word	0x200003dc
 8005ee4:	e000ed0c 	.word	0xe000ed0c
 8005ee8:	200003e0 	.word	0x200003e0

08005eec <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005ef8:	f7fe fbfc 	bl	80046f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8005efc:	4b4e      	ldr	r3, [pc, #312]	; (8006038 <pvPortMalloc+0x14c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8005f04:	f000 f8da 	bl	80060bc <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8005f08:	4b4b      	ldr	r3, [pc, #300]	; (8006038 <pvPortMalloc+0x14c>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) && 
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02a      	beq.n	8005f6a <pvPortMalloc+0x7e>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 8005f14:	2308      	movs	r3, #8
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && 
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d223      	bcs.n	8005f6a <pvPortMalloc+0x7e>
        {
            xWantedSize += heapSTRUCT_SIZE;
 8005f22:	2308      	movs	r3, #8
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4413      	add	r3, r2
 8005f2a:	607b      	str	r3, [r7, #4]

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	3308      	adds	r3, #8
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d214      	bcs.n	8005f64 <pvPortMalloc+0x78>
                    > xWantedSize )
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f023 0307 	bic.w	r3, r3, #7
 8005f40:	3308      	adds	r3, #8
 8005f42:	607b      	str	r3, [r7, #4]
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d010      	beq.n	8005f70 <pvPortMalloc+0x84>
        __asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	60fb      	str	r3, [r7, #12]
    }
 8005f60:	bf00      	nop
 8005f62:	e7fe      	b.n	8005f62 <pvPortMalloc+0x76>
            }
            else
            {
                xWantedSize = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	607b      	str	r3, [r7, #4]
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005f68:	e002      	b.n	8005f70 <pvPortMalloc+0x84>
            }       
        }
        else 
        {
            xWantedSize = 0; 
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	607b      	str	r3, [r7, #4]
 8005f6e:	e000      	b.n	8005f72 <pvPortMalloc+0x86>
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005f70:	bf00      	nop
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d057      	beq.n	8006028 <pvPortMalloc+0x13c>
 8005f78:	4b30      	ldr	r3, [pc, #192]	; (800603c <pvPortMalloc+0x150>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d852      	bhi.n	8006028 <pvPortMalloc+0x13c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 8005f82:	4b2f      	ldr	r3, [pc, #188]	; (8006040 <pvPortMalloc+0x154>)
 8005f84:	623b      	str	r3, [r7, #32]
            pxBlock = xStart.pxNextFreeBlock;
 8005f86:	4b2e      	ldr	r3, [pc, #184]	; (8006040 <pvPortMalloc+0x154>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f8c:	e004      	b.n	8005f98 <pvPortMalloc+0xac>
            {
                pxPreviousBlock = pxBlock;
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	623b      	str	r3, [r7, #32]
                pxBlock = pxBlock->pxNextFreeBlock;
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d903      	bls.n	8005faa <pvPortMalloc+0xbe>
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f1      	bne.n	8005f8e <pvPortMalloc+0xa2>
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <pvPortMalloc+0x158>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d03a      	beq.n	8006028 <pvPortMalloc+0x13c>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	4413      	add	r3, r2
 8005fba:	61fb      	str	r3, [r7, #28]

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	601a      	str	r2, [r3, #0]

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2208      	movs	r2, #8
 8005fce:	0052      	lsls	r2, r2, #1
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d922      	bls.n	800601a <pvPortMalloc+0x12e>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	1ad2      	subs	r2, r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	605a      	str	r2, [r3, #4]
                    pxBlock->xBlockSize = xWantedSize;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	605a      	str	r2, [r3, #4]

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	4b12      	ldr	r3, [pc, #72]	; (8006040 <pvPortMalloc+0x154>)
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	e002      	b.n	8006000 <pvPortMalloc+0x114>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	429a      	cmp	r2, r3
 800600a:	d8f6      	bhi.n	8005ffa <pvPortMalloc+0x10e>
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	601a      	str	r2, [r3, #0]
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 800601a:	4b08      	ldr	r3, [pc, #32]	; (800603c <pvPortMalloc+0x150>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	4a05      	ldr	r2, [pc, #20]	; (800603c <pvPortMalloc+0x150>)
 8006026:	6013      	str	r3, [r2, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006028:	f7fe fb72 	bl	8004710 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800602c:	69fb      	ldr	r3, [r7, #28]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3728      	adds	r7, #40	; 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20012ff4 	.word	0x20012ff4
 800603c:	200000fc 	.word	0x200000fc
 8006040:	20012fe4 	.word	0x20012fe4
 8006044:	20012fec 	.word	0x20012fec

08006048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d027      	beq.n	80060aa <vPortFree+0x62>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800605a:	2308      	movs	r3, #8
 800605c:	425b      	negs	r3, r3
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	60fb      	str	r3, [r7, #12]

        vTaskSuspendAll();
 8006068:	f7fe fb44 	bl	80046f4 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <vPortFree+0x6c>)
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e002      	b.n	800607e <vPortFree+0x36>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	d8f6      	bhi.n	8006078 <vPortFree+0x30>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <vPortFree+0x70>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4413      	add	r3, r2
 80060a2:	4a05      	ldr	r2, [pc, #20]	; (80060b8 <vPortFree+0x70>)
 80060a4:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 80060a6:	f7fe fb33 	bl	8004710 <xTaskResumeAll>
    }
}
 80060aa:	bf00      	nop
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20012fe4 	.word	0x20012fe4
 80060b8:	200000fc 	.word	0x200000fc

080060bc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <prvHeapInit+0x44>)
 80060c4:	f023 0307 	bic.w	r3, r3, #7
 80060c8:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060ca:	4a0e      	ldr	r2, [pc, #56]	; (8006104 <prvHeapInit+0x48>)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <prvHeapInit+0x48>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <prvHeapInit+0x4c>)
 80060d8:	4a0c      	ldr	r2, [pc, #48]	; (800610c <prvHeapInit+0x50>)
 80060da:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <prvHeapInit+0x4c>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	4a08      	ldr	r2, [pc, #32]	; (800610c <prvHeapInit+0x50>)
 80060ea:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	4a06      	ldr	r2, [pc, #24]	; (8006108 <prvHeapInit+0x4c>)
 80060f0:	601a      	str	r2, [r3, #0]
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	200003ec 	.word	0x200003ec
 8006104:	20012fe4 	.word	0x20012fe4
 8006108:	20012fec 	.word	0x20012fec
 800610c:	00012bf8 	.word	0x00012bf8

08006110 <__libc_init_array>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4d0d      	ldr	r5, [pc, #52]	; (8006148 <__libc_init_array+0x38>)
 8006114:	4c0d      	ldr	r4, [pc, #52]	; (800614c <__libc_init_array+0x3c>)
 8006116:	1b64      	subs	r4, r4, r5
 8006118:	10a4      	asrs	r4, r4, #2
 800611a:	2600      	movs	r6, #0
 800611c:	42a6      	cmp	r6, r4
 800611e:	d109      	bne.n	8006134 <__libc_init_array+0x24>
 8006120:	4d0b      	ldr	r5, [pc, #44]	; (8006150 <__libc_init_array+0x40>)
 8006122:	4c0c      	ldr	r4, [pc, #48]	; (8006154 <__libc_init_array+0x44>)
 8006124:	f000 fc5c 	bl	80069e0 <_init>
 8006128:	1b64      	subs	r4, r4, r5
 800612a:	10a4      	asrs	r4, r4, #2
 800612c:	2600      	movs	r6, #0
 800612e:	42a6      	cmp	r6, r4
 8006130:	d105      	bne.n	800613e <__libc_init_array+0x2e>
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	f855 3b04 	ldr.w	r3, [r5], #4
 8006138:	4798      	blx	r3
 800613a:	3601      	adds	r6, #1
 800613c:	e7ee      	b.n	800611c <__libc_init_array+0xc>
 800613e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006142:	4798      	blx	r3
 8006144:	3601      	adds	r6, #1
 8006146:	e7f2      	b.n	800612e <__libc_init_array+0x1e>
 8006148:	08006b6c 	.word	0x08006b6c
 800614c:	08006b6c 	.word	0x08006b6c
 8006150:	08006b6c 	.word	0x08006b6c
 8006154:	08006b70 	.word	0x08006b70

08006158 <memcpy>:
 8006158:	440a      	add	r2, r1
 800615a:	4291      	cmp	r1, r2
 800615c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006160:	d100      	bne.n	8006164 <memcpy+0xc>
 8006162:	4770      	bx	lr
 8006164:	b510      	push	{r4, lr}
 8006166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800616e:	4291      	cmp	r1, r2
 8006170:	d1f9      	bne.n	8006166 <memcpy+0xe>
 8006172:	bd10      	pop	{r4, pc}

08006174 <memset>:
 8006174:	4402      	add	r2, r0
 8006176:	4603      	mov	r3, r0
 8006178:	4293      	cmp	r3, r2
 800617a:	d100      	bne.n	800617e <memset+0xa>
 800617c:	4770      	bx	lr
 800617e:	f803 1b01 	strb.w	r1, [r3], #1
 8006182:	e7f9      	b.n	8006178 <memset+0x4>

08006184 <siprintf>:
 8006184:	b40e      	push	{r1, r2, r3}
 8006186:	b500      	push	{lr}
 8006188:	b09c      	sub	sp, #112	; 0x70
 800618a:	ab1d      	add	r3, sp, #116	; 0x74
 800618c:	9002      	str	r0, [sp, #8]
 800618e:	9006      	str	r0, [sp, #24]
 8006190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006194:	4809      	ldr	r0, [pc, #36]	; (80061bc <siprintf+0x38>)
 8006196:	9107      	str	r1, [sp, #28]
 8006198:	9104      	str	r1, [sp, #16]
 800619a:	4909      	ldr	r1, [pc, #36]	; (80061c0 <siprintf+0x3c>)
 800619c:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a0:	9105      	str	r1, [sp, #20]
 80061a2:	6800      	ldr	r0, [r0, #0]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	a902      	add	r1, sp, #8
 80061a8:	f000 f868 	bl	800627c <_svfiprintf_r>
 80061ac:	9b02      	ldr	r3, [sp, #8]
 80061ae:	2200      	movs	r2, #0
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	b01c      	add	sp, #112	; 0x70
 80061b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061b8:	b003      	add	sp, #12
 80061ba:	4770      	bx	lr
 80061bc:	20000100 	.word	0x20000100
 80061c0:	ffff0208 	.word	0xffff0208

080061c4 <__ssputs_r>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	688e      	ldr	r6, [r1, #8]
 80061ca:	429e      	cmp	r6, r3
 80061cc:	4682      	mov	sl, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	4690      	mov	r8, r2
 80061d2:	461f      	mov	r7, r3
 80061d4:	d838      	bhi.n	8006248 <__ssputs_r+0x84>
 80061d6:	898a      	ldrh	r2, [r1, #12]
 80061d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061dc:	d032      	beq.n	8006244 <__ssputs_r+0x80>
 80061de:	6825      	ldr	r5, [r4, #0]
 80061e0:	6909      	ldr	r1, [r1, #16]
 80061e2:	eba5 0901 	sub.w	r9, r5, r1
 80061e6:	6965      	ldr	r5, [r4, #20]
 80061e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061f0:	3301      	adds	r3, #1
 80061f2:	444b      	add	r3, r9
 80061f4:	106d      	asrs	r5, r5, #1
 80061f6:	429d      	cmp	r5, r3
 80061f8:	bf38      	it	cc
 80061fa:	461d      	movcc	r5, r3
 80061fc:	0553      	lsls	r3, r2, #21
 80061fe:	d531      	bpl.n	8006264 <__ssputs_r+0xa0>
 8006200:	4629      	mov	r1, r5
 8006202:	f000 fb39 	bl	8006878 <_malloc_r>
 8006206:	4606      	mov	r6, r0
 8006208:	b950      	cbnz	r0, 8006220 <__ssputs_r+0x5c>
 800620a:	230c      	movs	r3, #12
 800620c:	f8ca 3000 	str.w	r3, [sl]
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006220:	6921      	ldr	r1, [r4, #16]
 8006222:	464a      	mov	r2, r9
 8006224:	f7ff ff98 	bl	8006158 <memcpy>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	81a3      	strh	r3, [r4, #12]
 8006234:	6126      	str	r6, [r4, #16]
 8006236:	6165      	str	r5, [r4, #20]
 8006238:	444e      	add	r6, r9
 800623a:	eba5 0509 	sub.w	r5, r5, r9
 800623e:	6026      	str	r6, [r4, #0]
 8006240:	60a5      	str	r5, [r4, #8]
 8006242:	463e      	mov	r6, r7
 8006244:	42be      	cmp	r6, r7
 8006246:	d900      	bls.n	800624a <__ssputs_r+0x86>
 8006248:	463e      	mov	r6, r7
 800624a:	4632      	mov	r2, r6
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	4641      	mov	r1, r8
 8006250:	f000 faa8 	bl	80067a4 <memmove>
 8006254:	68a3      	ldr	r3, [r4, #8]
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	1b9b      	subs	r3, r3, r6
 800625a:	4432      	add	r2, r6
 800625c:	60a3      	str	r3, [r4, #8]
 800625e:	6022      	str	r2, [r4, #0]
 8006260:	2000      	movs	r0, #0
 8006262:	e7db      	b.n	800621c <__ssputs_r+0x58>
 8006264:	462a      	mov	r2, r5
 8006266:	f000 fb61 	bl	800692c <_realloc_r>
 800626a:	4606      	mov	r6, r0
 800626c:	2800      	cmp	r0, #0
 800626e:	d1e1      	bne.n	8006234 <__ssputs_r+0x70>
 8006270:	6921      	ldr	r1, [r4, #16]
 8006272:	4650      	mov	r0, sl
 8006274:	f000 fab0 	bl	80067d8 <_free_r>
 8006278:	e7c7      	b.n	800620a <__ssputs_r+0x46>
	...

0800627c <_svfiprintf_r>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	4698      	mov	r8, r3
 8006282:	898b      	ldrh	r3, [r1, #12]
 8006284:	061b      	lsls	r3, r3, #24
 8006286:	b09d      	sub	sp, #116	; 0x74
 8006288:	4607      	mov	r7, r0
 800628a:	460d      	mov	r5, r1
 800628c:	4614      	mov	r4, r2
 800628e:	d50e      	bpl.n	80062ae <_svfiprintf_r+0x32>
 8006290:	690b      	ldr	r3, [r1, #16]
 8006292:	b963      	cbnz	r3, 80062ae <_svfiprintf_r+0x32>
 8006294:	2140      	movs	r1, #64	; 0x40
 8006296:	f000 faef 	bl	8006878 <_malloc_r>
 800629a:	6028      	str	r0, [r5, #0]
 800629c:	6128      	str	r0, [r5, #16]
 800629e:	b920      	cbnz	r0, 80062aa <_svfiprintf_r+0x2e>
 80062a0:	230c      	movs	r3, #12
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	e0d1      	b.n	800644e <_svfiprintf_r+0x1d2>
 80062aa:	2340      	movs	r3, #64	; 0x40
 80062ac:	616b      	str	r3, [r5, #20]
 80062ae:	2300      	movs	r3, #0
 80062b0:	9309      	str	r3, [sp, #36]	; 0x24
 80062b2:	2320      	movs	r3, #32
 80062b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062bc:	2330      	movs	r3, #48	; 0x30
 80062be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006468 <_svfiprintf_r+0x1ec>
 80062c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062c6:	f04f 0901 	mov.w	r9, #1
 80062ca:	4623      	mov	r3, r4
 80062cc:	469a      	mov	sl, r3
 80062ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d2:	b10a      	cbz	r2, 80062d8 <_svfiprintf_r+0x5c>
 80062d4:	2a25      	cmp	r2, #37	; 0x25
 80062d6:	d1f9      	bne.n	80062cc <_svfiprintf_r+0x50>
 80062d8:	ebba 0b04 	subs.w	fp, sl, r4
 80062dc:	d00b      	beq.n	80062f6 <_svfiprintf_r+0x7a>
 80062de:	465b      	mov	r3, fp
 80062e0:	4622      	mov	r2, r4
 80062e2:	4629      	mov	r1, r5
 80062e4:	4638      	mov	r0, r7
 80062e6:	f7ff ff6d 	bl	80061c4 <__ssputs_r>
 80062ea:	3001      	adds	r0, #1
 80062ec:	f000 80aa 	beq.w	8006444 <_svfiprintf_r+0x1c8>
 80062f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f2:	445a      	add	r2, fp
 80062f4:	9209      	str	r2, [sp, #36]	; 0x24
 80062f6:	f89a 3000 	ldrb.w	r3, [sl]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80a2 	beq.w	8006444 <_svfiprintf_r+0x1c8>
 8006300:	2300      	movs	r3, #0
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800630a:	f10a 0a01 	add.w	sl, sl, #1
 800630e:	9304      	str	r3, [sp, #16]
 8006310:	9307      	str	r3, [sp, #28]
 8006312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006316:	931a      	str	r3, [sp, #104]	; 0x68
 8006318:	4654      	mov	r4, sl
 800631a:	2205      	movs	r2, #5
 800631c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006320:	4851      	ldr	r0, [pc, #324]	; (8006468 <_svfiprintf_r+0x1ec>)
 8006322:	f7f9 ff7d 	bl	8000220 <memchr>
 8006326:	9a04      	ldr	r2, [sp, #16]
 8006328:	b9d8      	cbnz	r0, 8006362 <_svfiprintf_r+0xe6>
 800632a:	06d0      	lsls	r0, r2, #27
 800632c:	bf44      	itt	mi
 800632e:	2320      	movmi	r3, #32
 8006330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006334:	0711      	lsls	r1, r2, #28
 8006336:	bf44      	itt	mi
 8006338:	232b      	movmi	r3, #43	; 0x2b
 800633a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800633e:	f89a 3000 	ldrb.w	r3, [sl]
 8006342:	2b2a      	cmp	r3, #42	; 0x2a
 8006344:	d015      	beq.n	8006372 <_svfiprintf_r+0xf6>
 8006346:	9a07      	ldr	r2, [sp, #28]
 8006348:	4654      	mov	r4, sl
 800634a:	2000      	movs	r0, #0
 800634c:	f04f 0c0a 	mov.w	ip, #10
 8006350:	4621      	mov	r1, r4
 8006352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006356:	3b30      	subs	r3, #48	; 0x30
 8006358:	2b09      	cmp	r3, #9
 800635a:	d94e      	bls.n	80063fa <_svfiprintf_r+0x17e>
 800635c:	b1b0      	cbz	r0, 800638c <_svfiprintf_r+0x110>
 800635e:	9207      	str	r2, [sp, #28]
 8006360:	e014      	b.n	800638c <_svfiprintf_r+0x110>
 8006362:	eba0 0308 	sub.w	r3, r0, r8
 8006366:	fa09 f303 	lsl.w	r3, r9, r3
 800636a:	4313      	orrs	r3, r2
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	46a2      	mov	sl, r4
 8006370:	e7d2      	b.n	8006318 <_svfiprintf_r+0x9c>
 8006372:	9b03      	ldr	r3, [sp, #12]
 8006374:	1d19      	adds	r1, r3, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	9103      	str	r1, [sp, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	bfbb      	ittet	lt
 800637e:	425b      	neglt	r3, r3
 8006380:	f042 0202 	orrlt.w	r2, r2, #2
 8006384:	9307      	strge	r3, [sp, #28]
 8006386:	9307      	strlt	r3, [sp, #28]
 8006388:	bfb8      	it	lt
 800638a:	9204      	strlt	r2, [sp, #16]
 800638c:	7823      	ldrb	r3, [r4, #0]
 800638e:	2b2e      	cmp	r3, #46	; 0x2e
 8006390:	d10c      	bne.n	80063ac <_svfiprintf_r+0x130>
 8006392:	7863      	ldrb	r3, [r4, #1]
 8006394:	2b2a      	cmp	r3, #42	; 0x2a
 8006396:	d135      	bne.n	8006404 <_svfiprintf_r+0x188>
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	1d1a      	adds	r2, r3, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	9203      	str	r2, [sp, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bfb8      	it	lt
 80063a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80063a8:	3402      	adds	r4, #2
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006478 <_svfiprintf_r+0x1fc>
 80063b0:	7821      	ldrb	r1, [r4, #0]
 80063b2:	2203      	movs	r2, #3
 80063b4:	4650      	mov	r0, sl
 80063b6:	f7f9 ff33 	bl	8000220 <memchr>
 80063ba:	b140      	cbz	r0, 80063ce <_svfiprintf_r+0x152>
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	eba0 000a 	sub.w	r0, r0, sl
 80063c2:	fa03 f000 	lsl.w	r0, r3, r0
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	4303      	orrs	r3, r0
 80063ca:	3401      	adds	r4, #1
 80063cc:	9304      	str	r3, [sp, #16]
 80063ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d2:	4826      	ldr	r0, [pc, #152]	; (800646c <_svfiprintf_r+0x1f0>)
 80063d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063d8:	2206      	movs	r2, #6
 80063da:	f7f9 ff21 	bl	8000220 <memchr>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d038      	beq.n	8006454 <_svfiprintf_r+0x1d8>
 80063e2:	4b23      	ldr	r3, [pc, #140]	; (8006470 <_svfiprintf_r+0x1f4>)
 80063e4:	bb1b      	cbnz	r3, 800642e <_svfiprintf_r+0x1b2>
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	3307      	adds	r3, #7
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	3308      	adds	r3, #8
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f4:	4433      	add	r3, r6
 80063f6:	9309      	str	r3, [sp, #36]	; 0x24
 80063f8:	e767      	b.n	80062ca <_svfiprintf_r+0x4e>
 80063fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80063fe:	460c      	mov	r4, r1
 8006400:	2001      	movs	r0, #1
 8006402:	e7a5      	b.n	8006350 <_svfiprintf_r+0xd4>
 8006404:	2300      	movs	r3, #0
 8006406:	3401      	adds	r4, #1
 8006408:	9305      	str	r3, [sp, #20]
 800640a:	4619      	mov	r1, r3
 800640c:	f04f 0c0a 	mov.w	ip, #10
 8006410:	4620      	mov	r0, r4
 8006412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006416:	3a30      	subs	r2, #48	; 0x30
 8006418:	2a09      	cmp	r2, #9
 800641a:	d903      	bls.n	8006424 <_svfiprintf_r+0x1a8>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0c5      	beq.n	80063ac <_svfiprintf_r+0x130>
 8006420:	9105      	str	r1, [sp, #20]
 8006422:	e7c3      	b.n	80063ac <_svfiprintf_r+0x130>
 8006424:	fb0c 2101 	mla	r1, ip, r1, r2
 8006428:	4604      	mov	r4, r0
 800642a:	2301      	movs	r3, #1
 800642c:	e7f0      	b.n	8006410 <_svfiprintf_r+0x194>
 800642e:	ab03      	add	r3, sp, #12
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	462a      	mov	r2, r5
 8006434:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <_svfiprintf_r+0x1f8>)
 8006436:	a904      	add	r1, sp, #16
 8006438:	4638      	mov	r0, r7
 800643a:	f3af 8000 	nop.w
 800643e:	1c42      	adds	r2, r0, #1
 8006440:	4606      	mov	r6, r0
 8006442:	d1d6      	bne.n	80063f2 <_svfiprintf_r+0x176>
 8006444:	89ab      	ldrh	r3, [r5, #12]
 8006446:	065b      	lsls	r3, r3, #25
 8006448:	f53f af2c 	bmi.w	80062a4 <_svfiprintf_r+0x28>
 800644c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800644e:	b01d      	add	sp, #116	; 0x74
 8006450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006454:	ab03      	add	r3, sp, #12
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	462a      	mov	r2, r5
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <_svfiprintf_r+0x1f8>)
 800645c:	a904      	add	r1, sp, #16
 800645e:	4638      	mov	r0, r7
 8006460:	f000 f87a 	bl	8006558 <_printf_i>
 8006464:	e7eb      	b.n	800643e <_svfiprintf_r+0x1c2>
 8006466:	bf00      	nop
 8006468:	08006b30 	.word	0x08006b30
 800646c:	08006b3a 	.word	0x08006b3a
 8006470:	00000000 	.word	0x00000000
 8006474:	080061c5 	.word	0x080061c5
 8006478:	08006b36 	.word	0x08006b36

0800647c <_printf_common>:
 800647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006480:	4616      	mov	r6, r2
 8006482:	4699      	mov	r9, r3
 8006484:	688a      	ldr	r2, [r1, #8]
 8006486:	690b      	ldr	r3, [r1, #16]
 8006488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800648c:	4293      	cmp	r3, r2
 800648e:	bfb8      	it	lt
 8006490:	4613      	movlt	r3, r2
 8006492:	6033      	str	r3, [r6, #0]
 8006494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006498:	4607      	mov	r7, r0
 800649a:	460c      	mov	r4, r1
 800649c:	b10a      	cbz	r2, 80064a2 <_printf_common+0x26>
 800649e:	3301      	adds	r3, #1
 80064a0:	6033      	str	r3, [r6, #0]
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	0699      	lsls	r1, r3, #26
 80064a6:	bf42      	ittt	mi
 80064a8:	6833      	ldrmi	r3, [r6, #0]
 80064aa:	3302      	addmi	r3, #2
 80064ac:	6033      	strmi	r3, [r6, #0]
 80064ae:	6825      	ldr	r5, [r4, #0]
 80064b0:	f015 0506 	ands.w	r5, r5, #6
 80064b4:	d106      	bne.n	80064c4 <_printf_common+0x48>
 80064b6:	f104 0a19 	add.w	sl, r4, #25
 80064ba:	68e3      	ldr	r3, [r4, #12]
 80064bc:	6832      	ldr	r2, [r6, #0]
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	42ab      	cmp	r3, r5
 80064c2:	dc26      	bgt.n	8006512 <_printf_common+0x96>
 80064c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064c8:	1e13      	subs	r3, r2, #0
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	bf18      	it	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	0692      	lsls	r2, r2, #26
 80064d2:	d42b      	bmi.n	800652c <_printf_common+0xb0>
 80064d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064d8:	4649      	mov	r1, r9
 80064da:	4638      	mov	r0, r7
 80064dc:	47c0      	blx	r8
 80064de:	3001      	adds	r0, #1
 80064e0:	d01e      	beq.n	8006520 <_printf_common+0xa4>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	68e5      	ldr	r5, [r4, #12]
 80064e6:	6832      	ldr	r2, [r6, #0]
 80064e8:	f003 0306 	and.w	r3, r3, #6
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	bf08      	it	eq
 80064f0:	1aad      	subeq	r5, r5, r2
 80064f2:	68a3      	ldr	r3, [r4, #8]
 80064f4:	6922      	ldr	r2, [r4, #16]
 80064f6:	bf0c      	ite	eq
 80064f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064fc:	2500      	movne	r5, #0
 80064fe:	4293      	cmp	r3, r2
 8006500:	bfc4      	itt	gt
 8006502:	1a9b      	subgt	r3, r3, r2
 8006504:	18ed      	addgt	r5, r5, r3
 8006506:	2600      	movs	r6, #0
 8006508:	341a      	adds	r4, #26
 800650a:	42b5      	cmp	r5, r6
 800650c:	d11a      	bne.n	8006544 <_printf_common+0xc8>
 800650e:	2000      	movs	r0, #0
 8006510:	e008      	b.n	8006524 <_printf_common+0xa8>
 8006512:	2301      	movs	r3, #1
 8006514:	4652      	mov	r2, sl
 8006516:	4649      	mov	r1, r9
 8006518:	4638      	mov	r0, r7
 800651a:	47c0      	blx	r8
 800651c:	3001      	adds	r0, #1
 800651e:	d103      	bne.n	8006528 <_printf_common+0xac>
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006528:	3501      	adds	r5, #1
 800652a:	e7c6      	b.n	80064ba <_printf_common+0x3e>
 800652c:	18e1      	adds	r1, r4, r3
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	2030      	movs	r0, #48	; 0x30
 8006532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006536:	4422      	add	r2, r4
 8006538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800653c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006540:	3302      	adds	r3, #2
 8006542:	e7c7      	b.n	80064d4 <_printf_common+0x58>
 8006544:	2301      	movs	r3, #1
 8006546:	4622      	mov	r2, r4
 8006548:	4649      	mov	r1, r9
 800654a:	4638      	mov	r0, r7
 800654c:	47c0      	blx	r8
 800654e:	3001      	adds	r0, #1
 8006550:	d0e6      	beq.n	8006520 <_printf_common+0xa4>
 8006552:	3601      	adds	r6, #1
 8006554:	e7d9      	b.n	800650a <_printf_common+0x8e>
	...

08006558 <_printf_i>:
 8006558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800655c:	460c      	mov	r4, r1
 800655e:	4691      	mov	r9, r2
 8006560:	7e27      	ldrb	r7, [r4, #24]
 8006562:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006564:	2f78      	cmp	r7, #120	; 0x78
 8006566:	4680      	mov	r8, r0
 8006568:	469a      	mov	sl, r3
 800656a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800656e:	d807      	bhi.n	8006580 <_printf_i+0x28>
 8006570:	2f62      	cmp	r7, #98	; 0x62
 8006572:	d80a      	bhi.n	800658a <_printf_i+0x32>
 8006574:	2f00      	cmp	r7, #0
 8006576:	f000 80d8 	beq.w	800672a <_printf_i+0x1d2>
 800657a:	2f58      	cmp	r7, #88	; 0x58
 800657c:	f000 80a3 	beq.w	80066c6 <_printf_i+0x16e>
 8006580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006588:	e03a      	b.n	8006600 <_printf_i+0xa8>
 800658a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800658e:	2b15      	cmp	r3, #21
 8006590:	d8f6      	bhi.n	8006580 <_printf_i+0x28>
 8006592:	a001      	add	r0, pc, #4	; (adr r0, 8006598 <_printf_i+0x40>)
 8006594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006598:	080065f1 	.word	0x080065f1
 800659c:	08006605 	.word	0x08006605
 80065a0:	08006581 	.word	0x08006581
 80065a4:	08006581 	.word	0x08006581
 80065a8:	08006581 	.word	0x08006581
 80065ac:	08006581 	.word	0x08006581
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006581 	.word	0x08006581
 80065b8:	08006581 	.word	0x08006581
 80065bc:	08006581 	.word	0x08006581
 80065c0:	08006581 	.word	0x08006581
 80065c4:	08006711 	.word	0x08006711
 80065c8:	08006635 	.word	0x08006635
 80065cc:	080066f3 	.word	0x080066f3
 80065d0:	08006581 	.word	0x08006581
 80065d4:	08006581 	.word	0x08006581
 80065d8:	08006733 	.word	0x08006733
 80065dc:	08006581 	.word	0x08006581
 80065e0:	08006635 	.word	0x08006635
 80065e4:	08006581 	.word	0x08006581
 80065e8:	08006581 	.word	0x08006581
 80065ec:	080066fb 	.word	0x080066fb
 80065f0:	680b      	ldr	r3, [r1, #0]
 80065f2:	1d1a      	adds	r2, r3, #4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	600a      	str	r2, [r1, #0]
 80065f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006600:	2301      	movs	r3, #1
 8006602:	e0a3      	b.n	800674c <_printf_i+0x1f4>
 8006604:	6825      	ldr	r5, [r4, #0]
 8006606:	6808      	ldr	r0, [r1, #0]
 8006608:	062e      	lsls	r6, r5, #24
 800660a:	f100 0304 	add.w	r3, r0, #4
 800660e:	d50a      	bpl.n	8006626 <_printf_i+0xce>
 8006610:	6805      	ldr	r5, [r0, #0]
 8006612:	600b      	str	r3, [r1, #0]
 8006614:	2d00      	cmp	r5, #0
 8006616:	da03      	bge.n	8006620 <_printf_i+0xc8>
 8006618:	232d      	movs	r3, #45	; 0x2d
 800661a:	426d      	negs	r5, r5
 800661c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006620:	485e      	ldr	r0, [pc, #376]	; (800679c <_printf_i+0x244>)
 8006622:	230a      	movs	r3, #10
 8006624:	e019      	b.n	800665a <_printf_i+0x102>
 8006626:	f015 0f40 	tst.w	r5, #64	; 0x40
 800662a:	6805      	ldr	r5, [r0, #0]
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	bf18      	it	ne
 8006630:	b22d      	sxthne	r5, r5
 8006632:	e7ef      	b.n	8006614 <_printf_i+0xbc>
 8006634:	680b      	ldr	r3, [r1, #0]
 8006636:	6825      	ldr	r5, [r4, #0]
 8006638:	1d18      	adds	r0, r3, #4
 800663a:	6008      	str	r0, [r1, #0]
 800663c:	0628      	lsls	r0, r5, #24
 800663e:	d501      	bpl.n	8006644 <_printf_i+0xec>
 8006640:	681d      	ldr	r5, [r3, #0]
 8006642:	e002      	b.n	800664a <_printf_i+0xf2>
 8006644:	0669      	lsls	r1, r5, #25
 8006646:	d5fb      	bpl.n	8006640 <_printf_i+0xe8>
 8006648:	881d      	ldrh	r5, [r3, #0]
 800664a:	4854      	ldr	r0, [pc, #336]	; (800679c <_printf_i+0x244>)
 800664c:	2f6f      	cmp	r7, #111	; 0x6f
 800664e:	bf0c      	ite	eq
 8006650:	2308      	moveq	r3, #8
 8006652:	230a      	movne	r3, #10
 8006654:	2100      	movs	r1, #0
 8006656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800665a:	6866      	ldr	r6, [r4, #4]
 800665c:	60a6      	str	r6, [r4, #8]
 800665e:	2e00      	cmp	r6, #0
 8006660:	bfa2      	ittt	ge
 8006662:	6821      	ldrge	r1, [r4, #0]
 8006664:	f021 0104 	bicge.w	r1, r1, #4
 8006668:	6021      	strge	r1, [r4, #0]
 800666a:	b90d      	cbnz	r5, 8006670 <_printf_i+0x118>
 800666c:	2e00      	cmp	r6, #0
 800666e:	d04d      	beq.n	800670c <_printf_i+0x1b4>
 8006670:	4616      	mov	r6, r2
 8006672:	fbb5 f1f3 	udiv	r1, r5, r3
 8006676:	fb03 5711 	mls	r7, r3, r1, r5
 800667a:	5dc7      	ldrb	r7, [r0, r7]
 800667c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006680:	462f      	mov	r7, r5
 8006682:	42bb      	cmp	r3, r7
 8006684:	460d      	mov	r5, r1
 8006686:	d9f4      	bls.n	8006672 <_printf_i+0x11a>
 8006688:	2b08      	cmp	r3, #8
 800668a:	d10b      	bne.n	80066a4 <_printf_i+0x14c>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	07df      	lsls	r7, r3, #31
 8006690:	d508      	bpl.n	80066a4 <_printf_i+0x14c>
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	6861      	ldr	r1, [r4, #4]
 8006696:	4299      	cmp	r1, r3
 8006698:	bfde      	ittt	le
 800669a:	2330      	movle	r3, #48	; 0x30
 800669c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066a4:	1b92      	subs	r2, r2, r6
 80066a6:	6122      	str	r2, [r4, #16]
 80066a8:	f8cd a000 	str.w	sl, [sp]
 80066ac:	464b      	mov	r3, r9
 80066ae:	aa03      	add	r2, sp, #12
 80066b0:	4621      	mov	r1, r4
 80066b2:	4640      	mov	r0, r8
 80066b4:	f7ff fee2 	bl	800647c <_printf_common>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d14c      	bne.n	8006756 <_printf_i+0x1fe>
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	b004      	add	sp, #16
 80066c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c6:	4835      	ldr	r0, [pc, #212]	; (800679c <_printf_i+0x244>)
 80066c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	680e      	ldr	r6, [r1, #0]
 80066d0:	061f      	lsls	r7, r3, #24
 80066d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80066d6:	600e      	str	r6, [r1, #0]
 80066d8:	d514      	bpl.n	8006704 <_printf_i+0x1ac>
 80066da:	07d9      	lsls	r1, r3, #31
 80066dc:	bf44      	itt	mi
 80066de:	f043 0320 	orrmi.w	r3, r3, #32
 80066e2:	6023      	strmi	r3, [r4, #0]
 80066e4:	b91d      	cbnz	r5, 80066ee <_printf_i+0x196>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f023 0320 	bic.w	r3, r3, #32
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	2310      	movs	r3, #16
 80066f0:	e7b0      	b.n	8006654 <_printf_i+0xfc>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	f043 0320 	orr.w	r3, r3, #32
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	2378      	movs	r3, #120	; 0x78
 80066fc:	4828      	ldr	r0, [pc, #160]	; (80067a0 <_printf_i+0x248>)
 80066fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006702:	e7e3      	b.n	80066cc <_printf_i+0x174>
 8006704:	065e      	lsls	r6, r3, #25
 8006706:	bf48      	it	mi
 8006708:	b2ad      	uxthmi	r5, r5
 800670a:	e7e6      	b.n	80066da <_printf_i+0x182>
 800670c:	4616      	mov	r6, r2
 800670e:	e7bb      	b.n	8006688 <_printf_i+0x130>
 8006710:	680b      	ldr	r3, [r1, #0]
 8006712:	6826      	ldr	r6, [r4, #0]
 8006714:	6960      	ldr	r0, [r4, #20]
 8006716:	1d1d      	adds	r5, r3, #4
 8006718:	600d      	str	r5, [r1, #0]
 800671a:	0635      	lsls	r5, r6, #24
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	d501      	bpl.n	8006724 <_printf_i+0x1cc>
 8006720:	6018      	str	r0, [r3, #0]
 8006722:	e002      	b.n	800672a <_printf_i+0x1d2>
 8006724:	0671      	lsls	r1, r6, #25
 8006726:	d5fb      	bpl.n	8006720 <_printf_i+0x1c8>
 8006728:	8018      	strh	r0, [r3, #0]
 800672a:	2300      	movs	r3, #0
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	4616      	mov	r6, r2
 8006730:	e7ba      	b.n	80066a8 <_printf_i+0x150>
 8006732:	680b      	ldr	r3, [r1, #0]
 8006734:	1d1a      	adds	r2, r3, #4
 8006736:	600a      	str	r2, [r1, #0]
 8006738:	681e      	ldr	r6, [r3, #0]
 800673a:	6862      	ldr	r2, [r4, #4]
 800673c:	2100      	movs	r1, #0
 800673e:	4630      	mov	r0, r6
 8006740:	f7f9 fd6e 	bl	8000220 <memchr>
 8006744:	b108      	cbz	r0, 800674a <_printf_i+0x1f2>
 8006746:	1b80      	subs	r0, r0, r6
 8006748:	6060      	str	r0, [r4, #4]
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	2300      	movs	r3, #0
 8006750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006754:	e7a8      	b.n	80066a8 <_printf_i+0x150>
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	4632      	mov	r2, r6
 800675a:	4649      	mov	r1, r9
 800675c:	4640      	mov	r0, r8
 800675e:	47d0      	blx	sl
 8006760:	3001      	adds	r0, #1
 8006762:	d0ab      	beq.n	80066bc <_printf_i+0x164>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	079b      	lsls	r3, r3, #30
 8006768:	d413      	bmi.n	8006792 <_printf_i+0x23a>
 800676a:	68e0      	ldr	r0, [r4, #12]
 800676c:	9b03      	ldr	r3, [sp, #12]
 800676e:	4298      	cmp	r0, r3
 8006770:	bfb8      	it	lt
 8006772:	4618      	movlt	r0, r3
 8006774:	e7a4      	b.n	80066c0 <_printf_i+0x168>
 8006776:	2301      	movs	r3, #1
 8006778:	4632      	mov	r2, r6
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	47d0      	blx	sl
 8006780:	3001      	adds	r0, #1
 8006782:	d09b      	beq.n	80066bc <_printf_i+0x164>
 8006784:	3501      	adds	r5, #1
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	9903      	ldr	r1, [sp, #12]
 800678a:	1a5b      	subs	r3, r3, r1
 800678c:	42ab      	cmp	r3, r5
 800678e:	dcf2      	bgt.n	8006776 <_printf_i+0x21e>
 8006790:	e7eb      	b.n	800676a <_printf_i+0x212>
 8006792:	2500      	movs	r5, #0
 8006794:	f104 0619 	add.w	r6, r4, #25
 8006798:	e7f5      	b.n	8006786 <_printf_i+0x22e>
 800679a:	bf00      	nop
 800679c:	08006b41 	.word	0x08006b41
 80067a0:	08006b52 	.word	0x08006b52

080067a4 <memmove>:
 80067a4:	4288      	cmp	r0, r1
 80067a6:	b510      	push	{r4, lr}
 80067a8:	eb01 0402 	add.w	r4, r1, r2
 80067ac:	d902      	bls.n	80067b4 <memmove+0x10>
 80067ae:	4284      	cmp	r4, r0
 80067b0:	4623      	mov	r3, r4
 80067b2:	d807      	bhi.n	80067c4 <memmove+0x20>
 80067b4:	1e43      	subs	r3, r0, #1
 80067b6:	42a1      	cmp	r1, r4
 80067b8:	d008      	beq.n	80067cc <memmove+0x28>
 80067ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067c2:	e7f8      	b.n	80067b6 <memmove+0x12>
 80067c4:	4402      	add	r2, r0
 80067c6:	4601      	mov	r1, r0
 80067c8:	428a      	cmp	r2, r1
 80067ca:	d100      	bne.n	80067ce <memmove+0x2a>
 80067cc:	bd10      	pop	{r4, pc}
 80067ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067d6:	e7f7      	b.n	80067c8 <memmove+0x24>

080067d8 <_free_r>:
 80067d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067da:	2900      	cmp	r1, #0
 80067dc:	d048      	beq.n	8006870 <_free_r+0x98>
 80067de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e2:	9001      	str	r0, [sp, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f1a1 0404 	sub.w	r4, r1, #4
 80067ea:	bfb8      	it	lt
 80067ec:	18e4      	addlt	r4, r4, r3
 80067ee:	f000 f8d3 	bl	8006998 <__malloc_lock>
 80067f2:	4a20      	ldr	r2, [pc, #128]	; (8006874 <_free_r+0x9c>)
 80067f4:	9801      	ldr	r0, [sp, #4]
 80067f6:	6813      	ldr	r3, [r2, #0]
 80067f8:	4615      	mov	r5, r2
 80067fa:	b933      	cbnz	r3, 800680a <_free_r+0x32>
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	6014      	str	r4, [r2, #0]
 8006800:	b003      	add	sp, #12
 8006802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006806:	f000 b8cd 	b.w	80069a4 <__malloc_unlock>
 800680a:	42a3      	cmp	r3, r4
 800680c:	d90b      	bls.n	8006826 <_free_r+0x4e>
 800680e:	6821      	ldr	r1, [r4, #0]
 8006810:	1862      	adds	r2, r4, r1
 8006812:	4293      	cmp	r3, r2
 8006814:	bf04      	itt	eq
 8006816:	681a      	ldreq	r2, [r3, #0]
 8006818:	685b      	ldreq	r3, [r3, #4]
 800681a:	6063      	str	r3, [r4, #4]
 800681c:	bf04      	itt	eq
 800681e:	1852      	addeq	r2, r2, r1
 8006820:	6022      	streq	r2, [r4, #0]
 8006822:	602c      	str	r4, [r5, #0]
 8006824:	e7ec      	b.n	8006800 <_free_r+0x28>
 8006826:	461a      	mov	r2, r3
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b10b      	cbz	r3, 8006830 <_free_r+0x58>
 800682c:	42a3      	cmp	r3, r4
 800682e:	d9fa      	bls.n	8006826 <_free_r+0x4e>
 8006830:	6811      	ldr	r1, [r2, #0]
 8006832:	1855      	adds	r5, r2, r1
 8006834:	42a5      	cmp	r5, r4
 8006836:	d10b      	bne.n	8006850 <_free_r+0x78>
 8006838:	6824      	ldr	r4, [r4, #0]
 800683a:	4421      	add	r1, r4
 800683c:	1854      	adds	r4, r2, r1
 800683e:	42a3      	cmp	r3, r4
 8006840:	6011      	str	r1, [r2, #0]
 8006842:	d1dd      	bne.n	8006800 <_free_r+0x28>
 8006844:	681c      	ldr	r4, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	6053      	str	r3, [r2, #4]
 800684a:	4421      	add	r1, r4
 800684c:	6011      	str	r1, [r2, #0]
 800684e:	e7d7      	b.n	8006800 <_free_r+0x28>
 8006850:	d902      	bls.n	8006858 <_free_r+0x80>
 8006852:	230c      	movs	r3, #12
 8006854:	6003      	str	r3, [r0, #0]
 8006856:	e7d3      	b.n	8006800 <_free_r+0x28>
 8006858:	6825      	ldr	r5, [r4, #0]
 800685a:	1961      	adds	r1, r4, r5
 800685c:	428b      	cmp	r3, r1
 800685e:	bf04      	itt	eq
 8006860:	6819      	ldreq	r1, [r3, #0]
 8006862:	685b      	ldreq	r3, [r3, #4]
 8006864:	6063      	str	r3, [r4, #4]
 8006866:	bf04      	itt	eq
 8006868:	1949      	addeq	r1, r1, r5
 800686a:	6021      	streq	r1, [r4, #0]
 800686c:	6054      	str	r4, [r2, #4]
 800686e:	e7c7      	b.n	8006800 <_free_r+0x28>
 8006870:	b003      	add	sp, #12
 8006872:	bd30      	pop	{r4, r5, pc}
 8006874:	20012ff8 	.word	0x20012ff8

08006878 <_malloc_r>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	1ccd      	adds	r5, r1, #3
 800687c:	f025 0503 	bic.w	r5, r5, #3
 8006880:	3508      	adds	r5, #8
 8006882:	2d0c      	cmp	r5, #12
 8006884:	bf38      	it	cc
 8006886:	250c      	movcc	r5, #12
 8006888:	2d00      	cmp	r5, #0
 800688a:	4606      	mov	r6, r0
 800688c:	db01      	blt.n	8006892 <_malloc_r+0x1a>
 800688e:	42a9      	cmp	r1, r5
 8006890:	d903      	bls.n	800689a <_malloc_r+0x22>
 8006892:	230c      	movs	r3, #12
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	2000      	movs	r0, #0
 8006898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800689a:	f000 f87d 	bl	8006998 <__malloc_lock>
 800689e:	4921      	ldr	r1, [pc, #132]	; (8006924 <_malloc_r+0xac>)
 80068a0:	680a      	ldr	r2, [r1, #0]
 80068a2:	4614      	mov	r4, r2
 80068a4:	b99c      	cbnz	r4, 80068ce <_malloc_r+0x56>
 80068a6:	4f20      	ldr	r7, [pc, #128]	; (8006928 <_malloc_r+0xb0>)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	b923      	cbnz	r3, 80068b6 <_malloc_r+0x3e>
 80068ac:	4621      	mov	r1, r4
 80068ae:	4630      	mov	r0, r6
 80068b0:	f000 f862 	bl	8006978 <_sbrk_r>
 80068b4:	6038      	str	r0, [r7, #0]
 80068b6:	4629      	mov	r1, r5
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f85d 	bl	8006978 <_sbrk_r>
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d123      	bne.n	800690a <_malloc_r+0x92>
 80068c2:	230c      	movs	r3, #12
 80068c4:	6033      	str	r3, [r6, #0]
 80068c6:	4630      	mov	r0, r6
 80068c8:	f000 f86c 	bl	80069a4 <__malloc_unlock>
 80068cc:	e7e3      	b.n	8006896 <_malloc_r+0x1e>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	1b5b      	subs	r3, r3, r5
 80068d2:	d417      	bmi.n	8006904 <_malloc_r+0x8c>
 80068d4:	2b0b      	cmp	r3, #11
 80068d6:	d903      	bls.n	80068e0 <_malloc_r+0x68>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	441c      	add	r4, r3
 80068dc:	6025      	str	r5, [r4, #0]
 80068de:	e004      	b.n	80068ea <_malloc_r+0x72>
 80068e0:	6863      	ldr	r3, [r4, #4]
 80068e2:	42a2      	cmp	r2, r4
 80068e4:	bf0c      	ite	eq
 80068e6:	600b      	streq	r3, [r1, #0]
 80068e8:	6053      	strne	r3, [r2, #4]
 80068ea:	4630      	mov	r0, r6
 80068ec:	f000 f85a 	bl	80069a4 <__malloc_unlock>
 80068f0:	f104 000b 	add.w	r0, r4, #11
 80068f4:	1d23      	adds	r3, r4, #4
 80068f6:	f020 0007 	bic.w	r0, r0, #7
 80068fa:	1ac2      	subs	r2, r0, r3
 80068fc:	d0cc      	beq.n	8006898 <_malloc_r+0x20>
 80068fe:	1a1b      	subs	r3, r3, r0
 8006900:	50a3      	str	r3, [r4, r2]
 8006902:	e7c9      	b.n	8006898 <_malloc_r+0x20>
 8006904:	4622      	mov	r2, r4
 8006906:	6864      	ldr	r4, [r4, #4]
 8006908:	e7cc      	b.n	80068a4 <_malloc_r+0x2c>
 800690a:	1cc4      	adds	r4, r0, #3
 800690c:	f024 0403 	bic.w	r4, r4, #3
 8006910:	42a0      	cmp	r0, r4
 8006912:	d0e3      	beq.n	80068dc <_malloc_r+0x64>
 8006914:	1a21      	subs	r1, r4, r0
 8006916:	4630      	mov	r0, r6
 8006918:	f000 f82e 	bl	8006978 <_sbrk_r>
 800691c:	3001      	adds	r0, #1
 800691e:	d1dd      	bne.n	80068dc <_malloc_r+0x64>
 8006920:	e7cf      	b.n	80068c2 <_malloc_r+0x4a>
 8006922:	bf00      	nop
 8006924:	20012ff8 	.word	0x20012ff8
 8006928:	20012ffc 	.word	0x20012ffc

0800692c <_realloc_r>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	4607      	mov	r7, r0
 8006930:	4614      	mov	r4, r2
 8006932:	460e      	mov	r6, r1
 8006934:	b921      	cbnz	r1, 8006940 <_realloc_r+0x14>
 8006936:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800693a:	4611      	mov	r1, r2
 800693c:	f7ff bf9c 	b.w	8006878 <_malloc_r>
 8006940:	b922      	cbnz	r2, 800694c <_realloc_r+0x20>
 8006942:	f7ff ff49 	bl	80067d8 <_free_r>
 8006946:	4625      	mov	r5, r4
 8006948:	4628      	mov	r0, r5
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	f000 f830 	bl	80069b0 <_malloc_usable_size_r>
 8006950:	42a0      	cmp	r0, r4
 8006952:	d20f      	bcs.n	8006974 <_realloc_r+0x48>
 8006954:	4621      	mov	r1, r4
 8006956:	4638      	mov	r0, r7
 8006958:	f7ff ff8e 	bl	8006878 <_malloc_r>
 800695c:	4605      	mov	r5, r0
 800695e:	2800      	cmp	r0, #0
 8006960:	d0f2      	beq.n	8006948 <_realloc_r+0x1c>
 8006962:	4631      	mov	r1, r6
 8006964:	4622      	mov	r2, r4
 8006966:	f7ff fbf7 	bl	8006158 <memcpy>
 800696a:	4631      	mov	r1, r6
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff ff33 	bl	80067d8 <_free_r>
 8006972:	e7e9      	b.n	8006948 <_realloc_r+0x1c>
 8006974:	4635      	mov	r5, r6
 8006976:	e7e7      	b.n	8006948 <_realloc_r+0x1c>

08006978 <_sbrk_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d06      	ldr	r5, [pc, #24]	; (8006994 <_sbrk_r+0x1c>)
 800697c:	2300      	movs	r3, #0
 800697e:	4604      	mov	r4, r0
 8006980:	4608      	mov	r0, r1
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	f000 f81e 	bl	80069c4 <_sbrk>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_sbrk_r+0x1a>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_sbrk_r+0x1a>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	2001310c 	.word	0x2001310c

08006998 <__malloc_lock>:
 8006998:	4801      	ldr	r0, [pc, #4]	; (80069a0 <__malloc_lock+0x8>)
 800699a:	f000 b811 	b.w	80069c0 <__retarget_lock_acquire_recursive>
 800699e:	bf00      	nop
 80069a0:	20013114 	.word	0x20013114

080069a4 <__malloc_unlock>:
 80069a4:	4801      	ldr	r0, [pc, #4]	; (80069ac <__malloc_unlock+0x8>)
 80069a6:	f000 b80c 	b.w	80069c2 <__retarget_lock_release_recursive>
 80069aa:	bf00      	nop
 80069ac:	20013114 	.word	0x20013114

080069b0 <_malloc_usable_size_r>:
 80069b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b4:	1f18      	subs	r0, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfbc      	itt	lt
 80069ba:	580b      	ldrlt	r3, [r1, r0]
 80069bc:	18c0      	addlt	r0, r0, r3
 80069be:	4770      	bx	lr

080069c0 <__retarget_lock_acquire_recursive>:
 80069c0:	4770      	bx	lr

080069c2 <__retarget_lock_release_recursive>:
 80069c2:	4770      	bx	lr

080069c4 <_sbrk>:
 80069c4:	4b04      	ldr	r3, [pc, #16]	; (80069d8 <_sbrk+0x14>)
 80069c6:	6819      	ldr	r1, [r3, #0]
 80069c8:	4602      	mov	r2, r0
 80069ca:	b909      	cbnz	r1, 80069d0 <_sbrk+0xc>
 80069cc:	4903      	ldr	r1, [pc, #12]	; (80069dc <_sbrk+0x18>)
 80069ce:	6019      	str	r1, [r3, #0]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	4402      	add	r2, r0
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	4770      	bx	lr
 80069d8:	20013000 	.word	0x20013000
 80069dc:	20013120 	.word	0x20013120

080069e0 <_init>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	bf00      	nop
 80069e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e6:	bc08      	pop	{r3}
 80069e8:	469e      	mov	lr, r3
 80069ea:	4770      	bx	lr

080069ec <_fini>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	bf00      	nop
 80069f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f2:	bc08      	pop	{r3}
 80069f4:	469e      	mov	lr, r3
 80069f6:	4770      	bx	lr
