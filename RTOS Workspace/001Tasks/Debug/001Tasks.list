
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081bc  080081bc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081c4  080081c4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c8  080081c8  000181c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080081cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a0  2000007c  08008248  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001451c  08008248  0002451c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cba0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c48  00000000  00000000  0003cc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00040898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  00041d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bec  00000000  00000000  000430a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc7e  00000000  00000000  00068c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df18c  00000000  00000000  0008590a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164a96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ec4  00000000  00000000  00164aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fac 	.word	0x08007fac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007fac 	.word	0x08007fac

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014464 	.word	0x20014464
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96e 	b.w	8000644 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468c      	mov	ip, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8083 	bne.w	8000496 <__udivmoddi4+0x116>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d947      	bls.n	8000426 <__udivmoddi4+0xa6>
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b142      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039c:	f1c2 0020 	rsb	r0, r2, #32
 80003a0:	fa24 f000 	lsr.w	r0, r4, r0
 80003a4:	4091      	lsls	r1, r2
 80003a6:	4097      	lsls	r7, r2
 80003a8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fbbc f6f8 	udiv	r6, ip, r8
 80003b8:	fa1f fe87 	uxth.w	lr, r7
 80003bc:	fb08 c116 	mls	r1, r8, r6, ip
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f10e 	mul.w	r1, r6, lr
 80003c8:	4299      	cmp	r1, r3
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x60>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d2:	f080 8119 	bcs.w	8000608 <__udivmoddi4+0x288>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 8116 	bls.w	8000608 <__udivmoddi4+0x288>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x8c>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	f080 8105 	bcs.w	800060c <__udivmoddi4+0x28c>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8102 	bls.w	800060c <__udivmoddi4+0x28c>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	2600      	movs	r6, #0
 8000416:	b11d      	cbz	r5, 8000420 <__udivmoddi4+0xa0>
 8000418:	40d4      	lsrs	r4, r2
 800041a:	2300      	movs	r3, #0
 800041c:	e9c5 4300 	strd	r4, r3, [r5]
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	b902      	cbnz	r2, 800042a <__udivmoddi4+0xaa>
 8000428:	deff      	udf	#255	; 0xff
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	2a00      	cmp	r2, #0
 8000430:	d150      	bne.n	80004d4 <__udivmoddi4+0x154>
 8000432:	1bcb      	subs	r3, r1, r7
 8000434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	2601      	movs	r6, #1
 800043e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000442:	0c21      	lsrs	r1, r4, #16
 8000444:	fb0e 331c 	mls	r3, lr, ip, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb08 f30c 	mul.w	r3, r8, ip
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0xe4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0xe2>
 800045c:	428b      	cmp	r3, r1
 800045e:	f200 80e9 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 8000462:	4684      	mov	ip, r0
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000470:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x10c>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x10a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80d9 	bhi.w	800063c <__udivmoddi4+0x2bc>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e7bf      	b.n	8000416 <__udivmoddi4+0x96>
 8000496:	428b      	cmp	r3, r1
 8000498:	d909      	bls.n	80004ae <__udivmoddi4+0x12e>
 800049a:	2d00      	cmp	r5, #0
 800049c:	f000 80b1 	beq.w	8000602 <__udivmoddi4+0x282>
 80004a0:	2600      	movs	r6, #0
 80004a2:	e9c5 0100 	strd	r0, r1, [r5]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	fab3 f683 	clz	r6, r3
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d14a      	bne.n	800054c <__udivmoddi4+0x1cc>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x140>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	f200 80b8 	bhi.w	8000630 <__udivmoddi4+0x2b0>
 80004c0:	1a84      	subs	r4, r0, r2
 80004c2:	eb61 0103 	sbc.w	r1, r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	468c      	mov	ip, r1
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d0a8      	beq.n	8000420 <__udivmoddi4+0xa0>
 80004ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80004d2:	e7a5      	b.n	8000420 <__udivmoddi4+0xa0>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f603 	lsr.w	r6, r0, r3
 80004dc:	4097      	lsls	r7, r2
 80004de:	fa01 f002 	lsl.w	r0, r1, r2
 80004e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	4330      	orrs	r0, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fc:	fb06 f108 	mul.w	r1, r6, r8
 8000500:	4299      	cmp	r1, r3
 8000502:	fa04 f402 	lsl.w	r4, r4, r2
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x19c>
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	f106 3cff 	add.w	ip, r6, #4294967295
 800050e:	f080 808d 	bcs.w	800062c <__udivmoddi4+0x2ac>
 8000512:	4299      	cmp	r1, r3
 8000514:	f240 808a 	bls.w	800062c <__udivmoddi4+0x2ac>
 8000518:	3e02      	subs	r6, #2
 800051a:	443b      	add	r3, r7
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b281      	uxth	r1, r0
 8000520:	fbb3 f0fe 	udiv	r0, r3, lr
 8000524:	fb0e 3310 	mls	r3, lr, r0, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb00 f308 	mul.w	r3, r0, r8
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x1c4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f100 3cff 	add.w	ip, r0, #4294967295
 800053a:	d273      	bcs.n	8000624 <__udivmoddi4+0x2a4>
 800053c:	428b      	cmp	r3, r1
 800053e:	d971      	bls.n	8000624 <__udivmoddi4+0x2a4>
 8000540:	3802      	subs	r0, #2
 8000542:	4439      	add	r1, r7
 8000544:	1acb      	subs	r3, r1, r3
 8000546:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800054a:	e778      	b.n	800043e <__udivmoddi4+0xbe>
 800054c:	f1c6 0c20 	rsb	ip, r6, #32
 8000550:	fa03 f406 	lsl.w	r4, r3, r6
 8000554:	fa22 f30c 	lsr.w	r3, r2, ip
 8000558:	431c      	orrs	r4, r3
 800055a:	fa20 f70c 	lsr.w	r7, r0, ip
 800055e:	fa01 f306 	lsl.w	r3, r1, r6
 8000562:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000566:	fa21 f10c 	lsr.w	r1, r1, ip
 800056a:	431f      	orrs	r7, r3
 800056c:	0c3b      	lsrs	r3, r7, #16
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fa1f f884 	uxth.w	r8, r4
 8000576:	fb0e 1119 	mls	r1, lr, r9, r1
 800057a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800057e:	fb09 fa08 	mul.w	sl, r9, r8
 8000582:	458a      	cmp	sl, r1
 8000584:	fa02 f206 	lsl.w	r2, r2, r6
 8000588:	fa00 f306 	lsl.w	r3, r0, r6
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x220>
 800058e:	1861      	adds	r1, r4, r1
 8000590:	f109 30ff 	add.w	r0, r9, #4294967295
 8000594:	d248      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 8000596:	458a      	cmp	sl, r1
 8000598:	d946      	bls.n	8000628 <__udivmoddi4+0x2a8>
 800059a:	f1a9 0902 	sub.w	r9, r9, #2
 800059e:	4421      	add	r1, r4
 80005a0:	eba1 010a 	sub.w	r1, r1, sl
 80005a4:	b2bf      	uxth	r7, r7
 80005a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005b2:	fb00 f808 	mul.w	r8, r0, r8
 80005b6:	45b8      	cmp	r8, r7
 80005b8:	d907      	bls.n	80005ca <__udivmoddi4+0x24a>
 80005ba:	19e7      	adds	r7, r4, r7
 80005bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005c0:	d22e      	bcs.n	8000620 <__udivmoddi4+0x2a0>
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d92c      	bls.n	8000620 <__udivmoddi4+0x2a0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4427      	add	r7, r4
 80005ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ce:	eba7 0708 	sub.w	r7, r7, r8
 80005d2:	fba0 8902 	umull	r8, r9, r0, r2
 80005d6:	454f      	cmp	r7, r9
 80005d8:	46c6      	mov	lr, r8
 80005da:	4649      	mov	r1, r9
 80005dc:	d31a      	bcc.n	8000614 <__udivmoddi4+0x294>
 80005de:	d017      	beq.n	8000610 <__udivmoddi4+0x290>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x27a>
 80005e2:	ebb3 020e 	subs.w	r2, r3, lr
 80005e6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ee:	40f2      	lsrs	r2, r6
 80005f0:	ea4c 0202 	orr.w	r2, ip, r2
 80005f4:	40f7      	lsrs	r7, r6
 80005f6:	e9c5 2700 	strd	r2, r7, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e70b      	b.n	8000420 <__udivmoddi4+0xa0>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0x60>
 800060c:	4618      	mov	r0, r3
 800060e:	e6fd      	b.n	800040c <__udivmoddi4+0x8c>
 8000610:	4543      	cmp	r3, r8
 8000612:	d2e5      	bcs.n	80005e0 <__udivmoddi4+0x260>
 8000614:	ebb8 0e02 	subs.w	lr, r8, r2
 8000618:	eb69 0104 	sbc.w	r1, r9, r4
 800061c:	3801      	subs	r0, #1
 800061e:	e7df      	b.n	80005e0 <__udivmoddi4+0x260>
 8000620:	4608      	mov	r0, r1
 8000622:	e7d2      	b.n	80005ca <__udivmoddi4+0x24a>
 8000624:	4660      	mov	r0, ip
 8000626:	e78d      	b.n	8000544 <__udivmoddi4+0x1c4>
 8000628:	4681      	mov	r9, r0
 800062a:	e7b9      	b.n	80005a0 <__udivmoddi4+0x220>
 800062c:	4666      	mov	r6, ip
 800062e:	e775      	b.n	800051c <__udivmoddi4+0x19c>
 8000630:	4630      	mov	r0, r6
 8000632:	e74a      	b.n	80004ca <__udivmoddi4+0x14a>
 8000634:	f1ac 0c02 	sub.w	ip, ip, #2
 8000638:	4439      	add	r1, r7
 800063a:	e713      	b.n	8000464 <__udivmoddi4+0xe4>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	e724      	b.n	800048c <__udivmoddi4+0x10c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 facd 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f851 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8c1 	bl	80007dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter (to assist with timestamp logging for SEGGER SystemView)
  DWT_CTRL |= (1 << 0);
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <main+0x94>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <main+0x94>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6013      	str	r3, [r2, #0]

  //SEGGER_UART_init(500000); //uncomment if using USART based continuous recording

  SEGGER_SYSVIEW_Conf();
 8000666:	f004 f9f9 	bl	8004a5c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start(); //comment out if using UART based continuous recording
 800066a:	f005 fe35 	bl	80062d8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <main+0x98>)
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	4919      	ldr	r1, [pc, #100]	; (80006e4 <main+0x9c>)
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <main+0xa0>)
 8000680:	f002 fc1a 	bl	8002eb8 <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2302      	movs	r3, #2
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <main+0xa4>)
 80006ac:	22c8      	movs	r2, #200	; 0xc8
 80006ae:	4910      	ldr	r1, [pc, #64]	; (80006f0 <main+0xa8>)
 80006b0:	4810      	ldr	r0, [pc, #64]	; (80006f4 <main+0xac>)
 80006b2:	f002 fc01 	bl	8002eb8 <xTaskCreate>
 80006b6:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d00a      	beq.n	80006d4 <main+0x8c>
        __asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	60fb      	str	r3, [r7, #12]
    }
 80006d0:	bf00      	nop
 80006d2:	e7fe      	b.n	80006d2 <main+0x8a>

  //Start the freeRTOS scheduler
  vTaskStartScheduler();
 80006d4:	f002 fd54 	bl	8003180 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 80006d8:	e7fe      	b.n	80006d8 <main+0x90>
 80006da:	bf00      	nop
 80006dc:	e0001000 	.word	0xe0001000
 80006e0:	08007fc4 	.word	0x08007fc4
 80006e4:	08007fdc 	.word	0x08007fdc
 80006e8:	080008dd 	.word	0x080008dd
 80006ec:	08007fe4 	.word	0x08007fe4
 80006f0:	08007ffc 	.word	0x08007ffc
 80006f4:	0800091d 	.word	0x0800091d

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f006 fc1a 	bl	8006f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <SystemClock_Config+0xdc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <SystemClock_Config+0xdc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xdc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <SystemClock_Config+0xe0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <SystemClock_Config+0xe0>)
 8000742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xe0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800076c:	23b4      	movs	r3, #180	; 0xb4
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f83f 	bl	8001804 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800078c:	f000 f8f8 	bl	8000980 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f000 fcfe 	bl	8001190 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800079a:	f000 f8f1 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fd37 	bl	8001230 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007c8:	f000 f8da 	bl	8000980 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	; 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b35      	ldr	r3, [pc, #212]	; (80008cc <MX_GPIO_Init+0xf0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a34      	ldr	r2, [pc, #208]	; (80008cc <MX_GPIO_Init+0xf0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a26      	ldr	r2, [pc, #152]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0xf0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_GPIO_Init+0xf4>)
 8000868:	f000 fc78 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_GPIO_Init+0xf8>)
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4815      	ldr	r0, [pc, #84]	; (80008d8 <MX_GPIO_Init+0xfc>)
 8000882:	f000 fad7 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000886:	230c      	movs	r3, #12
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000896:	2307      	movs	r3, #7
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0xf4>)
 80008a2:	f000 fac7 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a6:	2320      	movs	r3, #32
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0xf4>)
 80008be:	f000 fab9 	bl	8000e34 <HAL_GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	10210000 	.word	0x10210000
 80008d8:	40020800 	.word	0x40020800

080008dc <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09c      	sub	sp, #112	; 0x70
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1) {
		printf("%s\n", (char*)parameters);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f006 fba1 	bl	800702c <puts>

		//Formatting string before using SEGGER's Printf
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80008ea:	f107 000c 	add.w	r0, r7, #12
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a08      	ldr	r2, [pc, #32]	; (8000914 <task1_handler+0x38>)
 80008f2:	2164      	movs	r1, #100	; 0x64
 80008f4:	f006 fba2 	bl	800703c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 fa5d 	bl	8006dbc <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD(); //cooperative scheduling with configUSE_PREEMPTION = 0
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <task1_handler+0x3c>)
 8000904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 8000912:	e7e7      	b.n	80008e4 <task1_handler+0x8>
 8000914:	08008004 	.word	0x08008004
 8000918:	e000ed04 	.word	0xe000ed04

0800091c <task2_handler>:

	/* Clean up before exiting */
	vTaskDelete(NULL);
}

static void task2_handler(void* parameters) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	; 0x70
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

	char msg[100];
	while(1) {
		printf("%s\n", (char*)parameters);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f006 fb81 	bl	800702c <puts>

		//Formatting string before using SEGGER's Printf
		snprintf(msg, 100, "%s\n", (char*)parameters);
 800092a:	f107 000c 	add.w	r0, r7, #12
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a08      	ldr	r2, [pc, #32]	; (8000954 <task2_handler+0x38>)
 8000932:	2164      	movs	r1, #100	; 0x64
 8000934:	f006 fb82 	bl	800703c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4618      	mov	r0, r3
 800093e:	f006 fa3d 	bl	8006dbc <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD(); //cooperative scheduling with configUSE_PREEMPTION = 0
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <task2_handler+0x3c>)
 8000944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	f3bf 8f4f 	dsb	sy
 800094e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 8000952:	e7e7      	b.n	8000924 <task2_handler+0x8>
 8000954:	08008004 	.word	0x08008004
 8000958:	e000ed04 	.word	0xe000ed04

0800095c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096e:	f000 f95f 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40001000 	.word	0x40001000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009ca:	f003 fd7d 	bl	80044c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2036      	movs	r0, #54	; 0x36
 80009f2:	f000 f9f5 	bl	8000de0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009f6:	2036      	movs	r0, #54	; 0x36
 80009f8:	f000 fa0e 	bl	8000e18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a18:	f107 0210 	add.w	r2, r7, #16
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fd0a 	bl	800143c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a28:	f000 fcf4 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	0c9b      	lsrs	r3, r3, #18
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_InitTick+0xac>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <HAL_InitTick+0xb0>)
 8000a44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_InitTick+0xac>)
 8000a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_InitTick+0xac>)
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_InitTick+0xac>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_InitTick+0xac>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <HAL_InitTick+0xac>)
 8000a62:	f001 f96d 	bl	8001d40 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d104      	bne.n	8000a76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <HAL_InitTick+0xac>)
 8000a6e:	f001 f9c1 	bl	8001df4 <HAL_TIM_Base_Start_IT>
 8000a72:	4603      	mov	r3, r0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3730      	adds	r7, #48	; 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	200143d8 	.word	0x200143d8
 8000a8c:	40001000 	.word	0x40001000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM6_DAC_IRQHandler+0x10>)
 8000ac2:	f001 fa07 	bl	8001ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200143d8 	.word	0x200143d8

08000ad0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
	}

return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b32:	605a      	str	r2, [r3, #4]
	return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_isatty>:

int _isatty(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	return 1;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
	return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffd7 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f006 f97b 	bl	8006ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fd3d 	bl	8000648 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000bdc:	080081cc 	.word	0x080081cc
  ldr r2, =_sbss
 8000be0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000be4:	2001451c 	.word	0x2001451c

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8d8 	bl	8000dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f7ff fede 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff feb4 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20014420 	.word	0x20014420

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20014420 	.word	0x20014420

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff4c 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df2:	f7ff ff61 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68b9      	ldr	r1, [r7, #8]
 8000dfc:	6978      	ldr	r0, [r7, #20]
 8000dfe:	f7ff ffb1 	bl	8000d64 <NVIC_EncodePriority>
 8000e02:	4602      	mov	r2, r0
 8000e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff80 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff54 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e165      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8154 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80ae 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a5c      	ldr	r2, [pc, #368]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <HAL_GPIO_Init+0x300>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a58      	ldr	r2, [pc, #352]	; (8001138 <HAL_GPIO_Init+0x304>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x308>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d025      	beq.n	800104e <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x30c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01f      	beq.n	800104a <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x310>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x314>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x318>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00d      	beq.n	800103e <HAL_GPIO_Init+0x20a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d007      	beq.n	800103a <HAL_GPIO_Init+0x206>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_GPIO_Init+0x320>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d101      	bne.n	8001036 <HAL_GPIO_Init+0x202>
 8001032:	2306      	movs	r3, #6
 8001034:	e00c      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001036:	2307      	movs	r3, #7
 8001038:	e00a      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103a:	2305      	movs	r3, #5
 800103c:	e008      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800103e:	2304      	movs	r3, #4
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001042:	2303      	movs	r3, #3
 8001044:	e004      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 8001046:	2302      	movs	r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x21c>
 800104e:	2300      	movs	r3, #0
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	f002 0203 	and.w	r2, r2, #3
 8001056:	0092      	lsls	r2, r2, #2
 8001058:	4093      	lsls	r3, r2
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001060:	4935      	ldr	r1, [pc, #212]	; (8001138 <HAL_GPIO_Init+0x304>)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106e:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x324>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_GPIO_Init+0x324>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3301      	adds	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	f67f ae96 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40013800 	.word	0x40013800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40021400 	.word	0x40021400
 8001154:	40021800 	.word	0x40021800
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_PWREx_EnableOverDrive+0x90>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_PWREx_EnableOverDrive+0x94>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011bc:	f7ff fd4c 	bl	8000c58 <HAL_GetTick>
 80011c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011c2:	e009      	b.n	80011d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011c4:	f7ff fd48 	bl	8000c58 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d2:	d901      	bls.n	80011d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e01f      	b.n	8001218 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_PWREx_EnableOverDrive+0x98>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d1ee      	bne.n	80011c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_PWREx_EnableOverDrive+0x9c>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ec:	f7ff fd34 	bl	8000c58 <HAL_GetTick>
 80011f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011f2:	e009      	b.n	8001208 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f4:	f7ff fd30 	bl	8000c58 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001202:	d901      	bls.n	8001208 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e007      	b.n	8001218 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_PWREx_EnableOverDrive+0x98>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001214:	d1ee      	bne.n	80011f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	420e0040 	.word	0x420e0040
 8001228:	40007000 	.word	0x40007000
 800122c:	420e0044 	.word	0x420e0044

08001230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0cc      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d90c      	bls.n	800126c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b65      	ldr	r3, [pc, #404]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b8      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a58      	ldr	r2, [pc, #352]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800128e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a52      	ldr	r2, [pc, #328]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	494d      	ldr	r1, [pc, #308]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d044      	beq.n	8001350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d119      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e07f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e06f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e067      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f023 0203 	bic.w	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4934      	ldr	r1, [pc, #208]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001320:	f7ff fc9a 	bl	8000c58 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	e00a      	b.n	800133e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001328:	f7ff fc96 	bl	8000c58 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e04f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 020c 	and.w	r2, r3, #12
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	429a      	cmp	r2, r3
 800134e:	d1eb      	bne.n	8001328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d20c      	bcs.n	8001378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e032      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4916      	ldr	r1, [pc, #88]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	490e      	ldr	r1, [pc, #56]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013b6:	f000 f873 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	5ccb      	ldrb	r3, [r1, r3]
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_ClockConfig+0x1c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fb00 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00
 80013ec:	40023800 	.word	0x40023800
 80013f0:	080080e8 	.word	0x080080e8
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_RCC_GetHCLKFreq+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000000 	.word	0x20000000

08001414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001418:	f7ff fff0 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0a9b      	lsrs	r3, r3, #10
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	; (8001438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	080080f8 	.word	0x080080f8

0800143c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	220f      	movs	r2, #15
 800144a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_RCC_GetClockConfig+0x60>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 020f 	and.w	r2, r3, #15
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014a4:	b088      	sub	sp, #32
 80014a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014bc:	4bce      	ldr	r3, [pc, #824]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	f200 818d 	bhi.w	80017e4 <HAL_RCC_GetSysClockFreq+0x344>
 80014ca:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <HAL_RCC_GetSysClockFreq+0x30>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	08001505 	.word	0x08001505
 80014d4:	080017e5 	.word	0x080017e5
 80014d8:	080017e5 	.word	0x080017e5
 80014dc:	080017e5 	.word	0x080017e5
 80014e0:	0800150b 	.word	0x0800150b
 80014e4:	080017e5 	.word	0x080017e5
 80014e8:	080017e5 	.word	0x080017e5
 80014ec:	080017e5 	.word	0x080017e5
 80014f0:	08001511 	.word	0x08001511
 80014f4:	080017e5 	.word	0x080017e5
 80014f8:	080017e5 	.word	0x080017e5
 80014fc:	080017e5 	.word	0x080017e5
 8001500:	08001685 	.word	0x08001685
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001504:	4bbd      	ldr	r3, [pc, #756]	; (80017fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001506:	61bb      	str	r3, [r7, #24]
       break;
 8001508:	e16f      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800150a:	4bbd      	ldr	r3, [pc, #756]	; (8001800 <HAL_RCC_GetSysClockFreq+0x360>)
 800150c:	61bb      	str	r3, [r7, #24]
      break;
 800150e:	e16c      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001510:	4bb9      	ldr	r3, [pc, #740]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001518:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800151a:	4bb7      	ldr	r3, [pc, #732]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d053      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001526:	4bb4      	ldr	r3, [pc, #720]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	099b      	lsrs	r3, r3, #6
 800152c:	461a      	mov	r2, r3
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001536:	f04f 0100 	mov.w	r1, #0
 800153a:	ea02 0400 	and.w	r4, r2, r0
 800153e:	603c      	str	r4, [r7, #0]
 8001540:	400b      	ands	r3, r1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	014b      	lsls	r3, r1, #5
 8001556:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800155a:	0142      	lsls	r2, r0, #5
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	4623      	mov	r3, r4
 8001562:	1ac0      	subs	r0, r0, r3
 8001564:	462b      	mov	r3, r5
 8001566:	eb61 0103 	sbc.w	r1, r1, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	018b      	lsls	r3, r1, #6
 8001574:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001578:	0182      	lsls	r2, r0, #6
 800157a:	1a12      	subs	r2, r2, r0
 800157c:	eb63 0301 	sbc.w	r3, r3, r1
 8001580:	f04f 0000 	mov.w	r0, #0
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	00d9      	lsls	r1, r3, #3
 800158a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800158e:	00d0      	lsls	r0, r2, #3
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4621      	mov	r1, r4
 8001596:	1852      	adds	r2, r2, r1
 8001598:	4629      	mov	r1, r5
 800159a:	eb43 0101 	adc.w	r1, r3, r1
 800159e:	460b      	mov	r3, r1
 80015a0:	f04f 0000 	mov.w	r0, #0
 80015a4:	f04f 0100 	mov.w	r1, #0
 80015a8:	0259      	lsls	r1, r3, #9
 80015aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015ae:	0250      	lsls	r0, r2, #9
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f7fe fec6 	bl	8000350 <__aeabi_uldivmod>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4613      	mov	r3, r2
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e04c      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	461a      	mov	r2, r3
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	ea02 0a00 	and.w	sl, r2, r0
 80015e6:	ea03 0b01 	and.w	fp, r3, r1
 80015ea:	4650      	mov	r0, sl
 80015ec:	4659      	mov	r1, fp
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	014b      	lsls	r3, r1, #5
 80015f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015fc:	0142      	lsls	r2, r0, #5
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	ebb0 000a 	subs.w	r0, r0, sl
 8001606:	eb61 010b 	sbc.w	r1, r1, fp
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	018b      	lsls	r3, r1, #6
 8001614:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001618:	0182      	lsls	r2, r0, #6
 800161a:	1a12      	subs	r2, r2, r0
 800161c:	eb63 0301 	sbc.w	r3, r3, r1
 8001620:	f04f 0000 	mov.w	r0, #0
 8001624:	f04f 0100 	mov.w	r1, #0
 8001628:	00d9      	lsls	r1, r3, #3
 800162a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800162e:	00d0      	lsls	r0, r2, #3
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	eb12 020a 	adds.w	r2, r2, sl
 8001638:	eb43 030b 	adc.w	r3, r3, fp
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	0299      	lsls	r1, r3, #10
 8001646:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800164a:	0290      	lsls	r0, r2, #10
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	461a      	mov	r2, r3
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	f7fe fe78 	bl	8000350 <__aeabi_uldivmod>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4613      	mov	r3, r2
 8001666:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001668:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	3301      	adds	r3, #1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	61bb      	str	r3, [r7, #24]
      break;
 8001682:	e0b2      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001684:	4b5c      	ldr	r3, [pc, #368]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800168c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168e:	4b5a      	ldr	r3, [pc, #360]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d04d      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169a:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	461a      	mov	r2, r3
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	ea02 0800 	and.w	r8, r2, r0
 80016b2:	ea03 0901 	and.w	r9, r3, r1
 80016b6:	4640      	mov	r0, r8
 80016b8:	4649      	mov	r1, r9
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	014b      	lsls	r3, r1, #5
 80016c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016c8:	0142      	lsls	r2, r0, #5
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	ebb0 0008 	subs.w	r0, r0, r8
 80016d2:	eb61 0109 	sbc.w	r1, r1, r9
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	018b      	lsls	r3, r1, #6
 80016e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016e4:	0182      	lsls	r2, r0, #6
 80016e6:	1a12      	subs	r2, r2, r0
 80016e8:	eb63 0301 	sbc.w	r3, r3, r1
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	00d9      	lsls	r1, r3, #3
 80016f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016fa:	00d0      	lsls	r0, r2, #3
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	eb12 0208 	adds.w	r2, r2, r8
 8001704:	eb43 0309 	adc.w	r3, r3, r9
 8001708:	f04f 0000 	mov.w	r0, #0
 800170c:	f04f 0100 	mov.w	r1, #0
 8001710:	0259      	lsls	r1, r3, #9
 8001712:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001716:	0250      	lsls	r0, r2, #9
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	461a      	mov	r2, r3
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	f7fe fe12 	bl	8000350 <__aeabi_uldivmod>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4613      	mov	r3, r2
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	e04a      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	099b      	lsrs	r3, r3, #6
 800173c:	461a      	mov	r2, r3
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	ea02 0400 	and.w	r4, r2, r0
 800174e:	ea03 0501 	and.w	r5, r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001764:	0142      	lsls	r2, r0, #5
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	1b00      	subs	r0, r0, r4
 800176c:	eb61 0105 	sbc.w	r1, r1, r5
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800177e:	0182      	lsls	r2, r0, #6
 8001780:	1a12      	subs	r2, r2, r0
 8001782:	eb63 0301 	sbc.w	r3, r3, r1
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001794:	00d0      	lsls	r0, r2, #3
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	1912      	adds	r2, r2, r4
 800179c:	eb45 0303 	adc.w	r3, r5, r3
 80017a0:	f04f 0000 	mov.w	r0, #0
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	0299      	lsls	r1, r3, #10
 80017aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ae:	0290      	lsls	r0, r2, #10
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	f7fe fdc6 	bl	8000350 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	0f1b      	lsrs	r3, r3, #28
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	61bb      	str	r3, [r7, #24]
      break;
 80017e2:	e002      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetSysClockFreq+0x35c>)
 80017e6:	61bb      	str	r3, [r7, #24]
      break;
 80017e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ea:	69bb      	ldr	r3, [r7, #24]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	007a1200 	.word	0x007a1200

08001804 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e28d      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8083 	beq.w	800192a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001824:	4b94      	ldr	r3, [pc, #592]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d019      	beq.n	8001864 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001830:	4b91      	ldr	r3, [pc, #580]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001838:	2b08      	cmp	r3, #8
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800183c:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001848:	d00c      	beq.n	8001864 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d112      	bne.n	800187c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001862:	d10b      	bne.n	800187c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d05b      	beq.n	8001928 <HAL_RCC_OscConfig+0x124>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d157      	bne.n	8001928 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e25a      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d106      	bne.n	8001894 <HAL_RCC_OscConfig+0x90>
 8001886:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xcc>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0xb4>
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a72      	ldr	r2, [pc, #456]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xcc>
 80018b8:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6b      	ldr	r2, [pc, #428]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f9be 	bl	8000c58 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff f9ba 	bl	8000c58 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e21f      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xdc>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f9aa 	bl	8000c58 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f9a6 	bl	8000c58 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e20b      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x104>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d06f      	beq.n	8001a16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001936:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d017      	beq.n	8001972 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001942:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800194a:	2b08      	cmp	r3, #8
 800194c:	d105      	bne.n	800195a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800194e:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d11c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x186>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e1d3      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4937      	ldr	r1, [pc, #220]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e03a      	b.n	8001a16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x278>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f953 	bl	8000c58 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f94f 	bl	8000c58 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1b4      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4925      	ldr	r1, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x278>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f932 	bl	8000c58 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff f92e 	bl	8000c58 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e193      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d036      	beq.n	8001a90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_RCC_OscConfig+0x27c>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff f912 	bl	8000c58 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff f90e 	bl	8000c58 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e173      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x234>
 8001a56:	e01b      	b.n	8001a90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_OscConfig+0x27c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f8fb 	bl	8000c58 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	e00e      	b.n	8001a84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff f8f7 	bl	8000c58 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d907      	bls.n	8001a84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e15c      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	42470000 	.word	0x42470000
 8001a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ea      	bne.n	8001a66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8097 	beq.w	8001bcc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b7f      	ldr	r3, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a7e      	ldr	r2, [pc, #504]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b7c      	ldr	r3, [pc, #496]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b79      	ldr	r3, [pc, #484]	; (8001cb4 <HAL_RCC_OscConfig+0x4b0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <HAL_RCC_OscConfig+0x4b0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a75      	ldr	r2, [pc, #468]	; (8001cb4 <HAL_RCC_OscConfig+0x4b0>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f8b7 	bl	8000c58 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7ff f8b3 	bl	8000c58 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e118      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <HAL_RCC_OscConfig+0x4b0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x31e>
 8001b14:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a65      	ldr	r2, [pc, #404]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x358>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x340>
 8001b2a:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a60      	ldr	r2, [pc, #384]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x358>
 8001b44:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a59      	ldr	r2, [pc, #356]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f878 	bl	8000c58 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f874 	bl	8000c58 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0d7      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ee      	beq.n	8001b6c <HAL_RCC_OscConfig+0x368>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff f862 	bl	8000c58 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f85e 	bl	8000c58 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0c1      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80ad 	beq.w	8001d30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d060      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d145      	bne.n	8001c76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_RCC_OscConfig+0x4b4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f832 	bl	8000c58 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f82e 	bl	8000c58 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e093      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	071b      	lsls	r3, r3, #28
 8001c42:	491b      	ldr	r1, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x4b4>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f803 	bl	8000c58 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7fe ffff 	bl	8000c58 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e064      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x452>
 8001c74:	e05c      	b.n	8001d30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_RCC_OscConfig+0x4b4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7fe ffec 	bl	8000c58 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c84:	f7fe ffe8 	bl	8000c58 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e04d      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x480>
 8001ca2:	e045      	b.n	8001d30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e040      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_RCC_OscConfig+0x538>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d030      	beq.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d129      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d122      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d119      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	3b01      	subs	r3, #1
 8001d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d10f      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e041      	b.n	8001dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f839 	bl	8001dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 f9d8 	bl	8002134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d001      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e04e      	b.n	8001eaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d022      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e36:	d01d      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d018      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00e      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d111      	bne.n	8001e98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d010      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e96:	e007      	b.n	8001ea8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40010400 	.word	0x40010400
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40001800 	.word	0x40001800

08001ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0202 	mvn.w	r2, #2
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ee 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8e0 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8f1 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0204 	mvn.w	r2, #4
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8b6 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8c7 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0208 	mvn.w	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f89a 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f88c 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f89d 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0210 	mvn.w	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2208      	movs	r2, #8
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f870 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f862 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f873 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fc82 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b80      	cmp	r3, #128	; 0x80
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f902 	bl	8002288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f838 	bl	8002120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8cc 	bl	8002274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a40      	ldr	r2, [pc, #256]	; (8002248 <TIM_Base_SetConfig+0x114>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002152:	d00f      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3d      	ldr	r2, [pc, #244]	; (800224c <TIM_Base_SetConfig+0x118>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00b      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3c      	ldr	r2, [pc, #240]	; (8002250 <TIM_Base_SetConfig+0x11c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3b      	ldr	r2, [pc, #236]	; (8002254 <TIM_Base_SetConfig+0x120>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <TIM_Base_SetConfig+0x124>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d108      	bne.n	8002186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <TIM_Base_SetConfig+0x114>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d027      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2c      	ldr	r2, [pc, #176]	; (800224c <TIM_Base_SetConfig+0x118>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d023      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <TIM_Base_SetConfig+0x11c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <TIM_Base_SetConfig+0x120>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <TIM_Base_SetConfig+0x124>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d017      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a28      	ldr	r2, [pc, #160]	; (800225c <TIM_Base_SetConfig+0x128>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <TIM_Base_SetConfig+0x12c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a26      	ldr	r2, [pc, #152]	; (8002264 <TIM_Base_SetConfig+0x130>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <TIM_Base_SetConfig+0x134>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a24      	ldr	r2, [pc, #144]	; (800226c <TIM_Base_SetConfig+0x138>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <TIM_Base_SetConfig+0x13c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <TIM_Base_SetConfig+0x114>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_Base_SetConfig+0xf8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <TIM_Base_SetConfig+0x124>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	615a      	str	r2, [r3, #20]
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40000c00 	.word	0x40000c00
 8002258:	40010400 	.word	0x40010400
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400
 8002264:	40014800 	.word	0x40014800
 8002268:	40001800 	.word	0x40001800
 800226c:	40001c00 	.word	0x40001c00
 8002270:	40002000 	.word	0x40002000

08002274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 0208 	add.w	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 0208 	add.w	r2, r3, #8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f103 0208 	add.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d103      	bne.n	800235e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e00c      	b.n	8002378 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3308      	adds	r3, #8
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <vListInsert+0x2e>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	d2f6      	bcs.n	8002366 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6892      	ldr	r2, [r2, #8]
 80023c6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6852      	ldr	r2, [r2, #4]
 80023d0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d103      	bne.n	80023e4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1e5a      	subs	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xQueueGenericReset+0x2a>
        __asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	60bb      	str	r3, [r7, #8]
    }
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800242e:	f002 f8c9 	bl	80045c4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	441a      	add	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	3b01      	subs	r3, #1
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	441a      	add	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	22ff      	movs	r2, #255	; 0xff
 800247a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d114      	bne.n	80024ae <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01a      	beq.n	80024c2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3310      	adds	r3, #16
 8002490:	4618      	mov	r0, r3
 8002492:	f001 f91f 	bl	80036d4 <xTaskRemoveFromEventList>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d012      	beq.n	80024c2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <xQueueGenericReset+0xcc>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	e009      	b.n	80024c2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3310      	adds	r3, #16
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fef2 	bl	800229c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3324      	adds	r3, #36	; 0x24
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff feed 	bl	800229c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80024c2:	f002 f8af 	bl	8004624 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	e000ed04 	.word	0xe000ed04

080024d4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	4613      	mov	r3, r2
 80024e0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <xQueueGenericCreate+0x2a>
        __asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	61bb      	str	r3, [r7, #24]
    }
 80024fa:	bf00      	nop
 80024fc:	e7fe      	b.n	80024fc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <xQueueGenericCreate+0x48>
 800250e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d101      	bne.n	8002520 <xQueueGenericCreate+0x4c>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <xQueueGenericCreate+0x4e>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <xQueueGenericCreate+0x68>
        __asm volatile
 8002526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252a:	f383 8811 	msr	BASEPRI, r3
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	617b      	str	r3, [r7, #20]
    }
 8002538:	bf00      	nop
 800253a:	e7fe      	b.n	800253a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002542:	d90a      	bls.n	800255a <xQueueGenericCreate+0x86>
        __asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	613b      	str	r3, [r7, #16]
    }
 8002556:	bf00      	nop
 8002558:	e7fe      	b.n	8002558 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	3350      	adds	r3, #80	; 0x50
 800255e:	4618      	mov	r0, r3
 8002560:	f002 f95c 	bl	800481c <pvPortMalloc>
 8002564:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	3350      	adds	r3, #80	; 0x50
 8002574:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002576:	79fa      	ldrb	r2, [r7, #7]
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f805 	bl	8002592 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002588:	6a3b      	ldr	r3, [r7, #32]
    }
 800258a:	4618      	mov	r0, r3
 800258c:	3728      	adds	r7, #40	; 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d103      	bne.n	80025ae <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e002      	b.n	80025b4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025c0:	2101      	movs	r1, #1
 80025c2:	69b8      	ldr	r0, [r7, #24]
 80025c4:	f7ff ff1e 	bl	8002404 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	2073      	movs	r0, #115	; 0x73
 80025d8:	f003 fd76 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b090      	sub	sp, #64	; 0x40
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025f2:	2300      	movs	r3, #0
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xQueueGenericSend+0x32>
        __asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <xQueueGenericSend+0x40>
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <xQueueGenericSend+0x44>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <xQueueGenericSend+0x46>
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <xQueueGenericSend+0x60>
        __asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002640:	bf00      	nop
 8002642:	e7fe      	b.n	8002642 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d103      	bne.n	8002652 <xQueueGenericSend+0x6e>
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <xQueueGenericSend+0x72>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <xQueueGenericSend+0x74>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <xQueueGenericSend+0x8e>
        __asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	623b      	str	r3, [r7, #32]
    }
 800266e:	bf00      	nop
 8002670:	e7fe      	b.n	8002670 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002672:	f001 f9cf 	bl	8003a14 <xTaskGetSchedulerState>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <xQueueGenericSend+0x9e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <xQueueGenericSend+0xa2>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericSend+0xa4>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <xQueueGenericSend+0xbe>
        __asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	61fb      	str	r3, [r7, #28]
    }
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026a2:	f001 ff8f 	bl	80045c4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <xQueueGenericSend+0xd4>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d136      	bne.n	8002726 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 fa92 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	460b      	mov	r3, r1
 80026ca:	4601      	mov	r1, r0
 80026cc:	205a      	movs	r0, #90	; 0x5a
 80026ce:	f003 fd71 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d8:	f000 fa78 	bl	8002bcc <prvCopyDataToQueue>
 80026dc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d010      	beq.n	8002708 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	3324      	adds	r3, #36	; 0x24
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fff2 	bl	80036d4 <xTaskRemoveFromEventList>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d013      	beq.n	800271e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80026f6:	4b4d      	ldr	r3, [pc, #308]	; (800282c <xQueueGenericSend+0x248>)
 80026f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	e00a      	b.n	800271e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <xQueueGenericSend+0x248>)
 8002710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800271e:	f001 ff81 	bl	8004624 <vPortExitCritical>
                return pdPASS;
 8002722:	2301      	movs	r3, #1
 8002724:	e07d      	b.n	8002822 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d110      	bne.n	800274e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800272c:	f001 ff7a 	bl	8004624 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	4618      	mov	r0, r3
 8002734:	f004 fa56 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	460b      	mov	r3, r1
 8002742:	4601      	mov	r1, r0
 8002744:	205a      	movs	r0, #90	; 0x5a
 8002746:	f003 fd35 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800274a:	2300      	movs	r3, #0
 800274c:	e069      	b.n	8002822 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4618      	mov	r0, r3
 800275a:	f001 f821 	bl	80037a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800275e:	2301      	movs	r3, #1
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002762:	f001 ff5f 	bl	8004624 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002766:	f000 fd6d 	bl	8003244 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800276a:	f001 ff2b 	bl	80045c4 <vPortEnterCritical>
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002774:	b25b      	sxtb	r3, r3
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d103      	bne.n	8002784 <xQueueGenericSend+0x1a0>
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800278a:	b25b      	sxtb	r3, r3
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d103      	bne.n	800279a <xQueueGenericSend+0x1b6>
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279a:	f001 ff43 	bl	8004624 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800279e:	1d3a      	adds	r2, r7, #4
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 f810 	bl	80037cc <xTaskCheckForTimeOut>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d124      	bne.n	80027fc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b4:	f000 fb02 	bl	8002dbc <prvIsQueueFull>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d018      	beq.n	80027f0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	3310      	adds	r3, #16
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 ff32 	bl	8003630 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80027cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ce:	f000 fa8d 	bl	8002cec <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80027d2:	f000 fd45 	bl	8003260 <xTaskResumeAll>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f47f af62 	bne.w	80026a2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <xQueueGenericSend+0x248>)
 80027e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	f3bf 8f4f 	dsb	sy
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	e758      	b.n	80026a2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80027f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f2:	f000 fa7b 	bl	8002cec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027f6:	f000 fd33 	bl	8003260 <xTaskResumeAll>
 80027fa:	e752      	b.n	80026a2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80027fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027fe:	f000 fa75 	bl	8002cec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002802:	f000 fd2d 	bl	8003260 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	4618      	mov	r0, r3
 800280a:	f004 f9eb 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	460b      	mov	r3, r1
 8002818:	4601      	mov	r1, r0
 800281a:	205a      	movs	r0, #90	; 0x5a
 800281c:	f003 fcca 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002820:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002822:	4618      	mov	r0, r3
 8002824:	3738      	adds	r7, #56	; 0x38
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000ed04 	.word	0xe000ed04

08002830 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b090      	sub	sp, #64	; 0x40
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d103      	bne.n	800286c <xQueueGenericSendFromISR+0x3c>
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <xQueueGenericSendFromISR+0x40>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <xQueueGenericSendFromISR+0x42>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002888:	bf00      	nop
 800288a:	e7fe      	b.n	800288a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d103      	bne.n	800289a <xQueueGenericSendFromISR+0x6a>
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <xQueueGenericSendFromISR+0x6e>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <xQueueGenericSendFromISR+0x70>
 800289e:	2300      	movs	r3, #0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	623b      	str	r3, [r7, #32]
    }
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028ba:	f001 ff6f 	bl	800479c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028be:	f3ef 8211 	mrs	r2, BASEPRI
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	61fa      	str	r2, [r7, #28]
 80028d4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80028d6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <xQueueGenericSendFromISR+0xbc>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d148      	bne.n	800297e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 f970 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002904:	4601      	mov	r1, r0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	461a      	mov	r2, r3
 800290a:	2060      	movs	r0, #96	; 0x60
 800290c:	f003 fb82 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002916:	f000 f959 	bl	8002bcc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800291a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002922:	d112      	bne.n	800294a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d025      	beq.n	8002978 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	3324      	adds	r3, #36	; 0x24
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fecf 	bl	80036d4 <xTaskRemoveFromEventList>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01d      	beq.n	8002978 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01a      	beq.n	8002978 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e016      	b.n	8002978 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800294a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800294e:	2b7f      	cmp	r3, #127	; 0x7f
 8002950:	d10a      	bne.n	8002968 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	617b      	str	r3, [r7, #20]
    }
 8002964:	bf00      	nop
 8002966:	e7fe      	b.n	8002966 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800296c:	3301      	adds	r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	b25a      	sxtb	r2, r3
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002978:	2301      	movs	r3, #1
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800297c:	e00b      	b.n	8002996 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	4618      	mov	r0, r3
 8002982:	f004 f92f 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002986:	4601      	mov	r1, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	461a      	mov	r2, r3
 800298c:	2060      	movs	r0, #96	; 0x60
 800298e:	f003 fb41 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002992:	2300      	movs	r3, #0
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002998:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029a0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3740      	adds	r7, #64	; 0x40
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08f      	sub	sp, #60	; 0x3c
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <xQueueReceive+0x30>
        __asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	623b      	str	r3, [r7, #32]
    }
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <xQueueReceive+0x3e>
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <xQueueReceive+0x42>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <xQueueReceive+0x44>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueReceive+0x5e>
        __asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	61fb      	str	r3, [r7, #28]
    }
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a0a:	f001 f803 	bl	8003a14 <xTaskGetSchedulerState>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <xQueueReceive+0x6e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <xQueueReceive+0x72>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <xQueueReceive+0x74>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <xQueueReceive+0x8e>
        __asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	61bb      	str	r3, [r7, #24]
    }
 8002a36:	bf00      	nop
 8002a38:	e7fe      	b.n	8002a38 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a3a:	f001 fdc3 	bl	80045c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d02f      	beq.n	8002aaa <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4e:	f000 f927 	bl	8002ca0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 f8c5 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f004 f8c1 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2101      	movs	r1, #1
 8002a68:	9100      	str	r1, [sp, #0]
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	205c      	movs	r0, #92	; 0x5c
 8002a6e:	f003 fba1 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1e5a      	subs	r2, r3, #1
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00f      	beq.n	8002aa2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	3310      	adds	r3, #16
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fe24 	bl	80036d4 <xTaskRemoveFromEventList>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a92:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <xQueueReceive+0x21c>)
 8002a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002aa2:	f001 fdbf 	bl	8004624 <vPortExitCritical>
                return pdPASS;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e08a      	b.n	8002bc0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d113      	bne.n	8002ad8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ab0:	f001 fdb8 	bl	8004624 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 f894 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002abc:	4604      	mov	r4, r0
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f004 f890 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	9100      	str	r1, [sp, #0]
 8002acc:	4621      	mov	r1, r4
 8002ace:	205c      	movs	r0, #92	; 0x5c
 8002ad0:	f003 fb70 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e073      	b.n	8002bc0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fe5c 	bl	80037a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002aec:	f001 fd9a 	bl	8004624 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002af0:	f000 fba8 	bl	8003244 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002af4:	f001 fd66 	bl	80045c4 <vPortEnterCritical>
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002afe:	b25b      	sxtb	r3, r3
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d103      	bne.n	8002b0e <xQueueReceive+0x162>
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d103      	bne.n	8002b24 <xQueueReceive+0x178>
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b24:	f001 fd7e 	bl	8004624 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b28:	1d3a      	adds	r2, r7, #4
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fe4b 	bl	80037cc <xTaskCheckForTimeOut>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d124      	bne.n	8002b86 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3e:	f000 f927 	bl	8002d90 <prvIsQueueEmpty>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	3324      	adds	r3, #36	; 0x24
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fd6d 	bl	8003630 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b58:	f000 f8c8 	bl	8002cec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b5c:	f000 fb80 	bl	8003260 <xTaskResumeAll>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f47f af69 	bne.w	8002a3a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002b68:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <xQueueReceive+0x21c>)
 8002b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	e75f      	b.n	8002a3a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b7c:	f000 f8b6 	bl	8002cec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b80:	f000 fb6e 	bl	8003260 <xTaskResumeAll>
 8002b84:	e759      	b.n	8002a3a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b88:	f000 f8b0 	bl	8002cec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b8c:	f000 fb68 	bl	8003260 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b92:	f000 f8fd 	bl	8002d90 <prvIsQueueEmpty>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f43f af4e 	beq.w	8002a3a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 f81f 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f004 f81b 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	9100      	str	r1, [sp, #0]
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	205c      	movs	r0, #92	; 0x5c
 8002bba:	f003 fafb 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bbe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3734      	adds	r7, #52	; 0x34
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd90      	pop	{r4, r7, pc}
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d14d      	bne.n	8002c8e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 ff2a 	bl	8003a50 <xTaskPriorityDisinherit>
 8002bfc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	e043      	b.n	8002c8e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d119      	bne.n	8002c40 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6858      	ldr	r0, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	461a      	mov	r2, r3
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	f004 f984 	bl	8006f24 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	441a      	add	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d32b      	bcc.n	8002c8e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e026      	b.n	8002c8e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68d8      	ldr	r0, [r3, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	f004 f96a 	bl	8006f24 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	425b      	negs	r3, r3
 8002c5a:	441a      	add	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d207      	bcs.n	8002c7c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	425b      	negs	r3, r3
 8002c76:	441a      	add	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d105      	bne.n	8002c8e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c96:	697b      	ldr	r3, [r7, #20]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d018      	beq.n	8002ce4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	441a      	add	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d303      	bcc.n	8002cd4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68d9      	ldr	r1, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	461a      	mov	r2, r3
 8002cde:	6838      	ldr	r0, [r7, #0]
 8002ce0:	f004 f920 	bl	8006f24 <memcpy>
    }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002cf4:	f001 fc66 	bl	80045c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cfe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d00:	e011      	b.n	8002d26 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3324      	adds	r3, #36	; 0x24
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fce0 	bl	80036d4 <xTaskRemoveFromEventList>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d1a:	f000 fdbd 	bl	8003898 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	dce9      	bgt.n	8002d02 <prvUnlockQueue+0x16>
 8002d2e:	e000      	b.n	8002d32 <prvUnlockQueue+0x46>
                        break;
 8002d30:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002d3a:	f001 fc73 	bl	8004624 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d3e:	f001 fc41 	bl	80045c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d48:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d4a:	e011      	b.n	8002d70 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d012      	beq.n	8002d7a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3310      	adds	r3, #16
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fcbb 	bl	80036d4 <xTaskRemoveFromEventList>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d64:	f000 fd98 	bl	8003898 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	dce9      	bgt.n	8002d4c <prvUnlockQueue+0x60>
 8002d78:	e000      	b.n	8002d7c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d7a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	22ff      	movs	r2, #255	; 0xff
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002d84:	f001 fc4e 	bl	8004624 <vPortExitCritical>
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d98:	f001 fc14 	bl	80045c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e001      	b.n	8002dae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dae:	f001 fc39 	bl	8004624 <vPortExitCritical>

    return xReturn;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dc4:	f001 fbfe 	bl	80045c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d102      	bne.n	8002dda <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e001      	b.n	8002dde <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dde:	f001 fc21 	bl	8004624 <vPortExitCritical>

    return xReturn;
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	e01e      	b.n	8002e3a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <vQueueAddToRegistry+0x60>)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d115      	bne.n	8002e34 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e08:	4910      	ldr	r1, [pc, #64]	; (8002e4c <vQueueAddToRegistry+0x60>)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e12:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <vQueueAddToRegistry+0x60>)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fedf 	bl	8006be4 <SEGGER_SYSVIEW_ShrinkId>
 8002e26:	4601      	mov	r1, r0
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2071      	movs	r0, #113	; 0x71
 8002e2e:	f003 f8f1 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e32:	e006      	b.n	8002e42 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b07      	cmp	r3, #7
 8002e3e:	d9dd      	bls.n	8002dfc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20014424 	.word	0x20014424

08002e50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e60:	f001 fbb0 	bl	80045c4 <vPortEnterCritical>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6a:	b25b      	sxtb	r3, r3
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d103      	bne.n	8002e7a <vQueueWaitForMessageRestricted+0x2a>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d103      	bne.n	8002e90 <vQueueWaitForMessageRestricted+0x40>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e90:	f001 fbc8 	bl	8004624 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3324      	adds	r3, #36	; 0x24
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fbe7 	bl	8003678 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ff1e 	bl	8002cec <prvUnlockQueue>
    }
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	; 0x30
 8002ebc:	af04      	add	r7, sp, #16
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fca5 	bl	800481c <pvPortMalloc>
 8002ed2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00e      	beq.n	8002ef8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002eda:	2058      	movs	r0, #88	; 0x58
 8002edc:	f001 fc9e 	bl	800481c <pvPortMalloc>
 8002ee0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
 8002eee:	e005      	b.n	8002efc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ef0:	6978      	ldr	r0, [r7, #20]
 8002ef2:	f001 fd41 	bl	8004978 <vPortFree>
 8002ef6:	e001      	b.n	8002efc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d013      	beq.n	8002f2a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	2300      	movs	r3, #0
 8002f06:	9303      	str	r3, [sp, #12]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	9302      	str	r3, [sp, #8]
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f80e 	bl	8002f3a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f1e:	69f8      	ldr	r0, [r7, #28]
 8002f20:	f000 f8a2 	bl	8003068 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f24:	2301      	movs	r3, #1
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e002      	b.n	8002f30 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f30:	69bb      	ldr	r3, [r7, #24]
    }
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b088      	sub	sp, #32
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	461a      	mov	r2, r3
 8002f52:	21a5      	movs	r1, #165	; 0xa5
 8002f54:	f003 fff4 	bl	8006f40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f62:	3b01      	subs	r3, #1
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f023 0307 	bic.w	r3, r3, #7
 8002f70:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	617b      	str	r3, [r7, #20]
    }
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01f      	beq.n	8002fd8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	e012      	b.n	8002fc4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	7819      	ldrb	r1, [r3, #0]
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	3334      	adds	r3, #52	; 0x34
 8002fae:	460a      	mov	r2, r1
 8002fb0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b09      	cmp	r3, #9
 8002fc8:	d9e9      	bls.n	8002f9e <prvInitialiseNewTask+0x64>
 8002fca:	e000      	b.n	8002fce <prvInitialiseNewTask+0x94>
            {
                break;
 8002fcc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002fd6:	e003      	b.n	8002fe0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d901      	bls.n	8002fea <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	3304      	adds	r3, #4
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f96b 	bl	80022dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	3318      	adds	r3, #24
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f966 	bl	80022dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003014:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	f1c3 0205 	rsb	r2, r3, #5
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	3350      	adds	r3, #80	; 0x50
 800302a:	2204      	movs	r2, #4
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f003 ff86 	bl	8006f40 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	3354      	adds	r3, #84	; 0x54
 8003038:	2201      	movs	r2, #1
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f003 ff7f 	bl	8006f40 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	69b8      	ldr	r0, [r7, #24]
 8003048:	f001 f90c 	bl	8004264 <pxPortInitialiseStack>
 800304c:	4602      	mov	r2, r0
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800305e:	bf00      	nop
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af02      	add	r7, sp, #8
 800306e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003070:	f001 faa8 	bl	80045c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <prvAddNewTaskToReadyList+0xfc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	4a3a      	ldr	r2, [pc, #232]	; (8003164 <prvAddNewTaskToReadyList+0xfc>)
 800307c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800307e:	4b3a      	ldr	r3, [pc, #232]	; (8003168 <prvAddNewTaskToReadyList+0x100>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003086:	4a38      	ldr	r2, [pc, #224]	; (8003168 <prvAddNewTaskToReadyList+0x100>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800308c:	4b35      	ldr	r3, [pc, #212]	; (8003164 <prvAddNewTaskToReadyList+0xfc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d110      	bne.n	80030b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003094:	f000 fc24 	bl	80038e0 <prvInitialiseTaskLists>
 8003098:	e00d      	b.n	80030b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800309a:	4b34      	ldr	r3, [pc, #208]	; (800316c <prvAddNewTaskToReadyList+0x104>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <prvAddNewTaskToReadyList+0x100>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d802      	bhi.n	80030b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030b0:	4a2d      	ldr	r2, [pc, #180]	; (8003168 <prvAddNewTaskToReadyList+0x100>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030b6:	4b2e      	ldr	r3, [pc, #184]	; (8003170 <prvAddNewTaskToReadyList+0x108>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	4a2c      	ldr	r2, [pc, #176]	; (8003170 <prvAddNewTaskToReadyList+0x108>)
 80030be:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030c0:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <prvAddNewTaskToReadyList+0x108>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <prvAddNewTaskToReadyList+0x94>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 fc61 	bl	8006998 <SEGGER_SYSVIEW_OnTaskCreate>
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	461d      	mov	r5, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461c      	mov	r4, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	1ae3      	subs	r3, r4, r3
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	462b      	mov	r3, r5
 80030f8:	f001 fd4a 	bl	8004b90 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 fcce 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	2201      	movs	r2, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <prvAddNewTaskToReadyList+0x10c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4313      	orrs	r3, r2
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <prvAddNewTaskToReadyList+0x10c>)
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <prvAddNewTaskToReadyList+0x110>)
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7ff f8e2 	bl	80022f6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003132:	f001 fa77 	bl	8004624 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <prvAddNewTaskToReadyList+0x104>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00e      	beq.n	800315c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <prvAddNewTaskToReadyList+0x100>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	429a      	cmp	r2, r3
 800314a:	d207      	bcs.n	800315c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <prvAddNewTaskToReadyList+0x114>)
 800314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bdb0      	pop	{r4, r5, r7, pc}
 8003164:	20000170 	.word	0x20000170
 8003168:	20000098 	.word	0x20000098
 800316c:	2000017c 	.word	0x2000017c
 8003170:	2000018c 	.word	0x2000018c
 8003174:	20000178 	.word	0x20000178
 8003178:	2000009c 	.word	0x2000009c
 800317c:	e000ed04 	.word	0xe000ed04

08003180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003186:	4b27      	ldr	r3, [pc, #156]	; (8003224 <vTaskStartScheduler+0xa4>)
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2300      	movs	r3, #0
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2300      	movs	r3, #0
 8003190:	2282      	movs	r2, #130	; 0x82
 8003192:	4925      	ldr	r1, [pc, #148]	; (8003228 <vTaskStartScheduler+0xa8>)
 8003194:	4825      	ldr	r0, [pc, #148]	; (800322c <vTaskStartScheduler+0xac>)
 8003196:	f7ff fe8f 	bl	8002eb8 <xTaskCreate>
 800319a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d102      	bne.n	80031a8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80031a2:	f000 fd4d 	bl	8003c40 <xTimerCreateTimerTask>
 80031a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d124      	bne.n	80031f8 <vTaskStartScheduler+0x78>
        __asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	60bb      	str	r3, [r7, #8]
    }
 80031c0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <vTaskStartScheduler+0xb0>)
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295
 80031c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <vTaskStartScheduler+0xb4>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <vTaskStartScheduler+0xb8>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031d6:	4b19      	ldr	r3, [pc, #100]	; (800323c <vTaskStartScheduler+0xbc>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <vTaskStartScheduler+0xa4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d102      	bne.n	80031e8 <vTaskStartScheduler+0x68>
 80031e2:	f003 fbbd 	bl	8006960 <SEGGER_SYSVIEW_OnIdle>
 80031e6:	e004      	b.n	80031f2 <vTaskStartScheduler+0x72>
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <vTaskStartScheduler+0xbc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fc15 	bl	8006a1c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80031f2:	f001 f8c7 	bl	8004384 <xPortStartScheduler>
 80031f6:	e00e      	b.n	8003216 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d10a      	bne.n	8003216 <vTaskStartScheduler+0x96>
        __asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	607b      	str	r3, [r7, #4]
    }
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <vTaskStartScheduler+0xc0>)
 8003218:	681b      	ldr	r3, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000194 	.word	0x20000194
 8003228:	08008008 	.word	0x08008008
 800322c:	080038b1 	.word	0x080038b1
 8003230:	20000190 	.word	0x20000190
 8003234:	2000017c 	.word	0x2000017c
 8003238:	20000174 	.word	0x20000174
 800323c:	20000098 	.word	0x20000098
 8003240:	2000000c 	.word	0x2000000c

08003244 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <vTaskSuspendAll+0x18>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	4a03      	ldr	r2, [pc, #12]	; (800325c <vTaskSuspendAll+0x18>)
 8003250:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	20000198 	.word	0x20000198

08003260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800326e:	4b43      	ldr	r3, [pc, #268]	; (800337c <xTaskResumeAll+0x11c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <xTaskResumeAll+0x2c>
        __asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	603b      	str	r3, [r7, #0]
    }
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800328c:	f001 f99a 	bl	80045c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003290:	4b3a      	ldr	r3, [pc, #232]	; (800337c <xTaskResumeAll+0x11c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3b01      	subs	r3, #1
 8003296:	4a39      	ldr	r2, [pc, #228]	; (800337c <xTaskResumeAll+0x11c>)
 8003298:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <xTaskResumeAll+0x11c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d165      	bne.n	800336e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <xTaskResumeAll+0x120>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d061      	beq.n	800336e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032aa:	e032      	b.n	8003312 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ac:	4b35      	ldr	r3, [pc, #212]	; (8003384 <xTaskResumeAll+0x124>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3318      	adds	r3, #24
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f879 	bl	80023b0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3304      	adds	r3, #4
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff f874 	bl	80023b0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fbe8 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	2201      	movs	r2, #1
 80032d6:	409a      	lsls	r2, r3
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <xTaskResumeAll+0x128>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <xTaskResumeAll+0x128>)
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4a27      	ldr	r2, [pc, #156]	; (800338c <xTaskResumeAll+0x12c>)
 80032f0:	441a      	add	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f7fe fffc 	bl	80022f6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <xTaskResumeAll+0x130>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	429a      	cmp	r2, r3
 800330a:	d302      	bcc.n	8003312 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <xTaskResumeAll+0x134>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <xTaskResumeAll+0x124>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1c8      	bne.n	80032ac <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003320:	f000 fb5c 	bl	80039dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003324:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <xTaskResumeAll+0x138>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003330:	f000 f858 	bl	80033e4 <xTaskIncrementTick>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <xTaskResumeAll+0x134>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f1      	bne.n	8003330 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <xTaskResumeAll+0x138>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <xTaskResumeAll+0x134>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800335a:	2301      	movs	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800335e:	4b0f      	ldr	r3, [pc, #60]	; (800339c <xTaskResumeAll+0x13c>)
 8003360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800336e:	f001 f959 	bl	8004624 <vPortExitCritical>

    return xAlreadyYielded;
 8003372:	68bb      	ldr	r3, [r7, #8]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000198 	.word	0x20000198
 8003380:	20000170 	.word	0x20000170
 8003384:	20000130 	.word	0x20000130
 8003388:	20000178 	.word	0x20000178
 800338c:	2000009c 	.word	0x2000009c
 8003390:	20000098 	.word	0x20000098
 8003394:	20000184 	.word	0x20000184
 8003398:	20000180 	.word	0x20000180
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <xTaskGetTickCount+0x1c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033ac:	687b      	ldr	r3, [r7, #4]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000174 	.word	0x20000174

080033c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033c6:	f001 f9e9 	bl	800479c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <xTaskGetTickCountFromISR+0x20>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033d4:	683b      	ldr	r3, [r7, #0]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000174 	.word	0x20000174

080033e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ee:	4b50      	ldr	r3, [pc, #320]	; (8003530 <xTaskIncrementTick+0x14c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 8092 	bne.w	800351c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033f8:	4b4e      	ldr	r3, [pc, #312]	; (8003534 <xTaskIncrementTick+0x150>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003400:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <xTaskIncrementTick+0x150>)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d120      	bne.n	800344e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800340c:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <xTaskIncrementTick+0x154>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <xTaskIncrementTick+0x48>
        __asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	603b      	str	r3, [r7, #0]
    }
 8003428:	bf00      	nop
 800342a:	e7fe      	b.n	800342a <xTaskIncrementTick+0x46>
 800342c:	4b42      	ldr	r3, [pc, #264]	; (8003538 <xTaskIncrementTick+0x154>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	4b42      	ldr	r3, [pc, #264]	; (800353c <xTaskIncrementTick+0x158>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <xTaskIncrementTick+0x154>)
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4a40      	ldr	r2, [pc, #256]	; (800353c <xTaskIncrementTick+0x158>)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <xTaskIncrementTick+0x15c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	4a3e      	ldr	r2, [pc, #248]	; (8003540 <xTaskIncrementTick+0x15c>)
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	f000 fac7 	bl	80039dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800344e:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <xTaskIncrementTick+0x160>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d34c      	bcc.n	80034f2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003458:	4b37      	ldr	r3, [pc, #220]	; (8003538 <xTaskIncrementTick+0x154>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003462:	4b38      	ldr	r3, [pc, #224]	; (8003544 <xTaskIncrementTick+0x160>)
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	601a      	str	r2, [r3, #0]
                    break;
 800346a:	e042      	b.n	80034f2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	4b32      	ldr	r3, [pc, #200]	; (8003538 <xTaskIncrementTick+0x154>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d203      	bcs.n	800348c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003484:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <xTaskIncrementTick+0x160>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800348a:	e032      	b.n	80034f2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3304      	adds	r3, #4
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe ff8d 	bl	80023b0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3318      	adds	r3, #24
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe ff84 	bl	80023b0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 faf8 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	2201      	movs	r2, #1
 80034b6:	409a      	lsls	r2, r3
 80034b8:	4b23      	ldr	r3, [pc, #140]	; (8003548 <xTaskIncrementTick+0x164>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	4a22      	ldr	r2, [pc, #136]	; (8003548 <xTaskIncrementTick+0x164>)
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <xTaskIncrementTick+0x168>)
 80034d0:	441a      	add	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f7fe ff0c 	bl	80022f6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <xTaskIncrementTick+0x16c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d3b5      	bcc.n	8003458 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034f0:	e7b2      	b.n	8003458 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <xTaskIncrementTick+0x16c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	4914      	ldr	r1, [pc, #80]	; (800354c <xTaskIncrementTick+0x168>)
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d901      	bls.n	800350e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800350a:	2301      	movs	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <xTaskIncrementTick+0x170>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003516:	2301      	movs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e004      	b.n	8003526 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <xTaskIncrementTick+0x174>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <xTaskIncrementTick+0x174>)
 8003524:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003526:	697b      	ldr	r3, [r7, #20]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000198 	.word	0x20000198
 8003534:	20000174 	.word	0x20000174
 8003538:	20000128 	.word	0x20000128
 800353c:	2000012c 	.word	0x2000012c
 8003540:	20000188 	.word	0x20000188
 8003544:	20000190 	.word	0x20000190
 8003548:	20000178 	.word	0x20000178
 800354c:	2000009c 	.word	0x2000009c
 8003550:	20000098 	.word	0x20000098
 8003554:	20000184 	.word	0x20000184
 8003558:	20000180 	.word	0x20000180

0800355c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <vTaskSwitchContext+0xbc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <vTaskSwitchContext+0xc0>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003570:	e04d      	b.n	800360e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003572:	4b2a      	ldr	r3, [pc, #168]	; (800361c <vTaskSwitchContext+0xc0>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003578:	4b29      	ldr	r3, [pc, #164]	; (8003620 <vTaskSwitchContext+0xc4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003586:	7afb      	ldrb	r3, [r7, #11]
 8003588:	f1c3 031f 	rsb	r3, r3, #31
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	4925      	ldr	r1, [pc, #148]	; (8003624 <vTaskSwitchContext+0xc8>)
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	607b      	str	r3, [r7, #4]
    }
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <vTaskSwitchContext+0x5a>
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <vTaskSwitchContext+0xc8>)
 80035c4:	4413      	add	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	3308      	adds	r3, #8
 80035da:	429a      	cmp	r2, r3
 80035dc:	d104      	bne.n	80035e8 <vTaskSwitchContext+0x8c>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <vTaskSwitchContext+0xcc>)
 80035f0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <vTaskSwitchContext+0xcc>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <vTaskSwitchContext+0xd0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d102      	bne.n	8003604 <vTaskSwitchContext+0xa8>
 80035fe:	f003 f9af 	bl	8006960 <SEGGER_SYSVIEW_OnIdle>
}
 8003602:	e004      	b.n	800360e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <vTaskSwitchContext+0xcc>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f003 fa07 	bl	8006a1c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000198 	.word	0x20000198
 800361c:	20000184 	.word	0x20000184
 8003620:	20000178 	.word	0x20000178
 8003624:	2000009c 	.word	0x2000009c
 8003628:	20000098 	.word	0x20000098
 800362c:	20000194 	.word	0x20000194

08003630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10a      	bne.n	8003656 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	60fb      	str	r3, [r7, #12]
    }
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <vTaskPlaceOnEventList+0x44>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3318      	adds	r3, #24
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe fe6d 	bl	800233e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003664:	2101      	movs	r1, #1
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f000 fa72 	bl	8003b50 <prvAddCurrentTaskToDelayedList>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000098 	.word	0x20000098

08003678 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	617b      	str	r3, [r7, #20]
    }
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <vTaskPlaceOnEventListRestricted+0x58>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3318      	adds	r3, #24
 80036a6:	4619      	mov	r1, r3
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7fe fe24 	bl	80022f6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
 80036b8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80036ba:	2024      	movs	r0, #36	; 0x24
 80036bc:	f002 fc50 	bl	8005f60 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	68b8      	ldr	r0, [r7, #8]
 80036c4:	f000 fa44 	bl	8003b50 <prvAddCurrentTaskToDelayedList>
    }
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000098 	.word	0x20000098

080036d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	60fb      	str	r3, [r7, #12]
    }
 80036fc:	bf00      	nop
 80036fe:	e7fe      	b.n	80036fe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	3318      	adds	r3, #24
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fe53 	bl	80023b0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800370a:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <xTaskRemoveFromEventList+0xb4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d120      	bne.n	8003754 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	3304      	adds	r3, #4
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fe4a 	bl	80023b0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4618      	mov	r0, r3
 8003720:	f003 f9be 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	2201      	movs	r2, #1
 800372a:	409a      	lsls	r2, r3
 800372c:	4b17      	ldr	r3, [pc, #92]	; (800378c <xTaskRemoveFromEventList+0xb8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4313      	orrs	r3, r2
 8003732:	4a16      	ldr	r2, [pc, #88]	; (800378c <xTaskRemoveFromEventList+0xb8>)
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <xTaskRemoveFromEventList+0xbc>)
 8003744:	441a      	add	r2, r3
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	3304      	adds	r3, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4610      	mov	r0, r2
 800374e:	f7fe fdd2 	bl	80022f6 <vListInsertEnd>
 8003752:	e005      	b.n	8003760 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	3318      	adds	r3, #24
 8003758:	4619      	mov	r1, r3
 800375a:	480e      	ldr	r0, [pc, #56]	; (8003794 <xTaskRemoveFromEventList+0xc0>)
 800375c:	f7fe fdcb 	bl	80022f6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <xTaskRemoveFromEventList+0xc4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	429a      	cmp	r2, r3
 800376c:	d905      	bls.n	800377a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800376e:	2301      	movs	r3, #1
 8003770:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <xTaskRemoveFromEventList+0xc8>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e001      	b.n	800377e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800377e:	697b      	ldr	r3, [r7, #20]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000198 	.word	0x20000198
 800378c:	20000178 	.word	0x20000178
 8003790:	2000009c 	.word	0x2000009c
 8003794:	20000130 	.word	0x20000130
 8003798:	20000098 	.word	0x20000098
 800379c:	20000184 	.word	0x20000184

080037a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <vTaskInternalSetTimeOutState+0x24>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <vTaskInternalSetTimeOutState+0x28>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20000188 	.word	0x20000188
 80037c8:	20000174 	.word	0x20000174

080037cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	613b      	str	r3, [r7, #16]
    }
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	60fb      	str	r3, [r7, #12]
    }
 800380a:	bf00      	nop
 800380c:	e7fe      	b.n	800380c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800380e:	f000 fed9 	bl	80045c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003812:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <xTaskCheckForTimeOut+0xc4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d102      	bne.n	8003832 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e026      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <xTaskCheckForTimeOut+0xc8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d00a      	beq.n	8003854 <xTaskCheckForTimeOut+0x88>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	429a      	cmp	r2, r3
 8003846:	d305      	bcc.n	8003854 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003848:	2301      	movs	r3, #1
 800384a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e015      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	429a      	cmp	r2, r3
 800385c:	d20b      	bcs.n	8003876 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	1ad2      	subs	r2, r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff98 	bl	80037a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e004      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800387c:	2301      	movs	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003880:	f000 fed0 	bl	8004624 <vPortExitCritical>

    return xReturn;
 8003884:	69fb      	ldr	r3, [r7, #28]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000174 	.word	0x20000174
 8003894:	20000188 	.word	0x20000188

08003898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <vTaskMissedYield+0x14>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	20000184 	.word	0x20000184

080038b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038b8:	f000 f852 	bl	8003960 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <prvIdleTask+0x28>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d9f9      	bls.n	80038b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <prvIdleTask+0x2c>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038d4:	e7f0      	b.n	80038b8 <prvIdleTask+0x8>
 80038d6:	bf00      	nop
 80038d8:	2000009c 	.word	0x2000009c
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	e00c      	b.n	8003906 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <prvInitialiseTaskLists+0x60>)
 80038f8:	4413      	add	r3, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fcce 	bl	800229c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3301      	adds	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d9ef      	bls.n	80038ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800390c:	480d      	ldr	r0, [pc, #52]	; (8003944 <prvInitialiseTaskLists+0x64>)
 800390e:	f7fe fcc5 	bl	800229c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <prvInitialiseTaskLists+0x68>)
 8003914:	f7fe fcc2 	bl	800229c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003918:	480c      	ldr	r0, [pc, #48]	; (800394c <prvInitialiseTaskLists+0x6c>)
 800391a:	f7fe fcbf 	bl	800229c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800391e:	480c      	ldr	r0, [pc, #48]	; (8003950 <prvInitialiseTaskLists+0x70>)
 8003920:	f7fe fcbc 	bl	800229c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003924:	480b      	ldr	r0, [pc, #44]	; (8003954 <prvInitialiseTaskLists+0x74>)
 8003926:	f7fe fcb9 	bl	800229c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <prvInitialiseTaskLists+0x78>)
 800392c:	4a05      	ldr	r2, [pc, #20]	; (8003944 <prvInitialiseTaskLists+0x64>)
 800392e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <prvInitialiseTaskLists+0x7c>)
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <prvInitialiseTaskLists+0x68>)
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000009c 	.word	0x2000009c
 8003944:	20000100 	.word	0x20000100
 8003948:	20000114 	.word	0x20000114
 800394c:	20000130 	.word	0x20000130
 8003950:	20000144 	.word	0x20000144
 8003954:	2000015c 	.word	0x2000015c
 8003958:	20000128 	.word	0x20000128
 800395c:	2000012c 	.word	0x2000012c

08003960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003966:	e019      	b.n	800399c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003968:	f000 fe2c 	bl	80045c4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <prvCheckTasksWaitingTermination+0x50>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fd19 	bl	80023b0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <prvCheckTasksWaitingTermination+0x54>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <prvCheckTasksWaitingTermination+0x54>)
 8003986:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <prvCheckTasksWaitingTermination+0x58>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3b01      	subs	r3, #1
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <prvCheckTasksWaitingTermination+0x58>)
 8003990:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003992:	f000 fe47 	bl	8004624 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f810 	bl	80039bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <prvCheckTasksWaitingTermination+0x58>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e1      	bne.n	8003968 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000144 	.word	0x20000144
 80039b4:	20000170 	.word	0x20000170
 80039b8:	20000158 	.word	0x20000158

080039bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 ffd5 	bl	8004978 <vPortFree>
                vPortFree( pxTCB );
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 ffd2 	bl	8004978 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <prvResetNextTaskUnblockTime+0x30>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d104      	bne.n	80039f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <prvResetNextTaskUnblockTime+0x34>)
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295
 80039f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039f2:	e005      	b.n	8003a00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <prvResetNextTaskUnblockTime+0x30>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <prvResetNextTaskUnblockTime+0x34>)
 80039fe:	6013      	str	r3, [r2, #0]
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000128 	.word	0x20000128
 8003a10:	20000190 	.word	0x20000190

08003a14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <xTaskGetSchedulerState+0x34>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a22:	2301      	movs	r3, #1
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	e008      	b.n	8003a3a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <xTaskGetSchedulerState+0x38>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a30:	2302      	movs	r3, #2
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	e001      	b.n	8003a3a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a3a:	687b      	ldr	r3, [r7, #4]
    }
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	2000017c 	.word	0x2000017c
 8003a4c:	20000198 	.word	0x20000198

08003a50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d068      	beq.n	8003b38 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a66:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <xTaskPriorityDisinherit+0xf4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d00a      	beq.n	8003a86 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	60fb      	str	r3, [r7, #12]
    }
 8003a82:	bf00      	nop
 8003a84:	e7fe      	b.n	8003a84 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	60bb      	str	r3, [r7, #8]
    }
 8003aa0:	bf00      	nop
 8003aa2:	e7fe      	b.n	8003aa2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa8:	1e5a      	subs	r2, r3, #1
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d03e      	beq.n	8003b38 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d13a      	bne.n	8003b38 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fc72 	bl	80023b0 <uxListRemove>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43da      	mvns	r2, r3
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <xTaskPriorityDisinherit+0xf8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <xTaskPriorityDisinherit+0xf8>)
 8003ae6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4619      	mov	r1, r3
 8003aec:	204a      	movs	r0, #74	; 0x4a
 8003aee:	f002 fa55 	bl	8005f9c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	f1c3 0205 	rsb	r2, r3, #5
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <xTaskPriorityDisinherit+0xf8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <xTaskPriorityDisinherit+0xf8>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <xTaskPriorityDisinherit+0xfc>)
 8003b26:	441a      	add	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f7fe fbe1 	bl	80022f6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b38:	697b      	ldr	r3, [r7, #20]
    }
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000098 	.word	0x20000098
 8003b48:	20000178 	.word	0x20000178
 8003b4c:	2000009c 	.word	0x2000009c

08003b50 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b5a:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b60:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fc22 	bl	80023b0 <uxListRemove>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b72:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4013      	ands	r3, r2
 8003b86:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b88:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d110      	bne.n	8003bb4 <prvAddCurrentTaskToDelayedList+0x64>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003b98:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	211b      	movs	r1, #27
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 ffc0 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	4820      	ldr	r0, [pc, #128]	; (8003c30 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003bae:	f7fe fba2 	bl	80022f6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003bb2:	e032      	b.n	8003c1a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d20f      	bcs.n	8003bec <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003bcc:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f002 ffa6 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f7fe fbaa 	bl	800233e <vListInsert>
}
 8003bea:	e016      	b.n	8003c1a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f002 ff96 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7fe fb9a 	bl	800233e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xec>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d202      	bcs.n	8003c1a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c14:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xec>)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6013      	str	r3, [r2, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000174 	.word	0x20000174
 8003c28:	20000098 	.word	0x20000098
 8003c2c:	20000178 	.word	0x20000178
 8003c30:	2000015c 	.word	0x2000015c
 8003c34:	2000012c 	.word	0x2000012c
 8003c38:	20000128 	.word	0x20000128
 8003c3c:	20000190 	.word	0x20000190

08003c40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c4a:	f000 fad5 	bl	80041f8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c4e:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <xTimerCreateTimerTask+0x54>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <xTimerCreateTimerTask+0x58>)
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c64:	490d      	ldr	r1, [pc, #52]	; (8003c9c <xTimerCreateTimerTask+0x5c>)
 8003c66:	480e      	ldr	r0, [pc, #56]	; (8003ca0 <xTimerCreateTimerTask+0x60>)
 8003c68:	f7ff f926 	bl	8002eb8 <xTaskCreate>
 8003c6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	603b      	str	r3, [r7, #0]
    }
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c8a:	687b      	ldr	r3, [r7, #4]
    }
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200001cc 	.word	0x200001cc
 8003c98:	200001d0 	.word	0x200001d0
 8003c9c:	08008010 	.word	0x08008010
 8003ca0:	08003dd9 	.word	0x08003dd9

08003ca4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	; 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	623b      	str	r3, [r7, #32]
    }
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003cd2:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <xTimerGenericCommand+0x98>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d02a      	beq.n	8003d30 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	dc18      	bgt.n	8003d1e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cec:	f7ff fe92 	bl	8003a14 <xTaskGetSchedulerState>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d109      	bne.n	8003d0a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <xTimerGenericCommand+0x98>)
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	f107 0114 	add.w	r1, r7, #20
 8003cfe:	2300      	movs	r3, #0
 8003d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d02:	f7fe fc6f 	bl	80025e4 <xQueueGenericSend>
 8003d06:	6278      	str	r0, [r7, #36]	; 0x24
 8003d08:	e012      	b.n	8003d30 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <xTimerGenericCommand+0x98>)
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	f107 0114 	add.w	r1, r7, #20
 8003d12:	2300      	movs	r3, #0
 8003d14:	2200      	movs	r2, #0
 8003d16:	f7fe fc65 	bl	80025e4 <xQueueGenericSend>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d1c:	e008      	b.n	8003d30 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <xTimerGenericCommand+0x98>)
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	f107 0114 	add.w	r1, r7, #20
 8003d26:	2300      	movs	r3, #0
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	f7fe fd81 	bl	8002830 <xQueueGenericSendFromISR>
 8003d2e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d32:	4618      	mov	r0, r3
 8003d34:	3728      	adds	r7, #40	; 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200001cc 	.word	0x200001cc

08003d40 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <prvProcessExpiredTimer+0x94>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fb29 	bl	80023b0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d022      	beq.n	8003db2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	18d1      	adds	r1, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	6978      	ldr	r0, [r7, #20]
 8003d7a:	f000 f8d1 	bl	8003f20 <prvInsertTimerInActiveList>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01f      	beq.n	8003dc4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d84:	2300      	movs	r3, #0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7ff ff88 	bl	8003ca4 <xTimerGenericCommand>
 8003d94:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d113      	bne.n	8003dc4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	60fb      	str	r3, [r7, #12]
    }
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	6978      	ldr	r0, [r7, #20]
 8003dca:	4798      	blx	r3
    }
 8003dcc:	bf00      	nop
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200001c4 	.word	0x200001c4

08003dd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003de0:	f107 0308 	add.w	r3, r7, #8
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f857 	bl	8003e98 <prvGetNextExpireTime>
 8003dea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4619      	mov	r1, r3
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f803 	bl	8003dfc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003df6:	f000 f8d5 	bl	8003fa4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dfa:	e7f1      	b.n	8003de0 <prvTimerTask+0x8>

08003dfc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e06:	f7ff fa1d 	bl	8003244 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f866 	bl	8003ee0 <prvSampleTimeNow>
 8003e14:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d130      	bne.n	8003e7e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <prvProcessTimerOrBlockTask+0x3c>
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d806      	bhi.n	8003e38 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e2a:	f7ff fa19 	bl	8003260 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff85 	bl	8003d40 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e36:	e024      	b.n	8003e82 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <prvProcessTimerOrBlockTask+0x90>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <prvProcessTimerOrBlockTask+0x50>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <prvProcessTimerOrBlockTask+0x52>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <prvProcessTimerOrBlockTask+0x94>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f7fe fff7 	bl	8002e50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e62:	f7ff f9fd 	bl	8003260 <xTaskResumeAll>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <prvProcessTimerOrBlockTask+0x98>)
 8003e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	f3bf 8f6f 	isb	sy
    }
 8003e7c:	e001      	b.n	8003e82 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e7e:	f7ff f9ef 	bl	8003260 <xTaskResumeAll>
    }
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200001c8 	.word	0x200001c8
 8003e90:	200001cc 	.word	0x200001cc
 8003e94:	e000ed04 	.word	0xe000ed04

08003e98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <prvGetNextExpireTime+0x44>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <prvGetNextExpireTime+0x16>
 8003eaa:	2201      	movs	r2, #1
 8003eac:	e000      	b.n	8003eb0 <prvGetNextExpireTime+0x18>
 8003eae:	2200      	movs	r2, #0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <prvGetNextExpireTime+0x44>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e001      	b.n	8003ecc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
    }
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	200001c4 	.word	0x200001c4

08003ee0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ee8:	f7ff fa5a 	bl	80033a0 <xTaskGetTickCount>
 8003eec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <prvSampleTimeNow+0x3c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d205      	bcs.n	8003f04 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ef8:	f000 f91a 	bl	8004130 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e002      	b.n	8003f0a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f0a:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <prvSampleTimeNow+0x3c>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f10:	68fb      	ldr	r3, [r7, #12]
    }
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200001d4 	.word	0x200001d4

08003f20 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d812      	bhi.n	8003f6c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	1ad2      	subs	r2, r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f54:	2301      	movs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e01b      	b.n	8003f92 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <prvInsertTimerInActiveList+0x7c>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f7fe f9ea 	bl	800233e <vListInsert>
 8003f6a:	e012      	b.n	8003f92 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d206      	bcs.n	8003f82 <prvInsertTimerInActiveList+0x62>
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d302      	bcc.n	8003f82 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e007      	b.n	8003f92 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f82:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <prvInsertTimerInActiveList+0x80>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7fe f9d6 	bl	800233e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f92:	697b      	ldr	r3, [r7, #20]
    }
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200001c8 	.word	0x200001c8
 8003fa0:	200001c4 	.word	0x200001c4

08003fa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003faa:	e0ae      	b.n	800410a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f2c0 80aa 	blt.w	8004108 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe f9f3 	bl	80023b0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ff87 	bl	8003ee0 <prvSampleTimeNow>
 8003fd2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b09      	cmp	r3, #9
 8003fd8:	f200 8097 	bhi.w	800410a <prvProcessReceivedCommands+0x166>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <prvProcessReceivedCommands+0x40>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	0800400d 	.word	0x0800400d
 8003ff0:	08004081 	.word	0x08004081
 8003ff4:	08004095 	.word	0x08004095
 8003ff8:	080040df 	.word	0x080040df
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	0800400d 	.word	0x0800400d
 8004004:	08004081 	.word	0x08004081
 8004008:	08004095 	.word	0x08004095
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	18d1      	adds	r1, r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800402c:	f7ff ff78 	bl	8003f20 <prvInsertTimerInActiveList>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d069      	beq.n	800410a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800403c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d05e      	beq.n	800410a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	441a      	add	r2, r3
 8004054:	2300      	movs	r3, #0
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	2100      	movs	r1, #0
 800405c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800405e:	f7ff fe21 	bl	8003ca4 <xTimerGenericCommand>
 8004062:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d14f      	bne.n	800410a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	61bb      	str	r3, [r7, #24]
    }
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	b2da      	uxtb	r2, r3
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004092:	e03a      	b.n	800410a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <prvProcessReceivedCommands+0x126>
        __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	617b      	str	r3, [r7, #20]
    }
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	18d1      	adds	r1, r2, r3
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040d8:	f7ff ff22 	bl	8003f20 <prvInsertTimerInActiveList>
                        break;
 80040dc:	e015      	b.n	800410a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80040ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ee:	f000 fc43 	bl	8004978 <vPortFree>
 80040f2:	e00a      	b.n	800410a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004106:	e000      	b.n	800410a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004108:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <prvProcessReceivedCommands+0x188>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f107 0108 	add.w	r1, r7, #8
 8004112:	2200      	movs	r2, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fc49 	bl	80029ac <xQueueReceive>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	f47f af45 	bne.w	8003fac <prvProcessReceivedCommands+0x8>
        }
    }
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	3728      	adds	r7, #40	; 0x28
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200001cc 	.word	0x200001cc

08004130 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004136:	e048      	b.n	80041ca <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004138:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <prvSwitchTimerLists+0xc0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004142:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <prvSwitchTimerLists+0xc0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3304      	adds	r3, #4
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe f92d 	bl	80023b0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02e      	beq.n	80041ca <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	429a      	cmp	r2, r3
 800417c:	d90e      	bls.n	800419c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800418a:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <prvSwitchTimerLists+0xc0>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3304      	adds	r3, #4
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f7fe f8d2 	bl	800233e <vListInsert>
 800419a:	e016      	b.n	80041ca <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800419c:	2300      	movs	r3, #0
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2300      	movs	r3, #0
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	2100      	movs	r1, #0
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff fd7c 	bl	8003ca4 <xTimerGenericCommand>
 80041ac:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <prvSwitchTimerLists+0x9a>
        __asm volatile
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	603b      	str	r3, [r7, #0]
    }
 80041c6:	bf00      	nop
 80041c8:	e7fe      	b.n	80041c8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <prvSwitchTimerLists+0xc0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1b1      	bne.n	8004138 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <prvSwitchTimerLists+0xc0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <prvSwitchTimerLists+0xc4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <prvSwitchTimerLists+0xc0>)
 80041e0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80041e2:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <prvSwitchTimerLists+0xc4>)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	6013      	str	r3, [r2, #0]
    }
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	200001c4 	.word	0x200001c4
 80041f4:	200001c8 	.word	0x200001c8

080041f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041fc:	f000 f9e2 	bl	80045c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <prvCheckForValidListAndQueue+0x54>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d11d      	bne.n	8004244 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004208:	4811      	ldr	r0, [pc, #68]	; (8004250 <prvCheckForValidListAndQueue+0x58>)
 800420a:	f7fe f847 	bl	800229c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800420e:	4811      	ldr	r0, [pc, #68]	; (8004254 <prvCheckForValidListAndQueue+0x5c>)
 8004210:	f7fe f844 	bl	800229c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <prvCheckForValidListAndQueue+0x60>)
 8004216:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <prvCheckForValidListAndQueue+0x58>)
 8004218:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <prvCheckForValidListAndQueue+0x64>)
 800421c:	4a0d      	ldr	r2, [pc, #52]	; (8004254 <prvCheckForValidListAndQueue+0x5c>)
 800421e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004220:	2200      	movs	r2, #0
 8004222:	210c      	movs	r1, #12
 8004224:	200a      	movs	r0, #10
 8004226:	f7fe f955 	bl	80024d4 <xQueueGenericCreate>
 800422a:	4603      	mov	r3, r0
 800422c:	4a07      	ldr	r2, [pc, #28]	; (800424c <prvCheckForValidListAndQueue+0x54>)
 800422e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <prvCheckForValidListAndQueue+0x54>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <prvCheckForValidListAndQueue+0x54>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4908      	ldr	r1, [pc, #32]	; (8004260 <prvCheckForValidListAndQueue+0x68>)
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe fdd4 	bl	8002dec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004244:	f000 f9ee 	bl	8004624 <vPortExitCritical>
    }
 8004248:	bf00      	nop
 800424a:	bd80      	pop	{r7, pc}
 800424c:	200001cc 	.word	0x200001cc
 8004250:	2000019c 	.word	0x2000019c
 8004254:	200001b0 	.word	0x200001b0
 8004258:	200001c4 	.word	0x200001c4
 800425c:	200001c8 	.word	0x200001c8
 8004260:	08008018 	.word	0x08008018

08004264 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3b04      	subs	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800427c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b04      	subs	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3b04      	subs	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <pxPortInitialiseStack+0x64>)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3b14      	subs	r3, #20
 800429e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3b04      	subs	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f06f 0202 	mvn.w	r2, #2
 80042b2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3b20      	subs	r3, #32
 80042b8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042ba:	68fb      	ldr	r3, [r7, #12]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	080042cd 	.word	0x080042cd

080042cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <prvTaskExitError+0x54>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d00a      	beq.n	80042f6 <prvTaskExitError+0x2a>
        __asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	60fb      	str	r3, [r7, #12]
    }
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <prvTaskExitError+0x28>
        __asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60bb      	str	r3, [r7, #8]
    }
 8004308:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800430a:	bf00      	nop
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0fc      	beq.n	800430c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	20000010 	.word	0x20000010
	...

08004330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <pxCurrentTCBConst2>)
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	6808      	ldr	r0, [r1, #0]
 8004336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433a:	f380 8809 	msr	PSP, r0
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f380 8811 	msr	BASEPRI, r0
 800434a:	4770      	bx	lr
 800434c:	f3af 8000 	nop.w

08004350 <pxCurrentTCBConst2>:
 8004350:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop

08004358 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004358:	4808      	ldr	r0, [pc, #32]	; (800437c <prvPortStartFirstTask+0x24>)
 800435a:	6800      	ldr	r0, [r0, #0]
 800435c:	6800      	ldr	r0, [r0, #0]
 800435e:	f380 8808 	msr	MSP, r0
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f380 8814 	msr	CONTROL, r0
 800436a:	b662      	cpsie	i
 800436c:	b661      	cpsie	f
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	df00      	svc	0
 8004378:	bf00      	nop
 800437a:	0000      	.short	0x0000
 800437c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop

08004384 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800438a:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <xPortStartScheduler+0x120>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a46      	ldr	r2, [pc, #280]	; (80044a8 <xPortStartScheduler+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10a      	bne.n	80043aa <xPortStartScheduler+0x26>
        __asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	613b      	str	r3, [r7, #16]
    }
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043aa:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <xPortStartScheduler+0x120>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3f      	ldr	r2, [pc, #252]	; (80044ac <xPortStartScheduler+0x128>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10a      	bne.n	80043ca <xPortStartScheduler+0x46>
        __asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	60fb      	str	r3, [r7, #12]
    }
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ca:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <xPortStartScheduler+0x12c>)
 80043cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	22ff      	movs	r2, #255	; 0xff
 80043da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <xPortStartScheduler+0x130>)
 80043f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <xPortStartScheduler+0x134>)
 80043f4:	2207      	movs	r2, #7
 80043f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043f8:	e009      	b.n	800440e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80043fa:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <xPortStartScheduler+0x134>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3b01      	subs	r3, #1
 8004400:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <xPortStartScheduler+0x134>)
 8004402:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	b2db      	uxtb	r3, r3
 800440c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b80      	cmp	r3, #128	; 0x80
 8004418:	d0ef      	beq.n	80043fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800441a:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <xPortStartScheduler+0x134>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f1c3 0307 	rsb	r3, r3, #7
 8004422:	2b04      	cmp	r3, #4
 8004424:	d00a      	beq.n	800443c <xPortStartScheduler+0xb8>
        __asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60bb      	str	r3, [r7, #8]
    }
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800443c:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <xPortStartScheduler+0x134>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <xPortStartScheduler+0x134>)
 8004444:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004446:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <xPortStartScheduler+0x134>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800444e:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <xPortStartScheduler+0x134>)
 8004450:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800445a:	4b18      	ldr	r3, [pc, #96]	; (80044bc <xPortStartScheduler+0x138>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a17      	ldr	r2, [pc, #92]	; (80044bc <xPortStartScheduler+0x138>)
 8004460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004464:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <xPortStartScheduler+0x138>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a14      	ldr	r2, [pc, #80]	; (80044bc <xPortStartScheduler+0x138>)
 800446c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004470:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004472:	f000 f963 	bl	800473c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004476:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <xPortStartScheduler+0x13c>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800447c:	f000 f982 	bl	8004784 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <xPortStartScheduler+0x140>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <xPortStartScheduler+0x140>)
 8004486:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800448a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800448c:	f7ff ff64 	bl	8004358 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004490:	f7ff f864 	bl	800355c <vTaskSwitchContext>
    prvTaskExitError();
 8004494:	f7ff ff1a 	bl	80042cc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	e000ed00 	.word	0xe000ed00
 80044a8:	410fc271 	.word	0x410fc271
 80044ac:	410fc270 	.word	0x410fc270
 80044b0:	e000e400 	.word	0xe000e400
 80044b4:	200001d8 	.word	0x200001d8
 80044b8:	200001dc 	.word	0x200001dc
 80044bc:	e000ed20 	.word	0xe000ed20
 80044c0:	20000010 	.word	0x20000010
 80044c4:	e000ef34 	.word	0xe000ef34

080044c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044ce:	4b37      	ldr	r3, [pc, #220]	; (80045ac <vInitPrioGroupValue+0xe4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a37      	ldr	r2, [pc, #220]	; (80045b0 <vInitPrioGroupValue+0xe8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10a      	bne.n	80044ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	613b      	str	r3, [r7, #16]
    }
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <vInitPrioGroupValue+0xe4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <vInitPrioGroupValue+0xec>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10a      	bne.n	800450e <vInitPrioGroupValue+0x46>
        __asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60fb      	str	r3, [r7, #12]
    }
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800450e:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <vInitPrioGroupValue+0xf0>)
 8004510:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	22ff      	movs	r2, #255	; 0xff
 800451e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4b22      	ldr	r3, [pc, #136]	; (80045bc <vInitPrioGroupValue+0xf4>)
 8004534:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004536:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <vInitPrioGroupValue+0xf8>)
 8004538:	2207      	movs	r2, #7
 800453a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800453c:	e009      	b.n	8004552 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <vInitPrioGroupValue+0xf8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3b01      	subs	r3, #1
 8004544:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <vInitPrioGroupValue+0xf8>)
 8004546:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b80      	cmp	r3, #128	; 0x80
 800455c:	d0ef      	beq.n	800453e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <vInitPrioGroupValue+0xf8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1c3 0307 	rsb	r3, r3, #7
 8004566:	2b04      	cmp	r3, #4
 8004568:	d00a      	beq.n	8004580 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	60bb      	str	r3, [r7, #8]
    }
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <vInitPrioGroupValue+0xf8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <vInitPrioGroupValue+0xf8>)
 8004588:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <vInitPrioGroupValue+0xf8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004592:	4a0b      	ldr	r2, [pc, #44]	; (80045c0 <vInitPrioGroupValue+0xf8>)
 8004594:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	410fc271 	.word	0x410fc271
 80045b4:	410fc270 	.word	0x410fc270
 80045b8:	e000e400 	.word	0xe000e400
 80045bc:	200001d8 	.word	0x200001d8
 80045c0:	200001dc 	.word	0x200001dc

080045c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
        __asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	607b      	str	r3, [r7, #4]
    }
 80045dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <vPortEnterCritical+0x58>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <vPortEnterCritical+0x58>)
 80045e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <vPortEnterCritical+0x58>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10f      	bne.n	8004610 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <vPortEnterCritical+0x5c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <vPortEnterCritical+0x4c>
        __asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	603b      	str	r3, [r7, #0]
    }
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <vPortEnterCritical+0x4a>
    }
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	20000010 	.word	0x20000010
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <vPortExitCritical+0x50>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <vPortExitCritical+0x24>
        __asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	607b      	str	r3, [r7, #4]
    }
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <vPortExitCritical+0x50>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3b01      	subs	r3, #1
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <vPortExitCritical+0x50>)
 8004650:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <vPortExitCritical+0x50>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <vPortExitCritical+0x42>
 800465a:	2300      	movs	r3, #0
 800465c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f383 8811 	msr	BASEPRI, r3
    }
 8004664:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000010 	.word	0x20000010
	...

08004680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004680:	f3ef 8009 	mrs	r0, PSP
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <pxCurrentTCBConst>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	f01e 0f10 	tst.w	lr, #16
 8004690:	bf08      	it	eq
 8004692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469a:	6010      	str	r0, [r2, #0]
 800469c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046a4:	f380 8811 	msr	BASEPRI, r0
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f7fe ff54 	bl	800355c <vTaskSwitchContext>
 80046b4:	f04f 0000 	mov.w	r0, #0
 80046b8:	f380 8811 	msr	BASEPRI, r0
 80046bc:	bc09      	pop	{r0, r3}
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	6808      	ldr	r0, [r1, #0]
 80046c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c6:	f01e 0f10 	tst.w	lr, #16
 80046ca:	bf08      	it	eq
 80046cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046d0:	f380 8809 	msr	PSP, r0
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	f3af 8000 	nop.w

080046e0 <pxCurrentTCBConst>:
 80046e0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
        __asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	607b      	str	r3, [r7, #4]
    }
 8004700:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004702:	f002 f8b3 	bl	800686c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004706:	f7fe fe6d 	bl	80033e4 <xTaskIncrementTick>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d006      	beq.n	800471e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004710:	f002 f90a 	bl	8006928 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <SysTick_Handler+0x50>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e001      	b.n	8004722 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800471e:	f002 f8e7 	bl	80068f0 <SEGGER_SYSVIEW_RecordExitISR>
 8004722:	2300      	movs	r3, #0
 8004724:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f383 8811 	msr	BASEPRI, r3
    }
 800472c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	e000ed04 	.word	0xe000ed04

0800473c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <vPortSetupTimerInterrupt+0x34>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <vPortSetupTimerInterrupt+0x38>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <vPortSetupTimerInterrupt+0x3c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <vPortSetupTimerInterrupt+0x40>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <vPortSetupTimerInterrupt+0x44>)
 800475a:	3b01      	subs	r3, #1
 800475c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800475e:	4b04      	ldr	r3, [pc, #16]	; (8004770 <vPortSetupTimerInterrupt+0x34>)
 8004760:	2207      	movs	r2, #7
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e010 	.word	0xe000e010
 8004774:	e000e018 	.word	0xe000e018
 8004778:	20000000 	.word	0x20000000
 800477c:	10624dd3 	.word	0x10624dd3
 8004780:	e000e014 	.word	0xe000e014

08004784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004794 <vPortEnableVFP+0x10>
 8004788:	6801      	ldr	r1, [r0, #0]
 800478a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800478e:	6001      	str	r1, [r0, #0]
 8004790:	4770      	bx	lr
 8004792:	0000      	.short	0x0000
 8004794:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop

0800479c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047a2:	f3ef 8305 	mrs	r3, IPSR
 80047a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b0f      	cmp	r3, #15
 80047ac:	d914      	bls.n	80047d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047ae:	4a17      	ldr	r2, [pc, #92]	; (800480c <vPortValidateInterruptPriority+0x70>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <vPortValidateInterruptPriority+0x74>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	7afa      	ldrb	r2, [r7, #11]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d20a      	bcs.n	80047d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	607b      	str	r3, [r7, #4]
    }
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <vPortValidateInterruptPriority+0x78>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <vPortValidateInterruptPriority+0x7c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d90a      	bls.n	80047fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	603b      	str	r3, [r7, #0]
    }
 80047fa:	bf00      	nop
 80047fc:	e7fe      	b.n	80047fc <vPortValidateInterruptPriority+0x60>
    }
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000e3f0 	.word	0xe000e3f0
 8004810:	200001d8 	.word	0x200001d8
 8004814:	e000ed0c 	.word	0xe000ed0c
 8004818:	200001dc 	.word	0x200001dc

0800481c <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004828:	f7fe fd0c 	bl	8003244 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 800482c:	4b4e      	ldr	r3, [pc, #312]	; (8004968 <pvPortMalloc+0x14c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8004834:	f000 f8da 	bl	80049ec <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8004838:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <pvPortMalloc+0x14c>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) && 
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02a      	beq.n	800489a <pvPortMalloc+0x7e>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 8004844:	2308      	movs	r3, #8
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && 
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d223      	bcs.n	800489a <pvPortMalloc+0x7e>
        {
            xWantedSize += heapSTRUCT_SIZE;
 8004852:	2308      	movs	r3, #8
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	607b      	str	r3, [r7, #4]

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f023 0307 	bic.w	r3, r3, #7
 8004862:	3308      	adds	r3, #8
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d214      	bcs.n	8004894 <pvPortMalloc+0x78>
                    > xWantedSize )
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	3308      	adds	r3, #8
 8004872:	607b      	str	r3, [r7, #4]
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d010      	beq.n	80048a0 <pvPortMalloc+0x84>
        __asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	60fb      	str	r3, [r7, #12]
    }
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <pvPortMalloc+0x76>
            }
            else
            {
                xWantedSize = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	607b      	str	r3, [r7, #4]
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004898:	e002      	b.n	80048a0 <pvPortMalloc+0x84>
            }       
        }
        else 
        {
            xWantedSize = 0; 
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e000      	b.n	80048a2 <pvPortMalloc+0x86>
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80048a0:	bf00      	nop
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d057      	beq.n	8004958 <pvPortMalloc+0x13c>
 80048a8:	4b30      	ldr	r3, [pc, #192]	; (800496c <pvPortMalloc+0x150>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d852      	bhi.n	8004958 <pvPortMalloc+0x13c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 80048b2:	4b2f      	ldr	r3, [pc, #188]	; (8004970 <pvPortMalloc+0x154>)
 80048b4:	623b      	str	r3, [r7, #32]
            pxBlock = xStart.pxNextFreeBlock;
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <pvPortMalloc+0x154>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048bc:	e004      	b.n	80048c8 <pvPortMalloc+0xac>
            {
                pxPreviousBlock = pxBlock;
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	623b      	str	r3, [r7, #32]
                pxBlock = pxBlock->pxNextFreeBlock;
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d903      	bls.n	80048da <pvPortMalloc+0xbe>
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f1      	bne.n	80048be <pvPortMalloc+0xa2>
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <pvPortMalloc+0x158>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d03a      	beq.n	8004958 <pvPortMalloc+0x13c>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2208      	movs	r2, #8
 80048e8:	4413      	add	r3, r2
 80048ea:	61fb      	str	r3, [r7, #28]

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	601a      	str	r2, [r3, #0]

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2208      	movs	r2, #8
 80048fe:	0052      	lsls	r2, r2, #1
 8004900:	4293      	cmp	r3, r2
 8004902:	d922      	bls.n	800494a <pvPortMalloc+0x12e>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	617b      	str	r3, [r7, #20]

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	605a      	str	r2, [r3, #4]
                    pxBlock->xBlockSize = xWantedSize;
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	605a      	str	r2, [r3, #4]

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <pvPortMalloc+0x154>)
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	e002      	b.n	8004930 <pvPortMalloc+0x114>
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	429a      	cmp	r2, r3
 800493a:	d8f6      	bhi.n	800492a <pvPortMalloc+0x10e>
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	601a      	str	r2, [r3, #0]
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <pvPortMalloc+0x150>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	4a05      	ldr	r2, [pc, #20]	; (800496c <pvPortMalloc+0x150>)
 8004956:	6013      	str	r3, [r2, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004958:	f7fe fc82 	bl	8003260 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800495c:	69fb      	ldr	r3, [r7, #28]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3728      	adds	r7, #40	; 0x28
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20012df0 	.word	0x20012df0
 800496c:	20000014 	.word	0x20000014
 8004970:	20012de0 	.word	0x20012de0
 8004974:	20012de8 	.word	0x20012de8

08004978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d027      	beq.n	80049da <vPortFree+0x62>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800498a:	2308      	movs	r3, #8
 800498c:	425b      	negs	r3, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4413      	add	r3, r2
 8004992:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	60fb      	str	r3, [r7, #12]

        vTaskSuspendAll();
 8004998:	f7fe fc54 	bl	8003244 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <vPortFree+0x6c>)
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e002      	b.n	80049ae <vPortFree+0x36>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d8f6      	bhi.n	80049a8 <vPortFree+0x30>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <vPortFree+0x70>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4413      	add	r3, r2
 80049d2:	4a05      	ldr	r2, [pc, #20]	; (80049e8 <vPortFree+0x70>)
 80049d4:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 80049d6:	f7fe fc43 	bl	8003260 <xTaskResumeAll>
    }
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20012de0 	.word	0x20012de0
 80049e8:	20000014 	.word	0x20000014

080049ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80049f2:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <prvHeapInit+0x44>)
 80049f4:	f023 0307 	bic.w	r3, r3, #7
 80049f8:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <prvHeapInit+0x48>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <prvHeapInit+0x48>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <prvHeapInit+0x4c>)
 8004a08:	4a0c      	ldr	r2, [pc, #48]	; (8004a3c <prvHeapInit+0x50>)
 8004a0a:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <prvHeapInit+0x4c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <prvHeapInit+0x50>)
 8004a1a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4a06      	ldr	r2, [pc, #24]	; (8004a38 <prvHeapInit+0x4c>)
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	200001e8 	.word	0x200001e8
 8004a34:	20012de0 	.word	0x20012de0
 8004a38:	20012de8 	.word	0x20012de8
 8004a3c:	00012bf8 	.word	0x00012bf8

08004a40 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a44:	4803      	ldr	r0, [pc, #12]	; (8004a54 <_cbSendSystemDesc+0x14>)
 8004a46:	f001 febb 	bl	80067c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a4a:	4803      	ldr	r0, [pc, #12]	; (8004a58 <_cbSendSystemDesc+0x18>)
 8004a4c:	f001 feb8 	bl	80067c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	08008020 	.word	0x08008020
 8004a58:	08008060 	.word	0x08008060

08004a5c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <SEGGER_SYSVIEW_Conf+0x20>)
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <SEGGER_SYSVIEW_Conf+0x20>)
 8004a66:	6819      	ldr	r1, [r3, #0]
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a6a:	4a06      	ldr	r2, [pc, #24]	; (8004a84 <SEGGER_SYSVIEW_Conf+0x28>)
 8004a6c:	f001 fa24 	bl	8005eb8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a70:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a74:	f001 fa64 	bl	8005f40 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a78:	bf00      	nop
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08008100 	.word	0x08008100

08004a88 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	e033      	b.n	8004afc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a94:	491e      	ldr	r1, [pc, #120]	; (8004b10 <_cbSendTaskList+0x88>)
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	491a      	ldr	r1, [pc, #104]	; (8004b10 <_cbSendTaskList+0x88>)
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	4c16      	ldr	r4, [pc, #88]	; (8004b10 <_cbSendTaskList+0x88>)
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4423      	add	r3, r4
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	681c      	ldr	r4, [r3, #0]
 8004ac8:	4d11      	ldr	r5, [pc, #68]	; (8004b10 <_cbSendTaskList+0x88>)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	442b      	add	r3, r5
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	681d      	ldr	r5, [r3, #0]
 8004ada:	4e0d      	ldr	r6, [pc, #52]	; (8004b10 <_cbSendTaskList+0x88>)
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4433      	add	r3, r6
 8004ae8:	3310      	adds	r3, #16
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	462b      	mov	r3, r5
 8004af0:	4622      	mov	r2, r4
 8004af2:	f000 f8b5 	bl	8004c60 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3301      	adds	r3, #1
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <_cbSendTaskList+0x8c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d3c6      	bcc.n	8004a94 <_cbSendTaskList+0xc>
  }
}
 8004b06:	bf00      	nop
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b10:	20012df4 	.word	0x20012df4
 8004b14:	20012e94 	.word	0x20012e94

08004b18 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b18:	b5b0      	push	{r4, r5, r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b1e:	f7fe fc4f 	bl	80033c0 <xTaskGetTickCountFromISR>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	f04f 0400 	mov.w	r4, #0
 8004b3a:	f04f 0500 	mov.w	r5, #0
 8004b3e:	015d      	lsls	r5, r3, #5
 8004b40:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004b44:	0154      	lsls	r4, r2, #5
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	1a12      	subs	r2, r2, r0
 8004b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b50:	f04f 0400 	mov.w	r4, #0
 8004b54:	f04f 0500 	mov.w	r5, #0
 8004b58:	009d      	lsls	r5, r3, #2
 8004b5a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004b5e:	0094      	lsls	r4, r2, #2
 8004b60:	4622      	mov	r2, r4
 8004b62:	462b      	mov	r3, r5
 8004b64:	1812      	adds	r2, r2, r0
 8004b66:	eb41 0303 	adc.w	r3, r1, r3
 8004b6a:	f04f 0000 	mov.w	r0, #0
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	00d9      	lsls	r1, r3, #3
 8004b74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b78:	00d0      	lsls	r0, r2, #3
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004b82:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bdb0      	pop	{r4, r5, r7, pc}

08004b90 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b9e:	2205      	movs	r2, #5
 8004ba0:	492b      	ldr	r1, [pc, #172]	; (8004c50 <SYSVIEW_AddTask+0xc0>)
 8004ba2:	68b8      	ldr	r0, [r7, #8]
 8004ba4:	f002 f9b0 	bl	8006f08 <memcmp>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d04b      	beq.n	8004c46 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004bae:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <SYSVIEW_AddTask+0xc4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b07      	cmp	r3, #7
 8004bb4:	d903      	bls.n	8004bbe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bb6:	4828      	ldr	r0, [pc, #160]	; (8004c58 <SYSVIEW_AddTask+0xc8>)
 8004bb8:	f002 f914 	bl	8006de4 <SEGGER_SYSVIEW_Warn>
    return;
 8004bbc:	e044      	b.n	8004c48 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004bbe:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <SYSVIEW_AddTask+0xc4>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4926      	ldr	r1, [pc, #152]	; (8004c5c <SYSVIEW_AddTask+0xcc>)
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004bd2:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <SYSVIEW_AddTask+0xc4>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4921      	ldr	r1, [pc, #132]	; (8004c5c <SYSVIEW_AddTask+0xcc>)
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3304      	adds	r3, #4
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004be8:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <SYSVIEW_AddTask+0xc4>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	491b      	ldr	r1, [pc, #108]	; (8004c5c <SYSVIEW_AddTask+0xcc>)
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <SYSVIEW_AddTask+0xc4>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4916      	ldr	r1, [pc, #88]	; (8004c5c <SYSVIEW_AddTask+0xcc>)
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	330c      	adds	r3, #12
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <SYSVIEW_AddTask+0xc4>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4910      	ldr	r1, [pc, #64]	; (8004c5c <SYSVIEW_AddTask+0xcc>)
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	3310      	adds	r3, #16
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <SYSVIEW_AddTask+0xc4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <SYSVIEW_AddTask+0xc4>)
 8004c32:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f80e 	bl	8004c60 <SYSVIEW_SendTaskInfo>
 8004c44:	e000      	b.n	8004c48 <SYSVIEW_AddTask+0xb8>
    return;
 8004c46:	bf00      	nop

}
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	08008070 	.word	0x08008070
 8004c54:	20012e94 	.word	0x20012e94
 8004c58:	08008078 	.word	0x08008078
 8004c5c:	20012df4 	.word	0x20012df4

08004c60 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c6e:	f107 0314 	add.w	r3, r7, #20
 8004c72:	2214      	movs	r2, #20
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f002 f962 	bl	8006f40 <memset>
  TaskInfo.TaskID     = TaskID;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 fc9b 	bl	80065d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c9a:	bf00      	nop
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004caa:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <USART2_IRQHandler+0x80>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d011      	beq.n	8004cde <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <USART2_IRQHandler+0x84>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 030b 	and.w	r3, r3, #11
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004ccc:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <USART2_IRQHandler+0x88>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d004      	beq.n	8004cde <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <USART2_IRQHandler+0x88>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	79fa      	ldrb	r2, [r7, #7]
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01a      	beq.n	8004d1e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <USART2_IRQHandler+0x8c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <USART2_IRQHandler+0x8c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	1dfa      	adds	r2, r7, #7
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4798      	blx	r3
 8004cfa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <USART2_IRQHandler+0x90>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <USART2_IRQHandler+0x90>)
 8004d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e006      	b.n	8004d1e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <USART2_IRQHandler+0x80>)
 8004d12:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004d14:	79fa      	ldrb	r2, [r7, #7]
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <USART2_IRQHandler+0x84>)
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e000      	b.n	8004d1e <USART2_IRQHandler+0x7a>
      return;
 8004d1c:	bf00      	nop
    }
  }
}
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40004400 	.word	0x40004400
 8004d28:	40004404 	.word	0x40004404
 8004d2c:	20012e98 	.word	0x20012e98
 8004d30:	20012e9c 	.word	0x20012e9c
 8004d34:	4000440c 	.word	0x4000440c

08004d38 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d46:	6013      	str	r3, [r2, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	4000440c 	.word	0x4000440c

08004d58 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <_DoInit+0x98>)
 8004d60:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2203      	movs	r2, #3
 8004d66:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a20      	ldr	r2, [pc, #128]	; (8004df4 <_DoInit+0x9c>)
 8004d72:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <_DoInit+0xa0>)
 8004d78:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d80:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <_DoInit+0x9c>)
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <_DoInit+0xa4>)
 8004d9e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2210      	movs	r2, #16
 8004da4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3307      	adds	r3, #7
 8004dbc:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <_DoInit+0xa8>)
 8004dbe:	6810      	ldr	r0, [r2, #0]
 8004dc0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004dc2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a0e      	ldr	r2, [pc, #56]	; (8004e04 <_DoInit+0xac>)
 8004dca:	6810      	ldr	r0, [r2, #0]
 8004dcc:	6018      	str	r0, [r3, #0]
 8004dce:	8891      	ldrh	r1, [r2, #4]
 8004dd0:	7992      	ldrb	r2, [r2, #6]
 8004dd2:	8099      	strh	r1, [r3, #4]
 8004dd4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004dd6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004de0:	f3bf 8f5f 	dmb	sy
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20014464 	.word	0x20014464
 8004df4:	080080c8 	.word	0x080080c8
 8004df8:	20012ea0 	.word	0x20012ea0
 8004dfc:	200132a0 	.word	0x200132a0
 8004e00:	080080d4 	.word	0x080080d4
 8004e04:	080080d8 	.word	0x080080d8

08004e08 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e14:	2300      	movs	r3, #0
 8004e16:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d905      	bls.n	8004e38 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24
 8004e36:	e007      	b.n	8004e48 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	69b9      	ldr	r1, [r7, #24]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	1acb      	subs	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	3b01      	subs	r3, #1
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bf28      	it	cs
 8004e56:	4613      	movcs	r3, r2
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	bf28      	it	cs
 8004e62:	4613      	movcs	r3, r2
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	6978      	ldr	r0, [r7, #20]
 8004e76:	f002 f855 	bl	8006f24 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004e7a:	6a3a      	ldr	r2, [r7, #32]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	4413      	add	r3, r2
 8004e80:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	4413      	add	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	4413      	add	r3, r2
 8004e98:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d101      	bne.n	8004ea8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ea8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1b2      	bne.n	8004e1e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3728      	adds	r7, #40	; 0x28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b088      	sub	sp, #32
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d911      	bls.n	8004f0a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	6938      	ldr	r0, [r7, #16]
 8004ef6:	f002 f815 	bl	8006f24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004efa:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	441a      	add	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f08:	e01f      	b.n	8004f4a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	6938      	ldr	r0, [r7, #16]
 8004f1e:	f002 f801 	bl	8006f24 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	4413      	add	r3, r2
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6938      	ldr	r0, [r7, #16]
 8004f3c:	f001 fff2 	bl	8006f24 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f40:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	60da      	str	r2, [r3, #12]
}
 8004f4a:	bf00      	nop
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004f52:	b480      	push	{r7}
 8004f54:	b087      	sub	sp, #28
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d808      	bhi.n	8004f80 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad2      	subs	r2, r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	e004      	b.n	8004f8a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004f8a:	697b      	ldr	r3, [r7, #20]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fa4:	4b3e      	ldr	r3, [pc, #248]	; (80050a0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004fb2:	f7ff fed1 	bl	8004d58 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	3360      	adds	r3, #96	; 0x60
 8004fc2:	4a37      	ldr	r2, [pc, #220]	; (80050a0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d92b      	bls.n	800503c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bf28      	it	cs
 8004ff6:	4613      	movcs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	4413      	add	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800500a:	f001 ff8b 	bl	8006f24 <memcpy>
    NumBytesRead += NumBytesRem;
 800500e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005034:	429a      	cmp	r2, r3
 8005036:	d101      	bne.n	800503c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4293      	cmp	r3, r2
 800504a:	bf28      	it	cs
 800504c:	4613      	movcs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	4413      	add	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	6939      	ldr	r1, [r7, #16]
 8005064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005066:	f001 ff5d 	bl	8006f24 <memcpy>
    NumBytesRead += NumBytesRem;
 800506a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005094:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005098:	4618      	mov	r0, r3
 800509a:	3730      	adds	r7, #48	; 0x30
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20014464 	.word	0x20014464

080050a4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <SEGGER_RTT_WriteNoLock+0x9c>)
 80050c2:	4413      	add	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d029      	beq.n	8005122 <SEGGER_RTT_WriteNoLock+0x7e>
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d82e      	bhi.n	8005130 <SEGGER_RTT_WriteNoLock+0x8c>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <SEGGER_RTT_WriteNoLock+0x38>
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d013      	beq.n	8005102 <SEGGER_RTT_WriteNoLock+0x5e>
 80050da:	e029      	b.n	8005130 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050dc:	6978      	ldr	r0, [r7, #20]
 80050de:	f7ff ff38 	bl	8004f52 <_GetAvailWriteSpace>
 80050e2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d202      	bcs.n	80050f2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80050f0:	e021      	b.n	8005136 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	69b9      	ldr	r1, [r7, #24]
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	f7ff fee1 	bl	8004ec2 <_WriteNoCheck>
    break;
 8005100:	e019      	b.n	8005136 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f7ff ff25 	bl	8004f52 <_GetAvailWriteSpace>
 8005108:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4293      	cmp	r3, r2
 8005110:	bf28      	it	cs
 8005112:	4613      	movcs	r3, r2
 8005114:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f7ff fed1 	bl	8004ec2 <_WriteNoCheck>
    break;
 8005120:	e009      	b.n	8005136 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7ff fe6e 	bl	8004e08 <_WriteBlocking>
 800512c:	61f8      	str	r0, [r7, #28]
    break;
 800512e:	e002      	b.n	8005136 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
    break;
 8005134:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005136:	69fb      	ldr	r3, [r7, #28]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20014464 	.word	0x20014464

08005144 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <SEGGER_RTT_Write+0x48>)
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <SEGGER_RTT_Write+0x1e>
 800515e:	f7ff fdfb 	bl	8004d58 <_DoInit>
  SEGGER_RTT_LOCK();
 8005162:	f3ef 8311 	mrs	r3, BASEPRI
 8005166:	f04f 0120 	mov.w	r1, #32
 800516a:	f381 8811 	msr	BASEPRI, r1
 800516e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff ff95 	bl	80050a4 <SEGGER_RTT_WriteNoLock>
 800517a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005182:	697b      	ldr	r3, [r7, #20]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20014464 	.word	0x20014464

08005190 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800519e:	4b3d      	ldr	r3, [pc, #244]	; (8005294 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80051ac:	f7ff fdd4 	bl	8004d58 <_DoInit>
  SEGGER_RTT_LOCK();
 80051b0:	f3ef 8311 	mrs	r3, BASEPRI
 80051b4:	f04f 0120 	mov.w	r1, #32
 80051b8:	f381 8811 	msr	BASEPRI, r1
 80051bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051be:	4b35      	ldr	r3, [pc, #212]	; (8005294 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80051c6:	6939      	ldr	r1, [r7, #16]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	3304      	adds	r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	dbeb      	blt.n	80051c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80051ee:	e000      	b.n	80051f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80051f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	da3f      	bge.n	800527c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80051fc:	6939      	ldr	r1, [r7, #16]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	440b      	add	r3, r1
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005210:	6939      	ldr	r1, [r7, #16]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	440b      	add	r3, r1
 8005220:	3304      	adds	r3, #4
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005226:	6939      	ldr	r1, [r7, #16]
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	4613      	mov	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	440b      	add	r3, r1
 8005234:	3320      	adds	r3, #32
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800523a:	6939      	ldr	r1, [r7, #16]
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	440b      	add	r3, r1
 8005248:	3328      	adds	r3, #40	; 0x28
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800524e:	6939      	ldr	r1, [r7, #16]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	440b      	add	r3, r1
 800525c:	3324      	adds	r3, #36	; 0x24
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005262:	6939      	ldr	r1, [r7, #16]
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	440b      	add	r3, r1
 8005270:	332c      	adds	r3, #44	; 0x2c
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005276:	f3bf 8f5f 	dmb	sy
 800527a:	e002      	b.n	8005282 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800527c:	f04f 33ff 	mov.w	r3, #4294967295
 8005280:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005288:	69fb      	ldr	r3, [r7, #28]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20014464 	.word	0x20014464

08005298 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80052a6:	4b21      	ldr	r3, [pc, #132]	; (800532c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052b4:	f7ff fd50 	bl	8004d58 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052b8:	4b1c      	ldr	r3, [pc, #112]	; (800532c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80052ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d82c      	bhi.n	800531c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80052c2:	f3ef 8311 	mrs	r3, BASEPRI
 80052c6:	f04f 0120 	mov.w	r1, #32
 80052ca:	f381 8811 	msr	BASEPRI, r1
 80052ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	3360      	adds	r3, #96	; 0x60
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2200      	movs	r2, #0
 8005304:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800530c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005316:	2300      	movs	r3, #0
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
 800531a:	e002      	b.n	8005322 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005324:	4618      	mov	r0, r3
 8005326:	3728      	adds	r7, #40	; 0x28
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20014464 	.word	0x20014464

08005330 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00f      	beq.n	8005366 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005346:	e002      	b.n	800534e <_EncodeStr+0x1e>
      Len++;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	3301      	adds	r3, #1
 800534c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f6      	bne.n	8005348 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d901      	bls.n	8005366 <_EncodeStr+0x36>
      Len = Limit;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2bfe      	cmp	r3, #254	; 0xfe
 800536a:	d806      	bhi.n	800537a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	60fa      	str	r2, [r7, #12]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e011      	b.n	800539e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	60fa      	str	r2, [r7, #12]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	60fa      	str	r2, [r7, #12]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	0a19      	lsrs	r1, r3, #8
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	60fa      	str	r2, [r7, #12]
 800539a:	b2ca      	uxtb	r2, r1
 800539c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053a2:	e00a      	b.n	80053ba <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	1c53      	adds	r3, r2, #1
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	60f9      	str	r1, [r7, #12]
 80053b0:	7812      	ldrb	r2, [r2, #0]
 80053b2:	701a      	strb	r2, [r3, #0]
    n++;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	3301      	adds	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3f0      	bcc.n	80053a4 <_EncodeStr+0x74>
  }
  return pPayload;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053ee:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <_HandleIncomingPacket+0xe0>)
 80053f0:	7e1b      	ldrb	r3, [r3, #24]
 80053f2:	4618      	mov	r0, r3
 80053f4:	1cfb      	adds	r3, r7, #3
 80053f6:	2201      	movs	r2, #1
 80053f8:	4619      	mov	r1, r3
 80053fa:	f7ff fdcd 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
 80053fe:	4603      	mov	r3, r0
 8005400:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	dd54      	ble.n	80054b2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d032      	beq.n	8005474 <_HandleIncomingPacket+0x8c>
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	dc42      	bgt.n	8005498 <_HandleIncomingPacket+0xb0>
 8005412:	2b07      	cmp	r3, #7
 8005414:	dc16      	bgt.n	8005444 <_HandleIncomingPacket+0x5c>
 8005416:	2b00      	cmp	r3, #0
 8005418:	dd3e      	ble.n	8005498 <_HandleIncomingPacket+0xb0>
 800541a:	3b01      	subs	r3, #1
 800541c:	2b06      	cmp	r3, #6
 800541e:	d83b      	bhi.n	8005498 <_HandleIncomingPacket+0xb0>
 8005420:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <_HandleIncomingPacket+0x40>)
 8005422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005426:	bf00      	nop
 8005428:	0800544b 	.word	0x0800544b
 800542c:	08005451 	.word	0x08005451
 8005430:	08005457 	.word	0x08005457
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005463 	.word	0x08005463
 800543c:	08005469 	.word	0x08005469
 8005440:	0800546f 	.word	0x0800546f
 8005444:	2b7f      	cmp	r3, #127	; 0x7f
 8005446:	d036      	beq.n	80054b6 <_HandleIncomingPacket+0xce>
 8005448:	e026      	b.n	8005498 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800544a:	f000 ff45 	bl	80062d8 <SEGGER_SYSVIEW_Start>
      break;
 800544e:	e037      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005450:	f000 fffe 	bl	8006450 <SEGGER_SYSVIEW_Stop>
      break;
 8005454:	e034      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005456:	f001 f9d7 	bl	8006808 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800545a:	e031      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800545c:	f001 f99c 	bl	8006798 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005460:	e02e      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005462:	f001 f81b 	bl	800649c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005466:	e02b      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005468:	f001 fc6a 	bl	8006d40 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800546c:	e028      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800546e:	f001 fc49 	bl	8006d04 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005472:	e025      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005474:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <_HandleIncomingPacket+0xe0>)
 8005476:	7e1b      	ldrb	r3, [r3, #24]
 8005478:	4618      	mov	r0, r3
 800547a:	1cfb      	adds	r3, r7, #3
 800547c:	2201      	movs	r2, #1
 800547e:	4619      	mov	r1, r3
 8005480:	f7ff fd8a 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
 8005484:	4603      	mov	r3, r0
 8005486:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd15      	ble.n	80054ba <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	4618      	mov	r0, r3
 8005492:	f001 fbb7 	bl	8006c04 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005496:	e010      	b.n	80054ba <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	b25b      	sxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	da0e      	bge.n	80054be <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <_HandleIncomingPacket+0xe0>)
 80054a2:	7e1b      	ldrb	r3, [r3, #24]
 80054a4:	4618      	mov	r0, r3
 80054a6:	1cfb      	adds	r3, r7, #3
 80054a8:	2201      	movs	r2, #1
 80054aa:	4619      	mov	r1, r3
 80054ac:	f7ff fd74 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054b0:	e005      	b.n	80054be <_HandleIncomingPacket+0xd6>
    }
  }
 80054b2:	bf00      	nop
 80054b4:	e004      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
      break;
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
      break;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <_HandleIncomingPacket+0xd8>
      break;
 80054be:	bf00      	nop
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	200142b8 	.word	0x200142b8

080054cc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08c      	sub	sp, #48	; 0x30
 80054d0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054d2:	2301      	movs	r3, #1
 80054d4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e0:	4b32      	ldr	r3, [pc, #200]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e6:	e00b      	b.n	8005500 <_TrySendOverflowPacket+0x34>
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2b7f      	cmp	r3, #127	; 0x7f
 8005504:	d8f0      	bhi.n	80054e8 <_TrySendOverflowPacket+0x1c>
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005516:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <_TrySendOverflowPacket+0xe4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800551c:	4b23      	ldr	r3, [pc, #140]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	623b      	str	r3, [r7, #32]
 800552e:	e00b      	b.n	8005548 <_TrySendOverflowPacket+0x7c>
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	1c59      	adds	r1, r3, #1
 8005538:	6279      	str	r1, [r7, #36]	; 0x24
 800553a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	09db      	lsrs	r3, r3, #7
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2b7f      	cmp	r3, #127	; 0x7f
 800554c:	d8f0      	bhi.n	8005530 <_TrySendOverflowPacket+0x64>
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	627a      	str	r2, [r7, #36]	; 0x24
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	4618      	mov	r0, r3
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	461a      	mov	r2, r3
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	4619      	mov	r1, r3
 8005570:	f7fa fe4e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005574:	4603      	mov	r3, r0
 8005576:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005578:	f7ff fbde 	bl	8004d38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	3b01      	subs	r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	e004      	b.n	80055a0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	4a03      	ldr	r2, [pc, #12]	; (80055ac <_TrySendOverflowPacket+0xe0>)
 800559e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055a0:	693b      	ldr	r3, [r7, #16]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3730      	adds	r7, #48	; 0x30
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	200142b8 	.word	0x200142b8
 80055b0:	e0001004 	.word	0xe0001004

080055b4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80055c0:	4b6d      	ldr	r3, [pc, #436]	; (8005778 <_SendPacket+0x1c4>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d010      	beq.n	80055ea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055c8:	4b6b      	ldr	r3, [pc, #428]	; (8005778 <_SendPacket+0x1c4>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80a5 	beq.w	800571c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055d2:	4b69      	ldr	r3, [pc, #420]	; (8005778 <_SendPacket+0x1c4>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d109      	bne.n	80055ee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055da:	f7ff ff77 	bl	80054cc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055de:	4b66      	ldr	r3, [pc, #408]	; (8005778 <_SendPacket+0x1c4>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	f040 809c 	bne.w	8005720 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80055e8:	e001      	b.n	80055ee <_SendPacket+0x3a>
    goto Send;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <_SendPacket+0x3c>
Send:
 80055ee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b1f      	cmp	r3, #31
 80055f4:	d809      	bhi.n	800560a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055f6:	4b60      	ldr	r3, [pc, #384]	; (8005778 <_SendPacket+0x1c4>)
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	f040 808d 	bne.w	8005724 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b17      	cmp	r3, #23
 800560e:	d807      	bhi.n	8005620 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3b01      	subs	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e03d      	b.n	800569c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b7f      	cmp	r3, #127	; 0x7f
 800562c:	d912      	bls.n	8005654 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	09da      	lsrs	r2, r3, #7
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3b01      	subs	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	3a01      	subs	r2, #1
 8005646:	60fa      	str	r2, [r7, #12]
 8005648:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800564c:	b2da      	uxtb	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e006      	b.n	8005662 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b7f      	cmp	r3, #127	; 0x7f
 8005666:	d912      	bls.n	800568e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	09da      	lsrs	r2, r3, #7
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	3a01      	subs	r2, #1
 8005680:	60fa      	str	r2, [r7, #12]
 8005682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005686:	b2da      	uxtb	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e006      	b.n	800569c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3b01      	subs	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <_SendPacket+0x1c8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056a2:	4b35      	ldr	r3, [pc, #212]	; (8005778 <_SendPacket+0x1c4>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	623b      	str	r3, [r7, #32]
 80056b4:	e00b      	b.n	80056ce <_SendPacket+0x11a>
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1c59      	adds	r1, r3, #1
 80056be:	6279      	str	r1, [r7, #36]	; 0x24
 80056c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	09db      	lsrs	r3, r3, #7
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b7f      	cmp	r3, #127	; 0x7f
 80056d2:	d8f0      	bhi.n	80056b6 <_SendPacket+0x102>
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	627a      	str	r2, [r7, #36]	; 0x24
 80056da:	6a3a      	ldr	r2, [r7, #32]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80056e4:	4b24      	ldr	r3, [pc, #144]	; (8005778 <_SendPacket+0x1c4>)
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	4618      	mov	r0, r3
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f7fa fd8c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056f8:	4603      	mov	r3, r0
 80056fa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80056fc:	f7ff fb1c 	bl	8004d38 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <_SendPacket+0x1c4>)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	60d3      	str	r3, [r2, #12]
 800570c:	e00b      	b.n	8005726 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800570e:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <_SendPacket+0x1c4>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4b18      	ldr	r3, [pc, #96]	; (8005778 <_SendPacket+0x1c4>)
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e004      	b.n	8005726 <_SendPacket+0x172>
    goto SendDone;
 800571c:	bf00      	nop
 800571e:	e002      	b.n	8005726 <_SendPacket+0x172>
      goto SendDone;
 8005720:	bf00      	nop
 8005722:	e000      	b.n	8005726 <_SendPacket+0x172>
      goto SendDone;
 8005724:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <_SendPacket+0x1c4>)
 8005728:	7e1b      	ldrb	r3, [r3, #24]
 800572a:	4619      	mov	r1, r3
 800572c:	4a14      	ldr	r2, [pc, #80]	; (8005780 <_SendPacket+0x1cc>)
 800572e:	460b      	mov	r3, r1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	440b      	add	r3, r1
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	336c      	adds	r3, #108	; 0x6c
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <_SendPacket+0x1c4>)
 800573e:	7e1b      	ldrb	r3, [r3, #24]
 8005740:	4618      	mov	r0, r3
 8005742:	490f      	ldr	r1, [pc, #60]	; (8005780 <_SendPacket+0x1cc>)
 8005744:	4603      	mov	r3, r0
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	4403      	add	r3, r0
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	440b      	add	r3, r1
 800574e:	3370      	adds	r3, #112	; 0x70
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d00b      	beq.n	800576e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005756:	4b08      	ldr	r3, [pc, #32]	; (8005778 <_SendPacket+0x1c4>)
 8005758:	789b      	ldrb	r3, [r3, #2]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <_SendPacket+0x1c4>)
 8005760:	2201      	movs	r2, #1
 8005762:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005764:	f7ff fe40 	bl	80053e8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <_SendPacket+0x1c4>)
 800576a:	2200      	movs	r2, #0
 800576c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800576e:	bf00      	nop
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200142b8 	.word	0x200142b8
 800577c:	e0001004 	.word	0xe0001004
 8005780:	20014464 	.word	0x20014464

08005784 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	3301      	adds	r3, #1
 800579a:	2b80      	cmp	r3, #128	; 0x80
 800579c:	d80a      	bhi.n	80057b4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6051      	str	r1, [r2, #4]
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d15a      	bne.n	8005872 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	623b      	str	r3, [r7, #32]
 80057dc:	e00b      	b.n	80057f6 <_StoreChar+0x72>
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	1c59      	adds	r1, r3, #1
 80057e6:	6279      	str	r1, [r7, #36]	; 0x24
 80057e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	09db      	lsrs	r3, r3, #7
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b7f      	cmp	r3, #127	; 0x7f
 80057fa:	d8f0      	bhi.n	80057de <_StoreChar+0x5a>
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	627a      	str	r2, [r7, #36]	; 0x24
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e00b      	b.n	800582e <_StoreChar+0xaa>
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	61f9      	str	r1, [r7, #28]
 8005820:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	09db      	lsrs	r3, r3, #7
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b7f      	cmp	r3, #127	; 0x7f
 8005832:	d8f0      	bhi.n	8005816 <_StoreChar+0x92>
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	61fa      	str	r2, [r7, #28]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	221a      	movs	r2, #26
 800584a:	6939      	ldr	r1, [r7, #16]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff feb1 	bl	80055b4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fdba 	bl	80053d0 <_PreparePacket>
 800585c:	4602      	mov	r2, r0
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	611a      	str	r2, [r3, #16]
  }
}
 8005872:	bf00      	nop
 8005874:	3728      	adds	r7, #40	; 0x28
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800588e:	2301      	movs	r3, #1
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005892:	2301      	movs	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005896:	e007      	b.n	80058a8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	623b      	str	r3, [r7, #32]
    Width++;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3301      	adds	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d2f3      	bcs.n	8005898 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d901      	bls.n	80058bc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d11f      	bne.n	8005906 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01c      	beq.n	8005906 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <_PrintUnsigned+0x66>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <_PrintUnsigned+0x66>
        c = '0';
 80058dc:	2330      	movs	r3, #48	; 0x30
 80058de:	76fb      	strb	r3, [r7, #27]
 80058e0:	e001      	b.n	80058e6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80058e2:	2320      	movs	r3, #32
 80058e4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058e6:	e007      	b.n	80058f8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	3b01      	subs	r3, #1
 80058ec:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80058ee:	7efb      	ldrb	r3, [r7, #27]
 80058f0:	4619      	mov	r1, r3
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7ff ff46 	bl	8005784 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <_PrintUnsigned+0x8a>
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	429a      	cmp	r2, r3
 8005904:	d3f0      	bcc.n	80058e8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d903      	bls.n	8005914 <_PrintUnsigned+0x98>
      NumDigits--;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	3b01      	subs	r3, #1
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	e009      	b.n	8005928 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	d200      	bcs.n	8005928 <_PrintUnsigned+0xac>
        break;
 8005926:	e005      	b.n	8005934 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005932:	e7e8      	b.n	8005906 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <_PrintUnsigned+0x128>)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	4619      	mov	r1, r3
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff ff14 	bl	8005784 <_StoreChar>
    Digit /= Base;
 800595c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e3      	bne.n	8005934 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d011      	beq.n	800599a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800597c:	e006      	b.n	800598c <_PrintUnsigned+0x110>
        FieldWidth--;
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	3b01      	subs	r3, #1
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005984:	2120      	movs	r1, #32
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff fefc 	bl	8005784 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <_PrintUnsigned+0x11e>
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	429a      	cmp	r2, r3
 8005998:	d3f1      	bcc.n	800597e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800599a:	bf00      	nop
 800599c:	3728      	adds	r7, #40	; 0x28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	08008114 	.word	0x08008114

080059a8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bfb8      	it	lt
 80059bc:	425b      	neglt	r3, r3
 80059be:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059c4:	e007      	b.n	80059d6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80059ce:	613b      	str	r3, [r7, #16]
    Width++;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3301      	adds	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	daf3      	bge.n	80059c6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d901      	bls.n	80059ea <_PrintInt+0x42>
    Width = NumDigits;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <_PrintInt+0x5e>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	db04      	blt.n	8005a00 <_PrintInt+0x58>
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <_PrintInt+0x5e>
    FieldWidth--;
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <_PrintInt+0x6e>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d016      	beq.n	8005a44 <_PrintInt+0x9c>
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d111      	bne.n	8005a44 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a26:	e006      	b.n	8005a36 <_PrintInt+0x8e>
        FieldWidth--;
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a2e:	2120      	movs	r1, #32
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff fea7 	bl	8005784 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <_PrintInt+0x9c>
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d3f1      	bcc.n	8005a28 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da07      	bge.n	8005a5a <_PrintInt+0xb2>
    v = -v;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	425b      	negs	r3, r3
 8005a4e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005a50:	212d      	movs	r1, #45	; 0x2d
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff fe96 	bl	8005784 <_StoreChar>
 8005a58:	e008      	b.n	8005a6c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005a64:	212b      	movs	r1, #43	; 0x2b
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fe8c 	bl	8005784 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d019      	beq.n	8005aaa <_PrintInt+0x102>
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d114      	bne.n	8005aaa <_PrintInt+0x102>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d111      	bne.n	8005aaa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00e      	beq.n	8005aaa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a8c:	e006      	b.n	8005a9c <_PrintInt+0xf4>
        FieldWidth--;
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005a94:	2130      	movs	r1, #48	; 0x30
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff fe74 	bl	8005784 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <_PrintInt+0x102>
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3f1      	bcc.n	8005a8e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fedf 	bl	800587c <_PrintUnsigned>
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b098      	sub	sp, #96	; 0x60
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad8:	f04f 0120 	mov.w	r1, #32
 8005adc:	f381 8811 	msr	BASEPRI, r1
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae2:	48b7      	ldr	r0, [pc, #732]	; (8005dc0 <_VPrintTarget+0x2f8>)
 8005ae4:	f7ff fc74 	bl	80053d0 <_PreparePacket>
 8005ae8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005aea:	4bb5      	ldr	r3, [pc, #724]	; (8005dc0 <_VPrintTarget+0x2f8>)
 8005aec:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8183 	beq.w	8005e1e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b1c:	2b25      	cmp	r3, #37	; 0x25
 8005b1e:	f040 8170 	bne.w	8005e02 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b22:	2300      	movs	r3, #0
 8005b24:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005b26:	2301      	movs	r3, #1
 8005b28:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b36:	3b23      	subs	r3, #35	; 0x23
 8005b38:	2b0d      	cmp	r3, #13
 8005b3a:	d83f      	bhi.n	8005bbc <_VPrintTarget+0xf4>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <_VPrintTarget+0x7c>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005bad 	.word	0x08005bad
 8005b48:	08005bbd 	.word	0x08005bbd
 8005b4c:	08005bbd 	.word	0x08005bbd
 8005b50:	08005bbd 	.word	0x08005bbd
 8005b54:	08005bbd 	.word	0x08005bbd
 8005b58:	08005bbd 	.word	0x08005bbd
 8005b5c:	08005bbd 	.word	0x08005bbd
 8005b60:	08005bbd 	.word	0x08005bbd
 8005b64:	08005b9d 	.word	0x08005b9d
 8005b68:	08005bbd 	.word	0x08005bbd
 8005b6c:	08005b7d 	.word	0x08005b7d
 8005b70:	08005bbd 	.word	0x08005bbd
 8005b74:	08005bbd 	.word	0x08005bbd
 8005b78:	08005b8d 	.word	0x08005b8d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e01a      	b.n	8005bc2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e012      	b.n	8005bc2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e00a      	b.n	8005bc2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bae:	f043 0308 	orr.w	r3, r3, #8
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e002      	b.n	8005bc2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc0:	bf00      	nop
        }
      } while (v);
 8005bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1b0      	bne.n	8005b2a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8005bda:	d912      	bls.n	8005c02 <_VPrintTarget+0x13a>
 8005bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005be0:	2b39      	cmp	r3, #57	; 0x39
 8005be2:	d80e      	bhi.n	8005c02 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3b30      	subs	r3, #48	; 0x30
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c00:	e7e4      	b.n	8005bcc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c02:	2300      	movs	r3, #0
 8005c04:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c12:	2b2e      	cmp	r3, #46	; 0x2e
 8005c14:	d11d      	bne.n	8005c52 <_VPrintTarget+0x18a>
        sFormat++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005c24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c28:	2b2f      	cmp	r3, #47	; 0x2f
 8005c2a:	d912      	bls.n	8005c52 <_VPrintTarget+0x18a>
 8005c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c30:	2b39      	cmp	r3, #57	; 0x39
 8005c32:	d80e      	bhi.n	8005c52 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	461a      	mov	r2, r3
 8005c46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3b30      	subs	r3, #48	; 0x30
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005c50:	e7e4      	b.n	8005c1c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c5e:	2b6c      	cmp	r3, #108	; 0x6c
 8005c60:	d003      	beq.n	8005c6a <_VPrintTarget+0x1a2>
 8005c62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c66:	2b68      	cmp	r3, #104	; 0x68
 8005c68:	d107      	bne.n	8005c7a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005c78:	e7ef      	b.n	8005c5a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c7e:	2b25      	cmp	r3, #37	; 0x25
 8005c80:	f000 80b3 	beq.w	8005dea <_VPrintTarget+0x322>
 8005c84:	2b25      	cmp	r3, #37	; 0x25
 8005c86:	f2c0 80b7 	blt.w	8005df8 <_VPrintTarget+0x330>
 8005c8a:	2b78      	cmp	r3, #120	; 0x78
 8005c8c:	f300 80b4 	bgt.w	8005df8 <_VPrintTarget+0x330>
 8005c90:	2b58      	cmp	r3, #88	; 0x58
 8005c92:	f2c0 80b1 	blt.w	8005df8 <_VPrintTarget+0x330>
 8005c96:	3b58      	subs	r3, #88	; 0x58
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	f200 80ad 	bhi.w	8005df8 <_VPrintTarget+0x330>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <_VPrintTarget+0x1dc>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005d9b 	.word	0x08005d9b
 8005ca8:	08005df9 	.word	0x08005df9
 8005cac:	08005df9 	.word	0x08005df9
 8005cb0:	08005df9 	.word	0x08005df9
 8005cb4:	08005df9 	.word	0x08005df9
 8005cb8:	08005df9 	.word	0x08005df9
 8005cbc:	08005df9 	.word	0x08005df9
 8005cc0:	08005df9 	.word	0x08005df9
 8005cc4:	08005df9 	.word	0x08005df9
 8005cc8:	08005df9 	.word	0x08005df9
 8005ccc:	08005df9 	.word	0x08005df9
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d4f 	.word	0x08005d4f
 8005cd8:	08005df9 	.word	0x08005df9
 8005cdc:	08005df9 	.word	0x08005df9
 8005ce0:	08005df9 	.word	0x08005df9
 8005ce4:	08005df9 	.word	0x08005df9
 8005ce8:	08005df9 	.word	0x08005df9
 8005cec:	08005df9 	.word	0x08005df9
 8005cf0:	08005df9 	.word	0x08005df9
 8005cf4:	08005df9 	.word	0x08005df9
 8005cf8:	08005df9 	.word	0x08005df9
 8005cfc:	08005df9 	.word	0x08005df9
 8005d00:	08005df9 	.word	0x08005df9
 8005d04:	08005dc5 	.word	0x08005dc5
 8005d08:	08005df9 	.word	0x08005df9
 8005d0c:	08005df9 	.word	0x08005df9
 8005d10:	08005df9 	.word	0x08005df9
 8005d14:	08005df9 	.word	0x08005df9
 8005d18:	08005d75 	.word	0x08005d75
 8005d1c:	08005df9 	.word	0x08005df9
 8005d20:	08005df9 	.word	0x08005df9
 8005d24:	08005d9b 	.word	0x08005d9b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	1d19      	adds	r1, r3, #4
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005d3c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d40:	f107 0314 	add.w	r3, r7, #20
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fd1c 	bl	8005784 <_StoreChar>
        break;
 8005d4c:	e055      	b.n	8005dfa <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	1d19      	adds	r1, r3, #4
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6011      	str	r1, [r2, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d5c:	f107 0014 	add.w	r0, r7, #20
 8005d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d6a:	220a      	movs	r2, #10
 8005d6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d6e:	f7ff fe1b 	bl	80059a8 <_PrintInt>
        break;
 8005d72:	e042      	b.n	8005dfa <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1d19      	adds	r1, r3, #4
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6011      	str	r1, [r2, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d84:	f107 0014 	add.w	r0, r7, #20
 8005d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d92:	220a      	movs	r2, #10
 8005d94:	f7ff fd72 	bl	800587c <_PrintUnsigned>
        break;
 8005d98:	e02f      	b.n	8005dfa <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	1d19      	adds	r1, r3, #4
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6011      	str	r1, [r2, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005da8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005daa:	f107 0014 	add.w	r0, r7, #20
 8005dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db8:	2210      	movs	r2, #16
 8005dba:	f7ff fd5f 	bl	800587c <_PrintUnsigned>
        break;
 8005dbe:	e01c      	b.n	8005dfa <_VPrintTarget+0x332>
 8005dc0:	200142e8 	.word	0x200142e8
      case 'p':
        v = va_arg(*pParamList, int);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	1d19      	adds	r1, r3, #4
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005dd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dd4:	f107 0014 	add.w	r0, r7, #20
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	2308      	movs	r3, #8
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2308      	movs	r3, #8
 8005de2:	2210      	movs	r2, #16
 8005de4:	f7ff fd4a 	bl	800587c <_PrintUnsigned>
        break;
 8005de8:	e007      	b.n	8005dfa <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005dea:	f107 0314 	add.w	r3, r7, #20
 8005dee:	2125      	movs	r1, #37	; 0x25
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fcc7 	bl	8005784 <_StoreChar>
        break;
 8005df6:	e000      	b.n	8005dfa <_VPrintTarget+0x332>
      default:
        break;
 8005df8:	bf00      	nop
      }
      sFormat++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e007      	b.n	8005e12 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e02:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e06:	f107 0314 	add.w	r3, r7, #20
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fcb9 	bl	8005784 <_StoreChar>
    }
  } while (*sFormat);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f47f ae72 	bne.w	8005b00 <_VPrintTarget+0x38>
 8005e1c:	e000      	b.n	8005e20 <_VPrintTarget+0x358>
      break;
 8005e1e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d041      	beq.n	8005eaa <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	643b      	str	r3, [r7, #64]	; 0x40
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e36:	e00b      	b.n	8005e50 <_VPrintTarget+0x388>
 8005e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	1c59      	adds	r1, r3, #1
 8005e40:	6439      	str	r1, [r7, #64]	; 0x40
 8005e42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4c:	09db      	lsrs	r3, r3, #7
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	2b7f      	cmp	r3, #127	; 0x7f
 8005e54:	d8f0      	bhi.n	8005e38 <_VPrintTarget+0x370>
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	643a      	str	r2, [r7, #64]	; 0x40
 8005e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e6e:	e00b      	b.n	8005e88 <_VPrintTarget+0x3c0>
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	09db      	lsrs	r3, r3, #7
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8c:	d8f0      	bhi.n	8005e70 <_VPrintTarget+0x3a8>
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	69b9      	ldr	r1, [r7, #24]
 8005ea2:	221a      	movs	r2, #26
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fb85 	bl	80055b4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005eb0:	bf00      	nop
 8005eb2:	3758      	adds	r7, #88	; 0x58
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ecc:	4917      	ldr	r1, [pc, #92]	; (8005f2c <SEGGER_SYSVIEW_Init+0x74>)
 8005ece:	4818      	ldr	r0, [pc, #96]	; (8005f30 <SEGGER_SYSVIEW_Init+0x78>)
 8005ed0:	f7ff f95e 	bl	8005190 <SEGGER_RTT_AllocUpBuffer>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eda:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005edc:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ede:	785a      	ldrb	r2, [r3, #1]
 8005ee0:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ee2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ee4:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ee6:	7e1b      	ldrb	r3, [r3, #24]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	2308      	movs	r3, #8
 8005ef0:	4a11      	ldr	r2, [pc, #68]	; (8005f38 <SEGGER_SYSVIEW_Init+0x80>)
 8005ef2:	490f      	ldr	r1, [pc, #60]	; (8005f30 <SEGGER_SYSVIEW_Init+0x78>)
 8005ef4:	f7ff f9d0 	bl	8005298 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005efe:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <SEGGER_SYSVIEW_Init+0x84>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a0c      	ldr	r2, [pc, #48]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f04:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f06:	4a0b      	ldr	r2, [pc, #44]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f0c:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f12:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f18:	4a06      	ldr	r2, [pc, #24]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	200132b0 	.word	0x200132b0
 8005f30:	080080e0 	.word	0x080080e0
 8005f34:	200142b8 	.word	0x200142b8
 8005f38:	200142b0 	.word	0x200142b0
 8005f3c:	e0001004 	.word	0xe0001004

08005f40 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f48:	4a04      	ldr	r2, [pc, #16]	; (8005f5c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6113      	str	r3, [r2, #16]
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	200142b8 	.word	0x200142b8

08005f60 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f68:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6c:	f04f 0120 	mov.w	r1, #32
 8005f70:	f381 8811 	msr	BASEPRI, r1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	4808      	ldr	r0, [pc, #32]	; (8005f98 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f78:	f7ff fa2a 	bl	80053d0 <_PreparePacket>
 8005f7c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68b8      	ldr	r0, [r7, #8]
 8005f84:	f7ff fb16 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200142e8 	.word	0x200142e8

08005f9c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	f04f 0120 	mov.w	r1, #32
 8005fae:	f381 8811 	msr	BASEPRI, r1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	4816      	ldr	r0, [pc, #88]	; (8006010 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fb6:	f7ff fa0b 	bl	80053d0 <_PreparePacket>
 8005fba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e00b      	b.n	8005fe2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	1c59      	adds	r1, r3, #1
 8005fd2:	61f9      	str	r1, [r7, #28]
 8005fd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	09db      	lsrs	r3, r3, #7
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe6:	d8f0      	bhi.n	8005fca <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	61fa      	str	r2, [r7, #28]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	6938      	ldr	r0, [r7, #16]
 8005ffe:	f7ff fad9 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f383 8811 	msr	BASEPRI, r3
}
 8006008:	bf00      	nop
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	200142e8 	.word	0x200142e8

08006014 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b08c      	sub	sp, #48	; 0x30
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006020:	f3ef 8311 	mrs	r3, BASEPRI
 8006024:	f04f 0120 	mov.w	r1, #32
 8006028:	f381 8811 	msr	BASEPRI, r1
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	4825      	ldr	r0, [pc, #148]	; (80060c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006030:	f7ff f9ce 	bl	80053d0 <_PreparePacket>
 8006034:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
 8006042:	e00b      	b.n	800605c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	b2da      	uxtb	r2, r3
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800604e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	09db      	lsrs	r3, r3, #7
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	2b7f      	cmp	r3, #127	; 0x7f
 8006060:	d8f0      	bhi.n	8006044 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	e00b      	b.n	8006094 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	1c59      	adds	r1, r3, #1
 8006084:	6279      	str	r1, [r7, #36]	; 0x24
 8006086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	09db      	lsrs	r3, r3, #7
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	2b7f      	cmp	r3, #127	; 0x7f
 8006098:	d8f0      	bhi.n	800607c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	627a      	str	r2, [r7, #36]	; 0x24
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	6979      	ldr	r1, [r7, #20]
 80060ae:	69b8      	ldr	r0, [r7, #24]
 80060b0:	f7ff fa80 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f383 8811 	msr	BASEPRI, r3
}
 80060ba:	bf00      	nop
 80060bc:	3730      	adds	r7, #48	; 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200142e8 	.word	0x200142e8

080060c8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08e      	sub	sp, #56	; 0x38
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80060d6:	f3ef 8311 	mrs	r3, BASEPRI
 80060da:	f04f 0120 	mov.w	r1, #32
 80060de:	f381 8811 	msr	BASEPRI, r1
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	4832      	ldr	r0, [pc, #200]	; (80061b0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80060e6:	f7ff f973 	bl	80053d0 <_PreparePacket>
 80060ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
 80060f8:	e00b      	b.n	8006112 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	6379      	str	r1, [r7, #52]	; 0x34
 8006104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	09db      	lsrs	r3, r3, #7
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	2b7f      	cmp	r3, #127	; 0x7f
 8006116:	d8f0      	bhi.n	80060fa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	637a      	str	r2, [r7, #52]	; 0x34
 800611e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006130:	e00b      	b.n	800614a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	b2da      	uxtb	r2, r3
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800613c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	2b7f      	cmp	r3, #127	; 0x7f
 800614e:	d8f0      	bhi.n	8006132 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	623b      	str	r3, [r7, #32]
 8006168:	e00b      	b.n	8006182 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	6279      	str	r1, [r7, #36]	; 0x24
 8006174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	09db      	lsrs	r3, r3, #7
 8006180:	623b      	str	r3, [r7, #32]
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2b7f      	cmp	r3, #127	; 0x7f
 8006186:	d8f0      	bhi.n	800616a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	627a      	str	r2, [r7, #36]	; 0x24
 800618e:	6a3a      	ldr	r2, [r7, #32]
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	69b8      	ldr	r0, [r7, #24]
 800619e:	f7ff fa09 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f383 8811 	msr	BASEPRI, r3
}
 80061a8:	bf00      	nop
 80061aa:	3738      	adds	r7, #56	; 0x38
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	200142e8 	.word	0x200142e8

080061b4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b090      	sub	sp, #64	; 0x40
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061c2:	f3ef 8311 	mrs	r3, BASEPRI
 80061c6:	f04f 0120 	mov.w	r1, #32
 80061ca:	f381 8811 	msr	BASEPRI, r1
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	4840      	ldr	r0, [pc, #256]	; (80062d4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80061d2:	f7ff f8fd 	bl	80053d0 <_PreparePacket>
 80061d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80061f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	2b7f      	cmp	r3, #127	; 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800620a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	637b      	str	r3, [r7, #52]	; 0x34
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	633b      	str	r3, [r7, #48]	; 0x30
 800621c:	e00b      	b.n	8006236 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	b2da      	uxtb	r2, r3
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	1c59      	adds	r1, r3, #1
 8006226:	6379      	str	r1, [r7, #52]	; 0x34
 8006228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	09db      	lsrs	r3, r3, #7
 8006234:	633b      	str	r3, [r7, #48]	; 0x30
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	2b7f      	cmp	r3, #127	; 0x7f
 800623a:	d8f0      	bhi.n	800621e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	637a      	str	r2, [r7, #52]	; 0x34
 8006242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
 8006254:	e00b      	b.n	800626e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	b2da      	uxtb	r2, r3
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	1c59      	adds	r1, r3, #1
 800625e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	09db      	lsrs	r3, r3, #7
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	2b7f      	cmp	r3, #127	; 0x7f
 8006272:	d8f0      	bhi.n	8006256 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800627a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
 8006288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628a:	623b      	str	r3, [r7, #32]
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	6279      	str	r1, [r7, #36]	; 0x24
 8006298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	2b7f      	cmp	r3, #127	; 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	627a      	str	r2, [r7, #36]	; 0x24
 80062b2:	6a3a      	ldr	r2, [r7, #32]
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	69b8      	ldr	r0, [r7, #24]
 80062c2:	f7ff f977 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f383 8811 	msr	BASEPRI, r3
}
 80062cc:	bf00      	nop
 80062ce:	3740      	adds	r7, #64	; 0x40
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	200142e8 	.word	0x200142e8

080062d8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	; 0x30
 80062dc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062de:	4b59      	ldr	r3, [pc, #356]	; (8006444 <SEGGER_SYSVIEW_Start+0x16c>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80062e4:	f3ef 8311 	mrs	r3, BASEPRI
 80062e8:	f04f 0120 	mov.w	r1, #32
 80062ec:	f381 8811 	msr	BASEPRI, r1
 80062f0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80062f2:	4b54      	ldr	r3, [pc, #336]	; (8006444 <SEGGER_SYSVIEW_Start+0x16c>)
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	220a      	movs	r2, #10
 80062f8:	4953      	ldr	r1, [pc, #332]	; (8006448 <SEGGER_SYSVIEW_Start+0x170>)
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7f9 ff88 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006306:	f7fe fd17 	bl	8004d38 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800630a:	200a      	movs	r0, #10
 800630c:	f7ff fe28 	bl	8005f60 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006310:	f3ef 8311 	mrs	r3, BASEPRI
 8006314:	f04f 0120 	mov.w	r1, #32
 8006318:	f381 8811 	msr	BASEPRI, r1
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	484b      	ldr	r0, [pc, #300]	; (800644c <SEGGER_SYSVIEW_Start+0x174>)
 8006320:	f7ff f856 	bl	80053d0 <_PreparePacket>
 8006324:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800632e:	4b45      	ldr	r3, [pc, #276]	; (8006444 <SEGGER_SYSVIEW_Start+0x16c>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
 8006334:	e00b      	b.n	800634e <SEGGER_SYSVIEW_Start+0x76>
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	b2da      	uxtb	r2, r3
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	1c59      	adds	r1, r3, #1
 800633e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006340:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	09db      	lsrs	r3, r3, #7
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	2b7f      	cmp	r3, #127	; 0x7f
 8006352:	d8f0      	bhi.n	8006336 <SEGGER_SYSVIEW_Start+0x5e>
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
 8006368:	4b36      	ldr	r3, [pc, #216]	; (8006444 <SEGGER_SYSVIEW_Start+0x16c>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	623b      	str	r3, [r7, #32]
 800636e:	e00b      	b.n	8006388 <SEGGER_SYSVIEW_Start+0xb0>
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	b2da      	uxtb	r2, r3
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	1c59      	adds	r1, r3, #1
 8006378:	6279      	str	r1, [r7, #36]	; 0x24
 800637a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	09db      	lsrs	r3, r3, #7
 8006386:	623b      	str	r3, [r7, #32]
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	2b7f      	cmp	r3, #127	; 0x7f
 800638c:	d8f0      	bhi.n	8006370 <SEGGER_SYSVIEW_Start+0x98>
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	627a      	str	r2, [r7, #36]	; 0x24
 8006394:	6a3a      	ldr	r2, [r7, #32]
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	4b28      	ldr	r3, [pc, #160]	; (8006444 <SEGGER_SYSVIEW_Start+0x16c>)
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	e00b      	b.n	80063c2 <SEGGER_SYSVIEW_Start+0xea>
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	1c59      	adds	r1, r3, #1
 80063b2:	61f9      	str	r1, [r7, #28]
 80063b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	09db      	lsrs	r3, r3, #7
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b7f      	cmp	r3, #127	; 0x7f
 80063c6:	d8f0      	bhi.n	80063aa <SEGGER_SYSVIEW_Start+0xd2>
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	61fa      	str	r2, [r7, #28]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	e00b      	b.n	80063fa <SEGGER_SYSVIEW_Start+0x122>
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	1c59      	adds	r1, r3, #1
 80063ea:	6179      	str	r1, [r7, #20]
 80063ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	09db      	lsrs	r3, r3, #7
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b7f      	cmp	r3, #127	; 0x7f
 80063fe:	d8f0      	bhi.n	80063e2 <SEGGER_SYSVIEW_Start+0x10a>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	617a      	str	r2, [r7, #20]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006410:	2218      	movs	r2, #24
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff f8cd 	bl	80055b4 <_SendPacket>
      RECORD_END();
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006420:	4b08      	ldr	r3, [pc, #32]	; (8006444 <SEGGER_SYSVIEW_Start+0x16c>)
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <SEGGER_SYSVIEW_Start+0x16c>)
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800642e:	f000 f9eb 	bl	8006808 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006432:	f000 f9b1 	bl	8006798 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006436:	f000 fc83 	bl	8006d40 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800643a:	bf00      	nop
 800643c:	3730      	adds	r7, #48	; 0x30
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200142b8 	.word	0x200142b8
 8006448:	08008108 	.word	0x08008108
 800644c:	200142e8 	.word	0x200142e8

08006450 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006456:	f3ef 8311 	mrs	r3, BASEPRI
 800645a:	f04f 0120 	mov.w	r1, #32
 800645e:	f381 8811 	msr	BASEPRI, r1
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	480b      	ldr	r0, [pc, #44]	; (8006494 <SEGGER_SYSVIEW_Stop+0x44>)
 8006466:	f7fe ffb3 	bl	80053d0 <_PreparePacket>
 800646a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <SEGGER_SYSVIEW_Stop+0x48>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006474:	220b      	movs	r2, #11
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6838      	ldr	r0, [r7, #0]
 800647a:	f7ff f89b 	bl	80055b4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800647e:	4b06      	ldr	r3, [pc, #24]	; (8006498 <SEGGER_SYSVIEW_Stop+0x48>)
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f383 8811 	msr	BASEPRI, r3
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	200142e8 	.word	0x200142e8
 8006498:	200142b8 	.word	0x200142b8

0800649c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	; 0x30
 80064a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064a2:	f3ef 8311 	mrs	r3, BASEPRI
 80064a6:	f04f 0120 	mov.w	r1, #32
 80064aa:	f381 8811 	msr	BASEPRI, r1
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	4845      	ldr	r0, [pc, #276]	; (80065c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064b2:	f7fe ff8d 	bl	80053d0 <_PreparePacket>
 80064b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c0:	4b42      	ldr	r3, [pc, #264]	; (80065cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c6:	e00b      	b.n	80064e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	09db      	lsrs	r3, r3, #7
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	2b7f      	cmp	r3, #127	; 0x7f
 80064e4:	d8f0      	bhi.n	80064c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
 80064fa:	4b34      	ldr	r3, [pc, #208]	; (80065cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	623b      	str	r3, [r7, #32]
 8006500:	e00b      	b.n	800651a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	6279      	str	r1, [r7, #36]	; 0x24
 800650c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	09db      	lsrs	r3, r3, #7
 8006518:	623b      	str	r3, [r7, #32]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	2b7f      	cmp	r3, #127	; 0x7f
 800651e:	d8f0      	bhi.n	8006502 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	627a      	str	r2, [r7, #36]	; 0x24
 8006526:	6a3a      	ldr	r2, [r7, #32]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	4b25      	ldr	r3, [pc, #148]	; (80065cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	e00b      	b.n	8006554 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	61f9      	str	r1, [r7, #28]
 8006546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	09db      	lsrs	r3, r3, #7
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b7f      	cmp	r3, #127	; 0x7f
 8006558:	d8f0      	bhi.n	800653c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	61fa      	str	r2, [r7, #28]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	e00b      	b.n	800658c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	b2da      	uxtb	r2, r3
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	1c59      	adds	r1, r3, #1
 800657c:	6179      	str	r1, [r7, #20]
 800657e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	09db      	lsrs	r3, r3, #7
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2b7f      	cmp	r3, #127	; 0x7f
 8006590:	d8f0      	bhi.n	8006574 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	617a      	str	r2, [r7, #20]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065a2:	2218      	movs	r2, #24
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	68b8      	ldr	r0, [r7, #8]
 80065a8:	f7ff f804 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065ba:	4b04      	ldr	r3, [pc, #16]	; (80065cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	4798      	blx	r3
  }
}
 80065c0:	bf00      	nop
 80065c2:	3730      	adds	r7, #48	; 0x30
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	200142e8 	.word	0x200142e8
 80065cc:	200142b8 	.word	0x200142b8

080065d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b092      	sub	sp, #72	; 0x48
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065d8:	f3ef 8311 	mrs	r3, BASEPRI
 80065dc:	f04f 0120 	mov.w	r1, #32
 80065e0:	f381 8811 	msr	BASEPRI, r1
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	486a      	ldr	r0, [pc, #424]	; (8006790 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80065e8:	f7fe fef2 	bl	80053d0 <_PreparePacket>
 80065ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	647b      	str	r3, [r7, #68]	; 0x44
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b66      	ldr	r3, [pc, #408]	; (8006794 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	643b      	str	r3, [r7, #64]	; 0x40
 8006602:	e00b      	b.n	800661c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	6479      	str	r1, [r7, #68]	; 0x44
 800660e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006618:	09db      	lsrs	r3, r3, #7
 800661a:	643b      	str	r3, [r7, #64]	; 0x40
 800661c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661e:	2b7f      	cmp	r3, #127	; 0x7f
 8006620:	d8f0      	bhi.n	8006604 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	647a      	str	r2, [r7, #68]	; 0x44
 8006628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	63bb      	str	r3, [r7, #56]	; 0x38
 800663c:	e00b      	b.n	8006656 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	1c59      	adds	r1, r3, #1
 8006646:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	09db      	lsrs	r3, r3, #7
 8006654:	63bb      	str	r3, [r7, #56]	; 0x38
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	2b7f      	cmp	r3, #127	; 0x7f
 800665a:	d8f0      	bhi.n	800663e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	4619      	mov	r1, r3
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7fe fe5b 	bl	8005330 <_EncodeStr>
 800667a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800667c:	2209      	movs	r2, #9
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	6938      	ldr	r0, [r7, #16]
 8006682:	f7fe ff97 	bl	80055b4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	637b      	str	r3, [r7, #52]	; 0x34
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b40      	ldr	r3, [pc, #256]	; (8006794 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	633b      	str	r3, [r7, #48]	; 0x30
 800669a:	e00b      	b.n	80066b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	6379      	str	r1, [r7, #52]	; 0x34
 80066a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	09db      	lsrs	r3, r3, #7
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	2b7f      	cmp	r3, #127	; 0x7f
 80066b8:	d8f0      	bhi.n	800669c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	637a      	str	r2, [r7, #52]	; 0x34
 80066c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d4:	e00b      	b.n	80066ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	1c59      	adds	r1, r3, #1
 80066de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	09db      	lsrs	r3, r3, #7
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	2b7f      	cmp	r3, #127	; 0x7f
 80066f2:	d8f0      	bhi.n	80066d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	623b      	str	r3, [r7, #32]
 800670e:	e00b      	b.n	8006728 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	6279      	str	r1, [r7, #36]	; 0x24
 800671a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	09db      	lsrs	r3, r3, #7
 8006726:	623b      	str	r3, [r7, #32]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2b7f      	cmp	r3, #127	; 0x7f
 800672c:	d8f0      	bhi.n	8006710 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	627a      	str	r2, [r7, #36]	; 0x24
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	2300      	movs	r3, #0
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e00b      	b.n	8006760 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	1c59      	adds	r1, r3, #1
 8006750:	61f9      	str	r1, [r7, #28]
 8006752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	09db      	lsrs	r3, r3, #7
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b7f      	cmp	r3, #127	; 0x7f
 8006764:	d8f0      	bhi.n	8006748 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	61fa      	str	r2, [r7, #28]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006776:	2215      	movs	r2, #21
 8006778:	68f9      	ldr	r1, [r7, #12]
 800677a:	6938      	ldr	r0, [r7, #16]
 800677c:	f7fe ff1a 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f383 8811 	msr	BASEPRI, r3
}
 8006786:	bf00      	nop
 8006788:	3748      	adds	r7, #72	; 0x48
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	200142e8 	.word	0x200142e8
 8006794:	200142b8 	.word	0x200142b8

08006798 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067ae:	4b03      	ldr	r3, [pc, #12]	; (80067bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4798      	blx	r3
  }
}
 80067b6:	bf00      	nop
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	200142b8 	.word	0x200142b8

080067c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067c8:	f3ef 8311 	mrs	r3, BASEPRI
 80067cc:	f04f 0120 	mov.w	r1, #32
 80067d0:	f381 8811 	msr	BASEPRI, r1
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	480b      	ldr	r0, [pc, #44]	; (8006804 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067d8:	f7fe fdfa 	bl	80053d0 <_PreparePacket>
 80067dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067de:	2280      	movs	r2, #128	; 0x80
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	6938      	ldr	r0, [r7, #16]
 80067e4:	f7fe fda4 	bl	8005330 <_EncodeStr>
 80067e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80067ea:	220e      	movs	r2, #14
 80067ec:	68f9      	ldr	r1, [r7, #12]
 80067ee:	6938      	ldr	r0, [r7, #16]
 80067f0:	f7fe fee0 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f383 8811 	msr	BASEPRI, r3
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	200142e8 	.word	0x200142e8

08006808 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800680e:	4b15      	ldr	r3, [pc, #84]	; (8006864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01a      	beq.n	800684c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d015      	beq.n	800684c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006820:	4b10      	ldr	r3, [pc, #64]	; (8006864 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4798      	blx	r3
 8006828:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800682c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800682e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	000a      	movs	r2, r1
 800683c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800683e:	4613      	mov	r3, r2
 8006840:	461a      	mov	r2, r3
 8006842:	4621      	mov	r1, r4
 8006844:	200d      	movs	r0, #13
 8006846:	f7ff fbe5 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x2>
 800684a:	e006      	b.n	800685a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4619      	mov	r1, r3
 8006852:	200c      	movs	r0, #12
 8006854:	f7ff fba2 	bl	8005f9c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	bd90      	pop	{r4, r7, pc}
 8006862:	bf00      	nop
 8006864:	200142b8 	.word	0x200142b8
 8006868:	e0001004 	.word	0xe0001004

0800686c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006872:	f3ef 8311 	mrs	r3, BASEPRI
 8006876:	f04f 0120 	mov.w	r1, #32
 800687a:	f381 8811 	msr	BASEPRI, r1
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	4819      	ldr	r0, [pc, #100]	; (80068e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006882:	f7fe fda5 	bl	80053d0 <_PreparePacket>
 8006886:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800688c:	4b17      	ldr	r3, [pc, #92]	; (80068ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006894:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e00b      	b.n	80068b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	6179      	str	r1, [r7, #20]
 80068aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	09db      	lsrs	r3, r3, #7
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b7f      	cmp	r3, #127	; 0x7f
 80068bc:	d8f0      	bhi.n	80068a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	617a      	str	r2, [r7, #20]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068ce:	2202      	movs	r2, #2
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	68b8      	ldr	r0, [r7, #8]
 80068d4:	f7fe fe6e 	bl	80055b4 <_SendPacket>
  RECORD_END();
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f383 8811 	msr	BASEPRI, r3
}
 80068de:	bf00      	nop
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200142e8 	.word	0x200142e8
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068f6:	f3ef 8311 	mrs	r3, BASEPRI
 80068fa:	f04f 0120 	mov.w	r1, #32
 80068fe:	f381 8811 	msr	BASEPRI, r1
 8006902:	607b      	str	r3, [r7, #4]
 8006904:	4807      	ldr	r0, [pc, #28]	; (8006924 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006906:	f7fe fd63 	bl	80053d0 <_PreparePacket>
 800690a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800690c:	2203      	movs	r2, #3
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6838      	ldr	r0, [r7, #0]
 8006912:	f7fe fe4f 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f383 8811 	msr	BASEPRI, r3
}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	200142e8 	.word	0x200142e8

08006928 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800692e:	f3ef 8311 	mrs	r3, BASEPRI
 8006932:	f04f 0120 	mov.w	r1, #32
 8006936:	f381 8811 	msr	BASEPRI, r1
 800693a:	607b      	str	r3, [r7, #4]
 800693c:	4807      	ldr	r0, [pc, #28]	; (800695c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800693e:	f7fe fd47 	bl	80053d0 <_PreparePacket>
 8006942:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006944:	2212      	movs	r2, #18
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6838      	ldr	r0, [r7, #0]
 800694a:	f7fe fe33 	bl	80055b4 <_SendPacket>
  RECORD_END();
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f383 8811 	msr	BASEPRI, r3
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	200142e8 	.word	0x200142e8

08006960 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006966:	f3ef 8311 	mrs	r3, BASEPRI
 800696a:	f04f 0120 	mov.w	r1, #32
 800696e:	f381 8811 	msr	BASEPRI, r1
 8006972:	607b      	str	r3, [r7, #4]
 8006974:	4807      	ldr	r0, [pc, #28]	; (8006994 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006976:	f7fe fd2b 	bl	80053d0 <_PreparePacket>
 800697a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800697c:	2211      	movs	r2, #17
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6838      	ldr	r0, [r7, #0]
 8006982:	f7fe fe17 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f383 8811 	msr	BASEPRI, r3
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	200142e8 	.word	0x200142e8

08006998 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069a0:	f3ef 8311 	mrs	r3, BASEPRI
 80069a4:	f04f 0120 	mov.w	r1, #32
 80069a8:	f381 8811 	msr	BASEPRI, r1
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	4819      	ldr	r0, [pc, #100]	; (8006a14 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069b0:	f7fe fd0e 	bl	80053d0 <_PreparePacket>
 80069b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069ba:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	e00b      	b.n	80069e6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	1c59      	adds	r1, r3, #1
 80069d6:	61f9      	str	r1, [r7, #28]
 80069d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	09db      	lsrs	r3, r3, #7
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ea:	d8f0      	bhi.n	80069ce <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	61fa      	str	r2, [r7, #28]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80069fc:	2208      	movs	r2, #8
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	6938      	ldr	r0, [r7, #16]
 8006a02:	f7fe fdd7 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f383 8811 	msr	BASEPRI, r3
}
 8006a0c:	bf00      	nop
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	200142e8 	.word	0x200142e8
 8006a18:	200142b8 	.word	0x200142b8

08006a1c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a24:	f3ef 8311 	mrs	r3, BASEPRI
 8006a28:	f04f 0120 	mov.w	r1, #32
 8006a2c:	f381 8811 	msr	BASEPRI, r1
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	4819      	ldr	r0, [pc, #100]	; (8006a98 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a34:	f7fe fccc 	bl	80053d0 <_PreparePacket>
 8006a38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a3e:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	e00b      	b.n	8006a6a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	1c59      	adds	r1, r3, #1
 8006a5a:	61f9      	str	r1, [r7, #28]
 8006a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	09db      	lsrs	r3, r3, #7
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6e:	d8f0      	bhi.n	8006a52 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	61fa      	str	r2, [r7, #28]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a80:	2204      	movs	r2, #4
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	6938      	ldr	r0, [r7, #16]
 8006a86:	f7fe fd95 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f383 8811 	msr	BASEPRI, r3
}
 8006a90:	bf00      	nop
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200142e8 	.word	0x200142e8
 8006a9c:	200142b8 	.word	0x200142b8

08006aa0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8006aac:	f04f 0120 	mov.w	r1, #32
 8006ab0:	f381 8811 	msr	BASEPRI, r1
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	4819      	ldr	r0, [pc, #100]	; (8006b1c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ab8:	f7fe fc8a 	bl	80053d0 <_PreparePacket>
 8006abc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ac2:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	e00b      	b.n	8006aee <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1c59      	adds	r1, r3, #1
 8006ade:	61f9      	str	r1, [r7, #28]
 8006ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	09db      	lsrs	r3, r3, #7
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b7f      	cmp	r3, #127	; 0x7f
 8006af2:	d8f0      	bhi.n	8006ad6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	61fa      	str	r2, [r7, #28]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b04:	2206      	movs	r2, #6
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	6938      	ldr	r0, [r7, #16]
 8006b0a:	f7fe fd53 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f383 8811 	msr	BASEPRI, r3
}
 8006b14:	bf00      	nop
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	200142e8 	.word	0x200142e8
 8006b20:	200142b8 	.word	0x200142b8

08006b24 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b32:	f04f 0120 	mov.w	r1, #32
 8006b36:	f381 8811 	msr	BASEPRI, r1
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	4827      	ldr	r0, [pc, #156]	; (8006bdc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006b3e:	f7fe fc47 	bl	80053d0 <_PreparePacket>
 8006b42:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b48:	4b25      	ldr	r3, [pc, #148]	; (8006be0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	623b      	str	r3, [r7, #32]
 8006b5a:	e00b      	b.n	8006b74 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	6279      	str	r1, [r7, #36]	; 0x24
 8006b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	09db      	lsrs	r3, r3, #7
 8006b72:	623b      	str	r3, [r7, #32]
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	2b7f      	cmp	r3, #127	; 0x7f
 8006b78:	d8f0      	bhi.n	8006b5c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b80:	6a3a      	ldr	r2, [r7, #32]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	e00b      	b.n	8006bac <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	61f9      	str	r1, [r7, #28]
 8006b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	09db      	lsrs	r3, r3, #7
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb0:	d8f0      	bhi.n	8006b94 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	61fa      	str	r2, [r7, #28]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006bc2:	2207      	movs	r2, #7
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	6938      	ldr	r0, [r7, #16]
 8006bc8:	f7fe fcf4 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f383 8811 	msr	BASEPRI, r3
}
 8006bd2:	bf00      	nop
 8006bd4:	3728      	adds	r7, #40	; 0x28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200142e8 	.word	0x200142e8
 8006be0:	200142b8 	.word	0x200142b8

08006be4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	1ad3      	subs	r3, r2, r3
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	200142b8 	.word	0x200142b8

08006c04 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08c      	sub	sp, #48	; 0x30
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c0e:	4b3b      	ldr	r3, [pc, #236]	; (8006cfc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d06d      	beq.n	8006cf2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c16:	4b39      	ldr	r3, [pc, #228]	; (8006cfc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c20:	e008      	b.n	8006c34 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	3301      	adds	r3, #1
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d3f2      	bcc.n	8006c22 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c3c:	e000      	b.n	8006c40 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c3e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d055      	beq.n	8006cf2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c46:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4a:	f04f 0120 	mov.w	r1, #32
 8006c4e:	f381 8811 	msr	BASEPRI, r1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	482a      	ldr	r0, [pc, #168]	; (8006d00 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c56:	f7fe fbbb 	bl	80053d0 <_PreparePacket>
 8006c5a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	623b      	str	r3, [r7, #32]
 8006c68:	e00b      	b.n	8006c82 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	6279      	str	r1, [r7, #36]	; 0x24
 8006c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	09db      	lsrs	r3, r3, #7
 8006c80:	623b      	str	r3, [r7, #32]
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	2b7f      	cmp	r3, #127	; 0x7f
 8006c86:	d8f0      	bhi.n	8006c6a <SEGGER_SYSVIEW_SendModule+0x66>
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8006c8e:	6a3a      	ldr	r2, [r7, #32]
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	e00b      	b.n	8006cbc <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	61f9      	str	r1, [r7, #28]
 8006cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	09db      	lsrs	r3, r3, #7
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc0:	d8f0      	bhi.n	8006ca4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	61fa      	str	r2, [r7, #28]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	4619      	mov	r1, r3
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7fe fb28 	bl	8005330 <_EncodeStr>
 8006ce0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006ce2:	2216      	movs	r2, #22
 8006ce4:	68f9      	ldr	r1, [r7, #12]
 8006ce6:	6938      	ldr	r0, [r7, #16]
 8006ce8:	f7fe fc64 	bl	80055b4 <_SendPacket>
      RECORD_END();
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	3730      	adds	r7, #48	; 0x30
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200142e0 	.word	0x200142e0
 8006d00:	200142e8 	.word	0x200142e8

08006d04 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d0a:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00f      	beq.n	8006d32 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d12:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f2      	bne.n	8006d18 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200142e0 	.word	0x200142e0

08006d40 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d46:	f3ef 8311 	mrs	r3, BASEPRI
 8006d4a:	f04f 0120 	mov.w	r1, #32
 8006d4e:	f381 8811 	msr	BASEPRI, r1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	4817      	ldr	r0, [pc, #92]	; (8006db4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d56:	f7fe fb3b 	bl	80053d0 <_PreparePacket>
 8006d5a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	e00b      	b.n	8006d84 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	1c59      	adds	r1, r3, #1
 8006d74:	6179      	str	r1, [r7, #20]
 8006d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	09db      	lsrs	r3, r3, #7
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b7f      	cmp	r3, #127	; 0x7f
 8006d88:	d8f0      	bhi.n	8006d6c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	617a      	str	r2, [r7, #20]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d9a:	221b      	movs	r2, #27
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	68b8      	ldr	r0, [r7, #8]
 8006da0:	f7fe fc08 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f383 8811 	msr	BASEPRI, r3
}
 8006daa:	bf00      	nop
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200142e8 	.word	0x200142e8
 8006db8:	200142e4 	.word	0x200142e4

08006dbc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006dbc:	b40f      	push	{r0, r1, r2, r3}
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006dc4:	f107 0314 	add.w	r3, r7, #20
 8006dc8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006dca:	1d3b      	adds	r3, r7, #4
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2100      	movs	r1, #0
 8006dd0:	6938      	ldr	r0, [r7, #16]
 8006dd2:	f7fe fe79 	bl	8005ac8 <_VPrintTarget>
  va_end(ParamList);
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006de0:	b004      	add	sp, #16
 8006de2:	4770      	bx	lr

08006de4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dec:	f3ef 8311 	mrs	r3, BASEPRI
 8006df0:	f04f 0120 	mov.w	r1, #32
 8006df4:	f381 8811 	msr	BASEPRI, r1
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	4827      	ldr	r0, [pc, #156]	; (8006e98 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006dfc:	f7fe fae8 	bl	80053d0 <_PreparePacket>
 8006e00:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e02:	2280      	movs	r2, #128	; 0x80
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	6938      	ldr	r0, [r7, #16]
 8006e08:	f7fe fa92 	bl	8005330 <_EncodeStr>
 8006e0c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
 8006e12:	2301      	movs	r3, #1
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	e00b      	b.n	8006e30 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	6279      	str	r1, [r7, #36]	; 0x24
 8006e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	09db      	lsrs	r3, r3, #7
 8006e2e:	623b      	str	r3, [r7, #32]
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	2b7f      	cmp	r3, #127	; 0x7f
 8006e34:	d8f0      	bhi.n	8006e18 <SEGGER_SYSVIEW_Warn+0x34>
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e3c:	6a3a      	ldr	r2, [r7, #32]
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	e00b      	b.n	8006e68 <SEGGER_SYSVIEW_Warn+0x84>
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	1c59      	adds	r1, r3, #1
 8006e58:	61f9      	str	r1, [r7, #28]
 8006e5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	09db      	lsrs	r3, r3, #7
 8006e66:	61bb      	str	r3, [r7, #24]
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e6c:	d8f0      	bhi.n	8006e50 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	61fa      	str	r2, [r7, #28]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e7e:	221a      	movs	r2, #26
 8006e80:	68f9      	ldr	r1, [r7, #12]
 8006e82:	6938      	ldr	r0, [r7, #16]
 8006e84:	f7fe fb96 	bl	80055b4 <_SendPacket>
  RECORD_END();
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
}
 8006e8e:	bf00      	nop
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200142e8 	.word	0x200142e8

08006e9c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f7fe f948 	bl	8005144 <SEGGER_RTT_Write>
  return len;
 8006eb4:	683b      	ldr	r3, [r7, #0]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <__libc_init_array>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4d0d      	ldr	r5, [pc, #52]	; (8006ef8 <__libc_init_array+0x38>)
 8006ec4:	4c0d      	ldr	r4, [pc, #52]	; (8006efc <__libc_init_array+0x3c>)
 8006ec6:	1b64      	subs	r4, r4, r5
 8006ec8:	10a4      	asrs	r4, r4, #2
 8006eca:	2600      	movs	r6, #0
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	d109      	bne.n	8006ee4 <__libc_init_array+0x24>
 8006ed0:	4d0b      	ldr	r5, [pc, #44]	; (8006f00 <__libc_init_array+0x40>)
 8006ed2:	4c0c      	ldr	r4, [pc, #48]	; (8006f04 <__libc_init_array+0x44>)
 8006ed4:	f001 f86a 	bl	8007fac <_init>
 8006ed8:	1b64      	subs	r4, r4, r5
 8006eda:	10a4      	asrs	r4, r4, #2
 8006edc:	2600      	movs	r6, #0
 8006ede:	42a6      	cmp	r6, r4
 8006ee0:	d105      	bne.n	8006eee <__libc_init_array+0x2e>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee8:	4798      	blx	r3
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7ee      	b.n	8006ecc <__libc_init_array+0xc>
 8006eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef2:	4798      	blx	r3
 8006ef4:	3601      	adds	r6, #1
 8006ef6:	e7f2      	b.n	8006ede <__libc_init_array+0x1e>
 8006ef8:	080081c4 	.word	0x080081c4
 8006efc:	080081c4 	.word	0x080081c4
 8006f00:	080081c4 	.word	0x080081c4
 8006f04:	080081c8 	.word	0x080081c8

08006f08 <memcmp>:
 8006f08:	b530      	push	{r4, r5, lr}
 8006f0a:	3901      	subs	r1, #1
 8006f0c:	2400      	movs	r4, #0
 8006f0e:	42a2      	cmp	r2, r4
 8006f10:	d101      	bne.n	8006f16 <memcmp+0xe>
 8006f12:	2000      	movs	r0, #0
 8006f14:	e005      	b.n	8006f22 <memcmp+0x1a>
 8006f16:	5d03      	ldrb	r3, [r0, r4]
 8006f18:	3401      	adds	r4, #1
 8006f1a:	5d0d      	ldrb	r5, [r1, r4]
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	d0f6      	beq.n	8006f0e <memcmp+0x6>
 8006f20:	1b58      	subs	r0, r3, r5
 8006f22:	bd30      	pop	{r4, r5, pc}

08006f24 <memcpy>:
 8006f24:	440a      	add	r2, r1
 8006f26:	4291      	cmp	r1, r2
 8006f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f2c:	d100      	bne.n	8006f30 <memcpy+0xc>
 8006f2e:	4770      	bx	lr
 8006f30:	b510      	push	{r4, lr}
 8006f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f3a:	4291      	cmp	r1, r2
 8006f3c:	d1f9      	bne.n	8006f32 <memcpy+0xe>
 8006f3e:	bd10      	pop	{r4, pc}

08006f40 <memset>:
 8006f40:	4402      	add	r2, r0
 8006f42:	4603      	mov	r3, r0
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d100      	bne.n	8006f4a <memset+0xa>
 8006f48:	4770      	bx	lr
 8006f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4e:	e7f9      	b.n	8006f44 <memset+0x4>

08006f50 <_puts_r>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	460e      	mov	r6, r1
 8006f54:	4605      	mov	r5, r0
 8006f56:	b118      	cbz	r0, 8006f60 <_puts_r+0x10>
 8006f58:	6983      	ldr	r3, [r0, #24]
 8006f5a:	b90b      	cbnz	r3, 8006f60 <_puts_r+0x10>
 8006f5c:	f000 fa7c 	bl	8007458 <__sinit>
 8006f60:	69ab      	ldr	r3, [r5, #24]
 8006f62:	68ac      	ldr	r4, [r5, #8]
 8006f64:	b913      	cbnz	r3, 8006f6c <_puts_r+0x1c>
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 fa76 	bl	8007458 <__sinit>
 8006f6c:	4b2c      	ldr	r3, [pc, #176]	; (8007020 <_puts_r+0xd0>)
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d120      	bne.n	8006fb4 <_puts_r+0x64>
 8006f72:	686c      	ldr	r4, [r5, #4]
 8006f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f76:	07db      	lsls	r3, r3, #31
 8006f78:	d405      	bmi.n	8006f86 <_puts_r+0x36>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	0598      	lsls	r0, r3, #22
 8006f7e:	d402      	bmi.n	8006f86 <_puts_r+0x36>
 8006f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f82:	f000 fb07 	bl	8007594 <__retarget_lock_acquire_recursive>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	0719      	lsls	r1, r3, #28
 8006f8a:	d51d      	bpl.n	8006fc8 <_puts_r+0x78>
 8006f8c:	6923      	ldr	r3, [r4, #16]
 8006f8e:	b1db      	cbz	r3, 8006fc8 <_puts_r+0x78>
 8006f90:	3e01      	subs	r6, #1
 8006f92:	68a3      	ldr	r3, [r4, #8]
 8006f94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	60a3      	str	r3, [r4, #8]
 8006f9c:	bb39      	cbnz	r1, 8006fee <_puts_r+0x9e>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da38      	bge.n	8007014 <_puts_r+0xc4>
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	210a      	movs	r1, #10
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 f87c 	bl	80070a4 <__swbuf_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d011      	beq.n	8006fd4 <_puts_r+0x84>
 8006fb0:	250a      	movs	r5, #10
 8006fb2:	e011      	b.n	8006fd8 <_puts_r+0x88>
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <_puts_r+0xd4>)
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	d101      	bne.n	8006fbe <_puts_r+0x6e>
 8006fba:	68ac      	ldr	r4, [r5, #8]
 8006fbc:	e7da      	b.n	8006f74 <_puts_r+0x24>
 8006fbe:	4b1a      	ldr	r3, [pc, #104]	; (8007028 <_puts_r+0xd8>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	bf08      	it	eq
 8006fc4:	68ec      	ldreq	r4, [r5, #12]
 8006fc6:	e7d5      	b.n	8006f74 <_puts_r+0x24>
 8006fc8:	4621      	mov	r1, r4
 8006fca:	4628      	mov	r0, r5
 8006fcc:	f000 f8bc 	bl	8007148 <__swsetup_r>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d0dd      	beq.n	8006f90 <_puts_r+0x40>
 8006fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8006fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fda:	07da      	lsls	r2, r3, #31
 8006fdc:	d405      	bmi.n	8006fea <_puts_r+0x9a>
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	059b      	lsls	r3, r3, #22
 8006fe2:	d402      	bmi.n	8006fea <_puts_r+0x9a>
 8006fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fe6:	f000 fad6 	bl	8007596 <__retarget_lock_release_recursive>
 8006fea:	4628      	mov	r0, r5
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da04      	bge.n	8006ffc <_puts_r+0xac>
 8006ff2:	69a2      	ldr	r2, [r4, #24]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	dc06      	bgt.n	8007006 <_puts_r+0xb6>
 8006ff8:	290a      	cmp	r1, #10
 8006ffa:	d004      	beq.n	8007006 <_puts_r+0xb6>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	6022      	str	r2, [r4, #0]
 8007002:	7019      	strb	r1, [r3, #0]
 8007004:	e7c5      	b.n	8006f92 <_puts_r+0x42>
 8007006:	4622      	mov	r2, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f000 f84b 	bl	80070a4 <__swbuf_r>
 800700e:	3001      	adds	r0, #1
 8007010:	d1bf      	bne.n	8006f92 <_puts_r+0x42>
 8007012:	e7df      	b.n	8006fd4 <_puts_r+0x84>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	250a      	movs	r5, #10
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	6022      	str	r2, [r4, #0]
 800701c:	701d      	strb	r5, [r3, #0]
 800701e:	e7db      	b.n	8006fd8 <_puts_r+0x88>
 8007020:	08008148 	.word	0x08008148
 8007024:	08008168 	.word	0x08008168
 8007028:	08008128 	.word	0x08008128

0800702c <puts>:
 800702c:	4b02      	ldr	r3, [pc, #8]	; (8007038 <puts+0xc>)
 800702e:	4601      	mov	r1, r0
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f7ff bf8d 	b.w	8006f50 <_puts_r>
 8007036:	bf00      	nop
 8007038:	20000018 	.word	0x20000018

0800703c <sniprintf>:
 800703c:	b40c      	push	{r2, r3}
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <sniprintf+0x64>)
 8007042:	1e0c      	subs	r4, r1, #0
 8007044:	681d      	ldr	r5, [r3, #0]
 8007046:	b09d      	sub	sp, #116	; 0x74
 8007048:	da08      	bge.n	800705c <sniprintf+0x20>
 800704a:	238b      	movs	r3, #139	; 0x8b
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f04f 30ff 	mov.w	r0, #4294967295
 8007052:	b01d      	add	sp, #116	; 0x74
 8007054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007058:	b002      	add	sp, #8
 800705a:	4770      	bx	lr
 800705c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007060:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007064:	bf14      	ite	ne
 8007066:	f104 33ff 	addne.w	r3, r4, #4294967295
 800706a:	4623      	moveq	r3, r4
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007074:	9002      	str	r0, [sp, #8]
 8007076:	9006      	str	r0, [sp, #24]
 8007078:	f8ad 3016 	strh.w	r3, [sp, #22]
 800707c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800707e:	ab21      	add	r3, sp, #132	; 0x84
 8007080:	a902      	add	r1, sp, #8
 8007082:	4628      	mov	r0, r5
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	f000 fbf1 	bl	800786c <_svfiprintf_r>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	bfbc      	itt	lt
 800708e:	238b      	movlt	r3, #139	; 0x8b
 8007090:	602b      	strlt	r3, [r5, #0]
 8007092:	2c00      	cmp	r4, #0
 8007094:	d0dd      	beq.n	8007052 <sniprintf+0x16>
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e7d9      	b.n	8007052 <sniprintf+0x16>
 800709e:	bf00      	nop
 80070a0:	20000018 	.word	0x20000018

080070a4 <__swbuf_r>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	460e      	mov	r6, r1
 80070a8:	4614      	mov	r4, r2
 80070aa:	4605      	mov	r5, r0
 80070ac:	b118      	cbz	r0, 80070b6 <__swbuf_r+0x12>
 80070ae:	6983      	ldr	r3, [r0, #24]
 80070b0:	b90b      	cbnz	r3, 80070b6 <__swbuf_r+0x12>
 80070b2:	f000 f9d1 	bl	8007458 <__sinit>
 80070b6:	4b21      	ldr	r3, [pc, #132]	; (800713c <__swbuf_r+0x98>)
 80070b8:	429c      	cmp	r4, r3
 80070ba:	d12b      	bne.n	8007114 <__swbuf_r+0x70>
 80070bc:	686c      	ldr	r4, [r5, #4]
 80070be:	69a3      	ldr	r3, [r4, #24]
 80070c0:	60a3      	str	r3, [r4, #8]
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	071a      	lsls	r2, r3, #28
 80070c6:	d52f      	bpl.n	8007128 <__swbuf_r+0x84>
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	b36b      	cbz	r3, 8007128 <__swbuf_r+0x84>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	6820      	ldr	r0, [r4, #0]
 80070d0:	1ac0      	subs	r0, r0, r3
 80070d2:	6963      	ldr	r3, [r4, #20]
 80070d4:	b2f6      	uxtb	r6, r6
 80070d6:	4283      	cmp	r3, r0
 80070d8:	4637      	mov	r7, r6
 80070da:	dc04      	bgt.n	80070e6 <__swbuf_r+0x42>
 80070dc:	4621      	mov	r1, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 f926 	bl	8007330 <_fflush_r>
 80070e4:	bb30      	cbnz	r0, 8007134 <__swbuf_r+0x90>
 80070e6:	68a3      	ldr	r3, [r4, #8]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	60a3      	str	r3, [r4, #8]
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	6022      	str	r2, [r4, #0]
 80070f2:	701e      	strb	r6, [r3, #0]
 80070f4:	6963      	ldr	r3, [r4, #20]
 80070f6:	3001      	adds	r0, #1
 80070f8:	4283      	cmp	r3, r0
 80070fa:	d004      	beq.n	8007106 <__swbuf_r+0x62>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	07db      	lsls	r3, r3, #31
 8007100:	d506      	bpl.n	8007110 <__swbuf_r+0x6c>
 8007102:	2e0a      	cmp	r6, #10
 8007104:	d104      	bne.n	8007110 <__swbuf_r+0x6c>
 8007106:	4621      	mov	r1, r4
 8007108:	4628      	mov	r0, r5
 800710a:	f000 f911 	bl	8007330 <_fflush_r>
 800710e:	b988      	cbnz	r0, 8007134 <__swbuf_r+0x90>
 8007110:	4638      	mov	r0, r7
 8007112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007114:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <__swbuf_r+0x9c>)
 8007116:	429c      	cmp	r4, r3
 8007118:	d101      	bne.n	800711e <__swbuf_r+0x7a>
 800711a:	68ac      	ldr	r4, [r5, #8]
 800711c:	e7cf      	b.n	80070be <__swbuf_r+0x1a>
 800711e:	4b09      	ldr	r3, [pc, #36]	; (8007144 <__swbuf_r+0xa0>)
 8007120:	429c      	cmp	r4, r3
 8007122:	bf08      	it	eq
 8007124:	68ec      	ldreq	r4, [r5, #12]
 8007126:	e7ca      	b.n	80070be <__swbuf_r+0x1a>
 8007128:	4621      	mov	r1, r4
 800712a:	4628      	mov	r0, r5
 800712c:	f000 f80c 	bl	8007148 <__swsetup_r>
 8007130:	2800      	cmp	r0, #0
 8007132:	d0cb      	beq.n	80070cc <__swbuf_r+0x28>
 8007134:	f04f 37ff 	mov.w	r7, #4294967295
 8007138:	e7ea      	b.n	8007110 <__swbuf_r+0x6c>
 800713a:	bf00      	nop
 800713c:	08008148 	.word	0x08008148
 8007140:	08008168 	.word	0x08008168
 8007144:	08008128 	.word	0x08008128

08007148 <__swsetup_r>:
 8007148:	4b32      	ldr	r3, [pc, #200]	; (8007214 <__swsetup_r+0xcc>)
 800714a:	b570      	push	{r4, r5, r6, lr}
 800714c:	681d      	ldr	r5, [r3, #0]
 800714e:	4606      	mov	r6, r0
 8007150:	460c      	mov	r4, r1
 8007152:	b125      	cbz	r5, 800715e <__swsetup_r+0x16>
 8007154:	69ab      	ldr	r3, [r5, #24]
 8007156:	b913      	cbnz	r3, 800715e <__swsetup_r+0x16>
 8007158:	4628      	mov	r0, r5
 800715a:	f000 f97d 	bl	8007458 <__sinit>
 800715e:	4b2e      	ldr	r3, [pc, #184]	; (8007218 <__swsetup_r+0xd0>)
 8007160:	429c      	cmp	r4, r3
 8007162:	d10f      	bne.n	8007184 <__swsetup_r+0x3c>
 8007164:	686c      	ldr	r4, [r5, #4]
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800716c:	0719      	lsls	r1, r3, #28
 800716e:	d42c      	bmi.n	80071ca <__swsetup_r+0x82>
 8007170:	06dd      	lsls	r5, r3, #27
 8007172:	d411      	bmi.n	8007198 <__swsetup_r+0x50>
 8007174:	2309      	movs	r3, #9
 8007176:	6033      	str	r3, [r6, #0]
 8007178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800717c:	81a3      	strh	r3, [r4, #12]
 800717e:	f04f 30ff 	mov.w	r0, #4294967295
 8007182:	e03e      	b.n	8007202 <__swsetup_r+0xba>
 8007184:	4b25      	ldr	r3, [pc, #148]	; (800721c <__swsetup_r+0xd4>)
 8007186:	429c      	cmp	r4, r3
 8007188:	d101      	bne.n	800718e <__swsetup_r+0x46>
 800718a:	68ac      	ldr	r4, [r5, #8]
 800718c:	e7eb      	b.n	8007166 <__swsetup_r+0x1e>
 800718e:	4b24      	ldr	r3, [pc, #144]	; (8007220 <__swsetup_r+0xd8>)
 8007190:	429c      	cmp	r4, r3
 8007192:	bf08      	it	eq
 8007194:	68ec      	ldreq	r4, [r5, #12]
 8007196:	e7e6      	b.n	8007166 <__swsetup_r+0x1e>
 8007198:	0758      	lsls	r0, r3, #29
 800719a:	d512      	bpl.n	80071c2 <__swsetup_r+0x7a>
 800719c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800719e:	b141      	cbz	r1, 80071b2 <__swsetup_r+0x6a>
 80071a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071a4:	4299      	cmp	r1, r3
 80071a6:	d002      	beq.n	80071ae <__swsetup_r+0x66>
 80071a8:	4630      	mov	r0, r6
 80071aa:	f000 fa59 	bl	8007660 <_free_r>
 80071ae:	2300      	movs	r3, #0
 80071b0:	6363      	str	r3, [r4, #52]	; 0x34
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071b8:	81a3      	strh	r3, [r4, #12]
 80071ba:	2300      	movs	r3, #0
 80071bc:	6063      	str	r3, [r4, #4]
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	f043 0308 	orr.w	r3, r3, #8
 80071c8:	81a3      	strh	r3, [r4, #12]
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	b94b      	cbnz	r3, 80071e2 <__swsetup_r+0x9a>
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071d8:	d003      	beq.n	80071e2 <__swsetup_r+0x9a>
 80071da:	4621      	mov	r1, r4
 80071dc:	4630      	mov	r0, r6
 80071de:	f000 f9ff 	bl	80075e0 <__smakebuf_r>
 80071e2:	89a0      	ldrh	r0, [r4, #12]
 80071e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071e8:	f010 0301 	ands.w	r3, r0, #1
 80071ec:	d00a      	beq.n	8007204 <__swsetup_r+0xbc>
 80071ee:	2300      	movs	r3, #0
 80071f0:	60a3      	str	r3, [r4, #8]
 80071f2:	6963      	ldr	r3, [r4, #20]
 80071f4:	425b      	negs	r3, r3
 80071f6:	61a3      	str	r3, [r4, #24]
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	b943      	cbnz	r3, 800720e <__swsetup_r+0xc6>
 80071fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007200:	d1ba      	bne.n	8007178 <__swsetup_r+0x30>
 8007202:	bd70      	pop	{r4, r5, r6, pc}
 8007204:	0781      	lsls	r1, r0, #30
 8007206:	bf58      	it	pl
 8007208:	6963      	ldrpl	r3, [r4, #20]
 800720a:	60a3      	str	r3, [r4, #8]
 800720c:	e7f4      	b.n	80071f8 <__swsetup_r+0xb0>
 800720e:	2000      	movs	r0, #0
 8007210:	e7f7      	b.n	8007202 <__swsetup_r+0xba>
 8007212:	bf00      	nop
 8007214:	20000018 	.word	0x20000018
 8007218:	08008148 	.word	0x08008148
 800721c:	08008168 	.word	0x08008168
 8007220:	08008128 	.word	0x08008128

08007224 <__sflush_r>:
 8007224:	898a      	ldrh	r2, [r1, #12]
 8007226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722a:	4605      	mov	r5, r0
 800722c:	0710      	lsls	r0, r2, #28
 800722e:	460c      	mov	r4, r1
 8007230:	d458      	bmi.n	80072e4 <__sflush_r+0xc0>
 8007232:	684b      	ldr	r3, [r1, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	dc05      	bgt.n	8007244 <__sflush_r+0x20>
 8007238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	dc02      	bgt.n	8007244 <__sflush_r+0x20>
 800723e:	2000      	movs	r0, #0
 8007240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007246:	2e00      	cmp	r6, #0
 8007248:	d0f9      	beq.n	800723e <__sflush_r+0x1a>
 800724a:	2300      	movs	r3, #0
 800724c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007250:	682f      	ldr	r7, [r5, #0]
 8007252:	602b      	str	r3, [r5, #0]
 8007254:	d032      	beq.n	80072bc <__sflush_r+0x98>
 8007256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	075a      	lsls	r2, r3, #29
 800725c:	d505      	bpl.n	800726a <__sflush_r+0x46>
 800725e:	6863      	ldr	r3, [r4, #4]
 8007260:	1ac0      	subs	r0, r0, r3
 8007262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007264:	b10b      	cbz	r3, 800726a <__sflush_r+0x46>
 8007266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007268:	1ac0      	subs	r0, r0, r3
 800726a:	2300      	movs	r3, #0
 800726c:	4602      	mov	r2, r0
 800726e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007270:	6a21      	ldr	r1, [r4, #32]
 8007272:	4628      	mov	r0, r5
 8007274:	47b0      	blx	r6
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	d106      	bne.n	800728a <__sflush_r+0x66>
 800727c:	6829      	ldr	r1, [r5, #0]
 800727e:	291d      	cmp	r1, #29
 8007280:	d82c      	bhi.n	80072dc <__sflush_r+0xb8>
 8007282:	4a2a      	ldr	r2, [pc, #168]	; (800732c <__sflush_r+0x108>)
 8007284:	40ca      	lsrs	r2, r1
 8007286:	07d6      	lsls	r6, r2, #31
 8007288:	d528      	bpl.n	80072dc <__sflush_r+0xb8>
 800728a:	2200      	movs	r2, #0
 800728c:	6062      	str	r2, [r4, #4]
 800728e:	04d9      	lsls	r1, r3, #19
 8007290:	6922      	ldr	r2, [r4, #16]
 8007292:	6022      	str	r2, [r4, #0]
 8007294:	d504      	bpl.n	80072a0 <__sflush_r+0x7c>
 8007296:	1c42      	adds	r2, r0, #1
 8007298:	d101      	bne.n	800729e <__sflush_r+0x7a>
 800729a:	682b      	ldr	r3, [r5, #0]
 800729c:	b903      	cbnz	r3, 80072a0 <__sflush_r+0x7c>
 800729e:	6560      	str	r0, [r4, #84]	; 0x54
 80072a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072a2:	602f      	str	r7, [r5, #0]
 80072a4:	2900      	cmp	r1, #0
 80072a6:	d0ca      	beq.n	800723e <__sflush_r+0x1a>
 80072a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072ac:	4299      	cmp	r1, r3
 80072ae:	d002      	beq.n	80072b6 <__sflush_r+0x92>
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 f9d5 	bl	8007660 <_free_r>
 80072b6:	2000      	movs	r0, #0
 80072b8:	6360      	str	r0, [r4, #52]	; 0x34
 80072ba:	e7c1      	b.n	8007240 <__sflush_r+0x1c>
 80072bc:	6a21      	ldr	r1, [r4, #32]
 80072be:	2301      	movs	r3, #1
 80072c0:	4628      	mov	r0, r5
 80072c2:	47b0      	blx	r6
 80072c4:	1c41      	adds	r1, r0, #1
 80072c6:	d1c7      	bne.n	8007258 <__sflush_r+0x34>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0c4      	beq.n	8007258 <__sflush_r+0x34>
 80072ce:	2b1d      	cmp	r3, #29
 80072d0:	d001      	beq.n	80072d6 <__sflush_r+0xb2>
 80072d2:	2b16      	cmp	r3, #22
 80072d4:	d101      	bne.n	80072da <__sflush_r+0xb6>
 80072d6:	602f      	str	r7, [r5, #0]
 80072d8:	e7b1      	b.n	800723e <__sflush_r+0x1a>
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	e7ad      	b.n	8007240 <__sflush_r+0x1c>
 80072e4:	690f      	ldr	r7, [r1, #16]
 80072e6:	2f00      	cmp	r7, #0
 80072e8:	d0a9      	beq.n	800723e <__sflush_r+0x1a>
 80072ea:	0793      	lsls	r3, r2, #30
 80072ec:	680e      	ldr	r6, [r1, #0]
 80072ee:	bf08      	it	eq
 80072f0:	694b      	ldreq	r3, [r1, #20]
 80072f2:	600f      	str	r7, [r1, #0]
 80072f4:	bf18      	it	ne
 80072f6:	2300      	movne	r3, #0
 80072f8:	eba6 0807 	sub.w	r8, r6, r7
 80072fc:	608b      	str	r3, [r1, #8]
 80072fe:	f1b8 0f00 	cmp.w	r8, #0
 8007302:	dd9c      	ble.n	800723e <__sflush_r+0x1a>
 8007304:	6a21      	ldr	r1, [r4, #32]
 8007306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007308:	4643      	mov	r3, r8
 800730a:	463a      	mov	r2, r7
 800730c:	4628      	mov	r0, r5
 800730e:	47b0      	blx	r6
 8007310:	2800      	cmp	r0, #0
 8007312:	dc06      	bgt.n	8007322 <__sflush_r+0xfe>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	e78e      	b.n	8007240 <__sflush_r+0x1c>
 8007322:	4407      	add	r7, r0
 8007324:	eba8 0800 	sub.w	r8, r8, r0
 8007328:	e7e9      	b.n	80072fe <__sflush_r+0xda>
 800732a:	bf00      	nop
 800732c:	20400001 	.word	0x20400001

08007330 <_fflush_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	690b      	ldr	r3, [r1, #16]
 8007334:	4605      	mov	r5, r0
 8007336:	460c      	mov	r4, r1
 8007338:	b913      	cbnz	r3, 8007340 <_fflush_r+0x10>
 800733a:	2500      	movs	r5, #0
 800733c:	4628      	mov	r0, r5
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	b118      	cbz	r0, 800734a <_fflush_r+0x1a>
 8007342:	6983      	ldr	r3, [r0, #24]
 8007344:	b90b      	cbnz	r3, 800734a <_fflush_r+0x1a>
 8007346:	f000 f887 	bl	8007458 <__sinit>
 800734a:	4b14      	ldr	r3, [pc, #80]	; (800739c <_fflush_r+0x6c>)
 800734c:	429c      	cmp	r4, r3
 800734e:	d11b      	bne.n	8007388 <_fflush_r+0x58>
 8007350:	686c      	ldr	r4, [r5, #4]
 8007352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0ef      	beq.n	800733a <_fflush_r+0xa>
 800735a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800735c:	07d0      	lsls	r0, r2, #31
 800735e:	d404      	bmi.n	800736a <_fflush_r+0x3a>
 8007360:	0599      	lsls	r1, r3, #22
 8007362:	d402      	bmi.n	800736a <_fflush_r+0x3a>
 8007364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007366:	f000 f915 	bl	8007594 <__retarget_lock_acquire_recursive>
 800736a:	4628      	mov	r0, r5
 800736c:	4621      	mov	r1, r4
 800736e:	f7ff ff59 	bl	8007224 <__sflush_r>
 8007372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007374:	07da      	lsls	r2, r3, #31
 8007376:	4605      	mov	r5, r0
 8007378:	d4e0      	bmi.n	800733c <_fflush_r+0xc>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	059b      	lsls	r3, r3, #22
 800737e:	d4dd      	bmi.n	800733c <_fflush_r+0xc>
 8007380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007382:	f000 f908 	bl	8007596 <__retarget_lock_release_recursive>
 8007386:	e7d9      	b.n	800733c <_fflush_r+0xc>
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <_fflush_r+0x70>)
 800738a:	429c      	cmp	r4, r3
 800738c:	d101      	bne.n	8007392 <_fflush_r+0x62>
 800738e:	68ac      	ldr	r4, [r5, #8]
 8007390:	e7df      	b.n	8007352 <_fflush_r+0x22>
 8007392:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <_fflush_r+0x74>)
 8007394:	429c      	cmp	r4, r3
 8007396:	bf08      	it	eq
 8007398:	68ec      	ldreq	r4, [r5, #12]
 800739a:	e7da      	b.n	8007352 <_fflush_r+0x22>
 800739c:	08008148 	.word	0x08008148
 80073a0:	08008168 	.word	0x08008168
 80073a4:	08008128 	.word	0x08008128

080073a8 <std>:
 80073a8:	2300      	movs	r3, #0
 80073aa:	b510      	push	{r4, lr}
 80073ac:	4604      	mov	r4, r0
 80073ae:	e9c0 3300 	strd	r3, r3, [r0]
 80073b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073b6:	6083      	str	r3, [r0, #8]
 80073b8:	8181      	strh	r1, [r0, #12]
 80073ba:	6643      	str	r3, [r0, #100]	; 0x64
 80073bc:	81c2      	strh	r2, [r0, #14]
 80073be:	6183      	str	r3, [r0, #24]
 80073c0:	4619      	mov	r1, r3
 80073c2:	2208      	movs	r2, #8
 80073c4:	305c      	adds	r0, #92	; 0x5c
 80073c6:	f7ff fdbb 	bl	8006f40 <memset>
 80073ca:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <std+0x38>)
 80073cc:	6263      	str	r3, [r4, #36]	; 0x24
 80073ce:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <std+0x3c>)
 80073d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80073d2:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <std+0x40>)
 80073d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <std+0x44>)
 80073d8:	6224      	str	r4, [r4, #32]
 80073da:	6323      	str	r3, [r4, #48]	; 0x30
 80073dc:	bd10      	pop	{r4, pc}
 80073de:	bf00      	nop
 80073e0:	08007db5 	.word	0x08007db5
 80073e4:	08007dd7 	.word	0x08007dd7
 80073e8:	08007e0f 	.word	0x08007e0f
 80073ec:	08007e33 	.word	0x08007e33

080073f0 <_cleanup_r>:
 80073f0:	4901      	ldr	r1, [pc, #4]	; (80073f8 <_cleanup_r+0x8>)
 80073f2:	f000 b8af 	b.w	8007554 <_fwalk_reent>
 80073f6:	bf00      	nop
 80073f8:	08007331 	.word	0x08007331

080073fc <__sfmoreglue>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	1e4a      	subs	r2, r1, #1
 8007400:	2568      	movs	r5, #104	; 0x68
 8007402:	4355      	muls	r5, r2
 8007404:	460e      	mov	r6, r1
 8007406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800740a:	f000 f979 	bl	8007700 <_malloc_r>
 800740e:	4604      	mov	r4, r0
 8007410:	b140      	cbz	r0, 8007424 <__sfmoreglue+0x28>
 8007412:	2100      	movs	r1, #0
 8007414:	e9c0 1600 	strd	r1, r6, [r0]
 8007418:	300c      	adds	r0, #12
 800741a:	60a0      	str	r0, [r4, #8]
 800741c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007420:	f7ff fd8e 	bl	8006f40 <memset>
 8007424:	4620      	mov	r0, r4
 8007426:	bd70      	pop	{r4, r5, r6, pc}

08007428 <__sfp_lock_acquire>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__sfp_lock_acquire+0x8>)
 800742a:	f000 b8b3 	b.w	8007594 <__retarget_lock_acquire_recursive>
 800742e:	bf00      	nop
 8007430:	20014514 	.word	0x20014514

08007434 <__sfp_lock_release>:
 8007434:	4801      	ldr	r0, [pc, #4]	; (800743c <__sfp_lock_release+0x8>)
 8007436:	f000 b8ae 	b.w	8007596 <__retarget_lock_release_recursive>
 800743a:	bf00      	nop
 800743c:	20014514 	.word	0x20014514

08007440 <__sinit_lock_acquire>:
 8007440:	4801      	ldr	r0, [pc, #4]	; (8007448 <__sinit_lock_acquire+0x8>)
 8007442:	f000 b8a7 	b.w	8007594 <__retarget_lock_acquire_recursive>
 8007446:	bf00      	nop
 8007448:	2001450f 	.word	0x2001450f

0800744c <__sinit_lock_release>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__sinit_lock_release+0x8>)
 800744e:	f000 b8a2 	b.w	8007596 <__retarget_lock_release_recursive>
 8007452:	bf00      	nop
 8007454:	2001450f 	.word	0x2001450f

08007458 <__sinit>:
 8007458:	b510      	push	{r4, lr}
 800745a:	4604      	mov	r4, r0
 800745c:	f7ff fff0 	bl	8007440 <__sinit_lock_acquire>
 8007460:	69a3      	ldr	r3, [r4, #24]
 8007462:	b11b      	cbz	r3, 800746c <__sinit+0x14>
 8007464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007468:	f7ff bff0 	b.w	800744c <__sinit_lock_release>
 800746c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007470:	6523      	str	r3, [r4, #80]	; 0x50
 8007472:	4b13      	ldr	r3, [pc, #76]	; (80074c0 <__sinit+0x68>)
 8007474:	4a13      	ldr	r2, [pc, #76]	; (80074c4 <__sinit+0x6c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	62a2      	str	r2, [r4, #40]	; 0x28
 800747a:	42a3      	cmp	r3, r4
 800747c:	bf04      	itt	eq
 800747e:	2301      	moveq	r3, #1
 8007480:	61a3      	streq	r3, [r4, #24]
 8007482:	4620      	mov	r0, r4
 8007484:	f000 f820 	bl	80074c8 <__sfp>
 8007488:	6060      	str	r0, [r4, #4]
 800748a:	4620      	mov	r0, r4
 800748c:	f000 f81c 	bl	80074c8 <__sfp>
 8007490:	60a0      	str	r0, [r4, #8]
 8007492:	4620      	mov	r0, r4
 8007494:	f000 f818 	bl	80074c8 <__sfp>
 8007498:	2200      	movs	r2, #0
 800749a:	60e0      	str	r0, [r4, #12]
 800749c:	2104      	movs	r1, #4
 800749e:	6860      	ldr	r0, [r4, #4]
 80074a0:	f7ff ff82 	bl	80073a8 <std>
 80074a4:	68a0      	ldr	r0, [r4, #8]
 80074a6:	2201      	movs	r2, #1
 80074a8:	2109      	movs	r1, #9
 80074aa:	f7ff ff7d 	bl	80073a8 <std>
 80074ae:	68e0      	ldr	r0, [r4, #12]
 80074b0:	2202      	movs	r2, #2
 80074b2:	2112      	movs	r1, #18
 80074b4:	f7ff ff78 	bl	80073a8 <std>
 80074b8:	2301      	movs	r3, #1
 80074ba:	61a3      	str	r3, [r4, #24]
 80074bc:	e7d2      	b.n	8007464 <__sinit+0xc>
 80074be:	bf00      	nop
 80074c0:	08008124 	.word	0x08008124
 80074c4:	080073f1 	.word	0x080073f1

080074c8 <__sfp>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	4607      	mov	r7, r0
 80074cc:	f7ff ffac 	bl	8007428 <__sfp_lock_acquire>
 80074d0:	4b1e      	ldr	r3, [pc, #120]	; (800754c <__sfp+0x84>)
 80074d2:	681e      	ldr	r6, [r3, #0]
 80074d4:	69b3      	ldr	r3, [r6, #24]
 80074d6:	b913      	cbnz	r3, 80074de <__sfp+0x16>
 80074d8:	4630      	mov	r0, r6
 80074da:	f7ff ffbd 	bl	8007458 <__sinit>
 80074de:	3648      	adds	r6, #72	; 0x48
 80074e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	d503      	bpl.n	80074f0 <__sfp+0x28>
 80074e8:	6833      	ldr	r3, [r6, #0]
 80074ea:	b30b      	cbz	r3, 8007530 <__sfp+0x68>
 80074ec:	6836      	ldr	r6, [r6, #0]
 80074ee:	e7f7      	b.n	80074e0 <__sfp+0x18>
 80074f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074f4:	b9d5      	cbnz	r5, 800752c <__sfp+0x64>
 80074f6:	4b16      	ldr	r3, [pc, #88]	; (8007550 <__sfp+0x88>)
 80074f8:	60e3      	str	r3, [r4, #12]
 80074fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007500:	f000 f847 	bl	8007592 <__retarget_lock_init_recursive>
 8007504:	f7ff ff96 	bl	8007434 <__sfp_lock_release>
 8007508:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800750c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007510:	6025      	str	r5, [r4, #0]
 8007512:	61a5      	str	r5, [r4, #24]
 8007514:	2208      	movs	r2, #8
 8007516:	4629      	mov	r1, r5
 8007518:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800751c:	f7ff fd10 	bl	8006f40 <memset>
 8007520:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007524:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007528:	4620      	mov	r0, r4
 800752a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800752c:	3468      	adds	r4, #104	; 0x68
 800752e:	e7d9      	b.n	80074e4 <__sfp+0x1c>
 8007530:	2104      	movs	r1, #4
 8007532:	4638      	mov	r0, r7
 8007534:	f7ff ff62 	bl	80073fc <__sfmoreglue>
 8007538:	4604      	mov	r4, r0
 800753a:	6030      	str	r0, [r6, #0]
 800753c:	2800      	cmp	r0, #0
 800753e:	d1d5      	bne.n	80074ec <__sfp+0x24>
 8007540:	f7ff ff78 	bl	8007434 <__sfp_lock_release>
 8007544:	230c      	movs	r3, #12
 8007546:	603b      	str	r3, [r7, #0]
 8007548:	e7ee      	b.n	8007528 <__sfp+0x60>
 800754a:	bf00      	nop
 800754c:	08008124 	.word	0x08008124
 8007550:	ffff0001 	.word	0xffff0001

08007554 <_fwalk_reent>:
 8007554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007558:	4606      	mov	r6, r0
 800755a:	4688      	mov	r8, r1
 800755c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007560:	2700      	movs	r7, #0
 8007562:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007566:	f1b9 0901 	subs.w	r9, r9, #1
 800756a:	d505      	bpl.n	8007578 <_fwalk_reent+0x24>
 800756c:	6824      	ldr	r4, [r4, #0]
 800756e:	2c00      	cmp	r4, #0
 8007570:	d1f7      	bne.n	8007562 <_fwalk_reent+0xe>
 8007572:	4638      	mov	r0, r7
 8007574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007578:	89ab      	ldrh	r3, [r5, #12]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d907      	bls.n	800758e <_fwalk_reent+0x3a>
 800757e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007582:	3301      	adds	r3, #1
 8007584:	d003      	beq.n	800758e <_fwalk_reent+0x3a>
 8007586:	4629      	mov	r1, r5
 8007588:	4630      	mov	r0, r6
 800758a:	47c0      	blx	r8
 800758c:	4307      	orrs	r7, r0
 800758e:	3568      	adds	r5, #104	; 0x68
 8007590:	e7e9      	b.n	8007566 <_fwalk_reent+0x12>

08007592 <__retarget_lock_init_recursive>:
 8007592:	4770      	bx	lr

08007594 <__retarget_lock_acquire_recursive>:
 8007594:	4770      	bx	lr

08007596 <__retarget_lock_release_recursive>:
 8007596:	4770      	bx	lr

08007598 <__swhatbuf_r>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	460e      	mov	r6, r1
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	2900      	cmp	r1, #0
 80075a2:	b096      	sub	sp, #88	; 0x58
 80075a4:	4614      	mov	r4, r2
 80075a6:	461d      	mov	r5, r3
 80075a8:	da07      	bge.n	80075ba <__swhatbuf_r+0x22>
 80075aa:	2300      	movs	r3, #0
 80075ac:	602b      	str	r3, [r5, #0]
 80075ae:	89b3      	ldrh	r3, [r6, #12]
 80075b0:	061a      	lsls	r2, r3, #24
 80075b2:	d410      	bmi.n	80075d6 <__swhatbuf_r+0x3e>
 80075b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b8:	e00e      	b.n	80075d8 <__swhatbuf_r+0x40>
 80075ba:	466a      	mov	r2, sp
 80075bc:	f000 fc4e 	bl	8007e5c <_fstat_r>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dbf2      	blt.n	80075aa <__swhatbuf_r+0x12>
 80075c4:	9a01      	ldr	r2, [sp, #4]
 80075c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075ce:	425a      	negs	r2, r3
 80075d0:	415a      	adcs	r2, r3
 80075d2:	602a      	str	r2, [r5, #0]
 80075d4:	e7ee      	b.n	80075b4 <__swhatbuf_r+0x1c>
 80075d6:	2340      	movs	r3, #64	; 0x40
 80075d8:	2000      	movs	r0, #0
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	b016      	add	sp, #88	; 0x58
 80075de:	bd70      	pop	{r4, r5, r6, pc}

080075e0 <__smakebuf_r>:
 80075e0:	898b      	ldrh	r3, [r1, #12]
 80075e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075e4:	079d      	lsls	r5, r3, #30
 80075e6:	4606      	mov	r6, r0
 80075e8:	460c      	mov	r4, r1
 80075ea:	d507      	bpl.n	80075fc <__smakebuf_r+0x1c>
 80075ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	2301      	movs	r3, #1
 80075f6:	6163      	str	r3, [r4, #20]
 80075f8:	b002      	add	sp, #8
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	ab01      	add	r3, sp, #4
 80075fe:	466a      	mov	r2, sp
 8007600:	f7ff ffca 	bl	8007598 <__swhatbuf_r>
 8007604:	9900      	ldr	r1, [sp, #0]
 8007606:	4605      	mov	r5, r0
 8007608:	4630      	mov	r0, r6
 800760a:	f000 f879 	bl	8007700 <_malloc_r>
 800760e:	b948      	cbnz	r0, 8007624 <__smakebuf_r+0x44>
 8007610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007614:	059a      	lsls	r2, r3, #22
 8007616:	d4ef      	bmi.n	80075f8 <__smakebuf_r+0x18>
 8007618:	f023 0303 	bic.w	r3, r3, #3
 800761c:	f043 0302 	orr.w	r3, r3, #2
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	e7e3      	b.n	80075ec <__smakebuf_r+0xc>
 8007624:	4b0d      	ldr	r3, [pc, #52]	; (800765c <__smakebuf_r+0x7c>)
 8007626:	62b3      	str	r3, [r6, #40]	; 0x28
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	6020      	str	r0, [r4, #0]
 800762c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	9b00      	ldr	r3, [sp, #0]
 8007634:	6163      	str	r3, [r4, #20]
 8007636:	9b01      	ldr	r3, [sp, #4]
 8007638:	6120      	str	r0, [r4, #16]
 800763a:	b15b      	cbz	r3, 8007654 <__smakebuf_r+0x74>
 800763c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007640:	4630      	mov	r0, r6
 8007642:	f000 fc1d 	bl	8007e80 <_isatty_r>
 8007646:	b128      	cbz	r0, 8007654 <__smakebuf_r+0x74>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	89a0      	ldrh	r0, [r4, #12]
 8007656:	4305      	orrs	r5, r0
 8007658:	81a5      	strh	r5, [r4, #12]
 800765a:	e7cd      	b.n	80075f8 <__smakebuf_r+0x18>
 800765c:	080073f1 	.word	0x080073f1

08007660 <_free_r>:
 8007660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007662:	2900      	cmp	r1, #0
 8007664:	d048      	beq.n	80076f8 <_free_r+0x98>
 8007666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766a:	9001      	str	r0, [sp, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f1a1 0404 	sub.w	r4, r1, #4
 8007672:	bfb8      	it	lt
 8007674:	18e4      	addlt	r4, r4, r3
 8007676:	f000 fc3f 	bl	8007ef8 <__malloc_lock>
 800767a:	4a20      	ldr	r2, [pc, #128]	; (80076fc <_free_r+0x9c>)
 800767c:	9801      	ldr	r0, [sp, #4]
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	4615      	mov	r5, r2
 8007682:	b933      	cbnz	r3, 8007692 <_free_r+0x32>
 8007684:	6063      	str	r3, [r4, #4]
 8007686:	6014      	str	r4, [r2, #0]
 8007688:	b003      	add	sp, #12
 800768a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800768e:	f000 bc39 	b.w	8007f04 <__malloc_unlock>
 8007692:	42a3      	cmp	r3, r4
 8007694:	d90b      	bls.n	80076ae <_free_r+0x4e>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	1862      	adds	r2, r4, r1
 800769a:	4293      	cmp	r3, r2
 800769c:	bf04      	itt	eq
 800769e:	681a      	ldreq	r2, [r3, #0]
 80076a0:	685b      	ldreq	r3, [r3, #4]
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	bf04      	itt	eq
 80076a6:	1852      	addeq	r2, r2, r1
 80076a8:	6022      	streq	r2, [r4, #0]
 80076aa:	602c      	str	r4, [r5, #0]
 80076ac:	e7ec      	b.n	8007688 <_free_r+0x28>
 80076ae:	461a      	mov	r2, r3
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	b10b      	cbz	r3, 80076b8 <_free_r+0x58>
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d9fa      	bls.n	80076ae <_free_r+0x4e>
 80076b8:	6811      	ldr	r1, [r2, #0]
 80076ba:	1855      	adds	r5, r2, r1
 80076bc:	42a5      	cmp	r5, r4
 80076be:	d10b      	bne.n	80076d8 <_free_r+0x78>
 80076c0:	6824      	ldr	r4, [r4, #0]
 80076c2:	4421      	add	r1, r4
 80076c4:	1854      	adds	r4, r2, r1
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	6011      	str	r1, [r2, #0]
 80076ca:	d1dd      	bne.n	8007688 <_free_r+0x28>
 80076cc:	681c      	ldr	r4, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	6053      	str	r3, [r2, #4]
 80076d2:	4421      	add	r1, r4
 80076d4:	6011      	str	r1, [r2, #0]
 80076d6:	e7d7      	b.n	8007688 <_free_r+0x28>
 80076d8:	d902      	bls.n	80076e0 <_free_r+0x80>
 80076da:	230c      	movs	r3, #12
 80076dc:	6003      	str	r3, [r0, #0]
 80076de:	e7d3      	b.n	8007688 <_free_r+0x28>
 80076e0:	6825      	ldr	r5, [r4, #0]
 80076e2:	1961      	adds	r1, r4, r5
 80076e4:	428b      	cmp	r3, r1
 80076e6:	bf04      	itt	eq
 80076e8:	6819      	ldreq	r1, [r3, #0]
 80076ea:	685b      	ldreq	r3, [r3, #4]
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	bf04      	itt	eq
 80076f0:	1949      	addeq	r1, r1, r5
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	6054      	str	r4, [r2, #4]
 80076f6:	e7c7      	b.n	8007688 <_free_r+0x28>
 80076f8:	b003      	add	sp, #12
 80076fa:	bd30      	pop	{r4, r5, pc}
 80076fc:	200143cc 	.word	0x200143cc

08007700 <_malloc_r>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	1ccd      	adds	r5, r1, #3
 8007704:	f025 0503 	bic.w	r5, r5, #3
 8007708:	3508      	adds	r5, #8
 800770a:	2d0c      	cmp	r5, #12
 800770c:	bf38      	it	cc
 800770e:	250c      	movcc	r5, #12
 8007710:	2d00      	cmp	r5, #0
 8007712:	4606      	mov	r6, r0
 8007714:	db01      	blt.n	800771a <_malloc_r+0x1a>
 8007716:	42a9      	cmp	r1, r5
 8007718:	d903      	bls.n	8007722 <_malloc_r+0x22>
 800771a:	230c      	movs	r3, #12
 800771c:	6033      	str	r3, [r6, #0]
 800771e:	2000      	movs	r0, #0
 8007720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007722:	f000 fbe9 	bl	8007ef8 <__malloc_lock>
 8007726:	4921      	ldr	r1, [pc, #132]	; (80077ac <_malloc_r+0xac>)
 8007728:	680a      	ldr	r2, [r1, #0]
 800772a:	4614      	mov	r4, r2
 800772c:	b99c      	cbnz	r4, 8007756 <_malloc_r+0x56>
 800772e:	4f20      	ldr	r7, [pc, #128]	; (80077b0 <_malloc_r+0xb0>)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	b923      	cbnz	r3, 800773e <_malloc_r+0x3e>
 8007734:	4621      	mov	r1, r4
 8007736:	4630      	mov	r0, r6
 8007738:	f000 fb2c 	bl	8007d94 <_sbrk_r>
 800773c:	6038      	str	r0, [r7, #0]
 800773e:	4629      	mov	r1, r5
 8007740:	4630      	mov	r0, r6
 8007742:	f000 fb27 	bl	8007d94 <_sbrk_r>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	d123      	bne.n	8007792 <_malloc_r+0x92>
 800774a:	230c      	movs	r3, #12
 800774c:	6033      	str	r3, [r6, #0]
 800774e:	4630      	mov	r0, r6
 8007750:	f000 fbd8 	bl	8007f04 <__malloc_unlock>
 8007754:	e7e3      	b.n	800771e <_malloc_r+0x1e>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	1b5b      	subs	r3, r3, r5
 800775a:	d417      	bmi.n	800778c <_malloc_r+0x8c>
 800775c:	2b0b      	cmp	r3, #11
 800775e:	d903      	bls.n	8007768 <_malloc_r+0x68>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	441c      	add	r4, r3
 8007764:	6025      	str	r5, [r4, #0]
 8007766:	e004      	b.n	8007772 <_malloc_r+0x72>
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	42a2      	cmp	r2, r4
 800776c:	bf0c      	ite	eq
 800776e:	600b      	streq	r3, [r1, #0]
 8007770:	6053      	strne	r3, [r2, #4]
 8007772:	4630      	mov	r0, r6
 8007774:	f000 fbc6 	bl	8007f04 <__malloc_unlock>
 8007778:	f104 000b 	add.w	r0, r4, #11
 800777c:	1d23      	adds	r3, r4, #4
 800777e:	f020 0007 	bic.w	r0, r0, #7
 8007782:	1ac2      	subs	r2, r0, r3
 8007784:	d0cc      	beq.n	8007720 <_malloc_r+0x20>
 8007786:	1a1b      	subs	r3, r3, r0
 8007788:	50a3      	str	r3, [r4, r2]
 800778a:	e7c9      	b.n	8007720 <_malloc_r+0x20>
 800778c:	4622      	mov	r2, r4
 800778e:	6864      	ldr	r4, [r4, #4]
 8007790:	e7cc      	b.n	800772c <_malloc_r+0x2c>
 8007792:	1cc4      	adds	r4, r0, #3
 8007794:	f024 0403 	bic.w	r4, r4, #3
 8007798:	42a0      	cmp	r0, r4
 800779a:	d0e3      	beq.n	8007764 <_malloc_r+0x64>
 800779c:	1a21      	subs	r1, r4, r0
 800779e:	4630      	mov	r0, r6
 80077a0:	f000 faf8 	bl	8007d94 <_sbrk_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d1dd      	bne.n	8007764 <_malloc_r+0x64>
 80077a8:	e7cf      	b.n	800774a <_malloc_r+0x4a>
 80077aa:	bf00      	nop
 80077ac:	200143cc 	.word	0x200143cc
 80077b0:	200143d0 	.word	0x200143d0

080077b4 <__ssputs_r>:
 80077b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	688e      	ldr	r6, [r1, #8]
 80077ba:	429e      	cmp	r6, r3
 80077bc:	4682      	mov	sl, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	4690      	mov	r8, r2
 80077c2:	461f      	mov	r7, r3
 80077c4:	d838      	bhi.n	8007838 <__ssputs_r+0x84>
 80077c6:	898a      	ldrh	r2, [r1, #12]
 80077c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077cc:	d032      	beq.n	8007834 <__ssputs_r+0x80>
 80077ce:	6825      	ldr	r5, [r4, #0]
 80077d0:	6909      	ldr	r1, [r1, #16]
 80077d2:	eba5 0901 	sub.w	r9, r5, r1
 80077d6:	6965      	ldr	r5, [r4, #20]
 80077d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077e0:	3301      	adds	r3, #1
 80077e2:	444b      	add	r3, r9
 80077e4:	106d      	asrs	r5, r5, #1
 80077e6:	429d      	cmp	r5, r3
 80077e8:	bf38      	it	cc
 80077ea:	461d      	movcc	r5, r3
 80077ec:	0553      	lsls	r3, r2, #21
 80077ee:	d531      	bpl.n	8007854 <__ssputs_r+0xa0>
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7ff ff85 	bl	8007700 <_malloc_r>
 80077f6:	4606      	mov	r6, r0
 80077f8:	b950      	cbnz	r0, 8007810 <__ssputs_r+0x5c>
 80077fa:	230c      	movs	r3, #12
 80077fc:	f8ca 3000 	str.w	r3, [sl]
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007810:	6921      	ldr	r1, [r4, #16]
 8007812:	464a      	mov	r2, r9
 8007814:	f7ff fb86 	bl	8006f24 <memcpy>
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800781e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007822:	81a3      	strh	r3, [r4, #12]
 8007824:	6126      	str	r6, [r4, #16]
 8007826:	6165      	str	r5, [r4, #20]
 8007828:	444e      	add	r6, r9
 800782a:	eba5 0509 	sub.w	r5, r5, r9
 800782e:	6026      	str	r6, [r4, #0]
 8007830:	60a5      	str	r5, [r4, #8]
 8007832:	463e      	mov	r6, r7
 8007834:	42be      	cmp	r6, r7
 8007836:	d900      	bls.n	800783a <__ssputs_r+0x86>
 8007838:	463e      	mov	r6, r7
 800783a:	4632      	mov	r2, r6
 800783c:	6820      	ldr	r0, [r4, #0]
 800783e:	4641      	mov	r1, r8
 8007840:	f000 fb40 	bl	8007ec4 <memmove>
 8007844:	68a3      	ldr	r3, [r4, #8]
 8007846:	6822      	ldr	r2, [r4, #0]
 8007848:	1b9b      	subs	r3, r3, r6
 800784a:	4432      	add	r2, r6
 800784c:	60a3      	str	r3, [r4, #8]
 800784e:	6022      	str	r2, [r4, #0]
 8007850:	2000      	movs	r0, #0
 8007852:	e7db      	b.n	800780c <__ssputs_r+0x58>
 8007854:	462a      	mov	r2, r5
 8007856:	f000 fb5b 	bl	8007f10 <_realloc_r>
 800785a:	4606      	mov	r6, r0
 800785c:	2800      	cmp	r0, #0
 800785e:	d1e1      	bne.n	8007824 <__ssputs_r+0x70>
 8007860:	6921      	ldr	r1, [r4, #16]
 8007862:	4650      	mov	r0, sl
 8007864:	f7ff fefc 	bl	8007660 <_free_r>
 8007868:	e7c7      	b.n	80077fa <__ssputs_r+0x46>
	...

0800786c <_svfiprintf_r>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	4698      	mov	r8, r3
 8007872:	898b      	ldrh	r3, [r1, #12]
 8007874:	061b      	lsls	r3, r3, #24
 8007876:	b09d      	sub	sp, #116	; 0x74
 8007878:	4607      	mov	r7, r0
 800787a:	460d      	mov	r5, r1
 800787c:	4614      	mov	r4, r2
 800787e:	d50e      	bpl.n	800789e <_svfiprintf_r+0x32>
 8007880:	690b      	ldr	r3, [r1, #16]
 8007882:	b963      	cbnz	r3, 800789e <_svfiprintf_r+0x32>
 8007884:	2140      	movs	r1, #64	; 0x40
 8007886:	f7ff ff3b 	bl	8007700 <_malloc_r>
 800788a:	6028      	str	r0, [r5, #0]
 800788c:	6128      	str	r0, [r5, #16]
 800788e:	b920      	cbnz	r0, 800789a <_svfiprintf_r+0x2e>
 8007890:	230c      	movs	r3, #12
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
 8007898:	e0d1      	b.n	8007a3e <_svfiprintf_r+0x1d2>
 800789a:	2340      	movs	r3, #64	; 0x40
 800789c:	616b      	str	r3, [r5, #20]
 800789e:	2300      	movs	r3, #0
 80078a0:	9309      	str	r3, [sp, #36]	; 0x24
 80078a2:	2320      	movs	r3, #32
 80078a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80078ac:	2330      	movs	r3, #48	; 0x30
 80078ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a58 <_svfiprintf_r+0x1ec>
 80078b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078b6:	f04f 0901 	mov.w	r9, #1
 80078ba:	4623      	mov	r3, r4
 80078bc:	469a      	mov	sl, r3
 80078be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078c2:	b10a      	cbz	r2, 80078c8 <_svfiprintf_r+0x5c>
 80078c4:	2a25      	cmp	r2, #37	; 0x25
 80078c6:	d1f9      	bne.n	80078bc <_svfiprintf_r+0x50>
 80078c8:	ebba 0b04 	subs.w	fp, sl, r4
 80078cc:	d00b      	beq.n	80078e6 <_svfiprintf_r+0x7a>
 80078ce:	465b      	mov	r3, fp
 80078d0:	4622      	mov	r2, r4
 80078d2:	4629      	mov	r1, r5
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff ff6d 	bl	80077b4 <__ssputs_r>
 80078da:	3001      	adds	r0, #1
 80078dc:	f000 80aa 	beq.w	8007a34 <_svfiprintf_r+0x1c8>
 80078e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078e2:	445a      	add	r2, fp
 80078e4:	9209      	str	r2, [sp, #36]	; 0x24
 80078e6:	f89a 3000 	ldrb.w	r3, [sl]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 80a2 	beq.w	8007a34 <_svfiprintf_r+0x1c8>
 80078f0:	2300      	movs	r3, #0
 80078f2:	f04f 32ff 	mov.w	r2, #4294967295
 80078f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078fa:	f10a 0a01 	add.w	sl, sl, #1
 80078fe:	9304      	str	r3, [sp, #16]
 8007900:	9307      	str	r3, [sp, #28]
 8007902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007906:	931a      	str	r3, [sp, #104]	; 0x68
 8007908:	4654      	mov	r4, sl
 800790a:	2205      	movs	r2, #5
 800790c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007910:	4851      	ldr	r0, [pc, #324]	; (8007a58 <_svfiprintf_r+0x1ec>)
 8007912:	f7f8 fccd 	bl	80002b0 <memchr>
 8007916:	9a04      	ldr	r2, [sp, #16]
 8007918:	b9d8      	cbnz	r0, 8007952 <_svfiprintf_r+0xe6>
 800791a:	06d0      	lsls	r0, r2, #27
 800791c:	bf44      	itt	mi
 800791e:	2320      	movmi	r3, #32
 8007920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007924:	0711      	lsls	r1, r2, #28
 8007926:	bf44      	itt	mi
 8007928:	232b      	movmi	r3, #43	; 0x2b
 800792a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800792e:	f89a 3000 	ldrb.w	r3, [sl]
 8007932:	2b2a      	cmp	r3, #42	; 0x2a
 8007934:	d015      	beq.n	8007962 <_svfiprintf_r+0xf6>
 8007936:	9a07      	ldr	r2, [sp, #28]
 8007938:	4654      	mov	r4, sl
 800793a:	2000      	movs	r0, #0
 800793c:	f04f 0c0a 	mov.w	ip, #10
 8007940:	4621      	mov	r1, r4
 8007942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007946:	3b30      	subs	r3, #48	; 0x30
 8007948:	2b09      	cmp	r3, #9
 800794a:	d94e      	bls.n	80079ea <_svfiprintf_r+0x17e>
 800794c:	b1b0      	cbz	r0, 800797c <_svfiprintf_r+0x110>
 800794e:	9207      	str	r2, [sp, #28]
 8007950:	e014      	b.n	800797c <_svfiprintf_r+0x110>
 8007952:	eba0 0308 	sub.w	r3, r0, r8
 8007956:	fa09 f303 	lsl.w	r3, r9, r3
 800795a:	4313      	orrs	r3, r2
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	46a2      	mov	sl, r4
 8007960:	e7d2      	b.n	8007908 <_svfiprintf_r+0x9c>
 8007962:	9b03      	ldr	r3, [sp, #12]
 8007964:	1d19      	adds	r1, r3, #4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	9103      	str	r1, [sp, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	bfbb      	ittet	lt
 800796e:	425b      	neglt	r3, r3
 8007970:	f042 0202 	orrlt.w	r2, r2, #2
 8007974:	9307      	strge	r3, [sp, #28]
 8007976:	9307      	strlt	r3, [sp, #28]
 8007978:	bfb8      	it	lt
 800797a:	9204      	strlt	r2, [sp, #16]
 800797c:	7823      	ldrb	r3, [r4, #0]
 800797e:	2b2e      	cmp	r3, #46	; 0x2e
 8007980:	d10c      	bne.n	800799c <_svfiprintf_r+0x130>
 8007982:	7863      	ldrb	r3, [r4, #1]
 8007984:	2b2a      	cmp	r3, #42	; 0x2a
 8007986:	d135      	bne.n	80079f4 <_svfiprintf_r+0x188>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	1d1a      	adds	r2, r3, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	9203      	str	r2, [sp, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bfb8      	it	lt
 8007994:	f04f 33ff 	movlt.w	r3, #4294967295
 8007998:	3402      	adds	r4, #2
 800799a:	9305      	str	r3, [sp, #20]
 800799c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a68 <_svfiprintf_r+0x1fc>
 80079a0:	7821      	ldrb	r1, [r4, #0]
 80079a2:	2203      	movs	r2, #3
 80079a4:	4650      	mov	r0, sl
 80079a6:	f7f8 fc83 	bl	80002b0 <memchr>
 80079aa:	b140      	cbz	r0, 80079be <_svfiprintf_r+0x152>
 80079ac:	2340      	movs	r3, #64	; 0x40
 80079ae:	eba0 000a 	sub.w	r0, r0, sl
 80079b2:	fa03 f000 	lsl.w	r0, r3, r0
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	4303      	orrs	r3, r0
 80079ba:	3401      	adds	r4, #1
 80079bc:	9304      	str	r3, [sp, #16]
 80079be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c2:	4826      	ldr	r0, [pc, #152]	; (8007a5c <_svfiprintf_r+0x1f0>)
 80079c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079c8:	2206      	movs	r2, #6
 80079ca:	f7f8 fc71 	bl	80002b0 <memchr>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d038      	beq.n	8007a44 <_svfiprintf_r+0x1d8>
 80079d2:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <_svfiprintf_r+0x1f4>)
 80079d4:	bb1b      	cbnz	r3, 8007a1e <_svfiprintf_r+0x1b2>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	3307      	adds	r3, #7
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	3308      	adds	r3, #8
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e4:	4433      	add	r3, r6
 80079e6:	9309      	str	r3, [sp, #36]	; 0x24
 80079e8:	e767      	b.n	80078ba <_svfiprintf_r+0x4e>
 80079ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80079ee:	460c      	mov	r4, r1
 80079f0:	2001      	movs	r0, #1
 80079f2:	e7a5      	b.n	8007940 <_svfiprintf_r+0xd4>
 80079f4:	2300      	movs	r3, #0
 80079f6:	3401      	adds	r4, #1
 80079f8:	9305      	str	r3, [sp, #20]
 80079fa:	4619      	mov	r1, r3
 80079fc:	f04f 0c0a 	mov.w	ip, #10
 8007a00:	4620      	mov	r0, r4
 8007a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a06:	3a30      	subs	r2, #48	; 0x30
 8007a08:	2a09      	cmp	r2, #9
 8007a0a:	d903      	bls.n	8007a14 <_svfiprintf_r+0x1a8>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0c5      	beq.n	800799c <_svfiprintf_r+0x130>
 8007a10:	9105      	str	r1, [sp, #20]
 8007a12:	e7c3      	b.n	800799c <_svfiprintf_r+0x130>
 8007a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a18:	4604      	mov	r4, r0
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e7f0      	b.n	8007a00 <_svfiprintf_r+0x194>
 8007a1e:	ab03      	add	r3, sp, #12
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	462a      	mov	r2, r5
 8007a24:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <_svfiprintf_r+0x1f8>)
 8007a26:	a904      	add	r1, sp, #16
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f3af 8000 	nop.w
 8007a2e:	1c42      	adds	r2, r0, #1
 8007a30:	4606      	mov	r6, r0
 8007a32:	d1d6      	bne.n	80079e2 <_svfiprintf_r+0x176>
 8007a34:	89ab      	ldrh	r3, [r5, #12]
 8007a36:	065b      	lsls	r3, r3, #25
 8007a38:	f53f af2c 	bmi.w	8007894 <_svfiprintf_r+0x28>
 8007a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a3e:	b01d      	add	sp, #116	; 0x74
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	ab03      	add	r3, sp, #12
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <_svfiprintf_r+0x1f8>)
 8007a4c:	a904      	add	r1, sp, #16
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f000 f87a 	bl	8007b48 <_printf_i>
 8007a54:	e7eb      	b.n	8007a2e <_svfiprintf_r+0x1c2>
 8007a56:	bf00      	nop
 8007a58:	08008188 	.word	0x08008188
 8007a5c:	08008192 	.word	0x08008192
 8007a60:	00000000 	.word	0x00000000
 8007a64:	080077b5 	.word	0x080077b5
 8007a68:	0800818e 	.word	0x0800818e

08007a6c <_printf_common>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	4616      	mov	r6, r2
 8007a72:	4699      	mov	r9, r3
 8007a74:	688a      	ldr	r2, [r1, #8]
 8007a76:	690b      	ldr	r3, [r1, #16]
 8007a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	bfb8      	it	lt
 8007a80:	4613      	movlt	r3, r2
 8007a82:	6033      	str	r3, [r6, #0]
 8007a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a88:	4607      	mov	r7, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	b10a      	cbz	r2, 8007a92 <_printf_common+0x26>
 8007a8e:	3301      	adds	r3, #1
 8007a90:	6033      	str	r3, [r6, #0]
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	0699      	lsls	r1, r3, #26
 8007a96:	bf42      	ittt	mi
 8007a98:	6833      	ldrmi	r3, [r6, #0]
 8007a9a:	3302      	addmi	r3, #2
 8007a9c:	6033      	strmi	r3, [r6, #0]
 8007a9e:	6825      	ldr	r5, [r4, #0]
 8007aa0:	f015 0506 	ands.w	r5, r5, #6
 8007aa4:	d106      	bne.n	8007ab4 <_printf_common+0x48>
 8007aa6:	f104 0a19 	add.w	sl, r4, #25
 8007aaa:	68e3      	ldr	r3, [r4, #12]
 8007aac:	6832      	ldr	r2, [r6, #0]
 8007aae:	1a9b      	subs	r3, r3, r2
 8007ab0:	42ab      	cmp	r3, r5
 8007ab2:	dc26      	bgt.n	8007b02 <_printf_common+0x96>
 8007ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ab8:	1e13      	subs	r3, r2, #0
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	bf18      	it	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	0692      	lsls	r2, r2, #26
 8007ac2:	d42b      	bmi.n	8007b1c <_printf_common+0xb0>
 8007ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ac8:	4649      	mov	r1, r9
 8007aca:	4638      	mov	r0, r7
 8007acc:	47c0      	blx	r8
 8007ace:	3001      	adds	r0, #1
 8007ad0:	d01e      	beq.n	8007b10 <_printf_common+0xa4>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	68e5      	ldr	r5, [r4, #12]
 8007ad6:	6832      	ldr	r2, [r6, #0]
 8007ad8:	f003 0306 	and.w	r3, r3, #6
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	bf08      	it	eq
 8007ae0:	1aad      	subeq	r5, r5, r2
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	6922      	ldr	r2, [r4, #16]
 8007ae6:	bf0c      	ite	eq
 8007ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aec:	2500      	movne	r5, #0
 8007aee:	4293      	cmp	r3, r2
 8007af0:	bfc4      	itt	gt
 8007af2:	1a9b      	subgt	r3, r3, r2
 8007af4:	18ed      	addgt	r5, r5, r3
 8007af6:	2600      	movs	r6, #0
 8007af8:	341a      	adds	r4, #26
 8007afa:	42b5      	cmp	r5, r6
 8007afc:	d11a      	bne.n	8007b34 <_printf_common+0xc8>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e008      	b.n	8007b14 <_printf_common+0xa8>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4652      	mov	r2, sl
 8007b06:	4649      	mov	r1, r9
 8007b08:	4638      	mov	r0, r7
 8007b0a:	47c0      	blx	r8
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d103      	bne.n	8007b18 <_printf_common+0xac>
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b18:	3501      	adds	r5, #1
 8007b1a:	e7c6      	b.n	8007aaa <_printf_common+0x3e>
 8007b1c:	18e1      	adds	r1, r4, r3
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	2030      	movs	r0, #48	; 0x30
 8007b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b26:	4422      	add	r2, r4
 8007b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b30:	3302      	adds	r3, #2
 8007b32:	e7c7      	b.n	8007ac4 <_printf_common+0x58>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4622      	mov	r2, r4
 8007b38:	4649      	mov	r1, r9
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	47c0      	blx	r8
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d0e6      	beq.n	8007b10 <_printf_common+0xa4>
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7d9      	b.n	8007afa <_printf_common+0x8e>
	...

08007b48 <_printf_i>:
 8007b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	4691      	mov	r9, r2
 8007b50:	7e27      	ldrb	r7, [r4, #24]
 8007b52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b54:	2f78      	cmp	r7, #120	; 0x78
 8007b56:	4680      	mov	r8, r0
 8007b58:	469a      	mov	sl, r3
 8007b5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b5e:	d807      	bhi.n	8007b70 <_printf_i+0x28>
 8007b60:	2f62      	cmp	r7, #98	; 0x62
 8007b62:	d80a      	bhi.n	8007b7a <_printf_i+0x32>
 8007b64:	2f00      	cmp	r7, #0
 8007b66:	f000 80d8 	beq.w	8007d1a <_printf_i+0x1d2>
 8007b6a:	2f58      	cmp	r7, #88	; 0x58
 8007b6c:	f000 80a3 	beq.w	8007cb6 <_printf_i+0x16e>
 8007b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b78:	e03a      	b.n	8007bf0 <_printf_i+0xa8>
 8007b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b7e:	2b15      	cmp	r3, #21
 8007b80:	d8f6      	bhi.n	8007b70 <_printf_i+0x28>
 8007b82:	a001      	add	r0, pc, #4	; (adr r0, 8007b88 <_printf_i+0x40>)
 8007b84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b88:	08007be1 	.word	0x08007be1
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007b71 	.word	0x08007b71
 8007b94:	08007b71 	.word	0x08007b71
 8007b98:	08007b71 	.word	0x08007b71
 8007b9c:	08007b71 	.word	0x08007b71
 8007ba0:	08007bf5 	.word	0x08007bf5
 8007ba4:	08007b71 	.word	0x08007b71
 8007ba8:	08007b71 	.word	0x08007b71
 8007bac:	08007b71 	.word	0x08007b71
 8007bb0:	08007b71 	.word	0x08007b71
 8007bb4:	08007d01 	.word	0x08007d01
 8007bb8:	08007c25 	.word	0x08007c25
 8007bbc:	08007ce3 	.word	0x08007ce3
 8007bc0:	08007b71 	.word	0x08007b71
 8007bc4:	08007b71 	.word	0x08007b71
 8007bc8:	08007d23 	.word	0x08007d23
 8007bcc:	08007b71 	.word	0x08007b71
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007b71 	.word	0x08007b71
 8007bd8:	08007b71 	.word	0x08007b71
 8007bdc:	08007ceb 	.word	0x08007ceb
 8007be0:	680b      	ldr	r3, [r1, #0]
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	600a      	str	r2, [r1, #0]
 8007be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0a3      	b.n	8007d3c <_printf_i+0x1f4>
 8007bf4:	6825      	ldr	r5, [r4, #0]
 8007bf6:	6808      	ldr	r0, [r1, #0]
 8007bf8:	062e      	lsls	r6, r5, #24
 8007bfa:	f100 0304 	add.w	r3, r0, #4
 8007bfe:	d50a      	bpl.n	8007c16 <_printf_i+0xce>
 8007c00:	6805      	ldr	r5, [r0, #0]
 8007c02:	600b      	str	r3, [r1, #0]
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	da03      	bge.n	8007c10 <_printf_i+0xc8>
 8007c08:	232d      	movs	r3, #45	; 0x2d
 8007c0a:	426d      	negs	r5, r5
 8007c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c10:	485e      	ldr	r0, [pc, #376]	; (8007d8c <_printf_i+0x244>)
 8007c12:	230a      	movs	r3, #10
 8007c14:	e019      	b.n	8007c4a <_printf_i+0x102>
 8007c16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c1a:	6805      	ldr	r5, [r0, #0]
 8007c1c:	600b      	str	r3, [r1, #0]
 8007c1e:	bf18      	it	ne
 8007c20:	b22d      	sxthne	r5, r5
 8007c22:	e7ef      	b.n	8007c04 <_printf_i+0xbc>
 8007c24:	680b      	ldr	r3, [r1, #0]
 8007c26:	6825      	ldr	r5, [r4, #0]
 8007c28:	1d18      	adds	r0, r3, #4
 8007c2a:	6008      	str	r0, [r1, #0]
 8007c2c:	0628      	lsls	r0, r5, #24
 8007c2e:	d501      	bpl.n	8007c34 <_printf_i+0xec>
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	e002      	b.n	8007c3a <_printf_i+0xf2>
 8007c34:	0669      	lsls	r1, r5, #25
 8007c36:	d5fb      	bpl.n	8007c30 <_printf_i+0xe8>
 8007c38:	881d      	ldrh	r5, [r3, #0]
 8007c3a:	4854      	ldr	r0, [pc, #336]	; (8007d8c <_printf_i+0x244>)
 8007c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8007c3e:	bf0c      	ite	eq
 8007c40:	2308      	moveq	r3, #8
 8007c42:	230a      	movne	r3, #10
 8007c44:	2100      	movs	r1, #0
 8007c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c4a:	6866      	ldr	r6, [r4, #4]
 8007c4c:	60a6      	str	r6, [r4, #8]
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	bfa2      	ittt	ge
 8007c52:	6821      	ldrge	r1, [r4, #0]
 8007c54:	f021 0104 	bicge.w	r1, r1, #4
 8007c58:	6021      	strge	r1, [r4, #0]
 8007c5a:	b90d      	cbnz	r5, 8007c60 <_printf_i+0x118>
 8007c5c:	2e00      	cmp	r6, #0
 8007c5e:	d04d      	beq.n	8007cfc <_printf_i+0x1b4>
 8007c60:	4616      	mov	r6, r2
 8007c62:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c66:	fb03 5711 	mls	r7, r3, r1, r5
 8007c6a:	5dc7      	ldrb	r7, [r0, r7]
 8007c6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c70:	462f      	mov	r7, r5
 8007c72:	42bb      	cmp	r3, r7
 8007c74:	460d      	mov	r5, r1
 8007c76:	d9f4      	bls.n	8007c62 <_printf_i+0x11a>
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d10b      	bne.n	8007c94 <_printf_i+0x14c>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	07df      	lsls	r7, r3, #31
 8007c80:	d508      	bpl.n	8007c94 <_printf_i+0x14c>
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	6861      	ldr	r1, [r4, #4]
 8007c86:	4299      	cmp	r1, r3
 8007c88:	bfde      	ittt	le
 8007c8a:	2330      	movle	r3, #48	; 0x30
 8007c8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c94:	1b92      	subs	r2, r2, r6
 8007c96:	6122      	str	r2, [r4, #16]
 8007c98:	f8cd a000 	str.w	sl, [sp]
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	aa03      	add	r2, sp, #12
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fee2 	bl	8007a6c <_printf_common>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d14c      	bne.n	8007d46 <_printf_i+0x1fe>
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	b004      	add	sp, #16
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	4835      	ldr	r0, [pc, #212]	; (8007d8c <_printf_i+0x244>)
 8007cb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	680e      	ldr	r6, [r1, #0]
 8007cc0:	061f      	lsls	r7, r3, #24
 8007cc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cc6:	600e      	str	r6, [r1, #0]
 8007cc8:	d514      	bpl.n	8007cf4 <_printf_i+0x1ac>
 8007cca:	07d9      	lsls	r1, r3, #31
 8007ccc:	bf44      	itt	mi
 8007cce:	f043 0320 	orrmi.w	r3, r3, #32
 8007cd2:	6023      	strmi	r3, [r4, #0]
 8007cd4:	b91d      	cbnz	r5, 8007cde <_printf_i+0x196>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	f023 0320 	bic.w	r3, r3, #32
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	2310      	movs	r3, #16
 8007ce0:	e7b0      	b.n	8007c44 <_printf_i+0xfc>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	f043 0320 	orr.w	r3, r3, #32
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	2378      	movs	r3, #120	; 0x78
 8007cec:	4828      	ldr	r0, [pc, #160]	; (8007d90 <_printf_i+0x248>)
 8007cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cf2:	e7e3      	b.n	8007cbc <_printf_i+0x174>
 8007cf4:	065e      	lsls	r6, r3, #25
 8007cf6:	bf48      	it	mi
 8007cf8:	b2ad      	uxthmi	r5, r5
 8007cfa:	e7e6      	b.n	8007cca <_printf_i+0x182>
 8007cfc:	4616      	mov	r6, r2
 8007cfe:	e7bb      	b.n	8007c78 <_printf_i+0x130>
 8007d00:	680b      	ldr	r3, [r1, #0]
 8007d02:	6826      	ldr	r6, [r4, #0]
 8007d04:	6960      	ldr	r0, [r4, #20]
 8007d06:	1d1d      	adds	r5, r3, #4
 8007d08:	600d      	str	r5, [r1, #0]
 8007d0a:	0635      	lsls	r5, r6, #24
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	d501      	bpl.n	8007d14 <_printf_i+0x1cc>
 8007d10:	6018      	str	r0, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <_printf_i+0x1d2>
 8007d14:	0671      	lsls	r1, r6, #25
 8007d16:	d5fb      	bpl.n	8007d10 <_printf_i+0x1c8>
 8007d18:	8018      	strh	r0, [r3, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	4616      	mov	r6, r2
 8007d20:	e7ba      	b.n	8007c98 <_printf_i+0x150>
 8007d22:	680b      	ldr	r3, [r1, #0]
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	600a      	str	r2, [r1, #0]
 8007d28:	681e      	ldr	r6, [r3, #0]
 8007d2a:	6862      	ldr	r2, [r4, #4]
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7f8 fabe 	bl	80002b0 <memchr>
 8007d34:	b108      	cbz	r0, 8007d3a <_printf_i+0x1f2>
 8007d36:	1b80      	subs	r0, r0, r6
 8007d38:	6060      	str	r0, [r4, #4]
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d44:	e7a8      	b.n	8007c98 <_printf_i+0x150>
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	4632      	mov	r2, r6
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	47d0      	blx	sl
 8007d50:	3001      	adds	r0, #1
 8007d52:	d0ab      	beq.n	8007cac <_printf_i+0x164>
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	079b      	lsls	r3, r3, #30
 8007d58:	d413      	bmi.n	8007d82 <_printf_i+0x23a>
 8007d5a:	68e0      	ldr	r0, [r4, #12]
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	4298      	cmp	r0, r3
 8007d60:	bfb8      	it	lt
 8007d62:	4618      	movlt	r0, r3
 8007d64:	e7a4      	b.n	8007cb0 <_printf_i+0x168>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	47d0      	blx	sl
 8007d70:	3001      	adds	r0, #1
 8007d72:	d09b      	beq.n	8007cac <_printf_i+0x164>
 8007d74:	3501      	adds	r5, #1
 8007d76:	68e3      	ldr	r3, [r4, #12]
 8007d78:	9903      	ldr	r1, [sp, #12]
 8007d7a:	1a5b      	subs	r3, r3, r1
 8007d7c:	42ab      	cmp	r3, r5
 8007d7e:	dcf2      	bgt.n	8007d66 <_printf_i+0x21e>
 8007d80:	e7eb      	b.n	8007d5a <_printf_i+0x212>
 8007d82:	2500      	movs	r5, #0
 8007d84:	f104 0619 	add.w	r6, r4, #25
 8007d88:	e7f5      	b.n	8007d76 <_printf_i+0x22e>
 8007d8a:	bf00      	nop
 8007d8c:	08008199 	.word	0x08008199
 8007d90:	080081aa 	.word	0x080081aa

08007d94 <_sbrk_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d06      	ldr	r5, [pc, #24]	; (8007db0 <_sbrk_r+0x1c>)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	f000 f8f6 	bl	8007f90 <_sbrk>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	d102      	bne.n	8007dae <_sbrk_r+0x1a>
 8007da8:	682b      	ldr	r3, [r5, #0]
 8007daa:	b103      	cbz	r3, 8007dae <_sbrk_r+0x1a>
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	bd38      	pop	{r3, r4, r5, pc}
 8007db0:	20014518 	.word	0x20014518

08007db4 <__sread>:
 8007db4:	b510      	push	{r4, lr}
 8007db6:	460c      	mov	r4, r1
 8007db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbc:	f000 f8ce 	bl	8007f5c <_read_r>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	bfab      	itete	ge
 8007dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8007dc8:	181b      	addge	r3, r3, r0
 8007dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dce:	bfac      	ite	ge
 8007dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dd2:	81a3      	strhlt	r3, [r4, #12]
 8007dd4:	bd10      	pop	{r4, pc}

08007dd6 <__swrite>:
 8007dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dda:	461f      	mov	r7, r3
 8007ddc:	898b      	ldrh	r3, [r1, #12]
 8007dde:	05db      	lsls	r3, r3, #23
 8007de0:	4605      	mov	r5, r0
 8007de2:	460c      	mov	r4, r1
 8007de4:	4616      	mov	r6, r2
 8007de6:	d505      	bpl.n	8007df4 <__swrite+0x1e>
 8007de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dec:	2302      	movs	r3, #2
 8007dee:	2200      	movs	r2, #0
 8007df0:	f000 f856 	bl	8007ea0 <_lseek_r>
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	4632      	mov	r2, r6
 8007e02:	463b      	mov	r3, r7
 8007e04:	4628      	mov	r0, r5
 8007e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0a:	f7ff b847 	b.w	8006e9c <_write_r>

08007e0e <__sseek>:
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	460c      	mov	r4, r1
 8007e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e16:	f000 f843 	bl	8007ea0 <_lseek_r>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	bf15      	itete	ne
 8007e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e2a:	81a3      	strheq	r3, [r4, #12]
 8007e2c:	bf18      	it	ne
 8007e2e:	81a3      	strhne	r3, [r4, #12]
 8007e30:	bd10      	pop	{r4, pc}

08007e32 <__sclose>:
 8007e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e36:	f000 b801 	b.w	8007e3c <_close_r>
	...

08007e3c <_close_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d06      	ldr	r5, [pc, #24]	; (8007e58 <_close_r+0x1c>)
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	602b      	str	r3, [r5, #0]
 8007e48:	f7f8 fe5f 	bl	8000b0a <_close>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_close_r+0x1a>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_close_r+0x1a>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	20014518 	.word	0x20014518

08007e5c <_fstat_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d07      	ldr	r5, [pc, #28]	; (8007e7c <_fstat_r+0x20>)
 8007e60:	2300      	movs	r3, #0
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	4611      	mov	r1, r2
 8007e68:	602b      	str	r3, [r5, #0]
 8007e6a:	f7f8 fe5a 	bl	8000b22 <_fstat>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d102      	bne.n	8007e78 <_fstat_r+0x1c>
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	b103      	cbz	r3, 8007e78 <_fstat_r+0x1c>
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	bd38      	pop	{r3, r4, r5, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20014518 	.word	0x20014518

08007e80 <_isatty_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d06      	ldr	r5, [pc, #24]	; (8007e9c <_isatty_r+0x1c>)
 8007e84:	2300      	movs	r3, #0
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	f7f8 fe59 	bl	8000b42 <_isatty>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_isatty_r+0x1a>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_isatty_r+0x1a>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20014518 	.word	0x20014518

08007ea0 <_lseek_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d07      	ldr	r5, [pc, #28]	; (8007ec0 <_lseek_r+0x20>)
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	2200      	movs	r2, #0
 8007eac:	602a      	str	r2, [r5, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f7f8 fe52 	bl	8000b58 <_lseek>
 8007eb4:	1c43      	adds	r3, r0, #1
 8007eb6:	d102      	bne.n	8007ebe <_lseek_r+0x1e>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	b103      	cbz	r3, 8007ebe <_lseek_r+0x1e>
 8007ebc:	6023      	str	r3, [r4, #0]
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	20014518 	.word	0x20014518

08007ec4 <memmove>:
 8007ec4:	4288      	cmp	r0, r1
 8007ec6:	b510      	push	{r4, lr}
 8007ec8:	eb01 0402 	add.w	r4, r1, r2
 8007ecc:	d902      	bls.n	8007ed4 <memmove+0x10>
 8007ece:	4284      	cmp	r4, r0
 8007ed0:	4623      	mov	r3, r4
 8007ed2:	d807      	bhi.n	8007ee4 <memmove+0x20>
 8007ed4:	1e43      	subs	r3, r0, #1
 8007ed6:	42a1      	cmp	r1, r4
 8007ed8:	d008      	beq.n	8007eec <memmove+0x28>
 8007eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ee2:	e7f8      	b.n	8007ed6 <memmove+0x12>
 8007ee4:	4402      	add	r2, r0
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	428a      	cmp	r2, r1
 8007eea:	d100      	bne.n	8007eee <memmove+0x2a>
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ef6:	e7f7      	b.n	8007ee8 <memmove+0x24>

08007ef8 <__malloc_lock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__malloc_lock+0x8>)
 8007efa:	f7ff bb4b 	b.w	8007594 <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	20014510 	.word	0x20014510

08007f04 <__malloc_unlock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__malloc_unlock+0x8>)
 8007f06:	f7ff bb46 	b.w	8007596 <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20014510 	.word	0x20014510

08007f10 <_realloc_r>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	4607      	mov	r7, r0
 8007f14:	4614      	mov	r4, r2
 8007f16:	460e      	mov	r6, r1
 8007f18:	b921      	cbnz	r1, 8007f24 <_realloc_r+0x14>
 8007f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f1e:	4611      	mov	r1, r2
 8007f20:	f7ff bbee 	b.w	8007700 <_malloc_r>
 8007f24:	b922      	cbnz	r2, 8007f30 <_realloc_r+0x20>
 8007f26:	f7ff fb9b 	bl	8007660 <_free_r>
 8007f2a:	4625      	mov	r5, r4
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f30:	f000 f826 	bl	8007f80 <_malloc_usable_size_r>
 8007f34:	42a0      	cmp	r0, r4
 8007f36:	d20f      	bcs.n	8007f58 <_realloc_r+0x48>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f7ff fbe0 	bl	8007700 <_malloc_r>
 8007f40:	4605      	mov	r5, r0
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d0f2      	beq.n	8007f2c <_realloc_r+0x1c>
 8007f46:	4631      	mov	r1, r6
 8007f48:	4622      	mov	r2, r4
 8007f4a:	f7fe ffeb 	bl	8006f24 <memcpy>
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4638      	mov	r0, r7
 8007f52:	f7ff fb85 	bl	8007660 <_free_r>
 8007f56:	e7e9      	b.n	8007f2c <_realloc_r+0x1c>
 8007f58:	4635      	mov	r5, r6
 8007f5a:	e7e7      	b.n	8007f2c <_realloc_r+0x1c>

08007f5c <_read_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d07      	ldr	r5, [pc, #28]	; (8007f7c <_read_r+0x20>)
 8007f60:	4604      	mov	r4, r0
 8007f62:	4608      	mov	r0, r1
 8007f64:	4611      	mov	r1, r2
 8007f66:	2200      	movs	r2, #0
 8007f68:	602a      	str	r2, [r5, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f7f8 fdb0 	bl	8000ad0 <_read>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_read_r+0x1e>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_read_r+0x1e>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	20014518 	.word	0x20014518

08007f80 <_malloc_usable_size_r>:
 8007f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f84:	1f18      	subs	r0, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bfbc      	itt	lt
 8007f8a:	580b      	ldrlt	r3, [r1, r0]
 8007f8c:	18c0      	addlt	r0, r0, r3
 8007f8e:	4770      	bx	lr

08007f90 <_sbrk>:
 8007f90:	4b04      	ldr	r3, [pc, #16]	; (8007fa4 <_sbrk+0x14>)
 8007f92:	6819      	ldr	r1, [r3, #0]
 8007f94:	4602      	mov	r2, r0
 8007f96:	b909      	cbnz	r1, 8007f9c <_sbrk+0xc>
 8007f98:	4903      	ldr	r1, [pc, #12]	; (8007fa8 <_sbrk+0x18>)
 8007f9a:	6019      	str	r1, [r3, #0]
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	4402      	add	r2, r0
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	4770      	bx	lr
 8007fa4:	200143d4 	.word	0x200143d4
 8007fa8:	20014520 	.word	0x20014520

08007fac <_init>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr

08007fb8 <_fini>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr
