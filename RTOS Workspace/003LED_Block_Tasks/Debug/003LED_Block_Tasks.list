
003LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000584c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bbc  08005bbc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc4  08005bc4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000143fc  2000001c  08005be8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014418  08005be8  00024418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177e0  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c2  00000000  00000000  0003782c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bfe  00000000  00000000  0003ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001976a  00000000  00000000  00060a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db754  00000000  00000000  0007a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  00155998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a04 	.word	0x08005a04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08005a04 	.word	0x08005a04

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014370 	.word	0x20014370

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08c      	sub	sp, #48	; 0x30
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fad9 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f88b 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8fb 	bl	80007a4 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  SEGGER_UART_init(500000);
 80005ae:	483a      	ldr	r0, [pc, #232]	; (8000698 <main+0xfc>)
 80005b0:	f003 f8bc 	bl	800372c <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80005b4:	4b39      	ldr	r3, [pc, #228]	; (800069c <main+0x100>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a38      	ldr	r2, [pc, #224]	; (800069c <main+0x100>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c0:	f002 fee6 	bl	8003390 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start(); //comment out if using UART based continuous recording

  //Create Task 1: Red LED
  status = xTaskCreate(led_red_handler, "LED_RED_TASK", 200, NULL, 2, &ledr_task_handle);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	4933      	ldr	r1, [pc, #204]	; (80006a0 <main+0x104>)
 80005d4:	4833      	ldr	r0, [pc, #204]	; (80006a4 <main+0x108>)
 80005d6:	f001 ff01 	bl	80023dc <xTaskCreate>
 80005da:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x5a>

  //Create Task 2: Yellow LED
  status = xTaskCreate(led_yellow_handler, "LED_YELLOW_TASK", 200, NULL, 2, &ledy_task_handle);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	4928      	ldr	r1, [pc, #160]	; (80006a8 <main+0x10c>)
 8000608:	4828      	ldr	r0, [pc, #160]	; (80006ac <main+0x110>)
 800060a:	f001 fee7 	bl	80023dc <xTaskCreate>
 800060e:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00a      	beq.n	800062c <main+0x90>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	61fb      	str	r3, [r7, #28]
    }
 8000628:	bf00      	nop
 800062a:	e7fe      	b.n	800062a <main+0x8e>

  //Create Task 3: Blue LED
  status = xTaskCreate(led_blue_handler, "LED_BLUE_TASK", 200, NULL, 2, &ledb_task_handle);
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	491d      	ldr	r1, [pc, #116]	; (80006b0 <main+0x114>)
 800063c:	481d      	ldr	r0, [pc, #116]	; (80006b4 <main+0x118>)
 800063e:	f001 fecd 	bl	80023dc <xTaskCreate>
 8000642:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0xc4>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	61bb      	str	r3, [r7, #24]
    }
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0xc2>

  //Create Task 4: Green LED
  status = xTaskCreate(led_green_handler, "LED_GREEN_TASK", 200, NULL, 2, &ledg_task_handle);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2302      	movs	r3, #2
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	22c8      	movs	r2, #200	; 0xc8
 800066c:	4912      	ldr	r1, [pc, #72]	; (80006b8 <main+0x11c>)
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0x120>)
 8000670:	f001 feb4 	bl	80023dc <xTaskCreate>
 8000674:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	2b01      	cmp	r3, #1
 800067a:	d00a      	beq.n	8000692 <main+0xf6>
        __asm volatile
 800067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000680:	f383 8811 	msr	BASEPRI, r3
 8000684:	f3bf 8f6f 	isb	sy
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	617b      	str	r3, [r7, #20]
    }
 800068e:	bf00      	nop
 8000690:	e7fe      	b.n	8000690 <main+0xf4>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000692:	f002 f83f 	bl	8002714 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0xfa>
 8000698:	0007a120 	.word	0x0007a120
 800069c:	e0001000 	.word	0xe0001000
 80006a0:	08005a1c 	.word	0x08005a1c
 80006a4:	080008b1 	.word	0x080008b1
 80006a8:	08005a2c 	.word	0x08005a2c
 80006ac:	080008d9 	.word	0x080008d9
 80006b0:	08005a3c 	.word	0x08005a3c
 80006b4:	08000905 	.word	0x08000905
 80006b8:	08005a4c 	.word	0x08005a4c
 80006bc:	08000931 	.word	0x08000931

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	; 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 f990 	bl	80059f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemClock_Config+0xdc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a2b      	ldr	r2, [pc, #172]	; (800079c <SystemClock_Config+0xdc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <SystemClock_Config+0xdc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <SystemClock_Config+0xe0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <SystemClock_Config+0xe0>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemClock_Config+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000734:	23b4      	movs	r3, #180	; 0xb4
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f847 	bl	80017dc <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000754:	f000 f91c 	bl	8000990 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000758:	f000 fd06 	bl	8001168 <HAL_PWREx_EnableOverDrive>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000762:	f000 f915 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000772:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2105      	movs	r1, #5
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fd3f 	bl	8001208 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000790:	f000 f8fe 	bl	8000990 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	; 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b39      	ldr	r3, [pc, #228]	; (80008a4 <MX_GPIO_Init+0x100>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a38      	ldr	r2, [pc, #224]	; (80008a4 <MX_GPIO_Init+0x100>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <MX_GPIO_Init+0x100>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <MX_GPIO_Init+0x100>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <MX_GPIO_Init+0x100>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <MX_GPIO_Init+0x100>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_GPIO_Init+0x100>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a2a      	ldr	r2, [pc, #168]	; (80008a4 <MX_GPIO_Init+0x100>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_GPIO_Init+0x100>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_GPIO_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <MX_GPIO_Init+0x100>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_GPIO_Init+0x100>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	481e      	ldr	r0, [pc, #120]	; (80008a8 <MX_GPIO_Init+0x104>)
 8000830:	f000 fc4a 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800083a:	481c      	ldr	r0, [pc, #112]	; (80008ac <MX_GPIO_Init+0x108>)
 800083c:	f000 fc44 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000840:	230c      	movs	r3, #12
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000850:	2307      	movs	r3, #7
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_GPIO_Init+0x104>)
 800085c:	f000 faa0 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000860:	2320      	movs	r3, #32
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0x104>)
 8000878:	f000 fa92 	bl	8000da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_YELLOW_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin;
 800087c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_GPIO_Init+0x108>)
 8000896:	f000 fa83 	bl	8000da0 <HAL_GPIO_Init>

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020400 	.word	0x40020400

080008b0 <led_red_handler>:

/* USER CODE BEGIN 4 */
static void led_red_handler(void* parameters) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <led_red_handler+0x20>)
 80008ba:	f004 ffbd 	bl	8005838 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <led_red_handler+0x24>)
 80008c2:	f000 fc1a 	bl	80010fa <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		vTaskDelay(pdMS_TO_TICKS(1000));
 80008c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ca:	f001 feeb 	bl	80026a4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 80008ce:	e7f3      	b.n	80008b8 <led_red_handler+0x8>
 80008d0:	08005a5c 	.word	0x08005a5c
 80008d4:	40020400 	.word	0x40020400

080008d8 <led_yellow_handler>:
	}
}

static void led_yellow_handler(void* parameters) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <led_yellow_handler+0x24>)
 80008e2:	f004 ffa9 	bl	8005838 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80008e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <led_yellow_handler+0x28>)
 80008ec:	f000 fc05 	bl	80010fa <HAL_GPIO_TogglePin>
		//HAL_Delay(800);
		vTaskDelay(pdMS_TO_TICKS(800));
 80008f0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008f4:	f001 fed6 	bl	80026a4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 80008f8:	e7f2      	b.n	80008e0 <led_yellow_handler+0x8>
 80008fa:	bf00      	nop
 80008fc:	08005a70 	.word	0x08005a70
 8000900:	40020400 	.word	0x40020400

08000904 <led_blue_handler>:
	}
}

static void led_blue_handler(void* parameters) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <led_blue_handler+0x24>)
 800090e:	f004 ff93 	bl	8005838 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <led_blue_handler+0x28>)
 8000918:	f000 fbef 	bl	80010fa <HAL_GPIO_TogglePin>
		//HAL_Delay(600);
		vTaskDelay(pdMS_TO_TICKS(600));
 800091c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000920:	f001 fec0 	bl	80026a4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000924:	e7f2      	b.n	800090c <led_blue_handler+0x8>
 8000926:	bf00      	nop
 8000928:	08005a84 	.word	0x08005a84
 800092c:	40020400 	.word	0x40020400

08000930 <led_green_handler>:
	}
}

static void led_green_handler(void* parameters) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <led_green_handler+0x24>)
 800093a:	f004 ff7d 	bl	8005838 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <led_green_handler+0x28>)
 8000944:	f000 fbd9 	bl	80010fa <HAL_GPIO_TogglePin>
		//HAL_Delay(400);
		vTaskDelay(pdMS_TO_TICKS(400));
 8000948:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800094c:	f001 feaa 	bl	80026a4 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000950:	e7f2      	b.n	8000938 <led_green_handler+0x8>
 8000952:	bf00      	nop
 8000954:	08005a98 	.word	0x08005a98
 8000958:	40020400 	.word	0x40020400

0800095c <vApplicationIdleHook>:
	}
}

void vApplicationIdleHook( void )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000960:	2101      	movs	r1, #1
 8000962:	2000      	movs	r0, #0
 8000964:	f000 fbe4 	bl	8001130 <HAL_PWR_EnterSLEEPMode>

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097e:	f000 f90d 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40001000 	.word	0x40001000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2036      	movs	r0, #54	; 0x36
 8000a02:	f000 f9a3 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a06:	2036      	movs	r0, #54	; 0x36
 8000a08:	f000 f9bc 	bl	8000d84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a28:	f107 0210 	add.w	r2, r7, #16
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fcee 	bl	8001414 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a38:	f000 fcd8 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	0c9b      	lsrs	r3, r3, #18
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_InitTick+0xac>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_InitTick+0xb0>)
 8000a54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_InitTick+0xac>)
 8000a58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_InitTick+0xac>)
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_InitTick+0xac>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_InitTick+0xac>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_InitTick+0xac>)
 8000a72:	f001 f951 	bl	8001d18 <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d104      	bne.n	8000a86 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a7c:	4806      	ldr	r0, [pc, #24]	; (8000a98 <HAL_InitTick+0xac>)
 8000a7e:	f001 f9a5 	bl	8001dcc <HAL_TIM_Base_Start_IT>
 8000a82:	4603      	mov	r3, r0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	20014324 	.word	0x20014324
 8000a9c:	40001000 	.word	0x40001000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM6_DAC_IRQHandler+0x10>)
 8000ad2:	f001 f9eb 	bl	8001eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20014324 	.word	0x20014324

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f004 ff1f 	bl	8005974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fd31 	bl	800059c <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b48:	08005bcc 	.word	0x08005bcc
  ldr r2, =_sbss
 8000b4c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b50:	20014418 	.word	0x20014418

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f8d8 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ff30 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff ff06 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2001436c 	.word	0x2001436c

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2001436c 	.word	0x2001436c

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	e165      	b.n	8001088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f040 8154 	bne.w	8001082 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d130      	bne.n	8000e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d017      	beq.n	8000e90 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d123      	bne.n	8000ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f003 0307 	and.w	r3, r3, #7
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0203 	and.w	r2, r3, #3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80ae 	beq.w	8001082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a5c      	ldr	r2, [pc, #368]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f42:	4a58      	ldr	r2, [pc, #352]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x308>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d025      	beq.n	8000fba <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_GPIO_Init+0x30c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d01f      	beq.n	8000fb6 <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x310>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x314>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x20e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x318>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x20a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x31c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x206>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_GPIO_Init+0x320>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x202>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x21c>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x304>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_GPIO_Init+0x324>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae96 	bls.w	8000dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40013c00 	.word	0x40013c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	460b      	mov	r3, r1
 8001104:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800110c:	887a      	ldrh	r2, [r7, #2]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43d9      	mvns	r1, r3
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	400b      	ands	r3, r1
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_PWR_EnterSLEEPMode+0x34>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001142:	f023 0304 	bic.w	r3, r3, #4
 8001146:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800114e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001150:	e002      	b.n	8001158 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001152:	bf40      	sev
    __WFE();
 8001154:	bf20      	wfe
    __WFE();
 8001156:	bf20      	wfe
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_PWREx_EnableOverDrive+0x94>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001194:	f7ff fd16 	bl	8000bc4 <HAL_GetTick>
 8001198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800119a:	e009      	b.n	80011b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800119c:	f7ff fd12 	bl	8000bc4 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011aa:	d901      	bls.n	80011b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e01f      	b.n	80011f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_PWREx_EnableOverDrive+0x98>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d1ee      	bne.n	800119c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c4:	f7ff fcfe 	bl	8000bc4 <HAL_GetTick>
 80011c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011ca:	e009      	b.n	80011e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011cc:	f7ff fcfa 	bl	8000bc4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011da:	d901      	bls.n	80011e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e007      	b.n	80011f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_PWREx_EnableOverDrive+0x98>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011ec:	d1ee      	bne.n	80011cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	420e0040 	.word	0x420e0040
 8001200:	40007000 	.word	0x40007000
 8001204:	420e0044 	.word	0x420e0044

08001208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0cc      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800121c:	4b68      	ldr	r3, [pc, #416]	; (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d90c      	bls.n	8001244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4b65      	ldr	r3, [pc, #404]	; (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001232:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d001      	beq.n	8001244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0b8      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d020      	beq.n	8001292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800125c:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001274:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a52      	ldr	r2, [pc, #328]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800127e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	494d      	ldr	r1, [pc, #308]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d044      	beq.n	8001328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d119      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e07f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d107      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d109      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e06f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e067      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f023 0203 	bic.w	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4934      	ldr	r1, [pc, #208]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f8:	f7ff fc64 	bl	8000bc4 <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	e00a      	b.n	8001316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001300:	f7ff fc60 	bl	8000bc4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	; 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e04f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 020c 	and.w	r2, r3, #12
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	429a      	cmp	r2, r3
 8001326:	d1eb      	bne.n	8001300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d20c      	bcs.n	8001350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e032      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4916      	ldr	r1, [pc, #88]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	4313      	orrs	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	490e      	ldr	r1, [pc, #56]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	4313      	orrs	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800138e:	f000 f873 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8001392:	4602      	mov	r2, r0
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	490a      	ldr	r1, [pc, #40]	; (80013c8 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	5ccb      	ldrb	r3, [r1, r3]
 80013a2:	fa22 f303 	lsr.w	r3, r2, r3
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_RCC_ClockConfig+0x1c8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fb1c 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00
 80013c4:	40023800 	.word	0x40023800
 80013c8:	08005b7c 	.word	0x08005b7c
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000

080013ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	0a9b      	lsrs	r3, r3, #10
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	4903      	ldr	r1, [pc, #12]	; (8001410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	08005b8c 	.word	0x08005b8c

08001414 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	220f      	movs	r2, #15
 8001422:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_RCC_GetClockConfig+0x5c>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_RCC_GetClockConfig+0x60>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 020f 	and.w	r2, r3, #15
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40023c00 	.word	0x40023c00

08001478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001494:	4bce      	ldr	r3, [pc, #824]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b0c      	cmp	r3, #12
 800149e:	f200 818d 	bhi.w	80017bc <HAL_RCC_GetSysClockFreq+0x344>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014dd 	.word	0x080014dd
 80014ac:	080017bd 	.word	0x080017bd
 80014b0:	080017bd 	.word	0x080017bd
 80014b4:	080017bd 	.word	0x080017bd
 80014b8:	080014e3 	.word	0x080014e3
 80014bc:	080017bd 	.word	0x080017bd
 80014c0:	080017bd 	.word	0x080017bd
 80014c4:	080017bd 	.word	0x080017bd
 80014c8:	080014e9 	.word	0x080014e9
 80014cc:	080017bd 	.word	0x080017bd
 80014d0:	080017bd 	.word	0x080017bd
 80014d4:	080017bd 	.word	0x080017bd
 80014d8:	0800165d 	.word	0x0800165d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014dc:	4bbd      	ldr	r3, [pc, #756]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014de:	61bb      	str	r3, [r7, #24]
       break;
 80014e0:	e16f      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014e2:	4bbd      	ldr	r3, [pc, #756]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x360>)
 80014e4:	61bb      	str	r3, [r7, #24]
      break;
 80014e6:	e16c      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e8:	4bb9      	ldr	r3, [pc, #740]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f2:	4bb7      	ldr	r3, [pc, #732]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d053      	beq.n	80015a6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fe:	4bb4      	ldr	r3, [pc, #720]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	099b      	lsrs	r3, r3, #6
 8001504:	461a      	mov	r2, r3
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800150e:	f04f 0100 	mov.w	r1, #0
 8001512:	ea02 0400 	and.w	r4, r2, r0
 8001516:	603c      	str	r4, [r7, #0]
 8001518:	400b      	ands	r3, r1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	014b      	lsls	r3, r1, #5
 800152e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001532:	0142      	lsls	r2, r0, #5
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	4623      	mov	r3, r4
 800153a:	1ac0      	subs	r0, r0, r3
 800153c:	462b      	mov	r3, r5
 800153e:	eb61 0103 	sbc.w	r1, r1, r3
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	018b      	lsls	r3, r1, #6
 800154c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001550:	0182      	lsls	r2, r0, #6
 8001552:	1a12      	subs	r2, r2, r0
 8001554:	eb63 0301 	sbc.w	r3, r3, r1
 8001558:	f04f 0000 	mov.w	r0, #0
 800155c:	f04f 0100 	mov.w	r1, #0
 8001560:	00d9      	lsls	r1, r3, #3
 8001562:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001566:	00d0      	lsls	r0, r2, #3
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4621      	mov	r1, r4
 800156e:	1852      	adds	r2, r2, r1
 8001570:	4629      	mov	r1, r5
 8001572:	eb43 0101 	adc.w	r1, r3, r1
 8001576:	460b      	mov	r3, r1
 8001578:	f04f 0000 	mov.w	r0, #0
 800157c:	f04f 0100 	mov.w	r1, #0
 8001580:	0259      	lsls	r1, r3, #9
 8001582:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001586:	0250      	lsls	r0, r2, #9
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	461a      	mov	r2, r3
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f7fe fe84 	bl	80002a4 <__aeabi_uldivmod>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4613      	mov	r3, r2
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	e04c      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a6:	4b8a      	ldr	r3, [pc, #552]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	099b      	lsrs	r3, r3, #6
 80015ac:	461a      	mov	r2, r3
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015b6:	f04f 0100 	mov.w	r1, #0
 80015ba:	ea02 0a00 	and.w	sl, r2, r0
 80015be:	ea03 0b01 	and.w	fp, r3, r1
 80015c2:	4650      	mov	r0, sl
 80015c4:	4659      	mov	r1, fp
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	014b      	lsls	r3, r1, #5
 80015d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015d4:	0142      	lsls	r2, r0, #5
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	ebb0 000a 	subs.w	r0, r0, sl
 80015de:	eb61 010b 	sbc.w	r1, r1, fp
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	018b      	lsls	r3, r1, #6
 80015ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015f0:	0182      	lsls	r2, r0, #6
 80015f2:	1a12      	subs	r2, r2, r0
 80015f4:	eb63 0301 	sbc.w	r3, r3, r1
 80015f8:	f04f 0000 	mov.w	r0, #0
 80015fc:	f04f 0100 	mov.w	r1, #0
 8001600:	00d9      	lsls	r1, r3, #3
 8001602:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001606:	00d0      	lsls	r0, r2, #3
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	eb12 020a 	adds.w	r2, r2, sl
 8001610:	eb43 030b 	adc.w	r3, r3, fp
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	0299      	lsls	r1, r3, #10
 800161e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001622:	0290      	lsls	r0, r2, #10
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	461a      	mov	r2, r3
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f7fe fe36 	bl	80002a4 <__aeabi_uldivmod>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4613      	mov	r3, r2
 800163e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001640:	4b63      	ldr	r3, [pc, #396]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	0c1b      	lsrs	r3, r3, #16
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	3301      	adds	r3, #1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	61bb      	str	r3, [r7, #24]
      break;
 800165a:	e0b2      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001664:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001666:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04d      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	461a      	mov	r2, r3
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	ea02 0800 	and.w	r8, r2, r0
 800168a:	ea03 0901 	and.w	r9, r3, r1
 800168e:	4640      	mov	r0, r8
 8001690:	4649      	mov	r1, r9
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	014b      	lsls	r3, r1, #5
 800169c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016a0:	0142      	lsls	r2, r0, #5
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	ebb0 0008 	subs.w	r0, r0, r8
 80016aa:	eb61 0109 	sbc.w	r1, r1, r9
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	018b      	lsls	r3, r1, #6
 80016b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016bc:	0182      	lsls	r2, r0, #6
 80016be:	1a12      	subs	r2, r2, r0
 80016c0:	eb63 0301 	sbc.w	r3, r3, r1
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	00d9      	lsls	r1, r3, #3
 80016ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016d2:	00d0      	lsls	r0, r2, #3
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	eb12 0208 	adds.w	r2, r2, r8
 80016dc:	eb43 0309 	adc.w	r3, r3, r9
 80016e0:	f04f 0000 	mov.w	r0, #0
 80016e4:	f04f 0100 	mov.w	r1, #0
 80016e8:	0259      	lsls	r1, r3, #9
 80016ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016ee:	0250      	lsls	r0, r2, #9
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	f7fe fdd0 	bl	80002a4 <__aeabi_uldivmod>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4613      	mov	r3, r2
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	e04a      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	099b      	lsrs	r3, r3, #6
 8001714:	461a      	mov	r2, r3
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800171e:	f04f 0100 	mov.w	r1, #0
 8001722:	ea02 0400 	and.w	r4, r2, r0
 8001726:	ea03 0501 	and.w	r5, r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	014b      	lsls	r3, r1, #5
 8001738:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800173c:	0142      	lsls	r2, r0, #5
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	1b00      	subs	r0, r0, r4
 8001744:	eb61 0105 	sbc.w	r1, r1, r5
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	018b      	lsls	r3, r1, #6
 8001752:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001756:	0182      	lsls	r2, r0, #6
 8001758:	1a12      	subs	r2, r2, r0
 800175a:	eb63 0301 	sbc.w	r3, r3, r1
 800175e:	f04f 0000 	mov.w	r0, #0
 8001762:	f04f 0100 	mov.w	r1, #0
 8001766:	00d9      	lsls	r1, r3, #3
 8001768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800176c:	00d0      	lsls	r0, r2, #3
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	1912      	adds	r2, r2, r4
 8001774:	eb45 0303 	adc.w	r3, r5, r3
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	0299      	lsls	r1, r3, #10
 8001782:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001786:	0290      	lsls	r0, r2, #10
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	461a      	mov	r2, r3
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	f7fe fd84 	bl	80002a4 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0f1b      	lsrs	r3, r3, #28
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	61bb      	str	r3, [r7, #24]
      break;
 80017ba:	e002      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017be:	61bb      	str	r3, [r7, #24]
      break;
 80017c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c2:	69bb      	ldr	r3, [r7, #24]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	00f42400 	.word	0x00f42400
 80017d8:	007a1200 	.word	0x007a1200

080017dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e28d      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8083 	beq.w	8001902 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017fc:	4b94      	ldr	r3, [pc, #592]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d019      	beq.n	800183c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001808:	4b91      	ldr	r3, [pc, #580]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001810:	2b08      	cmp	r3, #8
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001814:	4b8e      	ldr	r3, [pc, #568]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001820:	d00c      	beq.n	800183c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d112      	bne.n	8001854 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182e:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800183a:	d10b      	bne.n	8001854 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	4b84      	ldr	r3, [pc, #528]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d05b      	beq.n	8001900 <HAL_RCC_OscConfig+0x124>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d157      	bne.n	8001900 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e25a      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d106      	bne.n	800186c <HAL_RCC_OscConfig+0x90>
 800185e:	4b7c      	ldr	r3, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a7b      	ldr	r2, [pc, #492]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xcc>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0xb4>
 8001876:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a75      	ldr	r2, [pc, #468]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xcc>
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6e      	ldr	r2, [pc, #440]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6b      	ldr	r2, [pc, #428]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff f988 	bl	8000bc4 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff f984 	bl	8000bc4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e21f      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xdc>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f974 	bl	8000bc4 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff f970 	bl	8000bc4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e20b      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	4b57      	ldr	r3, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x104>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d06f      	beq.n	80019ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800190e:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d017      	beq.n	800194a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800191a:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001922:	2b08      	cmp	r3, #8
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x186>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1d3      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4937      	ldr	r1, [pc, #220]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e03a      	b.n	80019ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <HAL_RCC_OscConfig+0x278>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f91d 	bl	8000bc4 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff f919 	bl	8000bc4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1b4      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4925      	ldr	r1, [pc, #148]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_OscConfig+0x278>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8fc 	bl	8000bc4 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff f8f8 	bl	8000bc4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e193      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d036      	beq.n	8001a68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d016      	beq.n	8001a30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f8dc 	bl	8000bc4 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff f8d8 	bl	8000bc4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e173      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x274>)
 8001a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x234>
 8001a2e:	e01b      	b.n	8001a68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x27c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f8c5 	bl	8000bc4 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	e00e      	b.n	8001a5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff f8c1 	bl	8000bc4 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d907      	bls.n	8001a5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e15c      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	42470000 	.word	0x42470000
 8001a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b8a      	ldr	r3, [pc, #552]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ea      	bne.n	8001a3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8097 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b83      	ldr	r3, [pc, #524]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a7e      	ldr	r2, [pc, #504]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b7c      	ldr	r3, [pc, #496]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_RCC_OscConfig+0x4b0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab2:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_RCC_OscConfig+0x4b0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a75      	ldr	r2, [pc, #468]	; (8001c8c <HAL_RCC_OscConfig+0x4b0>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001abe:	f7ff f881 	bl	8000bc4 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac6:	f7ff f87d 	bl	8000bc4 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e118      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <HAL_RCC_OscConfig+0x4b0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x31e>
 8001aec:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x358>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x340>
 8001b02:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a60      	ldr	r2, [pc, #384]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0e:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	4a5d      	ldr	r2, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0x358>
 8001b1c:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a59      	ldr	r2, [pc, #356]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
 8001b28:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a56      	ldr	r2, [pc, #344]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d015      	beq.n	8001b68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f842 	bl	8000bc4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f83e 	bl	8000bc4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0d7      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <HAL_RCC_OscConfig+0x368>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff f82c 	bl	8000bc4 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff f828 	bl	8000bc4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0c1      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ee      	bne.n	8001b70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80ad 	beq.w	8001d08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bae:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d060      	beq.n	8001c7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d145      	bne.n	8001c4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b33      	ldr	r3, [pc, #204]	; (8001c90 <HAL_RCC_OscConfig+0x4b4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7fe fffc 	bl	8000bc4 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe fff8 	bl	8000bc4 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e093      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	071b      	lsls	r3, r3, #28
 8001c1a:	491b      	ldr	r1, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_RCC_OscConfig+0x4b4>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7fe ffcd 	bl	8000bc4 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7fe ffc9 	bl	8000bc4 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e064      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x452>
 8001c4c:	e05c      	b.n	8001d08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_OscConfig+0x4b4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7fe ffb6 	bl	8000bc4 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe ffb2 	bl	8000bc4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e04d      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x480>
 8001c7a:	e045      	b.n	8001d08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e040      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_RCC_OscConfig+0x538>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d030      	beq.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d129      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d122      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d119      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10f      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e041      	b.n	8001dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f839 	bl	8001db6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3304      	adds	r3, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f000 f9d8 	bl	800210c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d001      	beq.n	8001de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e04e      	b.n	8001e82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d022      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0e:	d01d      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d018      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00e      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d111      	bne.n	8001e70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d010      	beq.n	8001e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6e:	e007      	b.n	8001e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40010400 	.word	0x40010400
 8001ea4:	40014000 	.word	0x40014000
 8001ea8:	40001800 	.word	0x40001800

08001eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0202 	mvn.w	r2, #2
 8001ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8ee 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8e0 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8f1 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0204 	mvn.w	r2, #4
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8c4 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8b6 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8c7 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0208 	mvn.w	r2, #8
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2204      	movs	r2, #4
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f89a 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f88c 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f89d 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0210 	mvn.w	r2, #16
 8001fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f870 	bl	80020d0 <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f862 	bl	80020bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f873 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d10e      	bne.n	8002030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0201 	mvn.w	r2, #1
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fc9e 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d10e      	bne.n	800205c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002048:	2b80      	cmp	r3, #128	; 0x80
 800204a:	d107      	bne.n	800205c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f902 	bl	8002260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d10e      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	d107      	bne.n	8002088 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f838 	bl	80020f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b20      	cmp	r3, #32
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0220 	mvn.w	r2, #32
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8cc 	bl	800224c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <TIM_Base_SetConfig+0x114>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212a:	d00f      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a3d      	ldr	r2, [pc, #244]	; (8002224 <TIM_Base_SetConfig+0x118>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00b      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3c      	ldr	r2, [pc, #240]	; (8002228 <TIM_Base_SetConfig+0x11c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <TIM_Base_SetConfig+0x120>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <TIM_Base_SetConfig+0x124>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d108      	bne.n	800215e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <TIM_Base_SetConfig+0x114>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d027      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2c      	ldr	r2, [pc, #176]	; (8002224 <TIM_Base_SetConfig+0x118>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d023      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <TIM_Base_SetConfig+0x11c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01f      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2a      	ldr	r2, [pc, #168]	; (800222c <TIM_Base_SetConfig+0x120>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a29      	ldr	r2, [pc, #164]	; (8002230 <TIM_Base_SetConfig+0x124>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d017      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a28      	ldr	r2, [pc, #160]	; (8002234 <TIM_Base_SetConfig+0x128>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <TIM_Base_SetConfig+0x12c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00f      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a26      	ldr	r2, [pc, #152]	; (800223c <TIM_Base_SetConfig+0x130>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <TIM_Base_SetConfig+0x134>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a24      	ldr	r2, [pc, #144]	; (8002244 <TIM_Base_SetConfig+0x138>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a23      	ldr	r2, [pc, #140]	; (8002248 <TIM_Base_SetConfig+0x13c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <TIM_Base_SetConfig+0x114>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d003      	beq.n	8002204 <TIM_Base_SetConfig+0xf8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <TIM_Base_SetConfig+0x124>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d103      	bne.n	800220c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	615a      	str	r2, [r3, #20]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40010000 	.word	0x40010000
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40000c00 	.word	0x40000c00
 8002230:	40010400 	.word	0x40010400
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800
 8002240:	40001800 	.word	0x40001800
 8002244:	40001c00 	.word	0x40001c00
 8002248:	40002000 	.word	0x40002000

0800224c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0208 	add.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f103 0208 	add.w	r2, r3, #8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 0208 	add.w	r2, r3, #8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d103      	bne.n	8002336 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e00c      	b.n	8002350 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3308      	adds	r3, #8
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e002      	b.n	8002344 <vListInsert+0x2e>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d2f6      	bcs.n	800233e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6892      	ldr	r2, [r2, #8]
 800239e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6852      	ldr	r2, [r2, #4]
 80023a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d103      	bne.n	80023bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1e5a      	subs	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	; 0x30
 80023e0:	af04      	add	r7, sp, #16
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 ff53 	bl	800329c <pvPortMalloc>
 80023f6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00e      	beq.n	800241c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023fe:	2058      	movs	r0, #88	; 0x58
 8002400:	f000 ff4c 	bl	800329c <pvPortMalloc>
 8002404:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
 8002412:	e005      	b.n	8002420 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002414:	6978      	ldr	r0, [r7, #20]
 8002416:	f000 ff95 	bl	8003344 <vPortFree>
 800241a:	e001      	b.n	8002420 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d013      	beq.n	800244e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	2300      	movs	r3, #0
 800242a:	9303      	str	r3, [sp, #12]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f80e 	bl	800245e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002442:	69f8      	ldr	r0, [r7, #28]
 8002444:	f000 f8a2 	bl	800258c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002448:	2301      	movs	r3, #1
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	e002      	b.n	8002454 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002454:	69bb      	ldr	r3, [r7, #24]
    }
 8002456:	4618      	mov	r0, r3
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b088      	sub	sp, #32
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	461a      	mov	r2, r3
 8002476:	21a5      	movs	r1, #165	; 0xa5
 8002478:	f003 fabc 	bl	80059f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002486:	3b01      	subs	r3, #1
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f023 0307 	bic.w	r3, r3, #7
 8002494:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	617b      	str	r3, [r7, #20]
    }
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01f      	beq.n	80024fc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	e012      	b.n	80024e8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	7819      	ldrb	r1, [r3, #0]
 80024ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	3334      	adds	r3, #52	; 0x34
 80024d2:	460a      	mov	r2, r1
 80024d4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d9e9      	bls.n	80024c2 <prvInitialiseNewTask+0x64>
 80024ee:	e000      	b.n	80024f2 <prvInitialiseNewTask+0x94>
            {
                break;
 80024f0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024fa:	e003      	b.n	8002504 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	2b04      	cmp	r3, #4
 8002508:	d901      	bls.n	800250e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800250a:	2304      	movs	r3, #4
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002518:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	2200      	movs	r2, #0
 800251e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	3304      	adds	r3, #4
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fec5 	bl	80022b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	3318      	adds	r3, #24
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fec0 	bl	80022b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002538:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	f1c3 0205 	rsb	r2, r3, #5
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	3350      	adds	r3, #80	; 0x50
 800254e:	2204      	movs	r2, #4
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fa4e 	bl	80059f4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	3354      	adds	r3, #84	; 0x54
 800255c:	2201      	movs	r2, #1
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f003 fa47 	bl	80059f4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	69b8      	ldr	r0, [r7, #24]
 800256c:	f000 fc40 	bl	8002df0 <pxPortInitialiseStack>
 8002570:	4602      	mov	r2, r0
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002580:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002582:	bf00      	nop
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af02      	add	r7, sp, #8
 8002592:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002594:	f000 fd58 	bl	8003048 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <prvAddNewTaskToReadyList+0xfc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <prvAddNewTaskToReadyList+0xfc>)
 80025a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025a2:	4b3a      	ldr	r3, [pc, #232]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025aa:	4a38      	ldr	r2, [pc, #224]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <prvAddNewTaskToReadyList+0xfc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d110      	bne.n	80025da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025b8:	f000 fb08 	bl	8002bcc <prvInitialiseTaskLists>
 80025bc:	e00d      	b.n	80025da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <prvAddNewTaskToReadyList+0x104>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d802      	bhi.n	80025da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025d4:	4a2d      	ldr	r2, [pc, #180]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025da:	4b2e      	ldr	r3, [pc, #184]	; (8002694 <prvAddNewTaskToReadyList+0x108>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a2c      	ldr	r2, [pc, #176]	; (8002694 <prvAddNewTaskToReadyList+0x108>)
 80025e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <prvAddNewTaskToReadyList+0x108>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <prvAddNewTaskToReadyList+0x94>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 ff1d 	bl	8005434 <SEGGER_SYSVIEW_OnTaskCreate>
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	461d      	mov	r5, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461c      	mov	r4, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	1ae3      	subs	r3, r4, r3
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	462b      	mov	r3, r5
 800261c:	f000 ff52 	bl	80034c4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 ff8a 	bl	800553c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	2201      	movs	r2, #1
 800262e:	409a      	lsls	r2, r3
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <prvAddNewTaskToReadyList+0x10c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <prvAddNewTaskToReadyList+0x10c>)
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <prvAddNewTaskToReadyList+0x110>)
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7ff fe3c 	bl	80022ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002656:	f000 fd27 	bl	80030a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <prvAddNewTaskToReadyList+0x104>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00e      	beq.n	8002680 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <prvAddNewTaskToReadyList+0x100>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <prvAddNewTaskToReadyList+0x114>)
 8002672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	20000110 	.word	0x20000110
 800268c:	20000038 	.word	0x20000038
 8002690:	2000011c 	.word	0x2000011c
 8002694:	2000012c 	.word	0x2000012c
 8002698:	20000118 	.word	0x20000118
 800269c:	2000003c 	.word	0x2000003c
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01b      	beq.n	80026ee <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <vTaskDelay+0x68>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <vTaskDelay+0x30>
        __asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	60bb      	str	r3, [r7, #8]
    }
 80026d0:	bf00      	nop
 80026d2:	e7fe      	b.n	80026d2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80026d4:	f000 f87a 	bl	80027cc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	2023      	movs	r0, #35	; 0x23
 80026dc:	f002 fab4 	bl	8004c48 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026e0:	2100      	movs	r1, #0
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fb0c 	bl	8002d00 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80026e8:	f000 f87e 	bl	80027e8 <xTaskResumeAll>
 80026ec:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d107      	bne.n	8002704 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <vTaskDelay+0x6c>)
 80026f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000138 	.word	0x20000138
 8002710:	e000ed04 	.word	0xe000ed04

08002714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <vTaskStartScheduler+0x98>)
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2300      	movs	r3, #0
 8002724:	2282      	movs	r2, #130	; 0x82
 8002726:	4922      	ldr	r1, [pc, #136]	; (80027b0 <vTaskStartScheduler+0x9c>)
 8002728:	4822      	ldr	r0, [pc, #136]	; (80027b4 <vTaskStartScheduler+0xa0>)
 800272a:	f7ff fe57 	bl	80023dc <xTaskCreate>
 800272e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d124      	bne.n	8002780 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	60bb      	str	r3, [r7, #8]
    }
 8002748:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800274a:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <vTaskStartScheduler+0xa4>)
 800274c:	f04f 32ff 	mov.w	r2, #4294967295
 8002750:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <vTaskStartScheduler+0xa8>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <vTaskStartScheduler+0xac>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <vTaskStartScheduler+0xb0>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <vTaskStartScheduler+0x98>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d102      	bne.n	8002770 <vTaskStartScheduler+0x5c>
 800276a:	f002 fe47 	bl	80053fc <SEGGER_SYSVIEW_OnIdle>
 800276e:	e004      	b.n	800277a <vTaskStartScheduler+0x66>
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <vTaskStartScheduler+0xb0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fe9f 	bl	80054b8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800277a:	f000 fbc3 	bl	8002f04 <xPortStartScheduler>
 800277e:	e00e      	b.n	800279e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002786:	d10a      	bne.n	800279e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278c:	f383 8811 	msr	BASEPRI, r3
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	607b      	str	r3, [r7, #4]
    }
 800279a:	bf00      	nop
 800279c:	e7fe      	b.n	800279c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <vTaskStartScheduler+0xb4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000134 	.word	0x20000134
 80027b0:	08005aac 	.word	0x08005aac
 80027b4:	08002b99 	.word	0x08002b99
 80027b8:	20000130 	.word	0x20000130
 80027bc:	2000011c 	.word	0x2000011c
 80027c0:	20000114 	.word	0x20000114
 80027c4:	20000038 	.word	0x20000038
 80027c8:	2000000c 	.word	0x2000000c

080027cc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <vTaskSuspendAll+0x18>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <vTaskSuspendAll+0x18>)
 80027d8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	20000138 	.word	0x20000138

080027e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80027f6:	4b43      	ldr	r3, [pc, #268]	; (8002904 <xTaskResumeAll+0x11c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <xTaskResumeAll+0x2c>
        __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	603b      	str	r3, [r7, #0]
    }
 8002810:	bf00      	nop
 8002812:	e7fe      	b.n	8002812 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002814:	f000 fc18 	bl	8003048 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <xTaskResumeAll+0x11c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3b01      	subs	r3, #1
 800281e:	4a39      	ldr	r2, [pc, #228]	; (8002904 <xTaskResumeAll+0x11c>)
 8002820:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <xTaskResumeAll+0x11c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d165      	bne.n	80028f6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <xTaskResumeAll+0x120>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d061      	beq.n	80028f6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002832:	e032      	b.n	800289a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002834:	4b35      	ldr	r3, [pc, #212]	; (800290c <xTaskResumeAll+0x124>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3318      	adds	r3, #24
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fda1 	bl	8002388 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3304      	adds	r3, #4
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fd9c 	bl	8002388 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fe72 	bl	800553c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	2201      	movs	r2, #1
 800285e:	409a      	lsls	r2, r3
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <xTaskResumeAll+0x128>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	4a2a      	ldr	r2, [pc, #168]	; (8002910 <xTaskResumeAll+0x128>)
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4a27      	ldr	r2, [pc, #156]	; (8002914 <xTaskResumeAll+0x12c>)
 8002878:	441a      	add	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3304      	adds	r3, #4
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f7ff fd24 	bl	80022ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <xTaskResumeAll+0x130>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	429a      	cmp	r2, r3
 8002892:	d302      	bcc.n	800289a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002894:	4b21      	ldr	r3, [pc, #132]	; (800291c <xTaskResumeAll+0x134>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <xTaskResumeAll+0x124>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1c8      	bne.n	8002834 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80028a8:	f000 fa0e 	bl	8002cc8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <xTaskResumeAll+0x138>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80028b8:	f000 f848 	bl	800294c <xTaskIncrementTick>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <xTaskResumeAll+0x134>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f1      	bne.n	80028b8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <xTaskResumeAll+0x138>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <xTaskResumeAll+0x134>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80028e2:	2301      	movs	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80028e6:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <xTaskResumeAll+0x13c>)
 80028e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028f6:	f000 fbd7 	bl	80030a8 <vPortExitCritical>

    return xAlreadyYielded;
 80028fa:	68bb      	ldr	r3, [r7, #8]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000138 	.word	0x20000138
 8002908:	20000110 	.word	0x20000110
 800290c:	200000d0 	.word	0x200000d0
 8002910:	20000118 	.word	0x20000118
 8002914:	2000003c 	.word	0x2000003c
 8002918:	20000038 	.word	0x20000038
 800291c:	20000124 	.word	0x20000124
 8002920:	20000120 	.word	0x20000120
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800292e:	f000 fc75 	bl	800321c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <xTaskGetTickCountFromISR+0x20>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800293c:	683b      	ldr	r3, [r7, #0]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000114 	.word	0x20000114

0800294c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002956:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <xTaskIncrementTick+0x14c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 8092 	bne.w	8002a84 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002960:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <xTaskIncrementTick+0x150>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002968:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <xTaskIncrementTick+0x150>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d120      	bne.n	80029b6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002974:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <xTaskIncrementTick+0x154>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <xTaskIncrementTick+0x48>
        __asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	603b      	str	r3, [r7, #0]
    }
 8002990:	bf00      	nop
 8002992:	e7fe      	b.n	8002992 <xTaskIncrementTick+0x46>
 8002994:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <xTaskIncrementTick+0x154>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <xTaskIncrementTick+0x158>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <xTaskIncrementTick+0x154>)
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4a40      	ldr	r2, [pc, #256]	; (8002aa4 <xTaskIncrementTick+0x158>)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <xTaskIncrementTick+0x15c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	4a3e      	ldr	r2, [pc, #248]	; (8002aa8 <xTaskIncrementTick+0x15c>)
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	f000 f989 	bl	8002cc8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029b6:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <xTaskIncrementTick+0x160>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d34c      	bcc.n	8002a5a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <xTaskIncrementTick+0x154>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <xTaskIncrementTick+0x160>)
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	601a      	str	r2, [r3, #0]
                    break;
 80029d2:	e042      	b.n	8002a5a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <xTaskIncrementTick+0x154>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d203      	bcs.n	80029f4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029ec:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <xTaskIncrementTick+0x160>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80029f2:	e032      	b.n	8002a5a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fcc5 	bl	8002388 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3318      	adds	r3, #24
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fcbc 	bl	8002388 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 fd92 	bl	800553c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <xTaskIncrementTick+0x164>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <xTaskIncrementTick+0x164>)
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <xTaskIncrementTick+0x168>)
 8002a38:	441a      	add	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7ff fc44 	bl	80022ce <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <xTaskIncrementTick+0x16c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d3b5      	bcc.n	80029c0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a58:	e7b2      	b.n	80029c0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a5a:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <xTaskIncrementTick+0x16c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	4914      	ldr	r1, [pc, #80]	; (8002ab4 <xTaskIncrementTick+0x168>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d901      	bls.n	8002a76 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002a72:	2301      	movs	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <xTaskIncrementTick+0x170>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e004      	b.n	8002a8e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <xTaskIncrementTick+0x174>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <xTaskIncrementTick+0x174>)
 8002a8c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a8e:	697b      	ldr	r3, [r7, #20]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000138 	.word	0x20000138
 8002a9c:	20000114 	.word	0x20000114
 8002aa0:	200000c8 	.word	0x200000c8
 8002aa4:	200000cc 	.word	0x200000cc
 8002aa8:	20000128 	.word	0x20000128
 8002aac:	20000130 	.word	0x20000130
 8002ab0:	20000118 	.word	0x20000118
 8002ab4:	2000003c 	.word	0x2000003c
 8002ab8:	20000038 	.word	0x20000038
 8002abc:	20000124 	.word	0x20000124
 8002ac0:	20000120 	.word	0x20000120

08002ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <vTaskSwitchContext+0xbc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <vTaskSwitchContext+0xc0>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ad8:	e04d      	b.n	8002b76 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002ada:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <vTaskSwitchContext+0xc0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <vTaskSwitchContext+0xc4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	f1c3 031f 	rsb	r3, r3, #31
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	4925      	ldr	r1, [pc, #148]	; (8002b8c <vTaskSwitchContext+0xc8>)
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	607b      	str	r3, [r7, #4]
    }
 8002b1c:	bf00      	nop
 8002b1e:	e7fe      	b.n	8002b1e <vTaskSwitchContext+0x5a>
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <vTaskSwitchContext+0xc8>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	3308      	adds	r3, #8
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d104      	bne.n	8002b50 <vTaskSwitchContext+0x8c>
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <vTaskSwitchContext+0xcc>)
 8002b58:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <vTaskSwitchContext+0xcc>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <vTaskSwitchContext+0xd0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d102      	bne.n	8002b6c <vTaskSwitchContext+0xa8>
 8002b66:	f002 fc49 	bl	80053fc <SEGGER_SYSVIEW_OnIdle>
}
 8002b6a:	e004      	b.n	8002b76 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <vTaskSwitchContext+0xcc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f002 fca1 	bl	80054b8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000138 	.word	0x20000138
 8002b84:	20000124 	.word	0x20000124
 8002b88:	20000118 	.word	0x20000118
 8002b8c:	2000003c 	.word	0x2000003c
 8002b90:	20000038 	.word	0x20000038
 8002b94:	20000134 	.word	0x20000134

08002b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ba0:	f000 f854 	bl	8002c4c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <prvIdleTask+0x2c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d907      	bls.n	8002bbc <prvIdleTask+0x24>
                {
                    taskYIELD();
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <prvIdleTask+0x30>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8002bbc:	f7fd fece 	bl	800095c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8002bc0:	e7ee      	b.n	8002ba0 <prvIdleTask+0x8>
 8002bc2:	bf00      	nop
 8002bc4:	2000003c 	.word	0x2000003c
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	e00c      	b.n	8002bf2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <prvInitialiseTaskLists+0x60>)
 8002be4:	4413      	add	r3, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fb44 	bl	8002274 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d9ef      	bls.n	8002bd8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002bf8:	480d      	ldr	r0, [pc, #52]	; (8002c30 <prvInitialiseTaskLists+0x64>)
 8002bfa:	f7ff fb3b 	bl	8002274 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <prvInitialiseTaskLists+0x68>)
 8002c00:	f7ff fb38 	bl	8002274 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c04:	480c      	ldr	r0, [pc, #48]	; (8002c38 <prvInitialiseTaskLists+0x6c>)
 8002c06:	f7ff fb35 	bl	8002274 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002c0a:	480c      	ldr	r0, [pc, #48]	; (8002c3c <prvInitialiseTaskLists+0x70>)
 8002c0c:	f7ff fb32 	bl	8002274 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002c10:	480b      	ldr	r0, [pc, #44]	; (8002c40 <prvInitialiseTaskLists+0x74>)
 8002c12:	f7ff fb2f 	bl	8002274 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <prvInitialiseTaskLists+0x78>)
 8002c18:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <prvInitialiseTaskLists+0x64>)
 8002c1a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <prvInitialiseTaskLists+0x7c>)
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <prvInitialiseTaskLists+0x68>)
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	2000003c 	.word	0x2000003c
 8002c30:	200000a0 	.word	0x200000a0
 8002c34:	200000b4 	.word	0x200000b4
 8002c38:	200000d0 	.word	0x200000d0
 8002c3c:	200000e4 	.word	0x200000e4
 8002c40:	200000fc 	.word	0x200000fc
 8002c44:	200000c8 	.word	0x200000c8
 8002c48:	200000cc 	.word	0x200000cc

08002c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c52:	e019      	b.n	8002c88 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c54:	f000 f9f8 	bl	8003048 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c58:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <prvCheckTasksWaitingTermination+0x50>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fb8f 	bl	8002388 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <prvCheckTasksWaitingTermination+0x54>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <prvCheckTasksWaitingTermination+0x54>)
 8002c72:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <prvCheckTasksWaitingTermination+0x58>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <prvCheckTasksWaitingTermination+0x58>)
 8002c7c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c7e:	f000 fa13 	bl	80030a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f810 	bl	8002ca8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <prvCheckTasksWaitingTermination+0x58>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e1      	bne.n	8002c54 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200000e4 	.word	0x200000e4
 8002ca0:	20000110 	.word	0x20000110
 8002ca4:	200000f8 	.word	0x200000f8

08002ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fb45 	bl	8003344 <vPortFree>
                vPortFree( pxTCB );
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fb42 	bl	8003344 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <prvResetNextTaskUnblockTime+0x30>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <prvResetNextTaskUnblockTime+0x34>)
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002cde:	e005      	b.n	8002cec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <prvResetNextTaskUnblockTime+0x30>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <prvResetNextTaskUnblockTime+0x34>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	200000c8 	.word	0x200000c8
 8002cfc:	20000130 	.word	0x20000130

08002d00 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002d0a:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d10:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3304      	adds	r3, #4
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fb36 	bl	8002388 <uxListRemove>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2201      	movs	r2, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4013      	ands	r3, r2
 8002d36:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <prvAddCurrentTaskToDelayedList+0xdc>)
 8002d38:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d110      	bne.n	8002d64 <prvAddCurrentTaskToDelayedList+0x64>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002d48:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	211b      	movs	r1, #27
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fc36 	bl	80055c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4820      	ldr	r0, [pc, #128]	; (8002de0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002d5e:	f7ff fab6 	bl	80022ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002d62:	e032      	b.n	8002dca <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d20f      	bcs.n	8002d9c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2104      	movs	r1, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fc1c 	bl	80055c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3304      	adds	r3, #4
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7ff fabe 	bl	8002316 <vListInsert>
}
 8002d9a:	e016      	b.n	8002dca <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2104      	movs	r1, #4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fc0c 	bl	80055c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f7ff faae 	bl	8002316 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <prvAddCurrentTaskToDelayedList+0xec>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d202      	bcs.n	8002dca <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002dc4:	4a09      	ldr	r2, [pc, #36]	; (8002dec <prvAddCurrentTaskToDelayedList+0xec>)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	6013      	str	r3, [r2, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000114 	.word	0x20000114
 8002dd8:	20000038 	.word	0x20000038
 8002ddc:	20000118 	.word	0x20000118
 8002de0:	200000fc 	.word	0x200000fc
 8002de4:	200000cc 	.word	0x200000cc
 8002de8:	200000c8 	.word	0x200000c8
 8002dec:	20000130 	.word	0x20000130

08002df0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3b04      	subs	r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b04      	subs	r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e20:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <pxPortInitialiseStack+0x64>)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b14      	subs	r3, #20
 8002e2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3b04      	subs	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f06f 0202 	mvn.w	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3b20      	subs	r3, #32
 8002e44:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	08002e59 	.word	0x08002e59

08002e58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <prvTaskExitError+0x54>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	d00a      	beq.n	8002e82 <prvTaskExitError+0x2a>
        __asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	60fb      	str	r3, [r7, #12]
    }
 8002e7e:	bf00      	nop
 8002e80:	e7fe      	b.n	8002e80 <prvTaskExitError+0x28>
        __asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60bb      	str	r3, [r7, #8]
    }
 8002e94:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e96:	bf00      	nop
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0fc      	beq.n	8002e98 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	20000010 	.word	0x20000010

08002eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <pxCurrentTCBConst2>)
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	6808      	ldr	r0, [r1, #0]
 8002eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eba:	f380 8809 	msr	PSP, r0
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	f380 8811 	msr	BASEPRI, r0
 8002eca:	4770      	bx	lr
 8002ecc:	f3af 8000 	nop.w

08002ed0 <pxCurrentTCBConst2>:
 8002ed0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop

08002ed8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ed8:	4808      	ldr	r0, [pc, #32]	; (8002efc <prvPortStartFirstTask+0x24>)
 8002eda:	6800      	ldr	r0, [r0, #0]
 8002edc:	6800      	ldr	r0, [r0, #0]
 8002ede:	f380 8808 	msr	MSP, r0
 8002ee2:	f04f 0000 	mov.w	r0, #0
 8002ee6:	f380 8814 	msr	CONTROL, r0
 8002eea:	b662      	cpsie	i
 8002eec:	b661      	cpsie	f
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	df00      	svc	0
 8002ef8:	bf00      	nop
 8002efa:	0000      	.short	0x0000
 8002efc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop

08002f04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f0a:	4b46      	ldr	r3, [pc, #280]	; (8003024 <xPortStartScheduler+0x120>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a46      	ldr	r2, [pc, #280]	; (8003028 <xPortStartScheduler+0x124>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10a      	bne.n	8002f2a <xPortStartScheduler+0x26>
        __asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	613b      	str	r3, [r7, #16]
    }
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <xPortStartScheduler+0x120>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a3f      	ldr	r2, [pc, #252]	; (800302c <xPortStartScheduler+0x128>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d10a      	bne.n	8002f4a <xPortStartScheduler+0x46>
        __asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	60fb      	str	r3, [r7, #12]
    }
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f4a:	4b39      	ldr	r3, [pc, #228]	; (8003030 <xPortStartScheduler+0x12c>)
 8002f4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	22ff      	movs	r2, #255	; 0xff
 8002f5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <xPortStartScheduler+0x130>)
 8002f70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <xPortStartScheduler+0x134>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f78:	e009      	b.n	8002f8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <xPortStartScheduler+0x134>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <xPortStartScheduler+0x134>)
 8002f82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b80      	cmp	r3, #128	; 0x80
 8002f98:	d0ef      	beq.n	8002f7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <xPortStartScheduler+0x134>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d00a      	beq.n	8002fbc <xPortStartScheduler+0xb8>
        __asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	60bb      	str	r3, [r7, #8]
    }
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <xPortStartScheduler+0x134>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <xPortStartScheduler+0x134>)
 8002fc4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <xPortStartScheduler+0x134>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <xPortStartScheduler+0x134>)
 8002fd0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <xPortStartScheduler+0x138>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <xPortStartScheduler+0x138>)
 8002fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <xPortStartScheduler+0x138>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a14      	ldr	r2, [pc, #80]	; (800303c <xPortStartScheduler+0x138>)
 8002fec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ff0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ff2:	f000 f8e3 	bl	80031bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <xPortStartScheduler+0x13c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002ffc:	f000 f902 	bl	8003204 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <xPortStartScheduler+0x140>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <xPortStartScheduler+0x140>)
 8003006:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800300a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800300c:	f7ff ff64 	bl	8002ed8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003010:	f7ff fd58 	bl	8002ac4 <vTaskSwitchContext>
    prvTaskExitError();
 8003014:	f7ff ff20 	bl	8002e58 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	e000ed00 	.word	0xe000ed00
 8003028:	410fc271 	.word	0x410fc271
 800302c:	410fc270 	.word	0x410fc270
 8003030:	e000e400 	.word	0xe000e400
 8003034:	2000013c 	.word	0x2000013c
 8003038:	20000140 	.word	0x20000140
 800303c:	e000ed20 	.word	0xe000ed20
 8003040:	20000010 	.word	0x20000010
 8003044:	e000ef34 	.word	0xe000ef34

08003048 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
        __asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	607b      	str	r3, [r7, #4]
    }
 8003060:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <vPortEnterCritical+0x58>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3301      	adds	r3, #1
 8003068:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <vPortEnterCritical+0x58>)
 800306a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <vPortEnterCritical+0x58>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10f      	bne.n	8003094 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <vPortEnterCritical+0x5c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <vPortEnterCritical+0x4c>
        __asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	603b      	str	r3, [r7, #0]
    }
 8003090:	bf00      	nop
 8003092:	e7fe      	b.n	8003092 <vPortEnterCritical+0x4a>
    }
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	20000010 	.word	0x20000010
 80030a4:	e000ed04 	.word	0xe000ed04

080030a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <vPortExitCritical+0x50>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <vPortExitCritical+0x24>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	607b      	str	r3, [r7, #4]
    }
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <vPortExitCritical+0x50>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <vPortExitCritical+0x50>)
 80030d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <vPortExitCritical+0x50>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <vPortExitCritical+0x42>
 80030de:	2300      	movs	r3, #0
 80030e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80030e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000010 	.word	0x20000010
 80030fc:	00000000 	.word	0x00000000

08003100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003100:	f3ef 8009 	mrs	r0, PSP
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	4b15      	ldr	r3, [pc, #84]	; (8003160 <pxCurrentTCBConst>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f01e 0f10 	tst.w	lr, #16
 8003110:	bf08      	it	eq
 8003112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311a:	6010      	str	r0, [r2, #0]
 800311c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003124:	f380 8811 	msr	BASEPRI, r0
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f7ff fcc8 	bl	8002ac4 <vTaskSwitchContext>
 8003134:	f04f 0000 	mov.w	r0, #0
 8003138:	f380 8811 	msr	BASEPRI, r0
 800313c:	bc09      	pop	{r0, r3}
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	6808      	ldr	r0, [r1, #0]
 8003142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003146:	f01e 0f10 	tst.w	lr, #16
 800314a:	bf08      	it	eq
 800314c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003150:	f380 8809 	msr	PSP, r0
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	f3af 8000 	nop.w

08003160 <pxCurrentTCBConst>:
 8003160:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop

08003168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
        __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	607b      	str	r3, [r7, #4]
    }
 8003180:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003182:	f002 f8c1 	bl	8005308 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003186:	f7ff fbe1 	bl	800294c <xTaskIncrementTick>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003190:	f002 f918 	bl	80053c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <SysTick_Handler+0x50>)
 8003196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e001      	b.n	80031a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800319e:	f002 f8f5 	bl	800538c <SEGGER_SYSVIEW_RecordExitISR>
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f383 8811 	msr	BASEPRI, r3
    }
 80031ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <vPortSetupTimerInterrupt+0x38>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <vPortSetupTimerInterrupt+0x3c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <vPortSetupTimerInterrupt+0x40>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	4a09      	ldr	r2, [pc, #36]	; (8003200 <vPortSetupTimerInterrupt+0x44>)
 80031da:	3b01      	subs	r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <vPortSetupTimerInterrupt+0x34>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010
 80031f4:	e000e018 	.word	0xe000e018
 80031f8:	20000000 	.word	0x20000000
 80031fc:	10624dd3 	.word	0x10624dd3
 8003200:	e000e014 	.word	0xe000e014

08003204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003214 <vPortEnableVFP+0x10>
 8003208:	6801      	ldr	r1, [r0, #0]
 800320a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800320e:	6001      	str	r1, [r0, #0]
 8003210:	4770      	bx	lr
 8003212:	0000      	.short	0x0000
 8003214:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop

0800321c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003222:	f3ef 8305 	mrs	r3, IPSR
 8003226:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d914      	bls.n	8003258 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <vPortValidateInterruptPriority+0x70>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <vPortValidateInterruptPriority+0x74>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	7afa      	ldrb	r2, [r7, #11]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20a      	bcs.n	8003258 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	607b      	str	r3, [r7, #4]
    }
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <vPortValidateInterruptPriority+0x78>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <vPortValidateInterruptPriority+0x7c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d90a      	bls.n	800327e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	603b      	str	r3, [r7, #0]
    }
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <vPortValidateInterruptPriority+0x60>
    }
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e3f0 	.word	0xe000e3f0
 8003290:	2000013c 	.word	0x2000013c
 8003294:	e000ed0c 	.word	0xe000ed0c
 8003298:	20000140 	.word	0x20000140

0800329c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <pvPortMalloc+0x34>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f023 0307 	bic.w	r3, r3, #7
 80032b8:	3308      	adds	r3, #8
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d205      	bcs.n	80032cc <pvPortMalloc+0x30>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f023 0307 	bic.w	r3, r3, #7
 80032c6:	3308      	adds	r3, #8
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	e001      	b.n	80032d0 <pvPortMalloc+0x34>
                } 
                else 
                {
                    xWantedSize = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 80032d0:	f7ff fa7c 	bl	80027cc <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <pvPortMalloc+0x98>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <pvPortMalloc+0x9c>)
 80032de:	f023 0307 	bic.w	r3, r3, #7
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <pvPortMalloc+0x98>)
 80032e6:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01a      	beq.n	8003324 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <pvPortMalloc+0xa0>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && /* valid size */
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <pvPortMalloc+0xa4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d813      	bhi.n	8003324 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <pvPortMalloc+0xa0>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	441a      	add	r2, r3
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <pvPortMalloc+0xa0>)
 8003306:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003308:	429a      	cmp	r2, r3
 800330a:	d90b      	bls.n	8003324 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <pvPortMalloc+0x98>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <pvPortMalloc+0xa0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <pvPortMalloc+0xa0>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <pvPortMalloc+0xa0>)
 8003322:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003324:	f7ff fa60 	bl	80027e8 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8003328:	68fb      	ldr	r3, [r7, #12]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20012d48 	.word	0x20012d48
 8003338:	2000014c 	.word	0x2000014c
 800333c:	20012d44 	.word	0x20012d44
 8003340:	00012bf7 	.word	0x00012bf7

08003344 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <vPortFree+0x24>
        __asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	60fb      	str	r3, [r7, #12]
    }
 8003364:	bf00      	nop
 8003366:	e7fe      	b.n	8003366 <vPortFree+0x22>
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003378:	4803      	ldr	r0, [pc, #12]	; (8003388 <_cbSendSystemDesc+0x14>)
 800337a:	f001 ff6f 	bl	800525c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <_cbSendSystemDesc+0x18>)
 8003380:	f001 ff6c 	bl	800525c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}
 8003388:	08005ab4 	.word	0x08005ab4
 800338c:	08005af4 	.word	0x08005af4

08003390 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <SEGGER_SYSVIEW_Conf+0x20>)
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SEGGER_SYSVIEW_Conf+0x24>)
 800339e:	4a06      	ldr	r2, [pc, #24]	; (80033b8 <SEGGER_SYSVIEW_Conf+0x28>)
 80033a0:	f001 fbe0 	bl	8004b64 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80033a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80033a8:	f001 fc20 	bl	8004bec <SEGGER_SYSVIEW_SetRAMBase>
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000000 	.word	0x20000000
 80033b4:	08003375 	.word	0x08003375
 80033b8:	08005b94 	.word	0x08005b94

080033bc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	b085      	sub	sp, #20
 80033c0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	e033      	b.n	8003430 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80033c8:	491e      	ldr	r1, [pc, #120]	; (8003444 <_cbSendTaskList+0x88>)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	491a      	ldr	r1, [pc, #104]	; (8003444 <_cbSendTaskList+0x88>)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3304      	adds	r3, #4
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	4c16      	ldr	r4, [pc, #88]	; (8003444 <_cbSendTaskList+0x88>)
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4423      	add	r3, r4
 80033f8:	3308      	adds	r3, #8
 80033fa:	681c      	ldr	r4, [r3, #0]
 80033fc:	4d11      	ldr	r5, [pc, #68]	; (8003444 <_cbSendTaskList+0x88>)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	442b      	add	r3, r5
 800340a:	330c      	adds	r3, #12
 800340c:	681d      	ldr	r5, [r3, #0]
 800340e:	4e0d      	ldr	r6, [pc, #52]	; (8003444 <_cbSendTaskList+0x88>)
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4433      	add	r3, r6
 800341c:	3310      	adds	r3, #16
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	462b      	mov	r3, r5
 8003424:	4622      	mov	r2, r4
 8003426:	f000 f8b5 	bl	8003594 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3301      	adds	r3, #1
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <_cbSendTaskList+0x8c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	429a      	cmp	r2, r3
 8003438:	d3c6      	bcc.n	80033c8 <_cbSendTaskList+0xc>
  }
}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	20012d4c 	.word	0x20012d4c
 8003448:	20012dec 	.word	0x20012dec

0800344c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003452:	f7ff fa69 	bl	8002928 <xTaskGetTickCountFromISR>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	f04f 0500 	mov.w	r5, #0
 8003472:	015d      	lsls	r5, r3, #5
 8003474:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003478:	0154      	lsls	r4, r2, #5
 800347a:	4622      	mov	r2, r4
 800347c:	462b      	mov	r3, r5
 800347e:	1a12      	subs	r2, r2, r0
 8003480:	eb63 0301 	sbc.w	r3, r3, r1
 8003484:	f04f 0400 	mov.w	r4, #0
 8003488:	f04f 0500 	mov.w	r5, #0
 800348c:	009d      	lsls	r5, r3, #2
 800348e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003492:	0094      	lsls	r4, r2, #2
 8003494:	4622      	mov	r2, r4
 8003496:	462b      	mov	r3, r5
 8003498:	1812      	adds	r2, r2, r0
 800349a:	eb41 0303 	adc.w	r3, r1, r3
 800349e:	f04f 0000 	mov.w	r0, #0
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	00d9      	lsls	r1, r3, #3
 80034a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ac:	00d0      	lsls	r0, r2, #3
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80034b6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bdb0      	pop	{r4, r5, r7, pc}

080034c4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80034d2:	2205      	movs	r2, #5
 80034d4:	492b      	ldr	r1, [pc, #172]	; (8003584 <SYSVIEW_AddTask+0xc0>)
 80034d6:	68b8      	ldr	r0, [r7, #8]
 80034d8:	f002 fa70 	bl	80059bc <memcmp>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d04b      	beq.n	800357a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b07      	cmp	r3, #7
 80034e8:	d903      	bls.n	80034f2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80034ea:	4828      	ldr	r0, [pc, #160]	; (800358c <SYSVIEW_AddTask+0xc8>)
 80034ec:	f002 f9b8 	bl	8005860 <SEGGER_SYSVIEW_Warn>
    return;
 80034f0:	e044      	b.n	800357c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80034f2:	4b25      	ldr	r3, [pc, #148]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4926      	ldr	r1, [pc, #152]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4921      	ldr	r1, [pc, #132]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3304      	adds	r3, #4
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	491b      	ldr	r1, [pc, #108]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3308      	adds	r3, #8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4916      	ldr	r1, [pc, #88]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	330c      	adds	r3, #12
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4910      	ldr	r1, [pc, #64]	; (8003590 <SYSVIEW_AddTask+0xcc>)
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	3310      	adds	r3, #16
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	4a08      	ldr	r2, [pc, #32]	; (8003588 <SYSVIEW_AddTask+0xc4>)
 8003566:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f80e 	bl	8003594 <SYSVIEW_SendTaskInfo>
 8003578:	e000      	b.n	800357c <SYSVIEW_AddTask+0xb8>
    return;
 800357a:	bf00      	nop

}
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	08005b04 	.word	0x08005b04
 8003588:	20012dec 	.word	0x20012dec
 800358c:	08005b0c 	.word	0x08005b0c
 8003590:	20012d4c 	.word	0x20012d4c

08003594 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	2214      	movs	r2, #20
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fa22 	bl	80059f4 <memset>
  TaskInfo.TaskID     = TaskID;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fd4f 	bl	800506c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80035ce:	bf00      	nop
 80035d0:	3728      	adds	r7, #40	; 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <__NVIC_EnableIRQ>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4907      	ldr	r1, [pc, #28]	; (8003610 <__NVIC_EnableIRQ+0x38>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e100 	.word	0xe000e100

08003614 <__NVIC_SetPriority>:
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	; (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	; (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800366e:	f002 f953 	bl	8005918 <SEGGER_SYSVIEW_IsStarted>
 8003672:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800367a:	f001 fb7b 	bl	8004d74 <SEGGER_SYSVIEW_Start>
  }
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <_cbOnUARTRx+0x3c>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d806      	bhi.n	80036a8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <_cbOnUARTRx+0x3c>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <_cbOnUARTRx+0x3c>)
 80036a4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80036a6:	e009      	b.n	80036bc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80036a8:	f7ff ffde 	bl	8003668 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <_cbOnUARTRx+0x3c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	2201      	movs	r2, #1
 80036b6:	4619      	mov	r1, r3
 80036b8:	f000 fb9a 	bl	8003df0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80036bc:	bf00      	nop
}
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000014 	.word	0x20000014

080036c8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80036d0:	4b14      	ldr	r3, [pc, #80]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d80f      	bhi.n	80036f8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036da:	785b      	ldrb	r3, [r3, #1]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <_cbOnUARTTx+0x60>)
 80036e0:	5c9a      	ldrb	r2, [r3, r2]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036f0:	705a      	strb	r2, [r3, #1]
    r = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
    goto Done;
 80036f6:	e00f      	b.n	8003718 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <_cbOnUARTTx+0x5c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fa19 	bl	8003b38 <SEGGER_RTT_ReadUpBufferNoLock>
 8003706:	4603      	mov	r3, r0
 8003708:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	da02      	bge.n	8003716 <_cbOnUARTTx+0x4e>
    r = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e000      	b.n	8003718 <_cbOnUARTTx+0x50>
  }
Done:
 8003716:	bf00      	nop
  return r;
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000014 	.word	0x20000014
 8003728:	08005b9c 	.word	0x08005b9c

0800372c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <SEGGER_UART_init+0x1c>)
 8003736:	4905      	ldr	r1, [pc, #20]	; (800374c <SEGGER_UART_init+0x20>)
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f863 	bl	8003804 <HIF_UART_Init>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08003689 	.word	0x08003689
 800374c:	080036c9 	.word	0x080036c9

08003750 <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <USART2_IRQHandler+0x80>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d011      	beq.n	800378a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <USART2_IRQHandler+0x84>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 030b 	and.w	r3, r3, #11
 8003774:	2b00      	cmp	r3, #0
 8003776:	d108      	bne.n	800378a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <USART2_IRQHandler+0x88>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <USART2_IRQHandler+0x88>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	79fa      	ldrb	r2, [r7, #7]
 8003786:	4610      	mov	r0, r2
 8003788:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01a      	beq.n	80037ca <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <USART2_IRQHandler+0x8c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <USART2_IRQHandler+0x8c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1dfa      	adds	r2, r7, #7
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
 80037a6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <USART2_IRQHandler+0x90>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <USART2_IRQHandler+0x90>)
 80037b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e006      	b.n	80037ca <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <USART2_IRQHandler+0x80>)
 80037be:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80037c0:	79fa      	ldrb	r2, [r7, #7]
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <USART2_IRQHandler+0x84>)
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e000      	b.n	80037ca <USART2_IRQHandler+0x7a>
      return;
 80037c8:	bf00      	nop
    }
  }
}
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40004400 	.word	0x40004400
 80037d4:	40004404 	.word	0x40004404
 80037d8:	20012df0 	.word	0x20012df0
 80037dc:	20012df4 	.word	0x20012df4
 80037e0:	4000440c 	.word	0x4000440c

080037e4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80037ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	4000440c 	.word	0x4000440c

08003804 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003810:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HIF_UART_Init+0xc8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2d      	ldr	r2, [pc, #180]	; (80038cc <HIF_UART_Init+0xc8>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800381c:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <HIF_UART_Init+0xcc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <HIF_UART_Init+0xcc>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HIF_UART_Init+0xd0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003834:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800383c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800383e:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <HIF_UART_Init+0xd0>)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003844:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HIF_UART_Init+0xd4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003850:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003858:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800385a:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <HIF_UART_Init+0xd4>)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HIF_UART_Init+0xd8>)
 8003862:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003866:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HIF_UART_Init+0xdc>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HIF_UART_Init+0xe0>)
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800387a:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HIF_UART_Init+0xe4>)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	3301      	adds	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	d302      	bcc.n	800389a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003894:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003898:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HIF_UART_Init+0xe8>)
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80038aa:	4a11      	ldr	r2, [pc, #68]	; (80038f0 <HIF_UART_Init+0xec>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80038b0:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HIF_UART_Init+0xf0>)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80038b6:	2106      	movs	r1, #6
 80038b8:	2026      	movs	r0, #38	; 0x26
 80038ba:	f7ff feab 	bl	8003614 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80038be:	2026      	movs	r0, #38	; 0x26
 80038c0:	f7ff fe8a 	bl	80035d8 <__NVIC_EnableIRQ>
}
 80038c4:	bf00      	nop
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023840 	.word	0x40023840
 80038d0:	40023830 	.word	0x40023830
 80038d4:	40020020 	.word	0x40020020
 80038d8:	40020000 	.word	0x40020000
 80038dc:	4000440c 	.word	0x4000440c
 80038e0:	40004410 	.word	0x40004410
 80038e4:	40004414 	.word	0x40004414
 80038e8:	055d4a80 	.word	0x055d4a80
 80038ec:	40004408 	.word	0x40004408
 80038f0:	20012df0 	.word	0x20012df0
 80038f4:	20012df4 	.word	0x20012df4

080038f8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80038fe:	4b24      	ldr	r3, [pc, #144]	; (8003990 <_DoInit+0x98>)
 8003900:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2203      	movs	r2, #3
 8003906:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2203      	movs	r2, #3
 800390c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a20      	ldr	r2, [pc, #128]	; (8003994 <_DoInit+0x9c>)
 8003912:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a20      	ldr	r2, [pc, #128]	; (8003998 <_DoInit+0xa0>)
 8003918:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003920:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a17      	ldr	r2, [pc, #92]	; (8003994 <_DoInit+0x9c>)
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a17      	ldr	r2, [pc, #92]	; (800399c <_DoInit+0xa4>)
 800393e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2210      	movs	r2, #16
 8003944:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3307      	adds	r3, #7
 800395c:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <_DoInit+0xa8>)
 800395e:	6810      	ldr	r0, [r2, #0]
 8003960:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003962:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <_DoInit+0xac>)
 800396a:	6810      	ldr	r0, [r2, #0]
 800396c:	6018      	str	r0, [r3, #0]
 800396e:	8891      	ldrh	r1, [r2, #4]
 8003970:	7992      	ldrb	r2, [r2, #6]
 8003972:	8099      	strh	r1, [r3, #4]
 8003974:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003976:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003980:	f3bf 8f5f 	dmb	sy
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	20014370 	.word	0x20014370
 8003994:	08005b5c 	.word	0x08005b5c
 8003998:	20012df8 	.word	0x20012df8
 800399c:	200131f8 	.word	0x200131f8
 80039a0:	08005b68 	.word	0x08005b68
 80039a4:	08005b6c 	.word	0x08005b6c

080039a8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d905      	bls.n	80039d8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	e007      	b.n	80039e8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	69b9      	ldr	r1, [r7, #24]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	1acb      	subs	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3b01      	subs	r3, #1
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	4293      	cmp	r3, r2
 80039f4:	bf28      	it	cs
 80039f6:	4613      	movcs	r3, r2
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	bf28      	it	cs
 8003a02:	4613      	movcs	r3, r2
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	6978      	ldr	r0, [r7, #20]
 8003a16:	f001 ffdf 	bl	80059d8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	4413      	add	r3, r2
 8003a20:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	4413      	add	r3, r2
 8003a28:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	4413      	add	r3, r2
 8003a38:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d101      	bne.n	8003a48 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1b2      	bne.n	80039be <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003a58:	6a3b      	ldr	r3, [r7, #32]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3728      	adds	r7, #40	; 0x28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b088      	sub	sp, #32
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d911      	bls.n	8003aaa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	6938      	ldr	r0, [r7, #16]
 8003a96:	f001 ff9f 	bl	80059d8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a9a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	441a      	add	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003aa8:	e01f      	b.n	8003aea <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	6938      	ldr	r0, [r7, #16]
 8003abe:	f001 ff8b 	bl	80059d8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	6938      	ldr	r0, [r7, #16]
 8003adc:	f001 ff7c 	bl	80059d8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ae0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	60da      	str	r2, [r3, #12]
}
 8003aea:	bf00      	nop
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d808      	bhi.n	8003b20 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad2      	subs	r2, r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e004      	b.n	8003b2a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003b2a:	697b      	ldr	r3, [r7, #20]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003b44:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003b52:	f7ff fed1 	bl	80038f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003b64:	4413      	add	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d92b      	bls.n	8003bdc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4293      	cmp	r3, r2
 8003b94:	bf28      	it	cs
 8003b96:	4613      	movcs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	4413      	add	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	6939      	ldr	r1, [r7, #16]
 8003ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003baa:	f001 ff15 	bl	80059d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4413      	add	r3, r2
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d101      	bne.n	8003bdc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4293      	cmp	r3, r2
 8003bea:	bf28      	it	cs
 8003bec:	4613      	movcs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d019      	beq.n	8003c2a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	4413      	add	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c06:	f001 fee7 	bl	80059d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	4413      	add	r3, r2
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4413      	add	r3, r2
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3730      	adds	r7, #48	; 0x30
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20014370 	.word	0x20014370

08003c44 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	; 0x30
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003c50:	4b3e      	ldr	r3, [pc, #248]	; (8003d4c <SEGGER_RTT_ReadNoLock+0x108>)
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <SEGGER_RTT_ReadNoLock+0x1e>
 8003c5e:	f7ff fe4b 	bl	80038f8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	3360      	adds	r3, #96	; 0x60
 8003c6e:	4a37      	ldr	r2, [pc, #220]	; (8003d4c <SEGGER_RTT_ReadNoLock+0x108>)
 8003c70:	4413      	add	r3, r2
 8003c72:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d92b      	bls.n	8003ce8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	bf28      	it	cs
 8003ca2:	4613      	movcs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	4413      	add	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	6939      	ldr	r1, [r7, #16]
 8003cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cb6:	f001 fe8f 	bl	80059d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d101      	bne.n	8003ce8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bf28      	it	cs
 8003cf8:	4613      	movcs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d019      	beq.n	8003d36 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	4413      	add	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	6939      	ldr	r1, [r7, #16]
 8003d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d12:	f001 fe61 	bl	80059d8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4413      	add	r3, r2
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4413      	add	r3, r2
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d40:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3730      	adds	r7, #48	; 0x30
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20014370 	.word	0x20014370

08003d50 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4613      	mov	r3, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	3360      	adds	r3, #96	; 0x60
 8003d6c:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003d6e:	4413      	add	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d029      	beq.n	8003dce <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d82e      	bhi.n	8003ddc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d013      	beq.n	8003dae <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003d86:	e029      	b.n	8003ddc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d88:	6978      	ldr	r0, [r7, #20]
 8003d8a:	f7ff feb2 	bl	8003af2 <_GetAvailWriteSpace>
 8003d8e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d202      	bcs.n	8003d9e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003d9c:	e021      	b.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	6978      	ldr	r0, [r7, #20]
 8003da8:	f7ff fe5b 	bl	8003a62 <_WriteNoCheck>
    break;
 8003dac:	e019      	b.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff fe9f 	bl	8003af2 <_GetAvailWriteSpace>
 8003db4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bf28      	it	cs
 8003dbe:	4613      	movcs	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7ff fe4b 	bl	8003a62 <_WriteNoCheck>
    break;
 8003dcc:	e009      	b.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	69b9      	ldr	r1, [r7, #24]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff fde8 	bl	80039a8 <_WriteBlocking>
 8003dd8:	61f8      	str	r0, [r7, #28]
    break;
 8003dda:	e002      	b.n	8003de2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
    break;
 8003de0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003de2:	69fb      	ldr	r3, [r7, #28]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20014370 	.word	0x20014370

08003df0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003e0a:	f7ff fd75 	bl	80038f8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e12:	f04f 0120 	mov.w	r1, #32
 8003e16:	f381 8811 	msr	BASEPRI, r1
 8003e1a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff ff95 	bl	8003d50 <SEGGER_RTT_WriteDownBufferNoLock>
 8003e26:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003e2e:	697b      	ldr	r3, [r7, #20]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20014370 	.word	0x20014370

08003e3c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e4a:	4b3d      	ldr	r3, [pc, #244]	; (8003f40 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e58:	f7ff fd4e 	bl	80038f8 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003e60:	f04f 0120 	mov.w	r1, #32
 8003e64:	f381 8811 	msr	BASEPRI, r1
 8003e68:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e6a:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e6c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e72:	6939      	ldr	r1, [r7, #16]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	440b      	add	r3, r1
 8003e82:	3304      	adds	r3, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	dbeb      	blt.n	8003e72 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e9a:	e000      	b.n	8003e9e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e9c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	da3f      	bge.n	8003f28 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003ebc:	6939      	ldr	r1, [r7, #16]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	3304      	adds	r3, #4
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003ed2:	6939      	ldr	r1, [r7, #16]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	440b      	add	r3, r1
 8003ee0:	3320      	adds	r3, #32
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003ee6:	6939      	ldr	r1, [r7, #16]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3328      	adds	r3, #40	; 0x28
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003efa:	6939      	ldr	r1, [r7, #16]
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	3324      	adds	r3, #36	; 0x24
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f0e:	6939      	ldr	r1, [r7, #16]
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	332c      	adds	r3, #44	; 0x2c
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f22:	f3bf 8f5f 	dmb	sy
 8003f26:	e002      	b.n	8003f2e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f34:	69fb      	ldr	r3, [r7, #28]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3720      	adds	r7, #32
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20014370 	.word	0x20014370

08003f44 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f54:	623b      	str	r3, [r7, #32]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f60:	f7ff fcca 	bl	80038f8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f64:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f66:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d82c      	bhi.n	8003fc8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f72:	f04f 0120 	mov.w	r1, #32
 8003f76:	f381 8811 	msr	BASEPRI, r1
 8003f7a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	3360      	adds	r3, #96	; 0x60
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fb8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc6:	e002      	b.n	8003fce <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3728      	adds	r7, #40	; 0x28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20014370 	.word	0x20014370

08003fdc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00f      	beq.n	8004012 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003ff2:	e002      	b.n	8003ffa <_EncodeStr+0x1e>
      Len++;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f6      	bne.n	8003ff4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d901      	bls.n	8004012 <_EncodeStr+0x36>
      Len = Limit;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2bfe      	cmp	r3, #254	; 0xfe
 8004016:	d806      	bhi.n	8004026 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	60fa      	str	r2, [r7, #12]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e011      	b.n	800404a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	60fa      	str	r2, [r7, #12]
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	60fa      	str	r2, [r7, #12]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	0a19      	lsrs	r1, r3, #8
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	60fa      	str	r2, [r7, #12]
 8004046:	b2ca      	uxtb	r2, r1
 8004048:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800404e:	e00a      	b.n	8004066 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	1c53      	adds	r3, r2, #1
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	60f9      	str	r1, [r7, #12]
 800405c:	7812      	ldrb	r2, [r2, #0]
 800405e:	701a      	strb	r2, [r3, #0]
    n++;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3301      	adds	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	429a      	cmp	r2, r3
 800406c:	d3f0      	bcc.n	8004050 <_EncodeStr+0x74>
  }
  return pPayload;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <_HandleIncomingPacket+0xe0>)
 800409c:	7e1b      	ldrb	r3, [r3, #24]
 800409e:	4618      	mov	r0, r3
 80040a0:	1cfb      	adds	r3, r7, #3
 80040a2:	2201      	movs	r2, #1
 80040a4:	4619      	mov	r1, r3
 80040a6:	f7ff fdcd 	bl	8003c44 <SEGGER_RTT_ReadNoLock>
 80040aa:	4603      	mov	r3, r0
 80040ac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	dd54      	ble.n	800415e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	2b80      	cmp	r3, #128	; 0x80
 80040b8:	d032      	beq.n	8004120 <_HandleIncomingPacket+0x8c>
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	dc42      	bgt.n	8004144 <_HandleIncomingPacket+0xb0>
 80040be:	2b07      	cmp	r3, #7
 80040c0:	dc16      	bgt.n	80040f0 <_HandleIncomingPacket+0x5c>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dd3e      	ble.n	8004144 <_HandleIncomingPacket+0xb0>
 80040c6:	3b01      	subs	r3, #1
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d83b      	bhi.n	8004144 <_HandleIncomingPacket+0xb0>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <_HandleIncomingPacket+0x40>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040f7 	.word	0x080040f7
 80040d8:	080040fd 	.word	0x080040fd
 80040dc:	08004103 	.word	0x08004103
 80040e0:	08004109 	.word	0x08004109
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	08004115 	.word	0x08004115
 80040ec:	0800411b 	.word	0x0800411b
 80040f0:	2b7f      	cmp	r3, #127	; 0x7f
 80040f2:	d036      	beq.n	8004162 <_HandleIncomingPacket+0xce>
 80040f4:	e026      	b.n	8004144 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80040f6:	f000 fe3d 	bl	8004d74 <SEGGER_SYSVIEW_Start>
      break;
 80040fa:	e037      	b.n	800416c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80040fc:	f000 fef6 	bl	8004eec <SEGGER_SYSVIEW_Stop>
      break;
 8004100:	e034      	b.n	800416c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004102:	f001 f8cf 	bl	80052a4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004106:	e031      	b.n	800416c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004108:	f001 f894 	bl	8005234 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800410c:	e02e      	b.n	800416c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800410e:	f000 ff13 	bl	8004f38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004112:	e02b      	b.n	800416c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004114:	f001 fb52 	bl	80057bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004118:	e028      	b.n	800416c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800411a:	f001 fb31 	bl	8005780 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800411e:	e025      	b.n	800416c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <_HandleIncomingPacket+0xe0>)
 8004122:	7e1b      	ldrb	r3, [r3, #24]
 8004124:	4618      	mov	r0, r3
 8004126:	1cfb      	adds	r3, r7, #3
 8004128:	2201      	movs	r2, #1
 800412a:	4619      	mov	r1, r3
 800412c:	f7ff fd8a 	bl	8003c44 <SEGGER_RTT_ReadNoLock>
 8004130:	4603      	mov	r3, r0
 8004132:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	dd15      	ble.n	8004166 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fa9f 	bl	8005680 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004142:	e010      	b.n	8004166 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	b25b      	sxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	da0e      	bge.n	800416a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <_HandleIncomingPacket+0xe0>)
 800414e:	7e1b      	ldrb	r3, [r3, #24]
 8004150:	4618      	mov	r0, r3
 8004152:	1cfb      	adds	r3, r7, #3
 8004154:	2201      	movs	r2, #1
 8004156:	4619      	mov	r1, r3
 8004158:	f7ff fd74 	bl	8003c44 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800415c:	e005      	b.n	800416a <_HandleIncomingPacket+0xd6>
    }
  }
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <_HandleIncomingPacket+0xd8>
      break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <_HandleIncomingPacket+0xd8>
      break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <_HandleIncomingPacket+0xd8>
      break;
 800416a:	bf00      	nop
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20014210 	.word	0x20014210

08004178 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b08c      	sub	sp, #48	; 0x30
 800417c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800417e:	2301      	movs	r3, #1
 8004180:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <_TrySendOverflowPacket+0xe0>)
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	e00b      	b.n	80041ac <_TrySendOverflowPacket+0x34>
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	b2da      	uxtb	r2, r3
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800419e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	09db      	lsrs	r3, r3, #7
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	2b7f      	cmp	r3, #127	; 0x7f
 80041b0:	d8f0      	bhi.n	8004194 <_TrySendOverflowPacket+0x1c>
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041c2:	4b26      	ldr	r3, [pc, #152]	; (800425c <_TrySendOverflowPacket+0xe4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041c8:	4b23      	ldr	r3, [pc, #140]	; (8004258 <_TrySendOverflowPacket+0xe0>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	623b      	str	r3, [r7, #32]
 80041da:	e00b      	b.n	80041f4 <_TrySendOverflowPacket+0x7c>
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	1c59      	adds	r1, r3, #1
 80041e4:	6279      	str	r1, [r7, #36]	; 0x24
 80041e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	09db      	lsrs	r3, r3, #7
 80041f2:	623b      	str	r3, [r7, #32]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	2b7f      	cmp	r3, #127	; 0x7f
 80041f8:	d8f0      	bhi.n	80041dc <_TrySendOverflowPacket+0x64>
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004200:	6a3a      	ldr	r2, [r7, #32]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800420a:	4b13      	ldr	r3, [pc, #76]	; (8004258 <_TrySendOverflowPacket+0xe0>)
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	4618      	mov	r0, r3
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	461a      	mov	r2, r3
 8004218:	1d3b      	adds	r3, r7, #4
 800421a:	4619      	mov	r1, r3
 800421c:	f7fb fff8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004220:	4603      	mov	r3, r0
 8004222:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004224:	f7ff fade 	bl	80037e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <_TrySendOverflowPacket+0xe0>)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <_TrySendOverflowPacket+0xe0>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	3b01      	subs	r3, #1
 800423a:	b2da      	uxtb	r2, r3
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <_TrySendOverflowPacket+0xe0>)
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e004      	b.n	800424c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <_TrySendOverflowPacket+0xe0>)
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	3301      	adds	r3, #1
 8004248:	4a03      	ldr	r2, [pc, #12]	; (8004258 <_TrySendOverflowPacket+0xe0>)
 800424a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800424c:	693b      	ldr	r3, [r7, #16]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3730      	adds	r7, #48	; 0x30
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20014210 	.word	0x20014210
 800425c:	e0001004 	.word	0xe0001004

08004260 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800426c:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <_SendPacket+0x1c4>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d010      	beq.n	8004296 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004274:	4b6b      	ldr	r3, [pc, #428]	; (8004424 <_SendPacket+0x1c4>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a5 	beq.w	80043c8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800427e:	4b69      	ldr	r3, [pc, #420]	; (8004424 <_SendPacket+0x1c4>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d109      	bne.n	800429a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004286:	f7ff ff77 	bl	8004178 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800428a:	4b66      	ldr	r3, [pc, #408]	; (8004424 <_SendPacket+0x1c4>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	f040 809c 	bne.w	80043cc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004294:	e001      	b.n	800429a <_SendPacket+0x3a>
    goto Send;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <_SendPacket+0x3c>
Send:
 800429a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b1f      	cmp	r3, #31
 80042a0:	d809      	bhi.n	80042b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80042a2:	4b60      	ldr	r3, [pc, #384]	; (8004424 <_SendPacket+0x1c4>)
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f040 808d 	bne.w	80043d0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b17      	cmp	r3, #23
 80042ba:	d807      	bhi.n	80042cc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3b01      	subs	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e03d      	b.n	8004348 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b7f      	cmp	r3, #127	; 0x7f
 80042d8:	d912      	bls.n	8004300 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	09da      	lsrs	r2, r3, #7
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	3a01      	subs	r2, #1
 80042f2:	60fa      	str	r2, [r7, #12]
 80042f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e006      	b.n	800430e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3b01      	subs	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b7f      	cmp	r3, #127	; 0x7f
 8004312:	d912      	bls.n	800433a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	09da      	lsrs	r2, r3, #7
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3b01      	subs	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	3a01      	subs	r2, #1
 800432c:	60fa      	str	r2, [r7, #12]
 800432e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e006      	b.n	8004348 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b01      	subs	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004348:	4b37      	ldr	r3, [pc, #220]	; (8004428 <_SendPacket+0x1c8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800434e:	4b35      	ldr	r3, [pc, #212]	; (8004424 <_SendPacket+0x1c4>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	e00b      	b.n	800437a <_SendPacket+0x11a>
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	1c59      	adds	r1, r3, #1
 800436a:	6279      	str	r1, [r7, #36]	; 0x24
 800436c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	09db      	lsrs	r3, r3, #7
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2b7f      	cmp	r3, #127	; 0x7f
 800437e:	d8f0      	bhi.n	8004362 <_SendPacket+0x102>
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	627a      	str	r2, [r7, #36]	; 0x24
 8004386:	6a3a      	ldr	r2, [r7, #32]
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004390:	4b24      	ldr	r3, [pc, #144]	; (8004424 <_SendPacket+0x1c4>)
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	4618      	mov	r0, r3
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	461a      	mov	r2, r3
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	f7fb ff36 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043a4:	4603      	mov	r3, r0
 80043a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80043a8:	f7ff fa1c 	bl	80037e4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043b2:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <_SendPacket+0x1c4>)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	60d3      	str	r3, [r2, #12]
 80043b8:	e00b      	b.n	80043d2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <_SendPacket+0x1c4>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	3301      	adds	r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <_SendPacket+0x1c4>)
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e004      	b.n	80043d2 <_SendPacket+0x172>
    goto SendDone;
 80043c8:	bf00      	nop
 80043ca:	e002      	b.n	80043d2 <_SendPacket+0x172>
      goto SendDone;
 80043cc:	bf00      	nop
 80043ce:	e000      	b.n	80043d2 <_SendPacket+0x172>
      goto SendDone;
 80043d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <_SendPacket+0x1c4>)
 80043d4:	7e1b      	ldrb	r3, [r3, #24]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <_SendPacket+0x1cc>)
 80043da:	460b      	mov	r3, r1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	440b      	add	r3, r1
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	336c      	adds	r3, #108	; 0x6c
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <_SendPacket+0x1c4>)
 80043ea:	7e1b      	ldrb	r3, [r3, #24]
 80043ec:	4618      	mov	r0, r3
 80043ee:	490f      	ldr	r1, [pc, #60]	; (800442c <_SendPacket+0x1cc>)
 80043f0:	4603      	mov	r3, r0
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4403      	add	r3, r0
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	440b      	add	r3, r1
 80043fa:	3370      	adds	r3, #112	; 0x70
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d00b      	beq.n	800441a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <_SendPacket+0x1c4>)
 8004404:	789b      	ldrb	r3, [r3, #2]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <_SendPacket+0x1c4>)
 800440c:	2201      	movs	r2, #1
 800440e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004410:	f7ff fe40 	bl	8004094 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <_SendPacket+0x1c4>)
 8004416:	2200      	movs	r2, #0
 8004418:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800441a:	bf00      	nop
 800441c:	3728      	adds	r7, #40	; 0x28
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20014210 	.word	0x20014210
 8004428:	e0001004 	.word	0xe0001004
 800442c:	20014370 	.word	0x20014370

08004430 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	3301      	adds	r3, #1
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d80a      	bhi.n	8004460 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	1c59      	adds	r1, r3, #1
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6051      	str	r1, [r2, #4]
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d15a      	bne.n	800451e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	e00b      	b.n	80044a2 <_StoreChar+0x72>
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1c59      	adds	r1, r3, #1
 8004492:	6279      	str	r1, [r7, #36]	; 0x24
 8004494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	09db      	lsrs	r3, r3, #7
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	2b7f      	cmp	r3, #127	; 0x7f
 80044a6:	d8f0      	bhi.n	800448a <_StoreChar+0x5a>
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	627a      	str	r2, [r7, #36]	; 0x24
 80044ae:	6a3a      	ldr	r2, [r7, #32]
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	61fb      	str	r3, [r7, #28]
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	e00b      	b.n	80044da <_StoreChar+0xaa>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	1c59      	adds	r1, r3, #1
 80044ca:	61f9      	str	r1, [r7, #28]
 80044cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	09db      	lsrs	r3, r3, #7
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b7f      	cmp	r3, #127	; 0x7f
 80044de:	d8f0      	bhi.n	80044c2 <_StoreChar+0x92>
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	61fa      	str	r2, [r7, #28]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	221a      	movs	r2, #26
 80044f6:	6939      	ldr	r1, [r7, #16]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff feb1 	bl	8004260 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fdba 	bl	800407c <_PreparePacket>
 8004508:	4602      	mov	r2, r0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	611a      	str	r2, [r3, #16]
  }
}
 800451e:	bf00      	nop
 8004520:	3728      	adds	r7, #40	; 0x28
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800453a:	2301      	movs	r3, #1
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800453e:	2301      	movs	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004542:	e007      	b.n	8004554 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	623b      	str	r3, [r7, #32]
    Width++;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3301      	adds	r3, #1
 8004552:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d2f3      	bcs.n	8004544 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	429a      	cmp	r2, r3
 8004562:	d901      	bls.n	8004568 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11f      	bne.n	80045b2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01c      	beq.n	80045b2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <_PrintUnsigned+0x66>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <_PrintUnsigned+0x66>
        c = '0';
 8004588:	2330      	movs	r3, #48	; 0x30
 800458a:	76fb      	strb	r3, [r7, #27]
 800458c:	e001      	b.n	8004592 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800458e:	2320      	movs	r3, #32
 8004590:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004592:	e007      	b.n	80045a4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	3b01      	subs	r3, #1
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800459a:	7efb      	ldrb	r3, [r7, #27]
 800459c:	4619      	mov	r1, r3
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff ff46 	bl	8004430 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <_PrintUnsigned+0x8a>
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3f0      	bcc.n	8004594 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d903      	bls.n	80045c0 <_PrintUnsigned+0x98>
      NumDigits--;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	e009      	b.n	80045d4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d200      	bcs.n	80045d4 <_PrintUnsigned+0xac>
        break;
 80045d2:	e005      	b.n	80045e0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	fb02 f303 	mul.w	r3, r2, r3
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80045de:	e7e8      	b.n	80045b2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80045f8:	4a15      	ldr	r2, [pc, #84]	; (8004650 <_PrintUnsigned+0x128>)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	4619      	mov	r1, r3
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff ff14 	bl	8004430 <_StoreChar>
    Digit /= Base;
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e3      	bne.n	80045e0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d011      	beq.n	8004646 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00e      	beq.n	8004646 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004628:	e006      	b.n	8004638 <_PrintUnsigned+0x110>
        FieldWidth--;
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	3b01      	subs	r3, #1
 800462e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004630:	2120      	movs	r1, #32
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff fefc 	bl	8004430 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <_PrintUnsigned+0x11e>
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	429a      	cmp	r2, r3
 8004644:	d3f1      	bcc.n	800462a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004646:	bf00      	nop
 8004648:	3728      	adds	r7, #40	; 0x28
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	08005bac 	.word	0x08005bac

08004654 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	bfb8      	it	lt
 8004668:	425b      	neglt	r3, r3
 800466a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800466c:	2301      	movs	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004670:	e007      	b.n	8004682 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	fb92 f3f3 	sdiv	r3, r2, r3
 800467a:	613b      	str	r3, [r7, #16]
    Width++;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	429a      	cmp	r2, r3
 8004688:	daf3      	bge.n	8004672 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	429a      	cmp	r2, r3
 8004690:	d901      	bls.n	8004696 <_PrintInt+0x42>
    Width = NumDigits;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <_PrintInt+0x5e>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db04      	blt.n	80046ac <_PrintInt+0x58>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <_PrintInt+0x5e>
    FieldWidth--;
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <_PrintInt+0x6e>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d016      	beq.n	80046f0 <_PrintInt+0x9c>
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d111      	bne.n	80046f0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046d2:	e006      	b.n	80046e2 <_PrintInt+0x8e>
        FieldWidth--;
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80046da:	2120      	movs	r1, #32
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fea7 	bl	8004430 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <_PrintInt+0x9c>
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d3f1      	bcc.n	80046d4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da07      	bge.n	8004706 <_PrintInt+0xb2>
    v = -v;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	425b      	negs	r3, r3
 80046fa:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80046fc:	212d      	movs	r1, #45	; 0x2d
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff fe96 	bl	8004430 <_StoreChar>
 8004704:	e008      	b.n	8004718 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004710:	212b      	movs	r1, #43	; 0x2b
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fe8c 	bl	8004430 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d019      	beq.n	8004756 <_PrintInt+0x102>
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d114      	bne.n	8004756 <_PrintInt+0x102>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d111      	bne.n	8004756 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004738:	e006      	b.n	8004748 <_PrintInt+0xf4>
        FieldWidth--;
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	3b01      	subs	r3, #1
 800473e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004740:	2130      	movs	r1, #48	; 0x30
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fe74 	bl	8004430 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <_PrintInt+0x102>
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	429a      	cmp	r2, r3
 8004754:	d3f1      	bcc.n	800473a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fedf 	bl	8004528 <_PrintUnsigned>
}
 800476a:	bf00      	nop
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004774:	b580      	push	{r7, lr}
 8004776:	b098      	sub	sp, #96	; 0x60
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004780:	f3ef 8311 	mrs	r3, BASEPRI
 8004784:	f04f 0120 	mov.w	r1, #32
 8004788:	f381 8811 	msr	BASEPRI, r1
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
 800478e:	48b7      	ldr	r0, [pc, #732]	; (8004a6c <_VPrintTarget+0x2f8>)
 8004790:	f7ff fc74 	bl	800407c <_PreparePacket>
 8004794:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004796:	4bb5      	ldr	r3, [pc, #724]	; (8004a6c <_VPrintTarget+0x2f8>)
 8004798:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800479a:	2300      	movs	r3, #0
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3301      	adds	r3, #1
 80047a6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80047ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8183 	beq.w	8004aca <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80047c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047c8:	2b25      	cmp	r3, #37	; 0x25
 80047ca:	f040 8170 	bne.w	8004aae <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80047ce:	2300      	movs	r3, #0
 80047d0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80047de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047e2:	3b23      	subs	r3, #35	; 0x23
 80047e4:	2b0d      	cmp	r3, #13
 80047e6:	d83f      	bhi.n	8004868 <_VPrintTarget+0xf4>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <_VPrintTarget+0x7c>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004859 	.word	0x08004859
 80047f4:	08004869 	.word	0x08004869
 80047f8:	08004869 	.word	0x08004869
 80047fc:	08004869 	.word	0x08004869
 8004800:	08004869 	.word	0x08004869
 8004804:	08004869 	.word	0x08004869
 8004808:	08004869 	.word	0x08004869
 800480c:	08004869 	.word	0x08004869
 8004810:	08004849 	.word	0x08004849
 8004814:	08004869 	.word	0x08004869
 8004818:	08004829 	.word	0x08004829
 800481c:	08004869 	.word	0x08004869
 8004820:	08004869 	.word	0x08004869
 8004824:	08004839 	.word	0x08004839
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3301      	adds	r3, #1
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	e01a      	b.n	800486e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483a:	f043 0302 	orr.w	r3, r3, #2
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e012      	b.n	800486e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e00a      	b.n	800486e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485a:	f043 0308 	orr.w	r3, r3, #8
 800485e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3301      	adds	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e002      	b.n	800486e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004868:	2300      	movs	r3, #0
 800486a:	653b      	str	r3, [r7, #80]	; 0x50
 800486c:	bf00      	nop
        }
      } while (v);
 800486e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1b0      	bne.n	80047d6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004874:	2300      	movs	r3, #0
 8004876:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004884:	2b2f      	cmp	r3, #47	; 0x2f
 8004886:	d912      	bls.n	80048ae <_VPrintTarget+0x13a>
 8004888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800488c:	2b39      	cmp	r3, #57	; 0x39
 800488e:	d80e      	bhi.n	80048ae <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	461a      	mov	r2, r3
 80048a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048a6:	4413      	add	r3, r2
 80048a8:	3b30      	subs	r3, #48	; 0x30
 80048aa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80048ac:	e7e4      	b.n	8004878 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80048ae:	2300      	movs	r3, #0
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80048ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048be:	2b2e      	cmp	r3, #46	; 0x2e
 80048c0:	d11d      	bne.n	80048fe <_VPrintTarget+0x18a>
        sFormat++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80048d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048d4:	2b2f      	cmp	r3, #47	; 0x2f
 80048d6:	d912      	bls.n	80048fe <_VPrintTarget+0x18a>
 80048d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048dc:	2b39      	cmp	r3, #57	; 0x39
 80048de:	d80e      	bhi.n	80048fe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80048e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	461a      	mov	r2, r3
 80048f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048f6:	4413      	add	r3, r2
 80048f8:	3b30      	subs	r3, #48	; 0x30
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80048fc:	e7e4      	b.n	80048c8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004906:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800490a:	2b6c      	cmp	r3, #108	; 0x6c
 800490c:	d003      	beq.n	8004916 <_VPrintTarget+0x1a2>
 800490e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004912:	2b68      	cmp	r3, #104	; 0x68
 8004914:	d107      	bne.n	8004926 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004924:	e7ef      	b.n	8004906 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800492a:	2b25      	cmp	r3, #37	; 0x25
 800492c:	f000 80b3 	beq.w	8004a96 <_VPrintTarget+0x322>
 8004930:	2b25      	cmp	r3, #37	; 0x25
 8004932:	f2c0 80b7 	blt.w	8004aa4 <_VPrintTarget+0x330>
 8004936:	2b78      	cmp	r3, #120	; 0x78
 8004938:	f300 80b4 	bgt.w	8004aa4 <_VPrintTarget+0x330>
 800493c:	2b58      	cmp	r3, #88	; 0x58
 800493e:	f2c0 80b1 	blt.w	8004aa4 <_VPrintTarget+0x330>
 8004942:	3b58      	subs	r3, #88	; 0x58
 8004944:	2b20      	cmp	r3, #32
 8004946:	f200 80ad 	bhi.w	8004aa4 <_VPrintTarget+0x330>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <_VPrintTarget+0x1dc>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	08004a47 	.word	0x08004a47
 8004954:	08004aa5 	.word	0x08004aa5
 8004958:	08004aa5 	.word	0x08004aa5
 800495c:	08004aa5 	.word	0x08004aa5
 8004960:	08004aa5 	.word	0x08004aa5
 8004964:	08004aa5 	.word	0x08004aa5
 8004968:	08004aa5 	.word	0x08004aa5
 800496c:	08004aa5 	.word	0x08004aa5
 8004970:	08004aa5 	.word	0x08004aa5
 8004974:	08004aa5 	.word	0x08004aa5
 8004978:	08004aa5 	.word	0x08004aa5
 800497c:	080049d5 	.word	0x080049d5
 8004980:	080049fb 	.word	0x080049fb
 8004984:	08004aa5 	.word	0x08004aa5
 8004988:	08004aa5 	.word	0x08004aa5
 800498c:	08004aa5 	.word	0x08004aa5
 8004990:	08004aa5 	.word	0x08004aa5
 8004994:	08004aa5 	.word	0x08004aa5
 8004998:	08004aa5 	.word	0x08004aa5
 800499c:	08004aa5 	.word	0x08004aa5
 80049a0:	08004aa5 	.word	0x08004aa5
 80049a4:	08004aa5 	.word	0x08004aa5
 80049a8:	08004aa5 	.word	0x08004aa5
 80049ac:	08004aa5 	.word	0x08004aa5
 80049b0:	08004a71 	.word	0x08004a71
 80049b4:	08004aa5 	.word	0x08004aa5
 80049b8:	08004aa5 	.word	0x08004aa5
 80049bc:	08004aa5 	.word	0x08004aa5
 80049c0:	08004aa5 	.word	0x08004aa5
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004aa5 	.word	0x08004aa5
 80049cc:	08004aa5 	.word	0x08004aa5
 80049d0:	08004a47 	.word	0x08004a47
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	1d19      	adds	r1, r3, #4
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80049e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80049e8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80049ec:	f107 0314 	add.w	r3, r7, #20
 80049f0:	4611      	mov	r1, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fd1c 	bl	8004430 <_StoreChar>
        break;
 80049f8:	e055      	b.n	8004aa6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	1d19      	adds	r1, r3, #4
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6011      	str	r1, [r2, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a08:	f107 0014 	add.w	r0, r7, #20
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a16:	220a      	movs	r2, #10
 8004a18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a1a:	f7ff fe1b 	bl	8004654 <_PrintInt>
        break;
 8004a1e:	e042      	b.n	8004aa6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	1d19      	adds	r1, r3, #4
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6011      	str	r1, [r2, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a30:	f107 0014 	add.w	r0, r7, #20
 8004a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3e:	220a      	movs	r2, #10
 8004a40:	f7ff fd72 	bl	8004528 <_PrintUnsigned>
        break;
 8004a44:	e02f      	b.n	8004aa6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	1d19      	adds	r1, r3, #4
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6011      	str	r1, [r2, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004a54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a56:	f107 0014 	add.w	r0, r7, #20
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a64:	2210      	movs	r2, #16
 8004a66:	f7ff fd5f 	bl	8004528 <_PrintUnsigned>
        break;
 8004a6a:	e01c      	b.n	8004aa6 <_VPrintTarget+0x332>
 8004a6c:	20014240 	.word	0x20014240
      case 'p':
        v = va_arg(*pParamList, int);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1d19      	adds	r1, r3, #4
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6011      	str	r1, [r2, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004a7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a80:	f107 0014 	add.w	r0, r7, #20
 8004a84:	2300      	movs	r3, #0
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	2308      	movs	r3, #8
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	2210      	movs	r2, #16
 8004a90:	f7ff fd4a 	bl	8004528 <_PrintUnsigned>
        break;
 8004a94:	e007      	b.n	8004aa6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004a96:	f107 0314 	add.w	r3, r7, #20
 8004a9a:	2125      	movs	r1, #37	; 0x25
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fcc7 	bl	8004430 <_StoreChar>
        break;
 8004aa2:	e000      	b.n	8004aa6 <_VPrintTarget+0x332>
      default:
        break;
 8004aa4:	bf00      	nop
      }
      sFormat++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e007      	b.n	8004abe <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004aae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004ab2:	f107 0314 	add.w	r3, r7, #20
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fcb9 	bl	8004430 <_StoreChar>
    }
  } while (*sFormat);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f47f ae72 	bne.w	80047ac <_VPrintTarget+0x38>
 8004ac8:	e000      	b.n	8004acc <_VPrintTarget+0x358>
      break;
 8004aca:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d041      	beq.n	8004b56 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae2:	e00b      	b.n	8004afc <_VPrintTarget+0x388>
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	6439      	str	r1, [r7, #64]	; 0x40
 8004aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af8:	09db      	lsrs	r3, r3, #7
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afe:	2b7f      	cmp	r3, #127	; 0x7f
 8004b00:	d8f0      	bhi.n	8004ae4 <_VPrintTarget+0x370>
 8004b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	643a      	str	r2, [r7, #64]	; 0x40
 8004b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b10:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b16:	2300      	movs	r3, #0
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1a:	e00b      	b.n	8004b34 <_VPrintTarget+0x3c0>
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	09db      	lsrs	r3, r3, #7
 8004b32:	637b      	str	r3, [r7, #52]	; 0x34
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	2b7f      	cmp	r3, #127	; 0x7f
 8004b38:	d8f0      	bhi.n	8004b1c <_VPrintTarget+0x3a8>
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	69b9      	ldr	r1, [r7, #24]
 8004b4e:	221a      	movs	r2, #26
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fb85 	bl	8004260 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004b5c:	bf00      	nop
 8004b5e:	3758      	adds	r7, #88	; 0x58
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b72:	2300      	movs	r3, #0
 8004b74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b78:	4917      	ldr	r1, [pc, #92]	; (8004bd8 <SEGGER_SYSVIEW_Init+0x74>)
 8004b7a:	4818      	ldr	r0, [pc, #96]	; (8004bdc <SEGGER_SYSVIEW_Init+0x78>)
 8004b7c:	f7ff f95e 	bl	8003e3c <SEGGER_RTT_AllocUpBuffer>
 8004b80:	4603      	mov	r3, r0
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	4b16      	ldr	r3, [pc, #88]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b86:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b8a:	785a      	ldrb	r2, [r3, #1]
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b8e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b92:	7e1b      	ldrb	r3, [r3, #24]
 8004b94:	4618      	mov	r0, r3
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	4a11      	ldr	r2, [pc, #68]	; (8004be4 <SEGGER_SYSVIEW_Init+0x80>)
 8004b9e:	490f      	ldr	r1, [pc, #60]	; (8004bdc <SEGGER_SYSVIEW_Init+0x78>)
 8004ba0:	f7ff f9d0 	bl	8003f44 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <SEGGER_SYSVIEW_Init+0x84>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bb0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004bb2:	4a0b      	ldr	r2, [pc, #44]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004bb8:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004bbe:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004bc4:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20013208 	.word	0x20013208
 8004bdc:	08005b74 	.word	0x08005b74
 8004be0:	20014210 	.word	0x20014210
 8004be4:	20014208 	.word	0x20014208
 8004be8:	e0001004 	.word	0xe0001004

08004bec <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6113      	str	r3, [r2, #16]
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20014210 	.word	0x20014210

08004c0c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c14:	f3ef 8311 	mrs	r3, BASEPRI
 8004c18:	f04f 0120 	mov.w	r1, #32
 8004c1c:	f381 8811 	msr	BASEPRI, r1
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	4808      	ldr	r0, [pc, #32]	; (8004c44 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c24:	f7ff fa2a 	bl	800407c <_PreparePacket>
 8004c28:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	68b8      	ldr	r0, [r7, #8]
 8004c30:	f7ff fb16 	bl	8004260 <_SendPacket>
  RECORD_END();
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f383 8811 	msr	BASEPRI, r3
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20014240 	.word	0x20014240

08004c48 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c52:	f3ef 8311 	mrs	r3, BASEPRI
 8004c56:	f04f 0120 	mov.w	r1, #32
 8004c5a:	f381 8811 	msr	BASEPRI, r1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	4816      	ldr	r0, [pc, #88]	; (8004cbc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c62:	f7ff fa0b 	bl	800407c <_PreparePacket>
 8004c66:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e00b      	b.n	8004c8e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	1c59      	adds	r1, r3, #1
 8004c7e:	61f9      	str	r1, [r7, #28]
 8004c80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	09db      	lsrs	r3, r3, #7
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b7f      	cmp	r3, #127	; 0x7f
 8004c92:	d8f0      	bhi.n	8004c76 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	61fa      	str	r2, [r7, #28]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	6938      	ldr	r0, [r7, #16]
 8004caa:	f7ff fad9 	bl	8004260 <_SendPacket>
  RECORD_END();
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f383 8811 	msr	BASEPRI, r3
}
 8004cb4:	bf00      	nop
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20014240 	.word	0x20014240

08004cc0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08c      	sub	sp, #48	; 0x30
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd0:	f04f 0120 	mov.w	r1, #32
 8004cd4:	f381 8811 	msr	BASEPRI, r1
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	4825      	ldr	r0, [pc, #148]	; (8004d70 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004cdc:	f7ff f9ce 	bl	800407c <_PreparePacket>
 8004ce0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cee:	e00b      	b.n	8004d08 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	1c59      	adds	r1, r3, #1
 8004cf8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004cfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	09db      	lsrs	r3, r3, #7
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d0c:	d8f0      	bhi.n	8004cf0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	e00b      	b.n	8004d40 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	6279      	str	r1, [r7, #36]	; 0x24
 8004d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	09db      	lsrs	r3, r3, #7
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	2b7f      	cmp	r3, #127	; 0x7f
 8004d44:	d8f0      	bhi.n	8004d28 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004d4c:	6a3a      	ldr	r2, [r7, #32]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	6979      	ldr	r1, [r7, #20]
 8004d5a:	69b8      	ldr	r0, [r7, #24]
 8004d5c:	f7ff fa80 	bl	8004260 <_SendPacket>
  RECORD_END();
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f383 8811 	msr	BASEPRI, r3
}
 8004d66:	bf00      	nop
 8004d68:	3730      	adds	r7, #48	; 0x30
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20014240 	.word	0x20014240

08004d74 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08c      	sub	sp, #48	; 0x30
 8004d78:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004d7a:	4b59      	ldr	r3, [pc, #356]	; (8004ee0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004d80:	f3ef 8311 	mrs	r3, BASEPRI
 8004d84:	f04f 0120 	mov.w	r1, #32
 8004d88:	f381 8811 	msr	BASEPRI, r1
 8004d8c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004d8e:	4b54      	ldr	r3, [pc, #336]	; (8004ee0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d90:	785b      	ldrb	r3, [r3, #1]
 8004d92:	220a      	movs	r2, #10
 8004d94:	4953      	ldr	r1, [pc, #332]	; (8004ee4 <SEGGER_SYSVIEW_Start+0x170>)
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fb fa3a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004da2:	f7fe fd1f 	bl	80037e4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004da6:	200a      	movs	r0, #10
 8004da8:	f7ff ff30 	bl	8004c0c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dac:	f3ef 8311 	mrs	r3, BASEPRI
 8004db0:	f04f 0120 	mov.w	r1, #32
 8004db4:	f381 8811 	msr	BASEPRI, r1
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	484b      	ldr	r0, [pc, #300]	; (8004ee8 <SEGGER_SYSVIEW_Start+0x174>)
 8004dbc:	f7ff f95e 	bl	800407c <_PreparePacket>
 8004dc0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dca:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd0:	e00b      	b.n	8004dea <SEGGER_SYSVIEW_Start+0x76>
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	1c59      	adds	r1, r3, #1
 8004dda:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	09db      	lsrs	r3, r3, #7
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	2b7f      	cmp	r3, #127	; 0x7f
 8004dee:	d8f0      	bhi.n	8004dd2 <SEGGER_SYSVIEW_Start+0x5e>
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
 8004e04:	4b36      	ldr	r3, [pc, #216]	; (8004ee0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	623b      	str	r3, [r7, #32]
 8004e0a:	e00b      	b.n	8004e24 <SEGGER_SYSVIEW_Start+0xb0>
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	6279      	str	r1, [r7, #36]	; 0x24
 8004e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	09db      	lsrs	r3, r3, #7
 8004e22:	623b      	str	r3, [r7, #32]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2b7f      	cmp	r3, #127	; 0x7f
 8004e28:	d8f0      	bhi.n	8004e0c <SEGGER_SYSVIEW_Start+0x98>
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	4b28      	ldr	r3, [pc, #160]	; (8004ee0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e00b      	b.n	8004e5e <SEGGER_SYSVIEW_Start+0xea>
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	1c59      	adds	r1, r3, #1
 8004e4e:	61f9      	str	r1, [r7, #28]
 8004e50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	09db      	lsrs	r3, r3, #7
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b7f      	cmp	r3, #127	; 0x7f
 8004e62:	d8f0      	bhi.n	8004e46 <SEGGER_SYSVIEW_Start+0xd2>
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	61fa      	str	r2, [r7, #28]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	e00b      	b.n	8004e96 <SEGGER_SYSVIEW_Start+0x122>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	1c59      	adds	r1, r3, #1
 8004e86:	6179      	str	r1, [r7, #20]
 8004e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	09db      	lsrs	r3, r3, #7
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9a:	d8f0      	bhi.n	8004e7e <SEGGER_SYSVIEW_Start+0x10a>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	617a      	str	r2, [r7, #20]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004eac:	2218      	movs	r2, #24
 8004eae:	6839      	ldr	r1, [r7, #0]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff f9d5 	bl	8004260 <_SendPacket>
      RECORD_END();
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004eca:	f000 f9eb 	bl	80052a4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004ece:	f000 f9b1 	bl	8005234 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004ed2:	f000 fc73 	bl	80057bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004ed6:	bf00      	nop
 8004ed8:	3730      	adds	r7, #48	; 0x30
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20014210 	.word	0x20014210
 8004ee4:	08005ba0 	.word	0x08005ba0
 8004ee8:	20014240 	.word	0x20014240

08004eec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef6:	f04f 0120 	mov.w	r1, #32
 8004efa:	f381 8811 	msr	BASEPRI, r1
 8004efe:	607b      	str	r3, [r7, #4]
 8004f00:	480b      	ldr	r0, [pc, #44]	; (8004f30 <SEGGER_SYSVIEW_Stop+0x44>)
 8004f02:	f7ff f8bb 	bl	800407c <_PreparePacket>
 8004f06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f10:	220b      	movs	r2, #11
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	6838      	ldr	r0, [r7, #0]
 8004f16:	f7ff f9a3 	bl	8004260 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f383 8811 	msr	BASEPRI, r3
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20014240 	.word	0x20014240
 8004f34:	20014210 	.word	0x20014210

08004f38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08c      	sub	sp, #48	; 0x30
 8004f3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f42:	f04f 0120 	mov.w	r1, #32
 8004f46:	f381 8811 	msr	BASEPRI, r1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	4845      	ldr	r0, [pc, #276]	; (8005064 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f4e:	f7ff f895 	bl	800407c <_PreparePacket>
 8004f52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5c:	4b42      	ldr	r3, [pc, #264]	; (8005068 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f62:	e00b      	b.n	8004f7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	09db      	lsrs	r3, r3, #7
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f80:	d8f0      	bhi.n	8004f64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
 8004f96:	4b34      	ldr	r3, [pc, #208]	; (8005068 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	e00b      	b.n	8004fb6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	1c59      	adds	r1, r3, #1
 8004fa6:	6279      	str	r1, [r7, #36]	; 0x24
 8004fa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	09db      	lsrs	r3, r3, #7
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fba:	d8f0      	bhi.n	8004f9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	627a      	str	r2, [r7, #36]	; 0x24
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	e00b      	b.n	8004ff0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	1c59      	adds	r1, r3, #1
 8004fe0:	61f9      	str	r1, [r7, #28]
 8004fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	09db      	lsrs	r3, r3, #7
 8004fee:	61bb      	str	r3, [r7, #24]
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff4:	d8f0      	bhi.n	8004fd8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	61fa      	str	r2, [r7, #28]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	2300      	movs	r3, #0
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	e00b      	b.n	8005028 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1c59      	adds	r1, r3, #1
 8005018:	6179      	str	r1, [r7, #20]
 800501a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	09db      	lsrs	r3, r3, #7
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b7f      	cmp	r3, #127	; 0x7f
 800502c:	d8f0      	bhi.n	8005010 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	617a      	str	r2, [r7, #20]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800503e:	2218      	movs	r2, #24
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	68b8      	ldr	r0, [r7, #8]
 8005044:	f7ff f90c 	bl	8004260 <_SendPacket>
  RECORD_END();
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005056:	4b04      	ldr	r3, [pc, #16]	; (8005068 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	4798      	blx	r3
  }
}
 800505c:	bf00      	nop
 800505e:	3730      	adds	r7, #48	; 0x30
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20014240 	.word	0x20014240
 8005068:	20014210 	.word	0x20014210

0800506c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b092      	sub	sp, #72	; 0x48
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005074:	f3ef 8311 	mrs	r3, BASEPRI
 8005078:	f04f 0120 	mov.w	r1, #32
 800507c:	f381 8811 	msr	BASEPRI, r1
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	486a      	ldr	r0, [pc, #424]	; (800522c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005084:	f7fe fffa 	bl	800407c <_PreparePacket>
 8005088:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	647b      	str	r3, [r7, #68]	; 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b66      	ldr	r3, [pc, #408]	; (8005230 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	643b      	str	r3, [r7, #64]	; 0x40
 800509e:	e00b      	b.n	80050b8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80050a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a6:	1c59      	adds	r1, r3, #1
 80050a8:	6479      	str	r1, [r7, #68]	; 0x44
 80050aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b4:	09db      	lsrs	r3, r3, #7
 80050b6:	643b      	str	r3, [r7, #64]	; 0x40
 80050b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ba:	2b7f      	cmp	r3, #127	; 0x7f
 80050bc:	d8f0      	bhi.n	80050a0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80050be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	647a      	str	r2, [r7, #68]	; 0x44
 80050c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d8:	e00b      	b.n	80050f2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e0:	1c59      	adds	r1, r3, #1
 80050e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80050e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	09db      	lsrs	r3, r3, #7
 80050f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	2b7f      	cmp	r3, #127	; 0x7f
 80050f6:	d8f0      	bhi.n	80050da <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80050f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	4619      	mov	r1, r3
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7fe ff63 	bl	8003fdc <_EncodeStr>
 8005116:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005118:	2209      	movs	r2, #9
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	6938      	ldr	r0, [r7, #16]
 800511e:	f7ff f89f 	bl	8004260 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b40      	ldr	r3, [pc, #256]	; (8005230 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	633b      	str	r3, [r7, #48]	; 0x30
 8005136:	e00b      	b.n	8005150 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	b2da      	uxtb	r2, r3
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	6379      	str	r1, [r7, #52]	; 0x34
 8005142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	09db      	lsrs	r3, r3, #7
 800514e:	633b      	str	r3, [r7, #48]	; 0x30
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	2b7f      	cmp	r3, #127	; 0x7f
 8005154:	d8f0      	bhi.n	8005138 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	637a      	str	r2, [r7, #52]	; 0x34
 800515c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005164:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005170:	e00b      	b.n	800518a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	b2da      	uxtb	r2, r3
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	1c59      	adds	r1, r3, #1
 800517a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800517c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	09db      	lsrs	r3, r3, #7
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	2b7f      	cmp	r3, #127	; 0x7f
 800518e:	d8f0      	bhi.n	8005172 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	e00b      	b.n	80051c4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	6279      	str	r1, [r7, #36]	; 0x24
 80051b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	09db      	lsrs	r3, r3, #7
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b7f      	cmp	r3, #127	; 0x7f
 80051c8:	d8f0      	bhi.n	80051ac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	627a      	str	r2, [r7, #36]	; 0x24
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	e00b      	b.n	80051fc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	61f9      	str	r1, [r7, #28]
 80051ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	09db      	lsrs	r3, r3, #7
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005200:	d8f0      	bhi.n	80051e4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	61fa      	str	r2, [r7, #28]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005212:	2215      	movs	r2, #21
 8005214:	68f9      	ldr	r1, [r7, #12]
 8005216:	6938      	ldr	r0, [r7, #16]
 8005218:	f7ff f822 	bl	8004260 <_SendPacket>
  RECORD_END();
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f383 8811 	msr	BASEPRI, r3
}
 8005222:	bf00      	nop
 8005224:	3748      	adds	r7, #72	; 0x48
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20014240 	.word	0x20014240
 8005230:	20014210 	.word	0x20014210

08005234 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800524a:	4b03      	ldr	r3, [pc, #12]	; (8005258 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4798      	blx	r3
  }
}
 8005252:	bf00      	nop
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20014210 	.word	0x20014210

0800525c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005264:	f3ef 8311 	mrs	r3, BASEPRI
 8005268:	f04f 0120 	mov.w	r1, #32
 800526c:	f381 8811 	msr	BASEPRI, r1
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	480b      	ldr	r0, [pc, #44]	; (80052a0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005274:	f7fe ff02 	bl	800407c <_PreparePacket>
 8005278:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800527a:	2280      	movs	r2, #128	; 0x80
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	6938      	ldr	r0, [r7, #16]
 8005280:	f7fe feac 	bl	8003fdc <_EncodeStr>
 8005284:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005286:	220e      	movs	r2, #14
 8005288:	68f9      	ldr	r1, [r7, #12]
 800528a:	6938      	ldr	r0, [r7, #16]
 800528c:	f7fe ffe8 	bl	8004260 <_SendPacket>
  RECORD_END();
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f383 8811 	msr	BASEPRI, r3
}
 8005296:	bf00      	nop
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20014240 	.word	0x20014240

080052a4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80052a4:	b590      	push	{r4, r7, lr}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01a      	beq.n	80052e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80052b2:	4b13      	ldr	r3, [pc, #76]	; (8005300 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d015      	beq.n	80052e8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4798      	blx	r3
 80052c4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052c8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80052ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	000a      	movs	r2, r1
 80052d8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052da:	4613      	mov	r3, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	4621      	mov	r1, r4
 80052e0:	200d      	movs	r0, #13
 80052e2:	f7ff fced 	bl	8004cc0 <SEGGER_SYSVIEW_RecordU32x2>
 80052e6:	e006      	b.n	80052f6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4619      	mov	r1, r3
 80052ee:	200c      	movs	r0, #12
 80052f0:	f7ff fcaa 	bl	8004c48 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd90      	pop	{r4, r7, pc}
 80052fe:	bf00      	nop
 8005300:	20014210 	.word	0x20014210
 8005304:	e0001004 	.word	0xe0001004

08005308 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800530e:	f3ef 8311 	mrs	r3, BASEPRI
 8005312:	f04f 0120 	mov.w	r1, #32
 8005316:	f381 8811 	msr	BASEPRI, r1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	4819      	ldr	r0, [pc, #100]	; (8005384 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800531e:	f7fe fead 	bl	800407c <_PreparePacket>
 8005322:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005328:	4b17      	ldr	r3, [pc, #92]	; (8005388 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005330:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e00b      	b.n	8005354 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1c59      	adds	r1, r3, #1
 8005344:	6179      	str	r1, [r7, #20]
 8005346:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	09db      	lsrs	r3, r3, #7
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b7f      	cmp	r3, #127	; 0x7f
 8005358:	d8f0      	bhi.n	800533c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	617a      	str	r2, [r7, #20]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800536a:	2202      	movs	r2, #2
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	68b8      	ldr	r0, [r7, #8]
 8005370:	f7fe ff76 	bl	8004260 <_SendPacket>
  RECORD_END();
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f383 8811 	msr	BASEPRI, r3
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20014240 	.word	0x20014240
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005392:	f3ef 8311 	mrs	r3, BASEPRI
 8005396:	f04f 0120 	mov.w	r1, #32
 800539a:	f381 8811 	msr	BASEPRI, r1
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	4807      	ldr	r0, [pc, #28]	; (80053c0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80053a2:	f7fe fe6b 	bl	800407c <_PreparePacket>
 80053a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80053a8:	2203      	movs	r2, #3
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6838      	ldr	r0, [r7, #0]
 80053ae:	f7fe ff57 	bl	8004260 <_SendPacket>
  RECORD_END();
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f383 8811 	msr	BASEPRI, r3
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20014240 	.word	0x20014240

080053c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053ca:	f3ef 8311 	mrs	r3, BASEPRI
 80053ce:	f04f 0120 	mov.w	r1, #32
 80053d2:	f381 8811 	msr	BASEPRI, r1
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	4807      	ldr	r0, [pc, #28]	; (80053f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80053da:	f7fe fe4f 	bl	800407c <_PreparePacket>
 80053de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80053e0:	2212      	movs	r2, #18
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6838      	ldr	r0, [r7, #0]
 80053e6:	f7fe ff3b 	bl	8004260 <_SendPacket>
  RECORD_END();
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f383 8811 	msr	BASEPRI, r3
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20014240 	.word	0x20014240

080053fc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005402:	f3ef 8311 	mrs	r3, BASEPRI
 8005406:	f04f 0120 	mov.w	r1, #32
 800540a:	f381 8811 	msr	BASEPRI, r1
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	4807      	ldr	r0, [pc, #28]	; (8005430 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005412:	f7fe fe33 	bl	800407c <_PreparePacket>
 8005416:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005418:	2211      	movs	r2, #17
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6838      	ldr	r0, [r7, #0]
 800541e:	f7fe ff1f 	bl	8004260 <_SendPacket>
  RECORD_END();
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f383 8811 	msr	BASEPRI, r3
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20014240 	.word	0x20014240

08005434 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800543c:	f3ef 8311 	mrs	r3, BASEPRI
 8005440:	f04f 0120 	mov.w	r1, #32
 8005444:	f381 8811 	msr	BASEPRI, r1
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	4819      	ldr	r0, [pc, #100]	; (80054b0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800544c:	f7fe fe16 	bl	800407c <_PreparePacket>
 8005450:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005456:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	61fb      	str	r3, [r7, #28]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	e00b      	b.n	8005482 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	1c59      	adds	r1, r3, #1
 8005472:	61f9      	str	r1, [r7, #28]
 8005474:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	09db      	lsrs	r3, r3, #7
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b7f      	cmp	r3, #127	; 0x7f
 8005486:	d8f0      	bhi.n	800546a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	61fa      	str	r2, [r7, #28]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005498:	2208      	movs	r2, #8
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	6938      	ldr	r0, [r7, #16]
 800549e:	f7fe fedf 	bl	8004260 <_SendPacket>
  RECORD_END();
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f383 8811 	msr	BASEPRI, r3
}
 80054a8:	bf00      	nop
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20014240 	.word	0x20014240
 80054b4:	20014210 	.word	0x20014210

080054b8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054c0:	f3ef 8311 	mrs	r3, BASEPRI
 80054c4:	f04f 0120 	mov.w	r1, #32
 80054c8:	f381 8811 	msr	BASEPRI, r1
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	4819      	ldr	r0, [pc, #100]	; (8005534 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80054d0:	f7fe fdd4 	bl	800407c <_PreparePacket>
 80054d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054da:	4b17      	ldr	r3, [pc, #92]	; (8005538 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e00b      	b.n	8005506 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	1c59      	adds	r1, r3, #1
 80054f6:	61f9      	str	r1, [r7, #28]
 80054f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	09db      	lsrs	r3, r3, #7
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b7f      	cmp	r3, #127	; 0x7f
 800550a:	d8f0      	bhi.n	80054ee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	61fa      	str	r2, [r7, #28]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800551c:	2204      	movs	r2, #4
 800551e:	68f9      	ldr	r1, [r7, #12]
 8005520:	6938      	ldr	r0, [r7, #16]
 8005522:	f7fe fe9d 	bl	8004260 <_SendPacket>
  RECORD_END();
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f383 8811 	msr	BASEPRI, r3
}
 800552c:	bf00      	nop
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20014240 	.word	0x20014240
 8005538:	20014210 	.word	0x20014210

0800553c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005544:	f3ef 8311 	mrs	r3, BASEPRI
 8005548:	f04f 0120 	mov.w	r1, #32
 800554c:	f381 8811 	msr	BASEPRI, r1
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	4819      	ldr	r0, [pc, #100]	; (80055b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005554:	f7fe fd92 	bl	800407c <_PreparePacket>
 8005558:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800555e:	4b17      	ldr	r3, [pc, #92]	; (80055bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e00b      	b.n	800558a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	b2da      	uxtb	r2, r3
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	1c59      	adds	r1, r3, #1
 800557a:	61f9      	str	r1, [r7, #28]
 800557c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	09db      	lsrs	r3, r3, #7
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b7f      	cmp	r3, #127	; 0x7f
 800558e:	d8f0      	bhi.n	8005572 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	61fa      	str	r2, [r7, #28]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80055a0:	2206      	movs	r2, #6
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	6938      	ldr	r0, [r7, #16]
 80055a6:	f7fe fe5b 	bl	8004260 <_SendPacket>
  RECORD_END();
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f383 8811 	msr	BASEPRI, r3
}
 80055b0:	bf00      	nop
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20014240 	.word	0x20014240
 80055bc:	20014210 	.word	0x20014210

080055c0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80055ca:	f3ef 8311 	mrs	r3, BASEPRI
 80055ce:	f04f 0120 	mov.w	r1, #32
 80055d2:	f381 8811 	msr	BASEPRI, r1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	4827      	ldr	r0, [pc, #156]	; (8005678 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80055da:	f7fe fd4f 	bl	800407c <_PreparePacket>
 80055de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055e4:	4b25      	ldr	r3, [pc, #148]	; (800567c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	623b      	str	r3, [r7, #32]
 80055f6:	e00b      	b.n	8005610 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	6279      	str	r1, [r7, #36]	; 0x24
 8005602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	09db      	lsrs	r3, r3, #7
 800560e:	623b      	str	r3, [r7, #32]
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	2b7f      	cmp	r3, #127	; 0x7f
 8005614:	d8f0      	bhi.n	80055f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	627a      	str	r2, [r7, #36]	; 0x24
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e00b      	b.n	8005648 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	1c59      	adds	r1, r3, #1
 8005638:	61f9      	str	r1, [r7, #28]
 800563a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	09db      	lsrs	r3, r3, #7
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b7f      	cmp	r3, #127	; 0x7f
 800564c:	d8f0      	bhi.n	8005630 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	61fa      	str	r2, [r7, #28]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800565e:	2207      	movs	r2, #7
 8005660:	68f9      	ldr	r1, [r7, #12]
 8005662:	6938      	ldr	r0, [r7, #16]
 8005664:	f7fe fdfc 	bl	8004260 <_SendPacket>
  RECORD_END();
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f383 8811 	msr	BASEPRI, r3
}
 800566e:	bf00      	nop
 8005670:	3728      	adds	r7, #40	; 0x28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20014240 	.word	0x20014240
 800567c:	20014210 	.word	0x20014210

08005680 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	; 0x30
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800568a:	4b3b      	ldr	r3, [pc, #236]	; (8005778 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d06d      	beq.n	800576e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005692:	4b39      	ldr	r3, [pc, #228]	; (8005778 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005698:	2300      	movs	r3, #0
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
 800569c:	e008      	b.n	80056b0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	3301      	adds	r3, #1
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d3f2      	bcc.n	800569e <SEGGER_SYSVIEW_SendModule+0x1e>
 80056b8:	e000      	b.n	80056bc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80056ba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d055      	beq.n	800576e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056c2:	f3ef 8311 	mrs	r3, BASEPRI
 80056c6:	f04f 0120 	mov.w	r1, #32
 80056ca:	f381 8811 	msr	BASEPRI, r1
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	482a      	ldr	r0, [pc, #168]	; (800577c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80056d2:	f7fe fcd3 	bl	800407c <_PreparePacket>
 80056d6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	e00b      	b.n	80056fe <SEGGER_SYSVIEW_SendModule+0x7e>
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	6279      	str	r1, [r7, #36]	; 0x24
 80056f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	09db      	lsrs	r3, r3, #7
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	2b7f      	cmp	r3, #127	; 0x7f
 8005702:	d8f0      	bhi.n	80056e6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	627a      	str	r2, [r7, #36]	; 0x24
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e00b      	b.n	8005738 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	61f9      	str	r1, [r7, #28]
 800572a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	09db      	lsrs	r3, r3, #7
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	d8f0      	bhi.n	8005720 <SEGGER_SYSVIEW_SendModule+0xa0>
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	61fa      	str	r2, [r7, #28]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2280      	movs	r2, #128	; 0x80
 8005754:	4619      	mov	r1, r3
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7fe fc40 	bl	8003fdc <_EncodeStr>
 800575c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800575e:	2216      	movs	r2, #22
 8005760:	68f9      	ldr	r1, [r7, #12]
 8005762:	6938      	ldr	r0, [r7, #16]
 8005764:	f7fe fd7c 	bl	8004260 <_SendPacket>
      RECORD_END();
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800576e:	bf00      	nop
 8005770:	3730      	adds	r7, #48	; 0x30
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20014238 	.word	0x20014238
 800577c:	20014240 	.word	0x20014240

08005780 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00f      	beq.n	80057ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800578e:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f2      	bne.n	8005794 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20014238 	.word	0x20014238

080057bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80057c2:	f3ef 8311 	mrs	r3, BASEPRI
 80057c6:	f04f 0120 	mov.w	r1, #32
 80057ca:	f381 8811 	msr	BASEPRI, r1
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	4817      	ldr	r0, [pc, #92]	; (8005830 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80057d2:	f7fe fc53 	bl	800407c <_PreparePacket>
 80057d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	4b14      	ldr	r3, [pc, #80]	; (8005834 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	e00b      	b.n	8005800 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1c59      	adds	r1, r3, #1
 80057f0:	6179      	str	r1, [r7, #20]
 80057f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	09db      	lsrs	r3, r3, #7
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2b7f      	cmp	r3, #127	; 0x7f
 8005804:	d8f0      	bhi.n	80057e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	617a      	str	r2, [r7, #20]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005816:	221b      	movs	r2, #27
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	68b8      	ldr	r0, [r7, #8]
 800581c:	f7fe fd20 	bl	8004260 <_SendPacket>
  RECORD_END();
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f383 8811 	msr	BASEPRI, r3
}
 8005826:	bf00      	nop
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20014240 	.word	0x20014240
 8005834:	2001423c 	.word	0x2001423c

08005838 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005838:	b40f      	push	{r0, r1, r2, r3}
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	461a      	mov	r2, r3
 800584a:	2100      	movs	r1, #0
 800584c:	6938      	ldr	r0, [r7, #16]
 800584e:	f7fe ff91 	bl	8004774 <_VPrintTarget>
  va_end(ParamList);
}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800585c:	b004      	add	sp, #16
 800585e:	4770      	bx	lr

08005860 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	; 0x28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005868:	f3ef 8311 	mrs	r3, BASEPRI
 800586c:	f04f 0120 	mov.w	r1, #32
 8005870:	f381 8811 	msr	BASEPRI, r1
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	4827      	ldr	r0, [pc, #156]	; (8005914 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005878:	f7fe fc00 	bl	800407c <_PreparePacket>
 800587c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	f7fe fbaa 	bl	8003fdc <_EncodeStr>
 8005888:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
 800588e:	2301      	movs	r3, #1
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	e00b      	b.n	80058ac <SEGGER_SYSVIEW_Warn+0x4c>
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	6279      	str	r1, [r7, #36]	; 0x24
 800589e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	09db      	lsrs	r3, r3, #7
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b7f      	cmp	r3, #127	; 0x7f
 80058b0:	d8f0      	bhi.n	8005894 <SEGGER_SYSVIEW_Warn+0x34>
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	627a      	str	r2, [r7, #36]	; 0x24
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e00b      	b.n	80058e4 <SEGGER_SYSVIEW_Warn+0x84>
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	61f9      	str	r1, [r7, #28]
 80058d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	09db      	lsrs	r3, r3, #7
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b7f      	cmp	r3, #127	; 0x7f
 80058e8:	d8f0      	bhi.n	80058cc <SEGGER_SYSVIEW_Warn+0x6c>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	61fa      	str	r2, [r7, #28]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058fa:	221a      	movs	r2, #26
 80058fc:	68f9      	ldr	r1, [r7, #12]
 80058fe:	6938      	ldr	r0, [r7, #16]
 8005900:	f7fe fcae 	bl	8004260 <_SendPacket>
  RECORD_END();
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f383 8811 	msr	BASEPRI, r3
}
 800590a:	bf00      	nop
 800590c:	3728      	adds	r7, #40	; 0x28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20014240 	.word	0x20014240

08005918 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800591e:	7e1b      	ldrb	r3, [r3, #24]
 8005920:	4619      	mov	r1, r3
 8005922:	4a13      	ldr	r2, [pc, #76]	; (8005970 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005924:	460b      	mov	r3, r1
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	440b      	add	r3, r1
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4413      	add	r3, r2
 800592e:	336c      	adds	r3, #108	; 0x6c
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b0e      	ldr	r3, [pc, #56]	; (800596c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005934:	7e1b      	ldrb	r3, [r3, #24]
 8005936:	4618      	mov	r0, r3
 8005938:	490d      	ldr	r1, [pc, #52]	; (8005970 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800593a:	4603      	mov	r3, r0
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4403      	add	r3, r0
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	3370      	adds	r3, #112	; 0x70
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d00b      	beq.n	8005964 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800594c:	4b07      	ldr	r3, [pc, #28]	; (800596c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800594e:	789b      	ldrb	r3, [r3, #2]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005956:	2201      	movs	r2, #1
 8005958:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800595a:	f7fe fb9b 	bl	8004094 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800595e:	4b03      	ldr	r3, [pc, #12]	; (800596c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005960:	2200      	movs	r2, #0
 8005962:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005966:	781b      	ldrb	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20014210 	.word	0x20014210
 8005970:	20014370 	.word	0x20014370

08005974 <__libc_init_array>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	4d0d      	ldr	r5, [pc, #52]	; (80059ac <__libc_init_array+0x38>)
 8005978:	4c0d      	ldr	r4, [pc, #52]	; (80059b0 <__libc_init_array+0x3c>)
 800597a:	1b64      	subs	r4, r4, r5
 800597c:	10a4      	asrs	r4, r4, #2
 800597e:	2600      	movs	r6, #0
 8005980:	42a6      	cmp	r6, r4
 8005982:	d109      	bne.n	8005998 <__libc_init_array+0x24>
 8005984:	4d0b      	ldr	r5, [pc, #44]	; (80059b4 <__libc_init_array+0x40>)
 8005986:	4c0c      	ldr	r4, [pc, #48]	; (80059b8 <__libc_init_array+0x44>)
 8005988:	f000 f83c 	bl	8005a04 <_init>
 800598c:	1b64      	subs	r4, r4, r5
 800598e:	10a4      	asrs	r4, r4, #2
 8005990:	2600      	movs	r6, #0
 8005992:	42a6      	cmp	r6, r4
 8005994:	d105      	bne.n	80059a2 <__libc_init_array+0x2e>
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	f855 3b04 	ldr.w	r3, [r5], #4
 800599c:	4798      	blx	r3
 800599e:	3601      	adds	r6, #1
 80059a0:	e7ee      	b.n	8005980 <__libc_init_array+0xc>
 80059a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a6:	4798      	blx	r3
 80059a8:	3601      	adds	r6, #1
 80059aa:	e7f2      	b.n	8005992 <__libc_init_array+0x1e>
 80059ac:	08005bc4 	.word	0x08005bc4
 80059b0:	08005bc4 	.word	0x08005bc4
 80059b4:	08005bc4 	.word	0x08005bc4
 80059b8:	08005bc8 	.word	0x08005bc8

080059bc <memcmp>:
 80059bc:	b530      	push	{r4, r5, lr}
 80059be:	3901      	subs	r1, #1
 80059c0:	2400      	movs	r4, #0
 80059c2:	42a2      	cmp	r2, r4
 80059c4:	d101      	bne.n	80059ca <memcmp+0xe>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e005      	b.n	80059d6 <memcmp+0x1a>
 80059ca:	5d03      	ldrb	r3, [r0, r4]
 80059cc:	3401      	adds	r4, #1
 80059ce:	5d0d      	ldrb	r5, [r1, r4]
 80059d0:	42ab      	cmp	r3, r5
 80059d2:	d0f6      	beq.n	80059c2 <memcmp+0x6>
 80059d4:	1b58      	subs	r0, r3, r5
 80059d6:	bd30      	pop	{r4, r5, pc}

080059d8 <memcpy>:
 80059d8:	440a      	add	r2, r1
 80059da:	4291      	cmp	r1, r2
 80059dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80059e0:	d100      	bne.n	80059e4 <memcpy+0xc>
 80059e2:	4770      	bx	lr
 80059e4:	b510      	push	{r4, lr}
 80059e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ee:	4291      	cmp	r1, r2
 80059f0:	d1f9      	bne.n	80059e6 <memcpy+0xe>
 80059f2:	bd10      	pop	{r4, pc}

080059f4 <memset>:
 80059f4:	4402      	add	r2, r0
 80059f6:	4603      	mov	r3, r0
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d100      	bne.n	80059fe <memset+0xa>
 80059fc:	4770      	bx	lr
 80059fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005a02:	e7f9      	b.n	80059f8 <memset+0x4>

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
