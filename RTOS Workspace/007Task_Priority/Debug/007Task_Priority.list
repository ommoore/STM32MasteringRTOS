
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000558c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800586c  0800586c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005874  08005874  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800587c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001440c  20000020  0800589c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001442c  0800589c  0002442c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d47  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c6  00000000  00000000  00037d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002472a  00000000  00000000  0003d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001932c  00000000  00000000  00061922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc6e1  00000000  00000000  0007ac4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015732f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a98  00000000  00000000  00157384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000020 	.word	0x20000020
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005744 	.word	0x08005744

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000024 	.word	0x20000024
 800020c:	08005744 	.word	0x08005744

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014384 	.word	0x20014384

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b96e 	b.w	80005a8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	4604      	mov	r4, r0
 80002ec:	468c      	mov	ip, r1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8083 	bne.w	80003fa <__udivmoddi4+0x116>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4617      	mov	r7, r2
 80002f8:	d947      	bls.n	800038a <__udivmoddi4+0xa6>
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	b142      	cbz	r2, 8000312 <__udivmoddi4+0x2e>
 8000300:	f1c2 0020 	rsb	r0, r2, #32
 8000304:	fa24 f000 	lsr.w	r0, r4, r0
 8000308:	4091      	lsls	r1, r2
 800030a:	4097      	lsls	r7, r2
 800030c:	ea40 0c01 	orr.w	ip, r0, r1
 8000310:	4094      	lsls	r4, r2
 8000312:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fbbc f6f8 	udiv	r6, ip, r8
 800031c:	fa1f fe87 	uxth.w	lr, r7
 8000320:	fb08 c116 	mls	r1, r8, r6, ip
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f10e 	mul.w	r1, r6, lr
 800032c:	4299      	cmp	r1, r3
 800032e:	d909      	bls.n	8000344 <__udivmoddi4+0x60>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 8119 	bcs.w	800056c <__udivmoddi4+0x288>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 8116 	bls.w	800056c <__udivmoddi4+0x288>
 8000340:	3e02      	subs	r6, #2
 8000342:	443b      	add	r3, r7
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 fe0e 	mul.w	lr, r0, lr
 8000358:	45a6      	cmp	lr, r4
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x8c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	f080 8105 	bcs.w	8000570 <__udivmoddi4+0x28c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f240 8102 	bls.w	8000570 <__udivmoddi4+0x28c>
 800036c:	3802      	subs	r0, #2
 800036e:	443c      	add	r4, r7
 8000370:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000374:	eba4 040e 	sub.w	r4, r4, lr
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa0>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	b902      	cbnz	r2, 800038e <__udivmoddi4+0xaa>
 800038c:	deff      	udf	#255	; 0xff
 800038e:	fab2 f282 	clz	r2, r2
 8000392:	2a00      	cmp	r2, #0
 8000394:	d150      	bne.n	8000438 <__udivmoddi4+0x154>
 8000396:	1bcb      	subs	r3, r1, r7
 8000398:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	2601      	movs	r6, #1
 80003a2:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a6:	0c21      	lsrs	r1, r4, #16
 80003a8:	fb0e 331c 	mls	r3, lr, ip, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb08 f30c 	mul.w	r3, r8, ip
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0xe4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0xe2>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	f200 80e9 	bhi.w	8000598 <__udivmoddi4+0x2b4>
 80003c6:	4684      	mov	ip, r0
 80003c8:	1ac9      	subs	r1, r1, r3
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x10c>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x10a>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	f200 80d9 	bhi.w	80005a0 <__udivmoddi4+0x2bc>
 80003ee:	4618      	mov	r0, r3
 80003f0:	eba4 0408 	sub.w	r4, r4, r8
 80003f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f8:	e7bf      	b.n	800037a <__udivmoddi4+0x96>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x12e>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80b1 	beq.w	8000566 <__udivmoddi4+0x282>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x1cc>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0x140>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80b8 	bhi.w	8000594 <__udivmoddi4+0x2b0>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0103 	sbc.w	r1, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	468c      	mov	ip, r1
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0a8      	beq.n	8000384 <__udivmoddi4+0xa0>
 8000432:	e9c5 4c00 	strd	r4, ip, [r5]
 8000436:	e7a5      	b.n	8000384 <__udivmoddi4+0xa0>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f603 	lsr.w	r6, r0, r3
 8000440:	4097      	lsls	r7, r2
 8000442:	fa01 f002 	lsl.w	r0, r1, r2
 8000446:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044a:	40d9      	lsrs	r1, r3
 800044c:	4330      	orrs	r0, r6
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	fbb1 f6fe 	udiv	r6, r1, lr
 8000454:	fa1f f887 	uxth.w	r8, r7
 8000458:	fb0e 1116 	mls	r1, lr, r6, r1
 800045c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000460:	fb06 f108 	mul.w	r1, r6, r8
 8000464:	4299      	cmp	r1, r3
 8000466:	fa04 f402 	lsl.w	r4, r4, r2
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x19c>
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000472:	f080 808d 	bcs.w	8000590 <__udivmoddi4+0x2ac>
 8000476:	4299      	cmp	r1, r3
 8000478:	f240 808a 	bls.w	8000590 <__udivmoddi4+0x2ac>
 800047c:	3e02      	subs	r6, #2
 800047e:	443b      	add	r3, r7
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b281      	uxth	r1, r0
 8000484:	fbb3 f0fe 	udiv	r0, r3, lr
 8000488:	fb0e 3310 	mls	r3, lr, r0, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb00 f308 	mul.w	r3, r0, r8
 8000494:	428b      	cmp	r3, r1
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x1c4>
 8000498:	1879      	adds	r1, r7, r1
 800049a:	f100 3cff 	add.w	ip, r0, #4294967295
 800049e:	d273      	bcs.n	8000588 <__udivmoddi4+0x2a4>
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d971      	bls.n	8000588 <__udivmoddi4+0x2a4>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4439      	add	r1, r7
 80004a8:	1acb      	subs	r3, r1, r3
 80004aa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ae:	e778      	b.n	80003a2 <__udivmoddi4+0xbe>
 80004b0:	f1c6 0c20 	rsb	ip, r6, #32
 80004b4:	fa03 f406 	lsl.w	r4, r3, r6
 80004b8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004bc:	431c      	orrs	r4, r3
 80004be:	fa20 f70c 	lsr.w	r7, r0, ip
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ca:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ce:	431f      	orrs	r7, r3
 80004d0:	0c3b      	lsrs	r3, r7, #16
 80004d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d6:	fa1f f884 	uxth.w	r8, r4
 80004da:	fb0e 1119 	mls	r1, lr, r9, r1
 80004de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e2:	fb09 fa08 	mul.w	sl, r9, r8
 80004e6:	458a      	cmp	sl, r1
 80004e8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ec:	fa00 f306 	lsl.w	r3, r0, r6
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x220>
 80004f2:	1861      	adds	r1, r4, r1
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d248      	bcs.n	800058c <__udivmoddi4+0x2a8>
 80004fa:	458a      	cmp	sl, r1
 80004fc:	d946      	bls.n	800058c <__udivmoddi4+0x2a8>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	4421      	add	r1, r4
 8000504:	eba1 010a 	sub.w	r1, r1, sl
 8000508:	b2bf      	uxth	r7, r7
 800050a:	fbb1 f0fe 	udiv	r0, r1, lr
 800050e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000512:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45b8      	cmp	r8, r7
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x24a>
 800051e:	19e7      	adds	r7, r4, r7
 8000520:	f100 31ff 	add.w	r1, r0, #4294967295
 8000524:	d22e      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000526:	45b8      	cmp	r8, r7
 8000528:	d92c      	bls.n	8000584 <__udivmoddi4+0x2a0>
 800052a:	3802      	subs	r0, #2
 800052c:	4427      	add	r7, r4
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba7 0708 	sub.w	r7, r7, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454f      	cmp	r7, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	4649      	mov	r1, r9
 8000540:	d31a      	bcc.n	8000578 <__udivmoddi4+0x294>
 8000542:	d017      	beq.n	8000574 <__udivmoddi4+0x290>
 8000544:	b15d      	cbz	r5, 800055e <__udivmoddi4+0x27a>
 8000546:	ebb3 020e 	subs.w	r2, r3, lr
 800054a:	eb67 0701 	sbc.w	r7, r7, r1
 800054e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000552:	40f2      	lsrs	r2, r6
 8000554:	ea4c 0202 	orr.w	r2, ip, r2
 8000558:	40f7      	lsrs	r7, r6
 800055a:	e9c5 2700 	strd	r2, r7, [r5]
 800055e:	2600      	movs	r6, #0
 8000560:	4631      	mov	r1, r6
 8000562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000566:	462e      	mov	r6, r5
 8000568:	4628      	mov	r0, r5
 800056a:	e70b      	b.n	8000384 <__udivmoddi4+0xa0>
 800056c:	4606      	mov	r6, r0
 800056e:	e6e9      	b.n	8000344 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fd      	b.n	8000370 <__udivmoddi4+0x8c>
 8000574:	4543      	cmp	r3, r8
 8000576:	d2e5      	bcs.n	8000544 <__udivmoddi4+0x260>
 8000578:	ebb8 0e02 	subs.w	lr, r8, r2
 800057c:	eb69 0104 	sbc.w	r1, r9, r4
 8000580:	3801      	subs	r0, #1
 8000582:	e7df      	b.n	8000544 <__udivmoddi4+0x260>
 8000584:	4608      	mov	r0, r1
 8000586:	e7d2      	b.n	800052e <__udivmoddi4+0x24a>
 8000588:	4660      	mov	r0, ip
 800058a:	e78d      	b.n	80004a8 <__udivmoddi4+0x1c4>
 800058c:	4681      	mov	r9, r0
 800058e:	e7b9      	b.n	8000504 <__udivmoddi4+0x220>
 8000590:	4666      	mov	r6, ip
 8000592:	e775      	b.n	8000480 <__udivmoddi4+0x19c>
 8000594:	4630      	mov	r0, r6
 8000596:	e74a      	b.n	800042e <__udivmoddi4+0x14a>
 8000598:	f1ac 0c02 	sub.w	ip, ip, #2
 800059c:	4439      	add	r1, r7
 800059e:	e713      	b.n	80003c8 <__udivmoddi4+0xe4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e724      	b.n	80003f0 <__udivmoddi4+0x10c>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fad9 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f84f 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8bf 	bl	800073c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 80005be:	4820      	ldr	r0, [pc, #128]	; (8000640 <main+0x94>)
 80005c0:	f003 fb52 	bl	8003c68 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= (1 << 0);
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <main+0x98>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <main+0x98>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005d0:	f003 f90c 	bl	80037ec <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start(); //comment out if using UART based continuous recording

  //Create Task 1: Red LED
  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2302      	movs	r3, #2
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	22c8      	movs	r2, #200	; 0xc8
 80005e2:	4919      	ldr	r1, [pc, #100]	; (8000648 <main+0x9c>)
 80005e4:	4819      	ldr	r0, [pc, #100]	; (800064c <main+0xa0>)
 80005e6:	f001 fef4 	bl	80023d2 <xTaskCreate>
 80005ea:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d00a      	beq.n	8000608 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f6:	f383 8811 	msr	BASEPRI, r3
 80005fa:	f3bf 8f6f 	isb	sy
 80005fe:	f3bf 8f4f 	dsb	sy
 8000602:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000604:	bf00      	nop
 8000606:	e7fe      	b.n	8000606 <main+0x5a>

  //Create Task 2: Yellow LED
  status = xTaskCreate(task2_handler, "Task-2", 200, NULL, 3, &task2_handle);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2303      	movs	r3, #3
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	22c8      	movs	r2, #200	; 0xc8
 8000614:	490e      	ldr	r1, [pc, #56]	; (8000650 <main+0xa4>)
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <main+0xa8>)
 8000618:	f001 fedb 	bl	80023d2 <xTaskCreate>
 800061c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d00a      	beq.n	800063a <main+0x8e>
        __asm volatile
 8000624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000628:	f383 8811 	msr	BASEPRI, r3
 800062c:	f3bf 8f6f 	isb	sy
 8000630:	f3bf 8f4f 	dsb	sy
 8000634:	60fb      	str	r3, [r7, #12]
    }
 8000636:	bf00      	nop
 8000638:	e7fe      	b.n	8000638 <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800063a:	f002 f907 	bl	800284c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x92>
 8000640:	0007a120 	.word	0x0007a120
 8000644:	e0001000 	.word	0xe0001000
 8000648:	0800575c 	.word	0x0800575c
 800064c:	08000909 	.word	0x08000909
 8000650:	08005764 	.word	0x08005764
 8000654:	08000929 	.word	0x08000929

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 f864 	bl	8005734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <SystemClock_Config+0xdc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a2b      	ldr	r2, [pc, #172]	; (8000734 <SystemClock_Config+0xdc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <SystemClock_Config+0xdc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <SystemClock_Config+0xe0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a25      	ldr	r2, [pc, #148]	; (8000738 <SystemClock_Config+0xe0>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SystemClock_Config+0xe0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006cc:	23b4      	movs	r3, #180	; 0xb4
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f8af 	bl	8001844 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006ec:	f000 f94e 	bl	800098c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f0:	f000 fd6e 	bl	80011d0 <HAL_PWREx_EnableOverDrive>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006fa:	f000 f947 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fda7 	bl	8001270 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000728:	f000 f930 	bl	800098c <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b43      	ldr	r3, [pc, #268]	; (8000864 <MX_GPIO_Init+0x128>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a42      	ldr	r2, [pc, #264]	; (8000864 <MX_GPIO_Init+0x128>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b40      	ldr	r3, [pc, #256]	; (8000864 <MX_GPIO_Init+0x128>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <MX_GPIO_Init+0x128>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a3b      	ldr	r2, [pc, #236]	; (8000864 <MX_GPIO_Init+0x128>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <MX_GPIO_Init+0x128>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_GPIO_Init+0x128>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a34      	ldr	r2, [pc, #208]	; (8000864 <MX_GPIO_Init+0x128>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0x128>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <MX_GPIO_Init+0x128>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <MX_GPIO_Init+0x128>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_GPIO_Init+0x128>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	4828      	ldr	r0, [pc, #160]	; (8000868 <MX_GPIO_Init+0x12c>)
 80007c8:	f000 fcaa 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80007d2:	4826      	ldr	r0, [pc, #152]	; (800086c <MX_GPIO_Init+0x130>)
 80007d4:	f000 fca4 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 80007d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <MX_GPIO_Init+0x134>)
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4821      	ldr	r0, [pc, #132]	; (8000874 <MX_GPIO_Init+0x138>)
 80007ee:	f000 fb03 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f2:	230c      	movs	r3, #12
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000802:	2307      	movs	r3, #7
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4816      	ldr	r0, [pc, #88]	; (8000868 <MX_GPIO_Init+0x12c>)
 800080e:	f000 faf3 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000812:	2320      	movs	r3, #32
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <MX_GPIO_Init+0x12c>)
 800082a:	f000 fae5 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_YELLOW_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin;
 800082e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <MX_GPIO_Init+0x130>)
 8000848:	f000 fad6 	bl	8000df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2106      	movs	r1, #6
 8000850:	2028      	movs	r0, #40	; 0x28
 8000852:	f000 faa7 	bl	8000da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000856:	2028      	movs	r0, #40	; 0x28
 8000858:	f000 fac0 	bl	8000ddc <HAL_NVIC_EnableIRQ>

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000
 800086c:	40020400 	.word	0x40020400
 8000870:	10110000 	.word	0x10110000
 8000874:	40020800 	.word	0x40020800

08000878 <switch_priority>:

/* USER CODE BEGIN 4 */

void switch_priority(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000882:	f002 fd67 	bl	8003354 <vPortEnterCritical>
	if(status_button) {
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <switch_priority+0x84>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d004      	beq.n	8000898 <switch_priority+0x20>
		status_button = 0;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <switch_priority+0x84>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000898:	f002 fd8c 	bl	80033b4 <vPortExitCritical>

	if(switch_priority) {
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d027      	beq.n	80008f2 <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task-1");
 80008a2:	4817      	ldr	r0, [pc, #92]	; (8000900 <switch_priority+0x88>)
 80008a4:	f002 f95c 	bl	8002b60 <xTaskGetHandle>
 80008a8:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 80008aa:	4816      	ldr	r0, [pc, #88]	; (8000904 <switch_priority+0x8c>)
 80008ac:	f002 f958 	bl	8002b60 <xTaskGetHandle>
 80008b0:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 80008b2:	6938      	ldr	r0, [r7, #16]
 80008b4:	f001 fef0 	bl	8002698 <uxTaskPriorityGet>
 80008b8:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f001 feec 	bl	8002698 <uxTaskPriorityGet>
 80008c0:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 80008c2:	f002 fb8b 	bl	8002fdc <xTaskGetCurrentTaskHandle>
 80008c6:	6038      	str	r0, [r7, #0]

		if(curr == t1) {
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d108      	bne.n	80008e2 <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	6938      	ldr	r0, [r7, #16]
 80008d4:	f001 fefa 	bl	80026cc <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f001 fef6 	bl	80026cc <vTaskPrioritySet>
		} else {
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}
}
 80008e0:	e007      	b.n	80008f2 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f001 fef1 	bl	80026cc <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	6938      	ldr	r0, [r7, #16]
 80008ee:	f001 feed 	bl	80026cc <vTaskPrioritySet>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000003c 	.word	0x2000003c
 8000900:	0800575c 	.word	0x0800575c
 8000904:	08005764 	.word	0x08005764

08000908 <task1_handler>:

static void task1_handler(void *parameters) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

	while(1) {
		HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <task1_handler+0x1c>)
 8000914:	f000 fc1d 	bl	8001152 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000918:	2064      	movs	r0, #100	; 0x64
 800091a:	f000 f967 	bl	8000bec <HAL_Delay>
		switch_priority();
 800091e:	f7ff ffab 	bl	8000878 <switch_priority>
		HAL_GPIO_TogglePin(GPIOB, LED_RED_Pin);
 8000922:	e7f5      	b.n	8000910 <task1_handler+0x8>
 8000924:	40020400 	.word	0x40020400

08000928 <task2_handler>:
	}
}

static void task2_handler(void *parameters) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	while(1) {
		HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_Pin);
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <task2_handler+0x20>)
 8000936:	f000 fc0c 	bl	8001152 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800093a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093e:	f000 f955 	bl	8000bec <HAL_Delay>
		switch_priority();
 8000942:	f7ff ff99 	bl	8000878 <switch_priority>
		HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_Pin);
 8000946:	e7f3      	b.n	8000930 <task2_handler+0x8>
 8000948:	40020400 	.word	0x40020400

0800094c <button_interrupt_handler>:
	}
}

void button_interrupt_handler(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

	traceISR_ENTER();
 8000950:	f004 fbde 	bl	8005110 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <button_interrupt_handler+0x18>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 800095a:	f004 fc1b 	bl	8005194 <SEGGER_SYSVIEW_RecordExitISR>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000003c 	.word	0x2000003c

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 f917 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40001000 	.word	0x40001000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009d6:	f002 fc3f 	bl	8003258 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	2036      	movs	r0, #54	; 0x36
 80009fe:	f000 f9d1 	bl	8000da4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a02:	2036      	movs	r0, #54	; 0x36
 8000a04:	f000 f9ea 	bl	8000ddc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <HAL_InitTick+0xa4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <HAL_InitTick+0xa4>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <HAL_InitTick+0xa4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fd24 	bl	800147c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a34:	f000 fd0e 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <HAL_InitTick+0xa8>)
 8000a42:	fba2 2303 	umull	r2, r3, r2, r3
 8000a46:	0c9b      	lsrs	r3, r3, #18
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_InitTick+0xac>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <HAL_InitTick+0xb0>)
 8000a50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_InitTick+0xac>)
 8000a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_InitTick+0xac>)
 8000a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_InitTick+0xac>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_InitTick+0xac>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <HAL_InitTick+0xac>)
 8000a6e:	f001 f987 	bl	8001d80 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d104      	bne.n	8000a82 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <HAL_InitTick+0xac>)
 8000a7a:	f001 f9db 	bl	8001e34 <HAL_TIM_Base_Start_IT>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	20014338 	.word	0x20014338
 8000a98:	40001000 	.word	0x40001000

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  button_interrupt_handler();
 8000acc:	f7ff ff3e 	bl	800094c <button_interrupt_handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad4:	f000 fb58 	bl	8001188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM6_DAC_IRQHandler+0x10>)
 8000ae2:	f001 fa17 	bl	8001f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20014338 	.word	0x20014338

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1a:	490e      	ldr	r1, [pc, #56]	; (8000b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b30:	4c0b      	ldr	r4, [pc, #44]	; (8000b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff ffd7 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f004 fdb7 	bl	80056b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd31 	bl	80005ac <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b58:	0800587c 	.word	0x0800587c
  ldr r2, =_sbss
 8000b5c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b60:	2001442c 	.word	0x2001442c

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f8fc 	bl	8000d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff ff26 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fefc 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20014380 	.word	0x20014380

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20014380 	.word	0x20014380

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff4c 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db6:	f7ff ff61 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	6978      	ldr	r0, [r7, #20]
 8000dc2:	f7ff ffb1 	bl	8000d28 <NVIC_EncodePriority>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff80 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff54 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e165      	b.n	80010e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8154 	bne.w	80010da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d005      	beq.n	8000e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d130      	bne.n	8000eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	f003 0201 	and.w	r2, r3, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d017      	beq.n	8000ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d123      	bne.n	8000f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3208      	adds	r2, #8
 8000f36:	69b9      	ldr	r1, [r7, #24]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0203 	and.w	r2, r3, #3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80ae 	beq.w	80010da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <HAL_GPIO_Init+0x304>)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_GPIO_Init+0x308>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d025      	beq.n	8001012 <HAL_GPIO_Init+0x21a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d01f      	beq.n	800100e <HAL_GPIO_Init+0x216>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x310>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d019      	beq.n	800100a <HAL_GPIO_Init+0x212>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <HAL_GPIO_Init+0x314>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0x20e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_GPIO_Init+0x318>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00d      	beq.n	8001002 <HAL_GPIO_Init+0x20a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <HAL_GPIO_Init+0x31c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_GPIO_Init+0x206>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x320>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_GPIO_Init+0x202>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e00c      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e00a      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8000ffe:	2305      	movs	r3, #5
 8001000:	e008      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001002:	2304      	movs	r3, #4
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001006:	2303      	movs	r3, #3
 8001008:	e004      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001012:	2300      	movs	r3, #0
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	f002 0203 	and.w	r2, r2, #3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4093      	lsls	r3, r2
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001024:	4935      	ldr	r1, [pc, #212]	; (80010fc <HAL_GPIO_Init+0x304>)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3302      	adds	r3, #2
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_GPIO_Init+0x324>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001056:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_GPIO_Init+0x324>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_GPIO_Init+0x324>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001080:	4a26      	ldr	r2, [pc, #152]	; (800111c <HAL_GPIO_Init+0x324>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_GPIO_Init+0x324>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_GPIO_Init+0x324>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_GPIO_Init+0x324>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_GPIO_Init+0x324>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3301      	adds	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	f67f ae96 	bls.w	8000e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020400 	.word	0x40020400
 8001108:	40020800 	.word	0x40020800
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40021000 	.word	0x40021000
 8001114:	40021400 	.word	0x40021400
 8001118:	40021800 	.word	0x40021800
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800113c:	e003      	b.n	8001146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001152:	b480      	push	{r7}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	460b      	mov	r3, r1
 800115c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001164:	887a      	ldrh	r2, [r7, #2]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4013      	ands	r3, r2
 800116a:	041a      	lsls	r2, r3, #16
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43d9      	mvns	r1, r3
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	400b      	ands	r3, r1
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f806 	bl	80011b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013c00 	.word	0x40013c00

080011b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_PWREx_EnableOverDrive+0x90>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_PWREx_EnableOverDrive+0x90>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_PWREx_EnableOverDrive+0x90>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_PWREx_EnableOverDrive+0x94>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011fc:	f7ff fcea 	bl	8000bd4 <HAL_GetTick>
 8001200:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001202:	e009      	b.n	8001218 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001204:	f7ff fce6 	bl	8000bd4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001212:	d901      	bls.n	8001218 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e01f      	b.n	8001258 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <HAL_PWREx_EnableOverDrive+0x98>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001224:	d1ee      	bne.n	8001204 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122c:	f7ff fcd2 	bl	8000bd4 <HAL_GetTick>
 8001230:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001232:	e009      	b.n	8001248 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001234:	f7ff fcce 	bl	8000bd4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001242:	d901      	bls.n	8001248 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e007      	b.n	8001258 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <HAL_PWREx_EnableOverDrive+0x98>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001254:	d1ee      	bne.n	8001234 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	420e0040 	.word	0x420e0040
 8001268:	40007000 	.word	0x40007000
 800126c:	420e0044 	.word	0x420e0044

08001270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0cc      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90c      	bls.n	80012ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b65      	ldr	r3, [pc, #404]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b8      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c4:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	4b50      	ldr	r3, [pc, #320]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	494d      	ldr	r1, [pc, #308]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d044      	beq.n	8001390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d119      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e07f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132a:	2b03      	cmp	r3, #3
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	4b3f      	ldr	r3, [pc, #252]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e067      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f023 0203 	bic.w	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4934      	ldr	r1, [pc, #208]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001360:	f7ff fc38 	bl	8000bd4 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	e00a      	b.n	800137e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001368:	f7ff fc34 	bl	8000bd4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e04f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 020c 	and.w	r2, r3, #12
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d1eb      	bne.n	8001368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d20c      	bcs.n	80013b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e032      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4916      	ldr	r1, [pc, #88]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013f6:	f000 f873 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	5ccb      	ldrb	r3, [r1, r3]
 800140a:	fa22 f303 	lsr.w	r3, r2, r3
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_ClockConfig+0x1c8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fae6 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023c00 	.word	0x40023c00
 800142c:	40023800 	.word	0x40023800
 8001430:	0800583c 	.word	0x0800583c
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004

0800143c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_RCC_GetHCLKFreq+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001458:	f7ff fff0 	bl	800143c <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0a9b      	lsrs	r3, r3, #10
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	0800584c 	.word	0x0800584c

0800147c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	220f      	movs	r2, #15
 800148a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_RCC_GetClockConfig+0x60>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 020f 	and.w	r2, r3, #15
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	601a      	str	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40023c00 	.word	0x40023c00

080014e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014e4:	b088      	sub	sp, #32
 80014e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014fc:	4bce      	ldr	r3, [pc, #824]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b0c      	cmp	r3, #12
 8001506:	f200 818d 	bhi.w	8001824 <HAL_RCC_GetSysClockFreq+0x344>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <HAL_RCC_GetSysClockFreq+0x30>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001545 	.word	0x08001545
 8001514:	08001825 	.word	0x08001825
 8001518:	08001825 	.word	0x08001825
 800151c:	08001825 	.word	0x08001825
 8001520:	0800154b 	.word	0x0800154b
 8001524:	08001825 	.word	0x08001825
 8001528:	08001825 	.word	0x08001825
 800152c:	08001825 	.word	0x08001825
 8001530:	08001551 	.word	0x08001551
 8001534:	08001825 	.word	0x08001825
 8001538:	08001825 	.word	0x08001825
 800153c:	08001825 	.word	0x08001825
 8001540:	080016c5 	.word	0x080016c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001544:	4bbd      	ldr	r3, [pc, #756]	; (800183c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001546:	61bb      	str	r3, [r7, #24]
       break;
 8001548:	e16f      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800154a:	4bbd      	ldr	r3, [pc, #756]	; (8001840 <HAL_RCC_GetSysClockFreq+0x360>)
 800154c:	61bb      	str	r3, [r7, #24]
      break;
 800154e:	e16c      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001550:	4bb9      	ldr	r3, [pc, #740]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001558:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800155a:	4bb7      	ldr	r3, [pc, #732]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d053      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001566:	4bb4      	ldr	r3, [pc, #720]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	099b      	lsrs	r3, r3, #6
 800156c:	461a      	mov	r2, r3
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	ea02 0400 	and.w	r4, r2, r0
 800157e:	603c      	str	r4, [r7, #0]
 8001580:	400b      	ands	r3, r1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	014b      	lsls	r3, r1, #5
 8001596:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800159a:	0142      	lsls	r2, r0, #5
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	1ac0      	subs	r0, r0, r3
 80015a4:	462b      	mov	r3, r5
 80015a6:	eb61 0103 	sbc.w	r1, r1, r3
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	018b      	lsls	r3, r1, #6
 80015b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015b8:	0182      	lsls	r2, r0, #6
 80015ba:	1a12      	subs	r2, r2, r0
 80015bc:	eb63 0301 	sbc.w	r3, r3, r1
 80015c0:	f04f 0000 	mov.w	r0, #0
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	00d9      	lsls	r1, r3, #3
 80015ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015ce:	00d0      	lsls	r0, r2, #3
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4621      	mov	r1, r4
 80015d6:	1852      	adds	r2, r2, r1
 80015d8:	4629      	mov	r1, r5
 80015da:	eb43 0101 	adc.w	r1, r3, r1
 80015de:	460b      	mov	r3, r1
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	0259      	lsls	r1, r3, #9
 80015ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015ee:	0250      	lsls	r0, r2, #9
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	f7fe fe58 	bl	80002b4 <__aeabi_uldivmod>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4613      	mov	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	e04c      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160e:	4b8a      	ldr	r3, [pc, #552]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	099b      	lsrs	r3, r3, #6
 8001614:	461a      	mov	r2, r3
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	ea02 0a00 	and.w	sl, r2, r0
 8001626:	ea03 0b01 	and.w	fp, r3, r1
 800162a:	4650      	mov	r0, sl
 800162c:	4659      	mov	r1, fp
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	014b      	lsls	r3, r1, #5
 8001638:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800163c:	0142      	lsls	r2, r0, #5
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	ebb0 000a 	subs.w	r0, r0, sl
 8001646:	eb61 010b 	sbc.w	r1, r1, fp
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	018b      	lsls	r3, r1, #6
 8001654:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001658:	0182      	lsls	r2, r0, #6
 800165a:	1a12      	subs	r2, r2, r0
 800165c:	eb63 0301 	sbc.w	r3, r3, r1
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	00d9      	lsls	r1, r3, #3
 800166a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800166e:	00d0      	lsls	r0, r2, #3
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	eb12 020a 	adds.w	r2, r2, sl
 8001678:	eb43 030b 	adc.w	r3, r3, fp
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	0299      	lsls	r1, r3, #10
 8001686:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800168a:	0290      	lsls	r0, r2, #10
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	461a      	mov	r2, r3
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	f7fe fe0a 	bl	80002b4 <__aeabi_uldivmod>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4613      	mov	r3, r2
 80016a6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016a8:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	3301      	adds	r3, #1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	61bb      	str	r3, [r7, #24]
      break;
 80016c2:	e0b2      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c4:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d04d      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	461a      	mov	r2, r3
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	ea02 0800 	and.w	r8, r2, r0
 80016f2:	ea03 0901 	and.w	r9, r3, r1
 80016f6:	4640      	mov	r0, r8
 80016f8:	4649      	mov	r1, r9
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	014b      	lsls	r3, r1, #5
 8001704:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001708:	0142      	lsls	r2, r0, #5
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	ebb0 0008 	subs.w	r0, r0, r8
 8001712:	eb61 0109 	sbc.w	r1, r1, r9
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	018b      	lsls	r3, r1, #6
 8001720:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001724:	0182      	lsls	r2, r0, #6
 8001726:	1a12      	subs	r2, r2, r0
 8001728:	eb63 0301 	sbc.w	r3, r3, r1
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	f04f 0100 	mov.w	r1, #0
 8001734:	00d9      	lsls	r1, r3, #3
 8001736:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800173a:	00d0      	lsls	r0, r2, #3
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	eb12 0208 	adds.w	r2, r2, r8
 8001744:	eb43 0309 	adc.w	r3, r3, r9
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	0259      	lsls	r1, r3, #9
 8001752:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001756:	0250      	lsls	r0, r2, #9
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	461a      	mov	r2, r3
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	f7fe fda4 	bl	80002b4 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	e04a      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001776:	4b30      	ldr	r3, [pc, #192]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	099b      	lsrs	r3, r3, #6
 800177c:	461a      	mov	r2, r3
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	ea02 0400 	and.w	r4, r2, r0
 800178e:	ea03 0501 	and.w	r5, r3, r1
 8001792:	4620      	mov	r0, r4
 8001794:	4629      	mov	r1, r5
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	014b      	lsls	r3, r1, #5
 80017a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017a4:	0142      	lsls	r2, r0, #5
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	1b00      	subs	r0, r0, r4
 80017ac:	eb61 0105 	sbc.w	r1, r1, r5
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	018b      	lsls	r3, r1, #6
 80017ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017be:	0182      	lsls	r2, r0, #6
 80017c0:	1a12      	subs	r2, r2, r0
 80017c2:	eb63 0301 	sbc.w	r3, r3, r1
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	00d9      	lsls	r1, r3, #3
 80017d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017d4:	00d0      	lsls	r0, r2, #3
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	1912      	adds	r2, r2, r4
 80017dc:	eb45 0303 	adc.w	r3, r5, r3
 80017e0:	f04f 0000 	mov.w	r0, #0
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	0299      	lsls	r1, r3, #10
 80017ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ee:	0290      	lsls	r0, r2, #10
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	461a      	mov	r2, r3
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	f7fe fd58 	bl	80002b4 <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4613      	mov	r3, r2
 800180a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_GetSysClockFreq+0x358>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	0f1b      	lsrs	r3, r3, #28
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	61bb      	str	r3, [r7, #24]
      break;
 8001822:	e002      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001826:	61bb      	str	r3, [r7, #24]
      break;
 8001828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182a:	69bb      	ldr	r3, [r7, #24]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	00f42400 	.word	0x00f42400
 8001840:	007a1200 	.word	0x007a1200

08001844 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e28d      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8083 	beq.w	800196a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001864:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b04      	cmp	r3, #4
 800186e:	d019      	beq.n	80018a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001870:	4b91      	ldr	r3, [pc, #580]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001878:	2b08      	cmp	r3, #8
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800187c:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001888:	d00c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d112      	bne.n	80018bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001896:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018a2:	d10b      	bne.n	80018bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d05b      	beq.n	8001968 <HAL_RCC_OscConfig+0x124>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d157      	bne.n	8001968 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e25a      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x90>
 80018c6:	4b7c      	ldr	r3, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7b      	ldr	r2, [pc, #492]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0xcc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0xb4>
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a72      	ldr	r2, [pc, #456]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0xcc>
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f95c 	bl	8000bd4 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff f958 	bl	8000bd4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e21f      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xdc>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f948 	bl	8000bd4 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff f944 	bl	8000bd4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e20b      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x104>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d06f      	beq.n	8001a56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001976:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d017      	beq.n	80019b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001982:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x186>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1d3      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_RCC_OscConfig+0x278>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff f8f1 	bl	8000bd4 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff f8ed 	bl	8000bd4 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1b4      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4925      	ldr	r1, [pc, #148]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x278>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f8d0 	bl	8000bd4 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff f8cc 	bl	8000bd4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e193      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d036      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d016      	beq.n	8001a98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff f8b0 	bl	8000bd4 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff f8ac 	bl	8000bd4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e173      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x234>
 8001a96:	e01b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f899 	bl	8000bd4 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	e00e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f895 	bl	8000bd4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d907      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e15c      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	42470000 	.word	0x42470000
 8001ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	4b8a      	ldr	r3, [pc, #552]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ea      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8097 	beq.w	8001c0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10f      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a7e      	ldr	r2, [pc, #504]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b79      	ldr	r3, [pc, #484]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d118      	bne.n	8001b4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a75      	ldr	r2, [pc, #468]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7ff f855 	bl	8000bd4 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff f851 	bl	8000bd4 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e118      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	4b6c      	ldr	r3, [pc, #432]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x31e>
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x340>
 8001b6a:	4b61      	ldr	r3, [pc, #388]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a59      	ldr	r2, [pc, #356]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a56      	ldr	r2, [pc, #344]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f816 	bl	8000bd4 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff f812 	bl	8000bd4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0d7      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ee      	beq.n	8001bac <HAL_RCC_OscConfig+0x368>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f800 	bl	8000bd4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7fe fffc 	bl	8000bd4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0c1      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80ad 	beq.w	8001d70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c16:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d060      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d145      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe ffd0 	bl	8000bd4 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7fe ffcc 	bl	8000bd4 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e093      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	071b      	lsls	r3, r3, #28
 8001c82:	491b      	ldr	r1, [pc, #108]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ffa1 	bl	8000bd4 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe ff9d 	bl	8000bd4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e064      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x452>
 8001cb4:	e05c      	b.n	8001d70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ff8a 	bl	8000bd4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe ff86 	bl	8000bd4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e04d      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x480>
 8001ce2:	e045      	b.n	8001d70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e040      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_RCC_OscConfig+0x538>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d030      	beq.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d129      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d122      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d119      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	3b01      	subs	r3, #1
 8001d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10f      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e041      	b.n	8001e16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f839 	bl	8001e1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f000 f9d8 	bl	8002174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d001      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e04e      	b.n	8001eea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d022      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e76:	d01d      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x80>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_TIM_Base_Start_IT+0xc8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d018      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x80>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x80>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00e      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x80>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x80>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d010      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed6:	e007      	b.n	8001ee8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40000800 	.word	0x40000800
 8001f04:	40000c00 	.word	0x40000c00
 8001f08:	40010400 	.word	0x40010400
 8001f0c:	40014000 	.word	0x40014000
 8001f10:	40001800 	.word	0x40001800

08001f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d122      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d11b      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0202 	mvn.w	r2, #2
 8001f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8ee 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8e0 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8f1 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d122      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0204 	mvn.w	r2, #4
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8c4 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8b6 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8c7 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d11b      	bne.n	8002018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0208 	mvn.w	r2, #8
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f89a 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f88c 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f89d 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b10      	cmp	r3, #16
 8002024:	d122      	bne.n	800206c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b10      	cmp	r3, #16
 8002032:	d11b      	bne.n	800206c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0210 	mvn.w	r2, #16
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2208      	movs	r2, #8
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f870 	bl	8002138 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f862 	bl	8002124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f873 	bl	800214c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0201 	mvn.w	r2, #1
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fc68 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b80      	cmp	r3, #128	; 0x80
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f902 	bl	80022c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b40      	cmp	r3, #64	; 0x40
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f838 	bl	8002160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b20      	cmp	r3, #32
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0220 	mvn.w	r2, #32
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8cc 	bl	80022b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a40      	ldr	r2, [pc, #256]	; (8002288 <TIM_Base_SetConfig+0x114>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d013      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d00f      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a3d      	ldr	r2, [pc, #244]	; (800228c <TIM_Base_SetConfig+0x118>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00b      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a3c      	ldr	r2, [pc, #240]	; (8002290 <TIM_Base_SetConfig+0x11c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d007      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a3b      	ldr	r2, [pc, #236]	; (8002294 <TIM_Base_SetConfig+0x120>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <TIM_Base_SetConfig+0x40>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <TIM_Base_SetConfig+0x124>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d108      	bne.n	80021c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <TIM_Base_SetConfig+0x114>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d02b      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d4:	d027      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2c      	ldr	r2, [pc, #176]	; (800228c <TIM_Base_SetConfig+0x118>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d023      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2b      	ldr	r2, [pc, #172]	; (8002290 <TIM_Base_SetConfig+0x11c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01f      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2a      	ldr	r2, [pc, #168]	; (8002294 <TIM_Base_SetConfig+0x120>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01b      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a29      	ldr	r2, [pc, #164]	; (8002298 <TIM_Base_SetConfig+0x124>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d017      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a28      	ldr	r2, [pc, #160]	; (800229c <TIM_Base_SetConfig+0x128>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <TIM_Base_SetConfig+0x12c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00f      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <TIM_Base_SetConfig+0x130>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00b      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <TIM_Base_SetConfig+0x134>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a24      	ldr	r2, [pc, #144]	; (80022ac <TIM_Base_SetConfig+0x138>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d003      	beq.n	8002226 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <TIM_Base_SetConfig+0x13c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d108      	bne.n	8002238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <TIM_Base_SetConfig+0x114>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d003      	beq.n	800226c <TIM_Base_SetConfig+0xf8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <TIM_Base_SetConfig+0x124>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d103      	bne.n	8002274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	615a      	str	r2, [r3, #20]
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40010000 	.word	0x40010000
 800228c:	40000400 	.word	0x40000400
 8002290:	40000800 	.word	0x40000800
 8002294:	40000c00 	.word	0x40000c00
 8002298:	40010400 	.word	0x40010400
 800229c:	40014000 	.word	0x40014000
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800
 80022a8:	40001800 	.word	0x40001800
 80022ac:	40001c00 	.word	0x40001c00
 80022b0:	40002000 	.word	0x40002000

080022b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 0208 	add.w	r2, r3, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f103 0208 	add.w	r2, r3, #8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f103 0208 	add.w	r2, r3, #8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6892      	ldr	r2, [r2, #8]
 8002394:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6852      	ldr	r2, [r2, #4]
 800239e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d103      	bne.n	80023b2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08c      	sub	sp, #48	; 0x30
 80023d6:	af04      	add	r7, sp, #16
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 f8e0 	bl	80035ac <pvPortMalloc>
 80023ec:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00e      	beq.n	8002412 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023f4:	2058      	movs	r0, #88	; 0x58
 80023f6:	f001 f8d9 	bl	80035ac <pvPortMalloc>
 80023fa:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
 8002408:	e005      	b.n	8002416 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f001 f97c 	bl	8003708 <vPortFree>
 8002410:	e001      	b.n	8002416 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	2300      	movs	r3, #0
 8002420:	9303      	str	r3, [sp, #12]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	9302      	str	r3, [sp, #8]
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f80e 	bl	8002454 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002438:	69f8      	ldr	r0, [r7, #28]
 800243a:	f000 f8a1 	bl	8002580 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800243e:	2301      	movs	r3, #1
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	e002      	b.n	800244a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800244a:	69bb      	ldr	r3, [r7, #24]
    }
 800244c:	4618      	mov	r0, r3
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	21a5      	movs	r1, #165	; 0xa5
 800246e:	f003 f961 	bl	8005734 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800247c:	3b01      	subs	r3, #1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <prvInitialiseNewTask+0x58>
        __asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	617b      	str	r3, [r7, #20]
    }
 80024a8:	bf00      	nop
 80024aa:	e7fe      	b.n	80024aa <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01f      	beq.n	80024f2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e012      	b.n	80024de <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	7819      	ldrb	r1, [r3, #0]
 80024c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	3334      	adds	r3, #52	; 0x34
 80024c8:	460a      	mov	r2, r1
 80024ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	3301      	adds	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d9e9      	bls.n	80024b8 <prvInitialiseNewTask+0x64>
 80024e4:	e000      	b.n	80024e8 <prvInitialiseNewTask+0x94>
            {
                break;
 80024e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024f0:	e003      	b.n	80024fa <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d901      	bls.n	8002504 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002500:	2304      	movs	r3, #4
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	2200      	movs	r2, #0
 8002514:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	3304      	adds	r3, #4
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fefe 	bl	800231c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	3318      	adds	r3, #24
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fef9 	bl	800231c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800252e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	f1c3 0205 	rsb	r2, r3, #5
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	3350      	adds	r3, #80	; 0x50
 8002544:	2204      	movs	r2, #4
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f8f3 	bl	8005734 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	3354      	adds	r3, #84	; 0x54
 8002552:	2201      	movs	r2, #1
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f003 f8ec 	bl	8005734 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	68f9      	ldr	r1, [r7, #12]
 8002560:	69b8      	ldr	r0, [r7, #24]
 8002562:	f000 fd4b 	bl	8002ffc <pxPortInitialiseStack>
 8002566:	4602      	mov	r2, r0
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002576:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002578:	bf00      	nop
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af02      	add	r7, sp, #8
 8002586:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002588:	f000 fee4 	bl	8003354 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800258c:	4b3b      	ldr	r3, [pc, #236]	; (800267c <prvAddNewTaskToReadyList+0xfc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a3a      	ldr	r2, [pc, #232]	; (800267c <prvAddNewTaskToReadyList+0xfc>)
 8002594:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002596:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <prvAddNewTaskToReadyList+0x100>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800259e:	4a38      	ldr	r2, [pc, #224]	; (8002680 <prvAddNewTaskToReadyList+0x100>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <prvAddNewTaskToReadyList+0xfc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d110      	bne.n	80025ce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025ac:	f000 fc7c 	bl	8002ea8 <prvInitialiseTaskLists>
 80025b0:	e00d      	b.n	80025ce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025b2:	4b34      	ldr	r3, [pc, #208]	; (8002684 <prvAddNewTaskToReadyList+0x104>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <prvAddNewTaskToReadyList+0x100>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d802      	bhi.n	80025ce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025c8:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <prvAddNewTaskToReadyList+0x100>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <prvAddNewTaskToReadyList+0x108>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	4a2c      	ldr	r2, [pc, #176]	; (8002688 <prvAddNewTaskToReadyList+0x108>)
 80025d6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <prvAddNewTaskToReadyList+0x108>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <prvAddNewTaskToReadyList+0x94>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 fe27 	bl	800523c <SEGGER_SYSVIEW_OnTaskCreate>
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	461d      	mov	r5, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461c      	mov	r4, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	1ae3      	subs	r3, r4, r3
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	462b      	mov	r3, r5
 8002610:	f001 f986 	bl	8003920 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fe94 	bl	8005344 <SEGGER_SYSVIEW_OnTaskStartReady>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2201      	movs	r2, #1
 8002622:	409a      	lsls	r2, r3
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <prvAddNewTaskToReadyList+0x10c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <prvAddNewTaskToReadyList+0x10c>)
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4a15      	ldr	r2, [pc, #84]	; (8002690 <prvAddNewTaskToReadyList+0x110>)
 800263c:	441a      	add	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7ff fe76 	bl	8002336 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800264a:	f000 feb3 	bl	80033b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <prvAddNewTaskToReadyList+0x104>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00e      	beq.n	8002674 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <prvAddNewTaskToReadyList+0x100>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <prvAddNewTaskToReadyList+0x114>)
 8002666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bdb0      	pop	{r4, r5, r7, pc}
 800267c:	20000118 	.word	0x20000118
 8002680:	20000040 	.word	0x20000040
 8002684:	20000124 	.word	0x20000124
 8002688:	20000134 	.word	0x20000134
 800268c:	20000120 	.word	0x20000120
 8002690:	20000044 	.word	0x20000044
 8002694:	e000ed04 	.word	0xe000ed04

08002698 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 80026a0:	f000 fe58 	bl	8003354 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <uxTaskPriorityGet+0x18>
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <uxTaskPriorityGet+0x30>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	e000      	b.n	80026b2 <uxTaskPriorityGet+0x1a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80026ba:	f000 fe7b 	bl	80033b4 <vPortExitCritical>

        return uxReturn;
 80026be:	68bb      	ldr	r3, [r7, #8]
    }
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000040 	.word	0x20000040

080026cc <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d90a      	bls.n	80026f6 <vTaskPrioritySet+0x2a>
        __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	60fb      	str	r3, [r7, #12]
    }
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d901      	bls.n	8002700 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026fc:	2304      	movs	r3, #4
 80026fe:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002700:	f000 fe28 	bl	8003354 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <vTaskPrioritySet+0x44>
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <vTaskPrioritySet+0x170>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	e000      	b.n	8002712 <vTaskPrioritySet+0x46>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fe56 	bl	80053c8 <SEGGER_SYSVIEW_ShrinkId>
 800271c:	4603      	mov	r3, r0
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	2028      	movs	r0, #40	; 0x28
 8002724:	f002 f9d0 	bl	8004ac8 <SEGGER_SYSVIEW_RecordU32x2>
 8002728:	69b8      	ldr	r0, [r7, #24]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	461a      	mov	r2, r3
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	f001 f957 	bl	80039f0 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002746:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d06f      	beq.n	8002830 <vTaskPrioritySet+0x164>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	d90d      	bls.n	8002774 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8002758:	4b38      	ldr	r3, [pc, #224]	; (800283c <vTaskPrioritySet+0x170>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	429a      	cmp	r2, r3
 8002760:	d00f      	beq.n	8002782 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002762:	4b36      	ldr	r3, [pc, #216]	; (800283c <vTaskPrioritySet+0x170>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d309      	bcc.n	8002782 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 800276e:	2301      	movs	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e006      	b.n	8002782 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002774:	4b31      	ldr	r3, [pc, #196]	; (800283c <vTaskPrioritySet+0x170>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	429a      	cmp	r2, r3
 800277c:	d101      	bne.n	8002782 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800277e:	2301      	movs	r3, #1
 8002780:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	429a      	cmp	r2, r3
 8002792:	d102      	bne.n	800279a <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db04      	blt.n	80027b2 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	f1c3 0205 	rsb	r2, r3, #5
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6959      	ldr	r1, [r3, #20]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <vTaskPrioritySet+0x174>)
 80027c2:	4413      	add	r3, r2
 80027c4:	4299      	cmp	r1, r3
 80027c6:	d128      	bne.n	800281a <vTaskPrioritySet+0x14e>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	3304      	adds	r3, #4
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fdd6 	bl	800237e <uxListRemove>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80027d8:	2201      	movs	r2, #1
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <vTaskPrioritySet+0x178>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4013      	ands	r3, r2
 80027e8:	4a16      	ldr	r2, [pc, #88]	; (8002844 <vTaskPrioritySet+0x178>)
 80027ea:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	2201      	movs	r2, #1
 80027f2:	409a      	lsls	r2, r3
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <vTaskPrioritySet+0x178>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <vTaskPrioritySet+0x178>)
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <vTaskPrioritySet+0x174>)
 800280c:	441a      	add	r2, r3
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	3304      	adds	r3, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7ff fd8e 	bl	8002336 <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <vTaskPrioritySet+0x164>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <vTaskPrioritySet+0x17c>)
 8002822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002830:	f000 fdc0 	bl	80033b4 <vPortExitCritical>
    }
 8002834:	bf00      	nop
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000040 	.word	0x20000040
 8002840:	20000044 	.word	0x20000044
 8002844:	20000120 	.word	0x20000120
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <vTaskStartScheduler+0x98>)
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2300      	movs	r3, #0
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	2282      	movs	r2, #130	; 0x82
 800285e:	4922      	ldr	r1, [pc, #136]	; (80028e8 <vTaskStartScheduler+0x9c>)
 8002860:	4822      	ldr	r0, [pc, #136]	; (80028ec <vTaskStartScheduler+0xa0>)
 8002862:	f7ff fdb6 	bl	80023d2 <xTaskCreate>
 8002866:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d124      	bne.n	80028b8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	60bb      	str	r3, [r7, #8]
    }
 8002880:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <vTaskStartScheduler+0xa4>)
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <vTaskStartScheduler+0xa8>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <vTaskStartScheduler+0xac>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <vTaskStartScheduler+0xb0>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <vTaskStartScheduler+0x98>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d102      	bne.n	80028a8 <vTaskStartScheduler+0x5c>
 80028a2:	f002 fcaf 	bl	8005204 <SEGGER_SYSVIEW_OnIdle>
 80028a6:	e004      	b.n	80028b2 <vTaskStartScheduler+0x66>
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <vTaskStartScheduler+0xb0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f002 fd07 	bl	80052c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80028b2:	f000 fc2f 	bl	8003114 <xPortStartScheduler>
 80028b6:	e00e      	b.n	80028d6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028be:	d10a      	bne.n	80028d6 <vTaskStartScheduler+0x8a>
        __asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	607b      	str	r3, [r7, #4]
    }
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <vTaskStartScheduler+0xb4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000013c 	.word	0x2000013c
 80028e8:	0800576c 	.word	0x0800576c
 80028ec:	08002e79 	.word	0x08002e79
 80028f0:	20000138 	.word	0x20000138
 80028f4:	20000124 	.word	0x20000124
 80028f8:	2000011c 	.word	0x2000011c
 80028fc:	20000040 	.word	0x20000040
 8002900:	2000000c 	.word	0x2000000c

08002904 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <vTaskSuspendAll+0x18>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	4a03      	ldr	r2, [pc, #12]	; (800291c <vTaskSuspendAll+0x18>)
 8002910:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	20000140 	.word	0x20000140

08002920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800292e:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <xTaskResumeAll+0x11c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <xTaskResumeAll+0x2c>
        __asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	603b      	str	r3, [r7, #0]
    }
 8002948:	bf00      	nop
 800294a:	e7fe      	b.n	800294a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800294c:	f000 fd02 	bl	8003354 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <xTaskResumeAll+0x11c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3b01      	subs	r3, #1
 8002956:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <xTaskResumeAll+0x11c>)
 8002958:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <xTaskResumeAll+0x11c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d165      	bne.n	8002a2e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <xTaskResumeAll+0x120>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d061      	beq.n	8002a2e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800296a:	e032      	b.n	80029d2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <xTaskResumeAll+0x124>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3318      	adds	r3, #24
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fd00 	bl	800237e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3304      	adds	r3, #4
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fcfb 	bl	800237e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4618      	mov	r0, r3
 800298c:	f002 fcda 	bl	8005344 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2201      	movs	r2, #1
 8002996:	409a      	lsls	r2, r3
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <xTaskResumeAll+0x128>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4313      	orrs	r3, r2
 800299e:	4a2a      	ldr	r2, [pc, #168]	; (8002a48 <xTaskResumeAll+0x128>)
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <xTaskResumeAll+0x12c>)
 80029b0:	441a      	add	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3304      	adds	r3, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4610      	mov	r0, r2
 80029ba:	f7ff fcbc 	bl	8002336 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c2:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <xTaskResumeAll+0x130>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <xTaskResumeAll+0x134>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <xTaskResumeAll+0x124>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1c8      	bne.n	800296c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80029e0:	f000 fae0 	bl	8002fa4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029e4:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <xTaskResumeAll+0x138>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80029f0:	f000 f91c 	bl	8002c2c <xTaskIncrementTick>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <xTaskResumeAll+0x134>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f1      	bne.n	80029f0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <xTaskResumeAll+0x138>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <xTaskResumeAll+0x134>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <xTaskResumeAll+0x13c>)
 8002a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a2e:	f000 fcc1 	bl	80033b4 <vPortExitCritical>

    return xAlreadyYielded;
 8002a32:	68bb      	ldr	r3, [r7, #8]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000140 	.word	0x20000140
 8002a40:	20000118 	.word	0x20000118
 8002a44:	200000d8 	.word	0x200000d8
 8002a48:	20000120 	.word	0x20000120
 8002a4c:	20000044 	.word	0x20000044
 8002a50:	20000040 	.word	0x20000040
 8002a54:	2000012c 	.word	0x2000012c
 8002a58:	20000128 	.word	0x20000128
 8002a5c:	e000ed04 	.word	0xe000ed04

08002a60 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a66:	f000 fd61 	bl	800352c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <xTaskGetTickCountFromISR+0x20>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a74:	683b      	ldr	r3, [r7, #0]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000011c 	.word	0x2000011c

08002a84 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8002a84:	b480      	push	{r7}
 8002a86:	b08b      	sub	sp, #44	; 0x2c
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d05b      	beq.n	8002b52 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d104      	bne.n	8002abe <prvSearchForNameWithinSingleList+0x3a>
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	3308      	adds	r3, #8
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d104      	bne.n	8002aea <prvSearchForNameWithinSingleList+0x66>
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
 8002afa:	e01c      	b.n	8002b36 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	4413      	add	r3, r2
 8002b02:	3334      	adds	r3, #52	; 0x34
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	7afa      	ldrb	r2, [r7, #11]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d002      	beq.n	8002b1c <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e006      	b.n	8002b2a <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	3301      	adds	r3, #1
 8002b34:	623b      	str	r3, [r7, #32]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	d9df      	bls.n	8002afc <prvSearchForNameWithinSingleList+0x78>
 8002b3c:	e000      	b.n	8002b40 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 8002b3e:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d1bb      	bne.n	8002ac6 <prvSearchForNameWithinSingleList+0x42>
 8002b4e:	e000      	b.n	8002b52 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8002b50:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b54:	4618      	mov	r0, r3
 8002b56:	372c      	adds	r7, #44	; 0x2c
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8002b68:	2305      	movs	r3, #5
 8002b6a:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7fd fb99 	bl	80002a4 <strlen>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d90a      	bls.n	8002b8e <xTaskGetHandle+0x2e>
        __asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	60fb      	str	r3, [r7, #12]
    }
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xTaskGetHandle+0x2c>

        vTaskSuspendAll();
 8002b8e:	f7ff feb9 	bl	8002904 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <xTaskGetHandle+0xb8>)
 8002ba4:	4413      	add	r3, r2
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff6b 	bl	8002a84 <prvSearchForNameWithinSingleList>
 8002bae:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <xTaskGetHandle+0x5e>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ea      	bne.n	8002b92 <xTaskGetHandle+0x32>
 8002bbc:	e000      	b.n	8002bc0 <xTaskGetHandle+0x60>
                    break;
 8002bbe:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <xTaskGetHandle+0x74>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <xTaskGetHandle+0xbc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff59 	bl	8002a84 <prvSearchForNameWithinSingleList>
 8002bd2:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <xTaskGetHandle+0x88>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <xTaskGetHandle+0xc0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff4f 	bl	8002a84 <prvSearchForNameWithinSingleList>
 8002be6:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <xTaskGetHandle+0x98>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <xTaskGetHandle+0xc4>)
 8002bf2:	f7ff ff47 	bl	8002a84 <prvSearchForNameWithinSingleList>
 8002bf6:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <xTaskGetHandle+0xa8>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4809      	ldr	r0, [pc, #36]	; (8002c28 <xTaskGetHandle+0xc8>)
 8002c02:	f7ff ff3f 	bl	8002a84 <prvSearchForNameWithinSingleList>
 8002c06:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8002c08:	f7ff fe8a 	bl	8002920 <xTaskResumeAll>

        return pxTCB;
 8002c0c:	693b      	ldr	r3, [r7, #16]
    }
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000044 	.word	0x20000044
 8002c1c:	200000d0 	.word	0x200000d0
 8002c20:	200000d4 	.word	0x200000d4
 8002c24:	20000104 	.word	0x20000104
 8002c28:	200000ec 	.word	0x200000ec

08002c2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c36:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <xTaskIncrementTick+0x14c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 8092 	bne.w	8002d64 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c40:	4b4e      	ldr	r3, [pc, #312]	; (8002d7c <xTaskIncrementTick+0x150>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c48:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <xTaskIncrementTick+0x150>)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d120      	bne.n	8002c96 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c54:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <xTaskIncrementTick+0x154>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <xTaskIncrementTick+0x48>
        __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	603b      	str	r3, [r7, #0]
    }
 8002c70:	bf00      	nop
 8002c72:	e7fe      	b.n	8002c72 <xTaskIncrementTick+0x46>
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <xTaskIncrementTick+0x154>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <xTaskIncrementTick+0x158>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a40      	ldr	r2, [pc, #256]	; (8002d80 <xTaskIncrementTick+0x154>)
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <xTaskIncrementTick+0x158>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <xTaskIncrementTick+0x15c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	4a3e      	ldr	r2, [pc, #248]	; (8002d88 <xTaskIncrementTick+0x15c>)
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	f000 f987 	bl	8002fa4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <xTaskIncrementTick+0x160>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d34c      	bcc.n	8002d3a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ca0:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <xTaskIncrementTick+0x154>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <xTaskIncrementTick+0x160>)
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	601a      	str	r2, [r3, #0]
                    break;
 8002cb2:	e042      	b.n	8002d3a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cb4:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <xTaskIncrementTick+0x154>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d203      	bcs.n	8002cd4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ccc:	4a2f      	ldr	r2, [pc, #188]	; (8002d8c <xTaskIncrementTick+0x160>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002cd2:	e032      	b.n	8002d3a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fb50 	bl	800237e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3318      	adds	r3, #24
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fb47 	bl	800237e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 fb26 	bl	8005344 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <xTaskIncrementTick+0x164>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <xTaskIncrementTick+0x164>)
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <xTaskIncrementTick+0x168>)
 8002d18:	441a      	add	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f7ff fb08 	bl	8002336 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <xTaskIncrementTick+0x16c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d3b5      	bcc.n	8002ca0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d38:	e7b2      	b.n	8002ca0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d3a:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <xTaskIncrementTick+0x16c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d40:	4914      	ldr	r1, [pc, #80]	; (8002d94 <xTaskIncrementTick+0x168>)
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d901      	bls.n	8002d56 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <xTaskIncrementTick+0x170>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	e004      	b.n	8002d6e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <xTaskIncrementTick+0x174>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <xTaskIncrementTick+0x174>)
 8002d6c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d6e:	697b      	ldr	r3, [r7, #20]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000140 	.word	0x20000140
 8002d7c:	2000011c 	.word	0x2000011c
 8002d80:	200000d0 	.word	0x200000d0
 8002d84:	200000d4 	.word	0x200000d4
 8002d88:	20000130 	.word	0x20000130
 8002d8c:	20000138 	.word	0x20000138
 8002d90:	20000120 	.word	0x20000120
 8002d94:	20000044 	.word	0x20000044
 8002d98:	20000040 	.word	0x20000040
 8002d9c:	2000012c 	.word	0x2000012c
 8002da0:	20000128 	.word	0x20000128

08002da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <vTaskSwitchContext+0xbc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002db2:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <vTaskSwitchContext+0xc0>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002db8:	e04d      	b.n	8002e56 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <vTaskSwitchContext+0xc0>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <vTaskSwitchContext+0xc4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	f1c3 031f 	rsb	r3, r3, #31
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	4925      	ldr	r1, [pc, #148]	; (8002e6c <vTaskSwitchContext+0xc8>)
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	607b      	str	r3, [r7, #4]
    }
 8002dfc:	bf00      	nop
 8002dfe:	e7fe      	b.n	8002dfe <vTaskSwitchContext+0x5a>
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <vTaskSwitchContext+0xc8>)
 8002e0c:	4413      	add	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	3308      	adds	r3, #8
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d104      	bne.n	8002e30 <vTaskSwitchContext+0x8c>
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <vTaskSwitchContext+0xcc>)
 8002e38:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <vTaskSwitchContext+0xcc>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <vTaskSwitchContext+0xd0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d102      	bne.n	8002e4c <vTaskSwitchContext+0xa8>
 8002e46:	f002 f9dd 	bl	8005204 <SEGGER_SYSVIEW_OnIdle>
}
 8002e4a:	e004      	b.n	8002e56 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <vTaskSwitchContext+0xcc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fa35 	bl	80052c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000140 	.word	0x20000140
 8002e64:	2000012c 	.word	0x2000012c
 8002e68:	20000120 	.word	0x20000120
 8002e6c:	20000044 	.word	0x20000044
 8002e70:	20000040 	.word	0x20000040
 8002e74:	2000013c 	.word	0x2000013c

08002e78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e80:	f000 f852 	bl	8002f28 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <prvIdleTask+0x28>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d9f9      	bls.n	8002e80 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <prvIdleTask+0x2c>)
 8002e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e9c:	e7f0      	b.n	8002e80 <prvIdleTask+0x8>
 8002e9e:	bf00      	nop
 8002ea0:	20000044 	.word	0x20000044
 8002ea4:	e000ed04 	.word	0xe000ed04

08002ea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	e00c      	b.n	8002ece <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <prvInitialiseTaskLists+0x60>)
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fa0a 	bl	80022dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	607b      	str	r3, [r7, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d9ef      	bls.n	8002eb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ed4:	480d      	ldr	r0, [pc, #52]	; (8002f0c <prvInitialiseTaskLists+0x64>)
 8002ed6:	f7ff fa01 	bl	80022dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002eda:	480d      	ldr	r0, [pc, #52]	; (8002f10 <prvInitialiseTaskLists+0x68>)
 8002edc:	f7ff f9fe 	bl	80022dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ee0:	480c      	ldr	r0, [pc, #48]	; (8002f14 <prvInitialiseTaskLists+0x6c>)
 8002ee2:	f7ff f9fb 	bl	80022dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002ee6:	480c      	ldr	r0, [pc, #48]	; (8002f18 <prvInitialiseTaskLists+0x70>)
 8002ee8:	f7ff f9f8 	bl	80022dc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002eec:	480b      	ldr	r0, [pc, #44]	; (8002f1c <prvInitialiseTaskLists+0x74>)
 8002eee:	f7ff f9f5 	bl	80022dc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <prvInitialiseTaskLists+0x78>)
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <prvInitialiseTaskLists+0x64>)
 8002ef6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <prvInitialiseTaskLists+0x7c>)
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <prvInitialiseTaskLists+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000044 	.word	0x20000044
 8002f0c:	200000a8 	.word	0x200000a8
 8002f10:	200000bc 	.word	0x200000bc
 8002f14:	200000d8 	.word	0x200000d8
 8002f18:	200000ec 	.word	0x200000ec
 8002f1c:	20000104 	.word	0x20000104
 8002f20:	200000d0 	.word	0x200000d0
 8002f24:	200000d4 	.word	0x200000d4

08002f28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f2e:	e019      	b.n	8002f64 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f30:	f000 fa10 	bl	8003354 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <prvCheckTasksWaitingTermination+0x50>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fa1c 	bl	800237e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <prvCheckTasksWaitingTermination+0x54>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <prvCheckTasksWaitingTermination+0x54>)
 8002f4e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <prvCheckTasksWaitingTermination+0x58>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <prvCheckTasksWaitingTermination+0x58>)
 8002f58:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f5a:	f000 fa2b 	bl	80033b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f810 	bl	8002f84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <prvCheckTasksWaitingTermination+0x58>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e1      	bne.n	8002f30 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200000ec 	.word	0x200000ec
 8002f7c:	20000118 	.word	0x20000118
 8002f80:	20000100 	.word	0x20000100

08002f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fbb9 	bl	8003708 <vPortFree>
                vPortFree( pxTCB );
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fbb6 	bl	8003708 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <prvResetNextTaskUnblockTime+0x30>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <prvResetNextTaskUnblockTime+0x34>)
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002fba:	e005      	b.n	8002fc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <prvResetNextTaskUnblockTime+0x30>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <prvResetNextTaskUnblockTime+0x34>)
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	200000d0 	.word	0x200000d0
 8002fd8:	20000138 	.word	0x20000138

08002fdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <xTaskGetCurrentTaskHandle+0x1c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002fe8:	687b      	ldr	r3, [r7, #4]
    }
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000040 	.word	0x20000040

08002ffc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3b04      	subs	r3, #4
 800300c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003014:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3b04      	subs	r3, #4
 800301a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 0201 	bic.w	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3b04      	subs	r3, #4
 800302a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800302c:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <pxPortInitialiseStack+0x64>)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b14      	subs	r3, #20
 8003036:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3b04      	subs	r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f06f 0202 	mvn.w	r2, #2
 800304a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3b20      	subs	r3, #32
 8003050:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	08003065 	.word	0x08003065

08003064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <prvTaskExitError+0x54>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d00a      	beq.n	800308e <prvTaskExitError+0x2a>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	60fb      	str	r3, [r7, #12]
    }
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <prvTaskExitError+0x28>
        __asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	60bb      	str	r3, [r7, #8]
    }
 80030a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80030a2:	bf00      	nop
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0fc      	beq.n	80030a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	20000010 	.word	0x20000010
 80030bc:	00000000 	.word	0x00000000

080030c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <pxCurrentTCBConst2>)
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	6808      	ldr	r0, [r1, #0]
 80030c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ca:	f380 8809 	msr	PSP, r0
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f380 8811 	msr	BASEPRI, r0
 80030da:	4770      	bx	lr
 80030dc:	f3af 8000 	nop.w

080030e0 <pxCurrentTCBConst2>:
 80030e0:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop

080030e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80030e8:	4808      	ldr	r0, [pc, #32]	; (800310c <prvPortStartFirstTask+0x24>)
 80030ea:	6800      	ldr	r0, [r0, #0]
 80030ec:	6800      	ldr	r0, [r0, #0]
 80030ee:	f380 8808 	msr	MSP, r0
 80030f2:	f04f 0000 	mov.w	r0, #0
 80030f6:	f380 8814 	msr	CONTROL, r0
 80030fa:	b662      	cpsie	i
 80030fc:	b661      	cpsie	f
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	df00      	svc	0
 8003108:	bf00      	nop
 800310a:	0000      	.short	0x0000
 800310c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop

08003114 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800311a:	4b46      	ldr	r3, [pc, #280]	; (8003234 <xPortStartScheduler+0x120>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a46      	ldr	r2, [pc, #280]	; (8003238 <xPortStartScheduler+0x124>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10a      	bne.n	800313a <xPortStartScheduler+0x26>
        __asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	613b      	str	r3, [r7, #16]
    }
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800313a:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <xPortStartScheduler+0x120>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a3f      	ldr	r2, [pc, #252]	; (800323c <xPortStartScheduler+0x128>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d10a      	bne.n	800315a <xPortStartScheduler+0x46>
        __asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	60fb      	str	r3, [r7, #12]
    }
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800315a:	4b39      	ldr	r3, [pc, #228]	; (8003240 <xPortStartScheduler+0x12c>)
 800315c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <xPortStartScheduler+0x130>)
 8003180:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <xPortStartScheduler+0x134>)
 8003184:	2207      	movs	r2, #7
 8003186:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003188:	e009      	b.n	800319e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800318a:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <xPortStartScheduler+0x134>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	4a2d      	ldr	r2, [pc, #180]	; (8003248 <xPortStartScheduler+0x134>)
 8003192:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b80      	cmp	r3, #128	; 0x80
 80031a8:	d0ef      	beq.n	800318a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <xPortStartScheduler+0x134>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00a      	beq.n	80031cc <xPortStartScheduler+0xb8>
        __asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	60bb      	str	r3, [r7, #8]
    }
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031cc:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <xPortStartScheduler+0x134>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	4a1d      	ldr	r2, [pc, #116]	; (8003248 <xPortStartScheduler+0x134>)
 80031d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031d6:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <xPortStartScheduler+0x134>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031de:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <xPortStartScheduler+0x134>)
 80031e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <xPortStartScheduler+0x138>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <xPortStartScheduler+0x138>)
 80031f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <xPortStartScheduler+0x138>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a14      	ldr	r2, [pc, #80]	; (800324c <xPortStartScheduler+0x138>)
 80031fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003200:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003202:	f000 f963 	bl	80034cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <xPortStartScheduler+0x13c>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800320c:	f000 f982 	bl	8003514 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <xPortStartScheduler+0x140>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <xPortStartScheduler+0x140>)
 8003216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800321a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800321c:	f7ff ff64 	bl	80030e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003220:	f7ff fdc0 	bl	8002da4 <vTaskSwitchContext>
    prvTaskExitError();
 8003224:	f7ff ff1e 	bl	8003064 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00
 8003238:	410fc271 	.word	0x410fc271
 800323c:	410fc270 	.word	0x410fc270
 8003240:	e000e400 	.word	0xe000e400
 8003244:	20000144 	.word	0x20000144
 8003248:	20000148 	.word	0x20000148
 800324c:	e000ed20 	.word	0xe000ed20
 8003250:	20000010 	.word	0x20000010
 8003254:	e000ef34 	.word	0xe000ef34

08003258 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <vInitPrioGroupValue+0xe4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a37      	ldr	r2, [pc, #220]	; (8003340 <vInitPrioGroupValue+0xe8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d10a      	bne.n	800327e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	613b      	str	r3, [r7, #16]
    }
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800327e:	4b2f      	ldr	r3, [pc, #188]	; (800333c <vInitPrioGroupValue+0xe4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a30      	ldr	r2, [pc, #192]	; (8003344 <vInitPrioGroupValue+0xec>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10a      	bne.n	800329e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	60fb      	str	r3, [r7, #12]
    }
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800329e:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <vInitPrioGroupValue+0xf0>)
 80032a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	22ff      	movs	r2, #255	; 0xff
 80032ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <vInitPrioGroupValue+0xf4>)
 80032c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <vInitPrioGroupValue+0xf8>)
 80032c8:	2207      	movs	r2, #7
 80032ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032cc:	e009      	b.n	80032e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <vInitPrioGroupValue+0xf8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <vInitPrioGroupValue+0xf8>)
 80032d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	d0ef      	beq.n	80032ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <vInitPrioGroupValue+0xf8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d00a      	beq.n	8003310 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60bb      	str	r3, [r7, #8]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <vInitPrioGroupValue+0xf8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <vInitPrioGroupValue+0xf8>)
 8003318:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <vInitPrioGroupValue+0xf8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <vInitPrioGroupValue+0xf8>)
 8003324:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	410fc271 	.word	0x410fc271
 8003344:	410fc270 	.word	0x410fc270
 8003348:	e000e400 	.word	0xe000e400
 800334c:	20000144 	.word	0x20000144
 8003350:	20000148 	.word	0x20000148

08003354 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	607b      	str	r3, [r7, #4]
    }
 800336c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <vPortEnterCritical+0x58>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <vPortEnterCritical+0x58>)
 8003376:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <vPortEnterCritical+0x58>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10f      	bne.n	80033a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <vPortEnterCritical+0x5c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	603b      	str	r3, [r7, #0]
    }
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <vPortEnterCritical+0x4a>
    }
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	20000010 	.word	0x20000010
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <vPortExitCritical+0x50>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <vPortExitCritical+0x24>
        __asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	607b      	str	r3, [r7, #4]
    }
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <vPortExitCritical+0x50>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3b01      	subs	r3, #1
 80033de:	4a09      	ldr	r2, [pc, #36]	; (8003404 <vPortExitCritical+0x50>)
 80033e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <vPortExitCritical+0x50>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <vPortExitCritical+0x42>
 80033ea:	2300      	movs	r3, #0
 80033ec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80033f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000010 	.word	0x20000010
	...

08003410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003410:	f3ef 8009 	mrs	r0, PSP
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <pxCurrentTCBConst>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	f01e 0f10 	tst.w	lr, #16
 8003420:	bf08      	it	eq
 8003422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342a:	6010      	str	r0, [r2, #0]
 800342c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003434:	f380 8811 	msr	BASEPRI, r0
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f7ff fcb0 	bl	8002da4 <vTaskSwitchContext>
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f380 8811 	msr	BASEPRI, r0
 800344c:	bc09      	pop	{r0, r3}
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	6808      	ldr	r0, [r1, #0]
 8003452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003456:	f01e 0f10 	tst.w	lr, #16
 800345a:	bf08      	it	eq
 800345c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003460:	f380 8809 	msr	PSP, r0
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	f3af 8000 	nop.w

08003470 <pxCurrentTCBConst>:
 8003470:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop

08003478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
        __asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	607b      	str	r3, [r7, #4]
    }
 8003490:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003492:	f001 fe3d 	bl	8005110 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003496:	f7ff fbc9 	bl	8002c2c <xTaskIncrementTick>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80034a0:	f001 fe94 	bl	80051cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <SysTick_Handler+0x50>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e001      	b.n	80034b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80034ae:	f001 fe71 	bl	8005194 <SEGGER_SYSVIEW_RecordExitISR>
 80034b2:	2300      	movs	r3, #0
 80034b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f383 8811 	msr	BASEPRI, r3
    }
 80034bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	e000ed04 	.word	0xe000ed04

080034cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <vPortSetupTimerInterrupt+0x34>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034d6:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <vPortSetupTimerInterrupt+0x38>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <vPortSetupTimerInterrupt+0x3c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <vPortSetupTimerInterrupt+0x40>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	4a09      	ldr	r2, [pc, #36]	; (8003510 <vPortSetupTimerInterrupt+0x44>)
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034ee:	4b04      	ldr	r3, [pc, #16]	; (8003500 <vPortSetupTimerInterrupt+0x34>)
 80034f0:	2207      	movs	r2, #7
 80034f2:	601a      	str	r2, [r3, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e010 	.word	0xe000e010
 8003504:	e000e018 	.word	0xe000e018
 8003508:	20000000 	.word	0x20000000
 800350c:	10624dd3 	.word	0x10624dd3
 8003510:	e000e014 	.word	0xe000e014

08003514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003524 <vPortEnableVFP+0x10>
 8003518:	6801      	ldr	r1, [r0, #0]
 800351a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800351e:	6001      	str	r1, [r0, #0]
 8003520:	4770      	bx	lr
 8003522:	0000      	.short	0x0000
 8003524:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop

0800352c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003532:	f3ef 8305 	mrs	r3, IPSR
 8003536:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d914      	bls.n	8003568 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <vPortValidateInterruptPriority+0x70>)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <vPortValidateInterruptPriority+0x74>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	7afa      	ldrb	r2, [r7, #11]
 800354e:	429a      	cmp	r2, r3
 8003550:	d20a      	bcs.n	8003568 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	607b      	str	r3, [r7, #4]
    }
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <vPortValidateInterruptPriority+0x78>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003570:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <vPortValidateInterruptPriority+0x7c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d90a      	bls.n	800358e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	603b      	str	r3, [r7, #0]
    }
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <vPortValidateInterruptPriority+0x60>
    }
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000e3f0 	.word	0xe000e3f0
 80035a0:	20000144 	.word	0x20000144
 80035a4:	e000ed0c 	.word	0xe000ed0c
 80035a8:	20000148 	.word	0x20000148

080035ac <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80035b8:	f7ff f9a4 	bl	8002904 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 80035bc:	4b4e      	ldr	r3, [pc, #312]	; (80036f8 <pvPortMalloc+0x14c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <pvPortMalloc+0x22>
        {
            prvHeapInit();
 80035c4:	f000 f8da 	bl	800377c <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <pvPortMalloc+0x14c>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) && 
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02a      	beq.n	800362a <pvPortMalloc+0x7e>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 80035d4:	2308      	movs	r3, #8
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && 
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d223      	bcs.n	800362a <pvPortMalloc+0x7e>
        {
            xWantedSize += heapSTRUCT_SIZE;
 80035e2:	2308      	movs	r3, #8
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	607b      	str	r3, [r7, #4]

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f023 0307 	bic.w	r3, r3, #7
 80035f2:	3308      	adds	r3, #8
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d214      	bcs.n	8003624 <pvPortMalloc+0x78>
                    > xWantedSize )
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f023 0307 	bic.w	r3, r3, #7
 8003600:	3308      	adds	r3, #8
 8003602:	607b      	str	r3, [r7, #4]
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	2b00      	cmp	r3, #0
 800360c:	d010      	beq.n	8003630 <pvPortMalloc+0x84>
        __asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60fb      	str	r3, [r7, #12]
    }
 8003620:	bf00      	nop
 8003622:	e7fe      	b.n	8003622 <pvPortMalloc+0x76>
            }
            else
            {
                xWantedSize = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	607b      	str	r3, [r7, #4]
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003628:	e002      	b.n	8003630 <pvPortMalloc+0x84>
            }       
        }
        else 
        {
            xWantedSize = 0; 
 800362a:	2300      	movs	r3, #0
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	e000      	b.n	8003632 <pvPortMalloc+0x86>
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003630:	bf00      	nop
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d057      	beq.n	80036e8 <pvPortMalloc+0x13c>
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <pvPortMalloc+0x150>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d852      	bhi.n	80036e8 <pvPortMalloc+0x13c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 8003642:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <pvPortMalloc+0x154>)
 8003644:	623b      	str	r3, [r7, #32]
            pxBlock = xStart.pxNextFreeBlock;
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <pvPortMalloc+0x154>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800364c:	e004      	b.n	8003658 <pvPortMalloc+0xac>
            {
                pxPreviousBlock = pxBlock;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	623b      	str	r3, [r7, #32]
                pxBlock = pxBlock->pxNextFreeBlock;
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d903      	bls.n	800366a <pvPortMalloc+0xbe>
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f1      	bne.n	800364e <pvPortMalloc+0xa2>
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	4a25      	ldr	r2, [pc, #148]	; (8003704 <pvPortMalloc+0x158>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03a      	beq.n	80036e8 <pvPortMalloc+0x13c>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2208      	movs	r2, #8
 8003678:	4413      	add	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	601a      	str	r2, [r3, #0]

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2208      	movs	r2, #8
 800368e:	0052      	lsls	r2, r2, #1
 8003690:	4293      	cmp	r3, r2
 8003692:	d922      	bls.n	80036da <pvPortMalloc+0x12e>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	1ad2      	subs	r2, r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	605a      	str	r2, [r3, #4]
                    pxBlock->xBlockSize = xWantedSize;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	605a      	str	r2, [r3, #4]

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <pvPortMalloc+0x154>)
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e002      	b.n	80036c0 <pvPortMalloc+0x114>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f6      	bhi.n	80036ba <pvPortMalloc+0x10e>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	601a      	str	r2, [r3, #0]
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <pvPortMalloc+0x150>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	4a05      	ldr	r2, [pc, #20]	; (80036fc <pvPortMalloc+0x150>)
 80036e6:	6013      	str	r3, [r2, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80036e8:	f7ff f91a 	bl	8002920 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 80036ec:	69fb      	ldr	r3, [r7, #28]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3728      	adds	r7, #40	; 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20012d5c 	.word	0x20012d5c
 80036fc:	20000014 	.word	0x20000014
 8003700:	20012d4c 	.word	0x20012d4c
 8003704:	20012d54 	.word	0x20012d54

08003708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d027      	beq.n	800376a <vPortFree+0x62>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800371a:	2308      	movs	r3, #8
 800371c:	425b      	negs	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4413      	add	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	60fb      	str	r3, [r7, #12]

        vTaskSuspendAll();
 8003728:	f7ff f8ec 	bl	8002904 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <vPortFree+0x6c>)
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e002      	b.n	800373e <vPortFree+0x36>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d8f6      	bhi.n	8003738 <vPortFree+0x30>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <vPortFree+0x70>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4413      	add	r3, r2
 8003762:	4a05      	ldr	r2, [pc, #20]	; (8003778 <vPortFree+0x70>)
 8003764:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 8003766:	f7ff f8db 	bl	8002920 <xTaskResumeAll>
    }
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20012d4c 	.word	0x20012d4c
 8003778:	20000014 	.word	0x20000014

0800377c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <prvHeapInit+0x44>)
 8003784:	f023 0307 	bic.w	r3, r3, #7
 8003788:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800378a:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <prvHeapInit+0x48>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <prvHeapInit+0x48>)
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <prvHeapInit+0x4c>)
 8003798:	4a0c      	ldr	r2, [pc, #48]	; (80037cc <prvHeapInit+0x50>)
 800379a:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <prvHeapInit+0x4c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <prvHeapInit+0x50>)
 80037aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <prvHeapInit+0x4c>)
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000154 	.word	0x20000154
 80037c4:	20012d4c 	.word	0x20012d4c
 80037c8:	20012d54 	.word	0x20012d54
 80037cc:	00012bf8 	.word	0x00012bf8

080037d0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80037d4:	4803      	ldr	r0, [pc, #12]	; (80037e4 <_cbSendSystemDesc+0x14>)
 80037d6:	f001 fc45 	bl	8005064 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80037da:	4803      	ldr	r0, [pc, #12]	; (80037e8 <_cbSendSystemDesc+0x18>)
 80037dc:	f001 fc42 	bl	8005064 <SEGGER_SYSVIEW_SendSysDesc>
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	08005774 	.word	0x08005774
 80037e8:	080057b4 	.word	0x080057b4

080037ec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <SEGGER_SYSVIEW_Conf+0x20>)
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <SEGGER_SYSVIEW_Conf+0x20>)
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <SEGGER_SYSVIEW_Conf+0x24>)
 80037fa:	4a06      	ldr	r2, [pc, #24]	; (8003814 <SEGGER_SYSVIEW_Conf+0x28>)
 80037fc:	f001 f8b6 	bl	800496c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003800:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003804:	f001 f8f6 	bl	80049f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003808:	bf00      	nop
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000000 	.word	0x20000000
 8003810:	080037d1 	.word	0x080037d1
 8003814:	08005854 	.word	0x08005854

08003818 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	b085      	sub	sp, #20
 800381c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	e033      	b.n	800388c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003824:	491e      	ldr	r1, [pc, #120]	; (80038a0 <_cbSendTaskList+0x88>)
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	491a      	ldr	r1, [pc, #104]	; (80038a0 <_cbSendTaskList+0x88>)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3304      	adds	r3, #4
 8003844:	6819      	ldr	r1, [r3, #0]
 8003846:	4c16      	ldr	r4, [pc, #88]	; (80038a0 <_cbSendTaskList+0x88>)
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4423      	add	r3, r4
 8003854:	3308      	adds	r3, #8
 8003856:	681c      	ldr	r4, [r3, #0]
 8003858:	4d11      	ldr	r5, [pc, #68]	; (80038a0 <_cbSendTaskList+0x88>)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	442b      	add	r3, r5
 8003866:	330c      	adds	r3, #12
 8003868:	681d      	ldr	r5, [r3, #0]
 800386a:	4e0d      	ldr	r6, [pc, #52]	; (80038a0 <_cbSendTaskList+0x88>)
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4433      	add	r3, r6
 8003878:	3310      	adds	r3, #16
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	462b      	mov	r3, r5
 8003880:	4622      	mov	r2, r4
 8003882:	f000 f925 	bl	8003ad0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3301      	adds	r3, #1
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <_cbSendTaskList+0x8c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d3c6      	bcc.n	8003824 <_cbSendTaskList+0xc>
  }
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a0:	20012d60 	.word	0x20012d60
 80038a4:	20012e00 	.word	0x20012e00

080038a8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80038a8:	b5b0      	push	{r4, r5, r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80038ae:	f7ff f8d7 	bl	8002a60 <xTaskGetTickCountFromISR>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80038be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	f04f 0400 	mov.w	r4, #0
 80038ca:	f04f 0500 	mov.w	r5, #0
 80038ce:	015d      	lsls	r5, r3, #5
 80038d0:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80038d4:	0154      	lsls	r4, r2, #5
 80038d6:	4622      	mov	r2, r4
 80038d8:	462b      	mov	r3, r5
 80038da:	1a12      	subs	r2, r2, r0
 80038dc:	eb63 0301 	sbc.w	r3, r3, r1
 80038e0:	f04f 0400 	mov.w	r4, #0
 80038e4:	f04f 0500 	mov.w	r5, #0
 80038e8:	009d      	lsls	r5, r3, #2
 80038ea:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80038ee:	0094      	lsls	r4, r2, #2
 80038f0:	4622      	mov	r2, r4
 80038f2:	462b      	mov	r3, r5
 80038f4:	1812      	adds	r2, r2, r0
 80038f6:	eb41 0303 	adc.w	r3, r1, r3
 80038fa:	f04f 0000 	mov.w	r0, #0
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	00d9      	lsls	r1, r3, #3
 8003904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003908:	00d0      	lsls	r0, r2, #3
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003912:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bdb0      	pop	{r4, r5, r7, pc}

08003920 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800392e:	2205      	movs	r2, #5
 8003930:	492b      	ldr	r1, [pc, #172]	; (80039e0 <SYSVIEW_AddTask+0xc0>)
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f001 fee2 	bl	80056fc <memcmp>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d04b      	beq.n	80039d6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <SYSVIEW_AddTask+0xc4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b07      	cmp	r3, #7
 8003944:	d903      	bls.n	800394e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003946:	4828      	ldr	r0, [pc, #160]	; (80039e8 <SYSVIEW_AddTask+0xc8>)
 8003948:	f001 fe2a 	bl	80055a0 <SEGGER_SYSVIEW_Warn>
    return;
 800394c:	e044      	b.n	80039d8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <SYSVIEW_AddTask+0xc4>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4926      	ldr	r1, [pc, #152]	; (80039ec <SYSVIEW_AddTask+0xcc>)
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003962:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <SYSVIEW_AddTask+0xc4>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4921      	ldr	r1, [pc, #132]	; (80039ec <SYSVIEW_AddTask+0xcc>)
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3304      	adds	r3, #4
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <SYSVIEW_AddTask+0xc4>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	491b      	ldr	r1, [pc, #108]	; (80039ec <SYSVIEW_AddTask+0xcc>)
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3308      	adds	r3, #8
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <SYSVIEW_AddTask+0xc4>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4916      	ldr	r1, [pc, #88]	; (80039ec <SYSVIEW_AddTask+0xcc>)
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	330c      	adds	r3, #12
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <SYSVIEW_AddTask+0xc4>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4910      	ldr	r1, [pc, #64]	; (80039ec <SYSVIEW_AddTask+0xcc>)
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	3310      	adds	r3, #16
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <SYSVIEW_AddTask+0xc4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <SYSVIEW_AddTask+0xc4>)
 80039c2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f87e 	bl	8003ad0 <SYSVIEW_SendTaskInfo>
 80039d4:	e000      	b.n	80039d8 <SYSVIEW_AddTask+0xb8>
    return;
 80039d6:	bf00      	nop

}
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	080057c4 	.word	0x080057c4
 80039e4:	20012e00 	.word	0x20012e00
 80039e8:	080057cc 	.word	0x080057cc
 80039ec:	20012d60 	.word	0x20012d60

080039f0 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80039fe:	2205      	movs	r2, #5
 8003a00:	4930      	ldr	r1, [pc, #192]	; (8003ac4 <SYSVIEW_UpdateTask+0xd4>)
 8003a02:	68b8      	ldr	r0, [r7, #8]
 8003a04:	f001 fe7a 	bl	80056fc <memcmp>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d056      	beq.n	8003abc <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e00d      	b.n	8003a30 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003a14:	492c      	ldr	r1, [pc, #176]	; (8003ac8 <SYSVIEW_UpdateTask+0xd8>)
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d008      	beq.n	8003a3c <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	4b26      	ldr	r3, [pc, #152]	; (8003acc <SYSVIEW_UpdateTask+0xdc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3ec      	bcc.n	8003a14 <SYSVIEW_UpdateTask+0x24>
 8003a3a:	e000      	b.n	8003a3e <SYSVIEW_UpdateTask+0x4e>
      break;
 8003a3c:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <SYSVIEW_UpdateTask+0xdc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d230      	bcs.n	8003aaa <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003a48:	491f      	ldr	r1, [pc, #124]	; (8003ac8 <SYSVIEW_UpdateTask+0xd8>)
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3304      	adds	r3, #4
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003a5c:	491a      	ldr	r1, [pc, #104]	; (8003ac8 <SYSVIEW_UpdateTask+0xd8>)
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003a70:	4915      	ldr	r1, [pc, #84]	; (8003ac8 <SYSVIEW_UpdateTask+0xd8>)
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	330c      	adds	r3, #12
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003a84:	4910      	ldr	r1, [pc, #64]	; (8003ac8 <SYSVIEW_UpdateTask+0xd8>)
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3310      	adds	r3, #16
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f814 	bl	8003ad0 <SYSVIEW_SendTaskInfo>
 8003aa8:	e009      	b.n	8003abe <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f7ff ff33 	bl	8003920 <SYSVIEW_AddTask>
 8003aba:	e000      	b.n	8003abe <SYSVIEW_UpdateTask+0xce>
    return;
 8003abc:	bf00      	nop
  }
}
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	080057c4 	.word	0x080057c4
 8003ac8:	20012d60 	.word	0x20012d60
 8003acc:	20012e00 	.word	0x20012e00

08003ad0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003ade:	f107 0314 	add.w	r3, r7, #20
 8003ae2:	2214      	movs	r2, #20
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fe24 	bl	8005734 <memset>
  TaskInfo.TaskID     = TaskID;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 f9b5 	bl	8004e74 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003b0a:	bf00      	nop
 8003b0c:	3728      	adds	r7, #40	; 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <__NVIC_EnableIRQ>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	db0b      	blt.n	8003b3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	f003 021f 	and.w	r2, r3, #31
 8003b2c:	4907      	ldr	r1, [pc, #28]	; (8003b4c <__NVIC_EnableIRQ+0x38>)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2001      	movs	r0, #1
 8003b36:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	e000e100 	.word	0xe000e100

08003b50 <__NVIC_SetPriority>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	db0a      	blt.n	8003b7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	490c      	ldr	r1, [pc, #48]	; (8003b9c <__NVIC_SetPriority+0x4c>)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	0112      	lsls	r2, r2, #4
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	440b      	add	r3, r1
 8003b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b78:	e00a      	b.n	8003b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4908      	ldr	r1, [pc, #32]	; (8003ba0 <__NVIC_SetPriority+0x50>)
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	3b04      	subs	r3, #4
 8003b88:	0112      	lsls	r2, r2, #4
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	761a      	strb	r2, [r3, #24]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000e100 	.word	0xe000e100
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003baa:	f001 fd55 	bl	8005658 <SEGGER_SYSVIEW_IsStarted>
 8003bae:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003bb6:	f000 ffe1 	bl	8004b7c <SEGGER_SYSVIEW_Start>
  }
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <_cbOnUARTRx+0x3c>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d806      	bhi.n	8003be4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <_cbOnUARTRx+0x3c>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <_cbOnUARTRx+0x3c>)
 8003be0:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003be2:	e009      	b.n	8003bf8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003be4:	f7ff ffde 	bl	8003ba4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <_cbOnUARTRx+0x3c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4618      	mov	r0, r3
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f000 fb9a 	bl	800432c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003bf8:	bf00      	nop
}
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000018 	.word	0x20000018

08003c04 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <_cbOnUARTTx+0x5c>)
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d80f      	bhi.n	8003c34 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <_cbOnUARTTx+0x5c>)
 8003c16:	785b      	ldrb	r3, [r3, #1]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <_cbOnUARTTx+0x60>)
 8003c1c:	5c9a      	ldrb	r2, [r3, r2]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <_cbOnUARTTx+0x5c>)
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	3301      	adds	r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <_cbOnUARTTx+0x5c>)
 8003c2c:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003c32:	e00f      	b.n	8003c54 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <_cbOnUARTTx+0x5c>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fa19 	bl	8004074 <SEGGER_RTT_ReadUpBufferNoLock>
 8003c42:	4603      	mov	r3, r0
 8003c44:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	da02      	bge.n	8003c52 <_cbOnUARTTx+0x4e>
    r = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e000      	b.n	8003c54 <_cbOnUARTTx+0x50>
  }
Done:
 8003c52:	bf00      	nop
  return r;
 8003c54:	68fb      	ldr	r3, [r7, #12]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000018 	.word	0x20000018
 8003c64:	0800585c 	.word	0x0800585c

08003c68 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <SEGGER_UART_init+0x1c>)
 8003c72:	4905      	ldr	r1, [pc, #20]	; (8003c88 <SEGGER_UART_init+0x20>)
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f863 	bl	8003d40 <HIF_UART_Init>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	08003bc5 	.word	0x08003bc5
 8003c88:	08003c05 	.word	0x08003c05

08003c8c <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <USART2_IRQHandler+0x80>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d011      	beq.n	8003cc6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <USART2_IRQHandler+0x84>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 030b 	and.w	r3, r3, #11
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d108      	bne.n	8003cc6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <USART2_IRQHandler+0x88>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003cbc:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <USART2_IRQHandler+0x88>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	79fa      	ldrb	r2, [r7, #7]
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01a      	beq.n	8003d06 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <USART2_IRQHandler+0x8c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <USART2_IRQHandler+0x8c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1dfa      	adds	r2, r7, #7
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4798      	blx	r3
 8003ce2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <USART2_IRQHandler+0x90>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <USART2_IRQHandler+0x90>)
 8003cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e006      	b.n	8003d06 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <USART2_IRQHandler+0x80>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003cfc:	79fa      	ldrb	r2, [r7, #7]
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <USART2_IRQHandler+0x84>)
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e000      	b.n	8003d06 <USART2_IRQHandler+0x7a>
      return;
 8003d04:	bf00      	nop
    }
  }
}
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40004400 	.word	0x40004400
 8003d10:	40004404 	.word	0x40004404
 8003d14:	20012e04 	.word	0x20012e04
 8003d18:	20012e08 	.word	0x20012e08
 8003d1c:	4000440c 	.word	0x4000440c

08003d20 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	4000440c 	.word	0x4000440c

08003d40 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HIF_UART_Init+0xc8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2d      	ldr	r2, [pc, #180]	; (8003e08 <HIF_UART_Init+0xc8>)
 8003d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d56:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003d58:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <HIF_UART_Init+0xcc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <HIF_UART_Init+0xcc>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HIF_UART_Init+0xd0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d70:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003d78:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003d7a:	4a25      	ldr	r2, [pc, #148]	; (8003e10 <HIF_UART_Init+0xd0>)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HIF_UART_Init+0xd4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d8c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003d94:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003d96:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <HIF_UART_Init+0xd4>)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HIF_UART_Init+0xd8>)
 8003d9e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003da2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HIF_UART_Init+0xdc>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <HIF_UART_Init+0xe0>)
 8003dac:	2280      	movs	r2, #128	; 0x80
 8003dae:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003db6:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <HIF_UART_Init+0xe4>)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dce:	d302      	bcc.n	8003dd6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003dd0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003dd4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4a11      	ldr	r2, [pc, #68]	; (8003e28 <HIF_UART_Init+0xe8>)
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003de6:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HIF_UART_Init+0xec>)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003dec:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <HIF_UART_Init+0xf0>)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003df2:	2106      	movs	r1, #6
 8003df4:	2026      	movs	r0, #38	; 0x26
 8003df6:	f7ff feab 	bl	8003b50 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003dfa:	2026      	movs	r0, #38	; 0x26
 8003dfc:	f7ff fe8a 	bl	8003b14 <__NVIC_EnableIRQ>
}
 8003e00:	bf00      	nop
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023840 	.word	0x40023840
 8003e0c:	40023830 	.word	0x40023830
 8003e10:	40020020 	.word	0x40020020
 8003e14:	40020000 	.word	0x40020000
 8003e18:	4000440c 	.word	0x4000440c
 8003e1c:	40004410 	.word	0x40004410
 8003e20:	40004414 	.word	0x40004414
 8003e24:	055d4a80 	.word	0x055d4a80
 8003e28:	40004408 	.word	0x40004408
 8003e2c:	20012e04 	.word	0x20012e04
 8003e30:	20012e08 	.word	0x20012e08

08003e34 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <_DoInit+0x98>)
 8003e3c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2203      	movs	r2, #3
 8003e42:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2203      	movs	r2, #3
 8003e48:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <_DoInit+0x9c>)
 8003e4e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a20      	ldr	r2, [pc, #128]	; (8003ed4 <_DoInit+0xa0>)
 8003e54:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e5c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <_DoInit+0x9c>)
 8003e74:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <_DoInit+0xa4>)
 8003e7a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2210      	movs	r2, #16
 8003e80:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3307      	adds	r3, #7
 8003e98:	4a10      	ldr	r2, [pc, #64]	; (8003edc <_DoInit+0xa8>)
 8003e9a:	6810      	ldr	r0, [r2, #0]
 8003e9c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003e9e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <_DoInit+0xac>)
 8003ea6:	6810      	ldr	r0, [r2, #0]
 8003ea8:	6018      	str	r0, [r3, #0]
 8003eaa:	8891      	ldrh	r1, [r2, #4]
 8003eac:	7992      	ldrb	r2, [r2, #6]
 8003eae:	8099      	strh	r1, [r3, #4]
 8003eb0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003eb2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ebc:	f3bf 8f5f 	dmb	sy
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	20014384 	.word	0x20014384
 8003ed0:	0800581c 	.word	0x0800581c
 8003ed4:	20012e0c 	.word	0x20012e0c
 8003ed8:	2001320c 	.word	0x2001320c
 8003edc:	08005828 	.word	0x08005828
 8003ee0:	0800582c 	.word	0x0800582c

08003ee4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d905      	bls.n	8003f14 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	e007      	b.n	8003f24 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	69b9      	ldr	r1, [r7, #24]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	1acb      	subs	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3b01      	subs	r3, #1
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	bf28      	it	cs
 8003f32:	4613      	movcs	r3, r2
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	bf28      	it	cs
 8003f3e:	4613      	movcs	r3, r2
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	6978      	ldr	r0, [r7, #20]
 8003f52:	f001 fbe1 	bl	8005718 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	4413      	add	r3, r2
 8003f5c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	4413      	add	r3, r2
 8003f64:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	4413      	add	r3, r2
 8003f74:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d101      	bne.n	8003f84 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f84:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1b2      	bne.n	8003efa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003f94:	6a3b      	ldr	r3, [r7, #32]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3728      	adds	r7, #40	; 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b088      	sub	sp, #32
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d911      	bls.n	8003fe6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	6938      	ldr	r0, [r7, #16]
 8003fd2:	f001 fba1 	bl	8005718 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fd6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003fe4:	e01f      	b.n	8004026 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	6938      	ldr	r0, [r7, #16]
 8003ffa:	f001 fb8d 	bl	8005718 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4413      	add	r3, r2
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4619      	mov	r1, r3
 8004016:	6938      	ldr	r0, [r7, #16]
 8004018:	f001 fb7e 	bl	8005718 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800401c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	60da      	str	r2, [r3, #12]
}
 8004026:	bf00      	nop
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800402e:	b480      	push	{r7}
 8004030:	b087      	sub	sp, #28
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	429a      	cmp	r2, r3
 8004048:	d808      	bhi.n	800405c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4413      	add	r3, r2
 8004056:	3b01      	subs	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e004      	b.n	8004066 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004066:	697b      	ldr	r3, [r7, #20]
}
 8004068:	4618      	mov	r0, r3
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b08c      	sub	sp, #48	; 0x30
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004080:	4b3e      	ldr	r3, [pc, #248]	; (800417c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800408e:	f7ff fed1 	bl	8003e34 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4a37      	ldr	r2, [pc, #220]	; (800417c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80040a0:	4413      	add	r3, r2
 80040a2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80040b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d92b      	bls.n	8004118 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4293      	cmp	r3, r2
 80040d0:	bf28      	it	cs
 80040d2:	4613      	movcs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	4413      	add	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	6939      	ldr	r1, [r7, #16]
 80040e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040e6:	f001 fb17 	bl	8005718 <memcpy>
    NumBytesRead += NumBytesRem;
 80040ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4413      	add	r3, r2
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4413      	add	r3, r2
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	4413      	add	r3, r2
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004110:	429a      	cmp	r2, r3
 8004112:	d101      	bne.n	8004118 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004114:	2300      	movs	r3, #0
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4293      	cmp	r3, r2
 8004126:	bf28      	it	cs
 8004128:	4613      	movcs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d019      	beq.n	8004166 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	4413      	add	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	6939      	ldr	r1, [r7, #16]
 8004140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004142:	f001 fae9 	bl	8005718 <memcpy>
    NumBytesRead += NumBytesRem;
 8004146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4413      	add	r3, r2
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	4413      	add	r3, r2
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800415e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	4413      	add	r3, r2
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004170:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004174:	4618      	mov	r0, r3
 8004176:	3730      	adds	r7, #48	; 0x30
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20014384 	.word	0x20014384

08004180 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	; 0x30
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800418c:	4b3e      	ldr	r3, [pc, #248]	; (8004288 <SEGGER_RTT_ReadNoLock+0x108>)
 800418e:	623b      	str	r3, [r7, #32]
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <SEGGER_RTT_ReadNoLock+0x1e>
 800419a:	f7ff fe4b 	bl	8003e34 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	3360      	adds	r3, #96	; 0x60
 80041aa:	4a37      	ldr	r2, [pc, #220]	; (8004288 <SEGGER_RTT_ReadNoLock+0x108>)
 80041ac:	4413      	add	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80041c0:	2300      	movs	r3, #0
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80041c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d92b      	bls.n	8004224 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4293      	cmp	r3, r2
 80041dc:	bf28      	it	cs
 80041de:	4613      	movcs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	4413      	add	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	6939      	ldr	r1, [r7, #16]
 80041f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f2:	f001 fa91 	bl	8005718 <memcpy>
    NumBytesRead += NumBytesRem;
 80041f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4413      	add	r3, r2
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800420e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800421c:	429a      	cmp	r2, r3
 800421e:	d101      	bne.n	8004224 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004220:	2300      	movs	r3, #0
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4293      	cmp	r3, r2
 8004232:	bf28      	it	cs
 8004234:	4613      	movcs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d019      	beq.n	8004272 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	4413      	add	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	6939      	ldr	r1, [r7, #16]
 800424c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800424e:	f001 fa63 	bl	8005718 <memcpy>
    NumBytesRead += NumBytesRem;
 8004252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4413      	add	r3, r2
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800425a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	4413      	add	r3, r2
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800426a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4413      	add	r3, r2
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800427c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004280:	4618      	mov	r0, r3
 8004282:	3730      	adds	r7, #48	; 0x30
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20014384 	.word	0x20014384

0800428c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	3360      	adds	r3, #96	; 0x60
 80042a8:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80042aa:	4413      	add	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d029      	beq.n	800430a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d82e      	bhi.n	8004318 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d013      	beq.n	80042ea <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80042c2:	e029      	b.n	8004318 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042c4:	6978      	ldr	r0, [r7, #20]
 80042c6:	f7ff feb2 	bl	800402e <_GetAvailWriteSpace>
 80042ca:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d202      	bcs.n	80042da <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80042d8:	e021      	b.n	800431e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f7ff fe5b 	bl	8003f9e <_WriteNoCheck>
    break;
 80042e8:	e019      	b.n	800431e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80042ea:	6978      	ldr	r0, [r7, #20]
 80042ec:	f7ff fe9f 	bl	800402e <_GetAvailWriteSpace>
 80042f0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4293      	cmp	r3, r2
 80042f8:	bf28      	it	cs
 80042fa:	4613      	movcs	r3, r2
 80042fc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff fe4b 	bl	8003f9e <_WriteNoCheck>
    break;
 8004308:	e009      	b.n	800431e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	69b9      	ldr	r1, [r7, #24]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff fde8 	bl	8003ee4 <_WriteBlocking>
 8004314:	61f8      	str	r0, [r7, #28]
    break;
 8004316:	e002      	b.n	800431e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004318:	2300      	movs	r3, #0
 800431a:	61fb      	str	r3, [r7, #28]
    break;
 800431c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800431e:	69fb      	ldr	r3, [r7, #28]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20014384 	.word	0x20014384

0800432c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004346:	f7ff fd75 	bl	8003e34 <_DoInit>
  SEGGER_RTT_LOCK();
 800434a:	f3ef 8311 	mrs	r3, BASEPRI
 800434e:	f04f 0120 	mov.w	r1, #32
 8004352:	f381 8811 	msr	BASEPRI, r1
 8004356:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff ff95 	bl	800428c <SEGGER_RTT_WriteDownBufferNoLock>
 8004362:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800436a:	697b      	ldr	r3, [r7, #20]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20014384 	.word	0x20014384

08004378 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004386:	4b3d      	ldr	r3, [pc, #244]	; (800447c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004394:	f7ff fd4e 	bl	8003e34 <_DoInit>
  SEGGER_RTT_LOCK();
 8004398:	f3ef 8311 	mrs	r3, BASEPRI
 800439c:	f04f 0120 	mov.w	r1, #32
 80043a0:	f381 8811 	msr	BASEPRI, r1
 80043a4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043a6:	4b35      	ldr	r3, [pc, #212]	; (800447c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80043a8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80043ae:	6939      	ldr	r1, [r7, #16]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	3304      	adds	r3, #4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3301      	adds	r3, #1
 80043ca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	dbeb      	blt.n	80043ae <SEGGER_RTT_AllocUpBuffer+0x36>
 80043d6:	e000      	b.n	80043da <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80043d8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	da3f      	bge.n	8004464 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80043e4:	6939      	ldr	r1, [r7, #16]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	4613      	mov	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	440b      	add	r3, r1
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80043f8:	6939      	ldr	r1, [r7, #16]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	440b      	add	r3, r1
 8004408:	3304      	adds	r3, #4
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800440e:	6939      	ldr	r1, [r7, #16]
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	440b      	add	r3, r1
 800441c:	3320      	adds	r3, #32
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	440b      	add	r3, r1
 8004430:	3328      	adds	r3, #40	; 0x28
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004436:	6939      	ldr	r1, [r7, #16]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	4613      	mov	r3, r2
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	440b      	add	r3, r1
 8004444:	3324      	adds	r3, #36	; 0x24
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800444a:	6939      	ldr	r1, [r7, #16]
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	440b      	add	r3, r1
 8004458:	332c      	adds	r3, #44	; 0x2c
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800445e:	f3bf 8f5f 	dmb	sy
 8004462:	e002      	b.n	800446a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004470:	69fb      	ldr	r3, [r7, #28]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20014384 	.word	0x20014384

08004480 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800448e:	4b21      	ldr	r3, [pc, #132]	; (8004514 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800449c:	f7ff fcca 	bl	8003e34 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044a0:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80044a2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d82c      	bhi.n	8004504 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80044aa:	f3ef 8311 	mrs	r3, BASEPRI
 80044ae:	f04f 0120 	mov.w	r1, #32
 80044b2:	f381 8811 	msr	BASEPRI, r1
 80044b6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	3360      	adds	r3, #96	; 0x60
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00e      	beq.n	80044ee <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2200      	movs	r2, #0
 80044ec:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044f4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80044fe:	2300      	movs	r3, #0
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
 8004502:	e002      	b.n	800450a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004504:	f04f 33ff 	mov.w	r3, #4294967295
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800450c:	4618      	mov	r0, r3
 800450e:	3728      	adds	r7, #40	; 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20014384 	.word	0x20014384

08004518 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00f      	beq.n	800454e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800452e:	e002      	b.n	8004536 <_EncodeStr+0x1e>
      Len++;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	3301      	adds	r3, #1
 8004534:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4413      	add	r3, r2
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f6      	bne.n	8004530 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d901      	bls.n	800454e <_EncodeStr+0x36>
      Len = Limit;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2bfe      	cmp	r3, #254	; 0xfe
 8004552:	d806      	bhi.n	8004562 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	60fa      	str	r2, [r7, #12]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e011      	b.n	8004586 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	60fa      	str	r2, [r7, #12]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	60fa      	str	r2, [r7, #12]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	0a19      	lsrs	r1, r3, #8
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	60fa      	str	r2, [r7, #12]
 8004582:	b2ca      	uxtb	r2, r1
 8004584:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800458a:	e00a      	b.n	80045a2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	1c53      	adds	r3, r2, #1
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1c59      	adds	r1, r3, #1
 8004596:	60f9      	str	r1, [r7, #12]
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	701a      	strb	r2, [r3, #0]
    n++;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	3301      	adds	r3, #1
 80045a0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d3f0      	bcc.n	800458c <_EncodeStr+0x74>
  }
  return pPayload;
 80045aa:	68fb      	ldr	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80045d6:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <_HandleIncomingPacket+0xe0>)
 80045d8:	7e1b      	ldrb	r3, [r3, #24]
 80045da:	4618      	mov	r0, r3
 80045dc:	1cfb      	adds	r3, r7, #3
 80045de:	2201      	movs	r2, #1
 80045e0:	4619      	mov	r1, r3
 80045e2:	f7ff fdcd 	bl	8004180 <SEGGER_RTT_ReadNoLock>
 80045e6:	4603      	mov	r3, r0
 80045e8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dd54      	ble.n	800469a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	2b80      	cmp	r3, #128	; 0x80
 80045f4:	d032      	beq.n	800465c <_HandleIncomingPacket+0x8c>
 80045f6:	2b80      	cmp	r3, #128	; 0x80
 80045f8:	dc42      	bgt.n	8004680 <_HandleIncomingPacket+0xb0>
 80045fa:	2b07      	cmp	r3, #7
 80045fc:	dc16      	bgt.n	800462c <_HandleIncomingPacket+0x5c>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	dd3e      	ble.n	8004680 <_HandleIncomingPacket+0xb0>
 8004602:	3b01      	subs	r3, #1
 8004604:	2b06      	cmp	r3, #6
 8004606:	d83b      	bhi.n	8004680 <_HandleIncomingPacket+0xb0>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <_HandleIncomingPacket+0x40>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004633 	.word	0x08004633
 8004614:	08004639 	.word	0x08004639
 8004618:	0800463f 	.word	0x0800463f
 800461c:	08004645 	.word	0x08004645
 8004620:	0800464b 	.word	0x0800464b
 8004624:	08004651 	.word	0x08004651
 8004628:	08004657 	.word	0x08004657
 800462c:	2b7f      	cmp	r3, #127	; 0x7f
 800462e:	d036      	beq.n	800469e <_HandleIncomingPacket+0xce>
 8004630:	e026      	b.n	8004680 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004632:	f000 faa3 	bl	8004b7c <SEGGER_SYSVIEW_Start>
      break;
 8004636:	e037      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004638:	f000 fb5c 	bl	8004cf4 <SEGGER_SYSVIEW_Stop>
      break;
 800463c:	e034      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800463e:	f000 fd35 	bl	80050ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004642:	e031      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004644:	f000 fcfa 	bl	800503c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004648:	e02e      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800464a:	f000 fb79 	bl	8004d40 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800464e:	e02b      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004650:	f000 ff68 	bl	8005524 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004654:	e028      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004656:	f000 ff47 	bl	80054e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800465a:	e025      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800465c:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <_HandleIncomingPacket+0xe0>)
 800465e:	7e1b      	ldrb	r3, [r3, #24]
 8004660:	4618      	mov	r0, r3
 8004662:	1cfb      	adds	r3, r7, #3
 8004664:	2201      	movs	r2, #1
 8004666:	4619      	mov	r1, r3
 8004668:	f7ff fd8a 	bl	8004180 <SEGGER_RTT_ReadNoLock>
 800466c:	4603      	mov	r3, r0
 800466e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	dd15      	ble.n	80046a2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 feb5 	bl	80053e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800467e:	e010      	b.n	80046a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	b25b      	sxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	da0e      	bge.n	80046a6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <_HandleIncomingPacket+0xe0>)
 800468a:	7e1b      	ldrb	r3, [r3, #24]
 800468c:	4618      	mov	r0, r3
 800468e:	1cfb      	adds	r3, r7, #3
 8004690:	2201      	movs	r2, #1
 8004692:	4619      	mov	r1, r3
 8004694:	f7ff fd74 	bl	8004180 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004698:	e005      	b.n	80046a6 <_HandleIncomingPacket+0xd6>
    }
  }
 800469a:	bf00      	nop
 800469c:	e004      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
      break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
      break;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <_HandleIncomingPacket+0xd8>
      break;
 80046a6:	bf00      	nop
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20014224 	.word	0x20014224

080046b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	; 0x30
 80046b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80046ba:	2301      	movs	r3, #1
 80046bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	3301      	adds	r3, #1
 80046c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c8:	4b32      	ldr	r3, [pc, #200]	; (8004794 <_TrySendOverflowPacket+0xe0>)
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ce:	e00b      	b.n	80046e8 <_TrySendOverflowPacket+0x34>
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	09db      	lsrs	r3, r3, #7
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b7f      	cmp	r3, #127	; 0x7f
 80046ec:	d8f0      	bhi.n	80046d0 <_TrySendOverflowPacket+0x1c>
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046fe:	4b26      	ldr	r3, [pc, #152]	; (8004798 <_TrySendOverflowPacket+0xe4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004704:	4b23      	ldr	r3, [pc, #140]	; (8004794 <_TrySendOverflowPacket+0xe0>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	623b      	str	r3, [r7, #32]
 8004716:	e00b      	b.n	8004730 <_TrySendOverflowPacket+0x7c>
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	6279      	str	r1, [r7, #36]	; 0x24
 8004722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	09db      	lsrs	r3, r3, #7
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	2b7f      	cmp	r3, #127	; 0x7f
 8004734:	d8f0      	bhi.n	8004718 <_TrySendOverflowPacket+0x64>
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	627a      	str	r2, [r7, #36]	; 0x24
 800473c:	6a3a      	ldr	r2, [r7, #32]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <_TrySendOverflowPacket+0xe0>)
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	4618      	mov	r0, r3
 800474c:	1d3b      	adds	r3, r7, #4
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	461a      	mov	r2, r3
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	4619      	mov	r1, r3
 8004758:	f7fb fd5a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800475c:	4603      	mov	r3, r0
 800475e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004760:	f7ff fade 	bl	8003d20 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <_TrySendOverflowPacket+0xe0>)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004770:	4b08      	ldr	r3, [pc, #32]	; (8004794 <_TrySendOverflowPacket+0xe0>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	3b01      	subs	r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <_TrySendOverflowPacket+0xe0>)
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e004      	b.n	8004788 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <_TrySendOverflowPacket+0xe0>)
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	3301      	adds	r3, #1
 8004784:	4a03      	ldr	r2, [pc, #12]	; (8004794 <_TrySendOverflowPacket+0xe0>)
 8004786:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004788:	693b      	ldr	r3, [r7, #16]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3730      	adds	r7, #48	; 0x30
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20014224 	.word	0x20014224
 8004798:	e0001004 	.word	0xe0001004

0800479c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80047a8:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <_SendPacket+0x1c4>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d010      	beq.n	80047d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80047b0:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <_SendPacket+0x1c4>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a5 	beq.w	8004904 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80047ba:	4b69      	ldr	r3, [pc, #420]	; (8004960 <_SendPacket+0x1c4>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d109      	bne.n	80047d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80047c2:	f7ff ff77 	bl	80046b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80047c6:	4b66      	ldr	r3, [pc, #408]	; (8004960 <_SendPacket+0x1c4>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	f040 809c 	bne.w	8004908 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80047d0:	e001      	b.n	80047d6 <_SendPacket+0x3a>
    goto Send;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <_SendPacket+0x3c>
Send:
 80047d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b1f      	cmp	r3, #31
 80047dc:	d809      	bhi.n	80047f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80047de:	4b60      	ldr	r3, [pc, #384]	; (8004960 <_SendPacket+0x1c4>)
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f040 808d 	bne.w	800490c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b17      	cmp	r3, #23
 80047f6:	d807      	bhi.n	8004808 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e03d      	b.n	8004884 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	2b7f      	cmp	r3, #127	; 0x7f
 8004814:	d912      	bls.n	800483c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	09da      	lsrs	r2, r3, #7
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3b01      	subs	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	3a01      	subs	r2, #1
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	e006      	b.n	800484a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3b01      	subs	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b7f      	cmp	r3, #127	; 0x7f
 800484e:	d912      	bls.n	8004876 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	09da      	lsrs	r2, r3, #7
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3b01      	subs	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	3a01      	subs	r2, #1
 8004868:	60fa      	str	r2, [r7, #12]
 800486a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800486e:	b2da      	uxtb	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e006      	b.n	8004884 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3b01      	subs	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004884:	4b37      	ldr	r3, [pc, #220]	; (8004964 <_SendPacket+0x1c8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800488a:	4b35      	ldr	r3, [pc, #212]	; (8004960 <_SendPacket+0x1c4>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	e00b      	b.n	80048b6 <_SendPacket+0x11a>
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	1c59      	adds	r1, r3, #1
 80048a6:	6279      	str	r1, [r7, #36]	; 0x24
 80048a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	09db      	lsrs	r3, r3, #7
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	2b7f      	cmp	r3, #127	; 0x7f
 80048ba:	d8f0      	bhi.n	800489e <_SendPacket+0x102>
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	627a      	str	r2, [r7, #36]	; 0x24
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <_SendPacket+0x1c4>)
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	4618      	mov	r0, r3
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	f7fb fc98 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048e0:	4603      	mov	r3, r0
 80048e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80048e4:	f7ff fa1c 	bl	8003d20 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <_SendPacket+0x1c4>)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	60d3      	str	r3, [r2, #12]
 80048f4:	e00b      	b.n	800490e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <_SendPacket+0x1c4>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	3301      	adds	r3, #1
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	4b18      	ldr	r3, [pc, #96]	; (8004960 <_SendPacket+0x1c4>)
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e004      	b.n	800490e <_SendPacket+0x172>
    goto SendDone;
 8004904:	bf00      	nop
 8004906:	e002      	b.n	800490e <_SendPacket+0x172>
      goto SendDone;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <_SendPacket+0x172>
      goto SendDone;
 800490c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <_SendPacket+0x1c4>)
 8004910:	7e1b      	ldrb	r3, [r3, #24]
 8004912:	4619      	mov	r1, r3
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <_SendPacket+0x1cc>)
 8004916:	460b      	mov	r3, r1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	440b      	add	r3, r1
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	336c      	adds	r3, #108	; 0x6c
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <_SendPacket+0x1c4>)
 8004926:	7e1b      	ldrb	r3, [r3, #24]
 8004928:	4618      	mov	r0, r3
 800492a:	490f      	ldr	r1, [pc, #60]	; (8004968 <_SendPacket+0x1cc>)
 800492c:	4603      	mov	r3, r0
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4403      	add	r3, r0
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	440b      	add	r3, r1
 8004936:	3370      	adds	r3, #112	; 0x70
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d00b      	beq.n	8004956 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <_SendPacket+0x1c4>)
 8004940:	789b      	ldrb	r3, [r3, #2]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <_SendPacket+0x1c4>)
 8004948:	2201      	movs	r2, #1
 800494a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800494c:	f7ff fe40 	bl	80045d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <_SendPacket+0x1c4>)
 8004952:	2200      	movs	r2, #0
 8004954:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004956:	bf00      	nop
 8004958:	3728      	adds	r7, #40	; 0x28
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20014224 	.word	0x20014224
 8004964:	e0001004 	.word	0xe0001004
 8004968:	20014384 	.word	0x20014384

0800496c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800497a:	2300      	movs	r3, #0
 800497c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004980:	4917      	ldr	r1, [pc, #92]	; (80049e0 <SEGGER_SYSVIEW_Init+0x74>)
 8004982:	4818      	ldr	r0, [pc, #96]	; (80049e4 <SEGGER_SYSVIEW_Init+0x78>)
 8004984:	f7ff fcf8 	bl	8004378 <SEGGER_RTT_AllocUpBuffer>
 8004988:	4603      	mov	r3, r0
 800498a:	b2da      	uxtb	r2, r3
 800498c:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800498e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004990:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004992:	785a      	ldrb	r2, [r3, #1]
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004996:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004998:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800499a:	7e1b      	ldrb	r3, [r3, #24]
 800499c:	4618      	mov	r0, r3
 800499e:	2300      	movs	r3, #0
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	2308      	movs	r3, #8
 80049a4:	4a11      	ldr	r2, [pc, #68]	; (80049ec <SEGGER_SYSVIEW_Init+0x80>)
 80049a6:	490f      	ldr	r1, [pc, #60]	; (80049e4 <SEGGER_SYSVIEW_Init+0x78>)
 80049a8:	f7ff fd6a 	bl	8004480 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <SEGGER_SYSVIEW_Init+0x84>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a0c      	ldr	r2, [pc, #48]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80049ba:	4a0b      	ldr	r2, [pc, #44]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80049c0:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80049cc:	4a06      	ldr	r2, [pc, #24]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	2001321c 	.word	0x2001321c
 80049e4:	08005834 	.word	0x08005834
 80049e8:	20014224 	.word	0x20014224
 80049ec:	2001421c 	.word	0x2001421c
 80049f0:	e0001004 	.word	0xe0001004

080049f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80049fc:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6113      	str	r3, [r2, #16]
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20014224 	.word	0x20014224

08004a14 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a20:	f04f 0120 	mov.w	r1, #32
 8004a24:	f381 8811 	msr	BASEPRI, r1
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	4808      	ldr	r0, [pc, #32]	; (8004a4c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004a2c:	f7ff fdc4 	bl	80045b8 <_PreparePacket>
 8004a30:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	68b8      	ldr	r0, [r7, #8]
 8004a38:	f7ff feb0 	bl	800479c <_SendPacket>
  RECORD_END();
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f383 8811 	msr	BASEPRI, r3
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20014254 	.word	0x20014254

08004a50 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5e:	f04f 0120 	mov.w	r1, #32
 8004a62:	f381 8811 	msr	BASEPRI, r1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	4816      	ldr	r0, [pc, #88]	; (8004ac4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004a6a:	f7ff fda5 	bl	80045b8 <_PreparePacket>
 8004a6e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	e00b      	b.n	8004a96 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	1c59      	adds	r1, r3, #1
 8004a86:	61f9      	str	r1, [r7, #28]
 8004a88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	09db      	lsrs	r3, r3, #7
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b7f      	cmp	r3, #127	; 0x7f
 8004a9a:	d8f0      	bhi.n	8004a7e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	61fa      	str	r2, [r7, #28]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	6938      	ldr	r0, [r7, #16]
 8004ab2:	f7ff fe73 	bl	800479c <_SendPacket>
  RECORD_END();
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f383 8811 	msr	BASEPRI, r3
}
 8004abc:	bf00      	nop
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20014254 	.word	0x20014254

08004ac8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	; 0x30
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad8:	f04f 0120 	mov.w	r1, #32
 8004adc:	f381 8811 	msr	BASEPRI, r1
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	4825      	ldr	r0, [pc, #148]	; (8004b78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004ae4:	f7ff fd68 	bl	80045b8 <_PreparePacket>
 8004ae8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af6:	e00b      	b.n	8004b10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	09db      	lsrs	r3, r3, #7
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	2b7f      	cmp	r3, #127	; 0x7f
 8004b14:	d8f0      	bhi.n	8004af8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	623b      	str	r3, [r7, #32]
 8004b2e:	e00b      	b.n	8004b48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	1c59      	adds	r1, r3, #1
 8004b38:	6279      	str	r1, [r7, #36]	; 0x24
 8004b3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	09db      	lsrs	r3, r3, #7
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b4c:	d8f0      	bhi.n	8004b30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	627a      	str	r2, [r7, #36]	; 0x24
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	6979      	ldr	r1, [r7, #20]
 8004b62:	69b8      	ldr	r0, [r7, #24]
 8004b64:	f7ff fe1a 	bl	800479c <_SendPacket>
  RECORD_END();
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f383 8811 	msr	BASEPRI, r3
}
 8004b6e:	bf00      	nop
 8004b70:	3730      	adds	r7, #48	; 0x30
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20014254 	.word	0x20014254

08004b7c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08c      	sub	sp, #48	; 0x30
 8004b80:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004b82:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004b88:	f3ef 8311 	mrs	r3, BASEPRI
 8004b8c:	f04f 0120 	mov.w	r1, #32
 8004b90:	f381 8811 	msr	BASEPRI, r1
 8004b94:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004b96:	4b54      	ldr	r3, [pc, #336]	; (8004ce8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b98:	785b      	ldrb	r3, [r3, #1]
 8004b9a:	220a      	movs	r2, #10
 8004b9c:	4953      	ldr	r1, [pc, #332]	; (8004cec <SEGGER_SYSVIEW_Start+0x170>)
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fb fb36 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004baa:	f7ff f8b9 	bl	8003d20 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004bae:	200a      	movs	r0, #10
 8004bb0:	f7ff ff30 	bl	8004a14 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb8:	f04f 0120 	mov.w	r1, #32
 8004bbc:	f381 8811 	msr	BASEPRI, r1
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	484b      	ldr	r0, [pc, #300]	; (8004cf0 <SEGGER_SYSVIEW_Start+0x174>)
 8004bc4:	f7ff fcf8 	bl	80045b8 <_PreparePacket>
 8004bc8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd2:	4b45      	ldr	r3, [pc, #276]	; (8004ce8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd8:	e00b      	b.n	8004bf2 <SEGGER_SYSVIEW_Start+0x76>
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	1c59      	adds	r1, r3, #1
 8004be2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004be4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	09db      	lsrs	r3, r3, #7
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf6:	d8f0      	bhi.n	8004bda <SEGGER_SYSVIEW_Start+0x5e>
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0c:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	e00b      	b.n	8004c2c <SEGGER_SYSVIEW_Start+0xb0>
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	1c59      	adds	r1, r3, #1
 8004c1c:	6279      	str	r1, [r7, #36]	; 0x24
 8004c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	09db      	lsrs	r3, r3, #7
 8004c2a:	623b      	str	r3, [r7, #32]
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c30:	d8f0      	bhi.n	8004c14 <SEGGER_SYSVIEW_Start+0x98>
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	627a      	str	r2, [r7, #36]	; 0x24
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	4b28      	ldr	r3, [pc, #160]	; (8004ce8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e00b      	b.n	8004c66 <SEGGER_SYSVIEW_Start+0xea>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	1c59      	adds	r1, r3, #1
 8004c56:	61f9      	str	r1, [r7, #28]
 8004c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	09db      	lsrs	r3, r3, #7
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b7f      	cmp	r3, #127	; 0x7f
 8004c6a:	d8f0      	bhi.n	8004c4e <SEGGER_SYSVIEW_Start+0xd2>
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	61fa      	str	r2, [r7, #28]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	2300      	movs	r3, #0
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	e00b      	b.n	8004c9e <SEGGER_SYSVIEW_Start+0x122>
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	1c59      	adds	r1, r3, #1
 8004c8e:	6179      	str	r1, [r7, #20]
 8004c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	09db      	lsrs	r3, r3, #7
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca2:	d8f0      	bhi.n	8004c86 <SEGGER_SYSVIEW_Start+0x10a>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	617a      	str	r2, [r7, #20]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004cb4:	2218      	movs	r2, #24
 8004cb6:	6839      	ldr	r1, [r7, #0]
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff fd6f 	bl	800479c <_SendPacket>
      RECORD_END();
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004cd2:	f000 f9eb 	bl	80050ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004cd6:	f000 f9b1 	bl	800503c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004cda:	f000 fc23 	bl	8005524 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004cde:	bf00      	nop
 8004ce0:	3730      	adds	r7, #48	; 0x30
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20014224 	.word	0x20014224
 8004cec:	08005860 	.word	0x08005860
 8004cf0:	20014254 	.word	0x20014254

08004cf4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8004cfe:	f04f 0120 	mov.w	r1, #32
 8004d02:	f381 8811 	msr	BASEPRI, r1
 8004d06:	607b      	str	r3, [r7, #4]
 8004d08:	480b      	ldr	r0, [pc, #44]	; (8004d38 <SEGGER_SYSVIEW_Stop+0x44>)
 8004d0a:	f7ff fc55 	bl	80045b8 <_PreparePacket>
 8004d0e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <SEGGER_SYSVIEW_Stop+0x48>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004d18:	220b      	movs	r2, #11
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	6838      	ldr	r0, [r7, #0]
 8004d1e:	f7ff fd3d 	bl	800479c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <SEGGER_SYSVIEW_Stop+0x48>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20014254 	.word	0x20014254
 8004d3c:	20014224 	.word	0x20014224

08004d40 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	; 0x30
 8004d44:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d46:	f3ef 8311 	mrs	r3, BASEPRI
 8004d4a:	f04f 0120 	mov.w	r1, #32
 8004d4e:	f381 8811 	msr	BASEPRI, r1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	4845      	ldr	r0, [pc, #276]	; (8004e6c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004d56:	f7ff fc2f 	bl	80045b8 <_PreparePacket>
 8004d5a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d64:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6a:	e00b      	b.n	8004d84 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	1c59      	adds	r1, r3, #1
 8004d74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	09db      	lsrs	r3, r3, #7
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	2b7f      	cmp	r3, #127	; 0x7f
 8004d88:	d8f0      	bhi.n	8004d6c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	e00b      	b.n	8004dbe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1c59      	adds	r1, r3, #1
 8004dae:	6279      	str	r1, [r7, #36]	; 0x24
 8004db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	09db      	lsrs	r3, r3, #7
 8004dbc:	623b      	str	r3, [r7, #32]
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc2:	d8f0      	bhi.n	8004da6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	627a      	str	r2, [r7, #36]	; 0x24
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e00b      	b.n	8004df8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	1c59      	adds	r1, r3, #1
 8004de8:	61f9      	str	r1, [r7, #28]
 8004dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	09db      	lsrs	r3, r3, #7
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dfc:	d8f0      	bhi.n	8004de0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	61fa      	str	r2, [r7, #28]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	e00b      	b.n	8004e30 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	6179      	str	r1, [r7, #20]
 8004e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	09db      	lsrs	r3, r3, #7
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b7f      	cmp	r3, #127	; 0x7f
 8004e34:	d8f0      	bhi.n	8004e18 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	617a      	str	r2, [r7, #20]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e46:	2218      	movs	r2, #24
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	68b8      	ldr	r0, [r7, #8]
 8004e4c:	f7ff fca6 	bl	800479c <_SendPacket>
  RECORD_END();
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004e5e:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	4798      	blx	r3
  }
}
 8004e64:	bf00      	nop
 8004e66:	3730      	adds	r7, #48	; 0x30
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20014254 	.word	0x20014254
 8004e70:	20014224 	.word	0x20014224

08004e74 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b092      	sub	sp, #72	; 0x48
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e80:	f04f 0120 	mov.w	r1, #32
 8004e84:	f381 8811 	msr	BASEPRI, r1
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	486a      	ldr	r0, [pc, #424]	; (8005034 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004e8c:	f7ff fb94 	bl	80045b8 <_PreparePacket>
 8004e90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b66      	ldr	r3, [pc, #408]	; (8005038 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea6:	e00b      	b.n	8004ec0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eae:	1c59      	adds	r1, r3, #1
 8004eb0:	6479      	str	r1, [r7, #68]	; 0x44
 8004eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebc:	09db      	lsrs	r3, r3, #7
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec4:	d8f0      	bhi.n	8004ea8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	647a      	str	r2, [r7, #68]	; 0x44
 8004ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee0:	e00b      	b.n	8004efa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee8:	1c59      	adds	r1, r3, #1
 8004eea:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	09db      	lsrs	r3, r3, #7
 8004ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	2b7f      	cmp	r3, #127	; 0x7f
 8004efe:	d8f0      	bhi.n	8004ee2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	4619      	mov	r1, r3
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fafd 	bl	8004518 <_EncodeStr>
 8004f1e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004f20:	2209      	movs	r2, #9
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	6938      	ldr	r0, [r7, #16]
 8004f26:	f7ff fc39 	bl	800479c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b40      	ldr	r3, [pc, #256]	; (8005038 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3e:	e00b      	b.n	8004f58 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	6379      	str	r1, [r7, #52]	; 0x34
 8004f4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	09db      	lsrs	r3, r3, #7
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f5c:	d8f0      	bhi.n	8004f40 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	637a      	str	r2, [r7, #52]	; 0x34
 8004f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f78:	e00b      	b.n	8004f92 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	09db      	lsrs	r3, r3, #7
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	2b7f      	cmp	r3, #127	; 0x7f
 8004f96:	d8f0      	bhi.n	8004f7a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	e00b      	b.n	8004fcc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	1c59      	adds	r1, r3, #1
 8004fbc:	6279      	str	r1, [r7, #36]	; 0x24
 8004fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	09db      	lsrs	r3, r3, #7
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd0:	d8f0      	bhi.n	8004fb4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	e00b      	b.n	8005004 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	61f9      	str	r1, [r7, #28]
 8004ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	09db      	lsrs	r3, r3, #7
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b7f      	cmp	r3, #127	; 0x7f
 8005008:	d8f0      	bhi.n	8004fec <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	61fa      	str	r2, [r7, #28]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800501a:	2215      	movs	r2, #21
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	6938      	ldr	r0, [r7, #16]
 8005020:	f7ff fbbc 	bl	800479c <_SendPacket>
  RECORD_END();
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f383 8811 	msr	BASEPRI, r3
}
 800502a:	bf00      	nop
 800502c:	3748      	adds	r7, #72	; 0x48
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20014254 	.word	0x20014254
 8005038:	20014224 	.word	0x20014224

0800503c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005052:	4b03      	ldr	r3, [pc, #12]	; (8005060 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4798      	blx	r3
  }
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20014224 	.word	0x20014224

08005064 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800506c:	f3ef 8311 	mrs	r3, BASEPRI
 8005070:	f04f 0120 	mov.w	r1, #32
 8005074:	f381 8811 	msr	BASEPRI, r1
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	480b      	ldr	r0, [pc, #44]	; (80050a8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800507c:	f7ff fa9c 	bl	80045b8 <_PreparePacket>
 8005080:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005082:	2280      	movs	r2, #128	; 0x80
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	6938      	ldr	r0, [r7, #16]
 8005088:	f7ff fa46 	bl	8004518 <_EncodeStr>
 800508c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800508e:	220e      	movs	r2, #14
 8005090:	68f9      	ldr	r1, [r7, #12]
 8005092:	6938      	ldr	r0, [r7, #16]
 8005094:	f7ff fb82 	bl	800479c <_SendPacket>
  RECORD_END();
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20014254 	.word	0x20014254

080050ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01a      	beq.n	80050f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80050ba:	4b13      	ldr	r3, [pc, #76]	; (8005108 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d015      	beq.n	80050f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80050c4:	4b10      	ldr	r3, [pc, #64]	; (8005108 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4798      	blx	r3
 80050cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80050d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80050d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	000a      	movs	r2, r1
 80050e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80050e2:	4613      	mov	r3, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4621      	mov	r1, r4
 80050e8:	200d      	movs	r0, #13
 80050ea:	f7ff fced 	bl	8004ac8 <SEGGER_SYSVIEW_RecordU32x2>
 80050ee:	e006      	b.n	80050fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	200c      	movs	r0, #12
 80050f8:	f7ff fcaa 	bl	8004a50 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bd90      	pop	{r4, r7, pc}
 8005106:	bf00      	nop
 8005108:	20014224 	.word	0x20014224
 800510c:	e0001004 	.word	0xe0001004

08005110 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005116:	f3ef 8311 	mrs	r3, BASEPRI
 800511a:	f04f 0120 	mov.w	r1, #32
 800511e:	f381 8811 	msr	BASEPRI, r1
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	4819      	ldr	r0, [pc, #100]	; (800518c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005126:	f7ff fa47 	bl	80045b8 <_PreparePacket>
 800512a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005130:	4b17      	ldr	r3, [pc, #92]	; (8005190 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005138:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	e00b      	b.n	800515c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1c59      	adds	r1, r3, #1
 800514c:	6179      	str	r1, [r7, #20]
 800514e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	09db      	lsrs	r3, r3, #7
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2b7f      	cmp	r3, #127	; 0x7f
 8005160:	d8f0      	bhi.n	8005144 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	617a      	str	r2, [r7, #20]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005172:	2202      	movs	r2, #2
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7ff fb10 	bl	800479c <_SendPacket>
  RECORD_END();
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f383 8811 	msr	BASEPRI, r3
}
 8005182:	bf00      	nop
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20014254 	.word	0x20014254
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800519a:	f3ef 8311 	mrs	r3, BASEPRI
 800519e:	f04f 0120 	mov.w	r1, #32
 80051a2:	f381 8811 	msr	BASEPRI, r1
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	4807      	ldr	r0, [pc, #28]	; (80051c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80051aa:	f7ff fa05 	bl	80045b8 <_PreparePacket>
 80051ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80051b0:	2203      	movs	r2, #3
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6838      	ldr	r0, [r7, #0]
 80051b6:	f7ff faf1 	bl	800479c <_SendPacket>
  RECORD_END();
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f383 8811 	msr	BASEPRI, r3
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20014254 	.word	0x20014254

080051cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051d2:	f3ef 8311 	mrs	r3, BASEPRI
 80051d6:	f04f 0120 	mov.w	r1, #32
 80051da:	f381 8811 	msr	BASEPRI, r1
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	4807      	ldr	r0, [pc, #28]	; (8005200 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80051e2:	f7ff f9e9 	bl	80045b8 <_PreparePacket>
 80051e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80051e8:	2212      	movs	r2, #18
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6838      	ldr	r0, [r7, #0]
 80051ee:	f7ff fad5 	bl	800479c <_SendPacket>
  RECORD_END();
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f383 8811 	msr	BASEPRI, r3
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20014254 	.word	0x20014254

08005204 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800520a:	f3ef 8311 	mrs	r3, BASEPRI
 800520e:	f04f 0120 	mov.w	r1, #32
 8005212:	f381 8811 	msr	BASEPRI, r1
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	4807      	ldr	r0, [pc, #28]	; (8005238 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800521a:	f7ff f9cd 	bl	80045b8 <_PreparePacket>
 800521e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005220:	2211      	movs	r2, #17
 8005222:	6839      	ldr	r1, [r7, #0]
 8005224:	6838      	ldr	r0, [r7, #0]
 8005226:	f7ff fab9 	bl	800479c <_SendPacket>
  RECORD_END();
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f383 8811 	msr	BASEPRI, r3
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20014254 	.word	0x20014254

0800523c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005244:	f3ef 8311 	mrs	r3, BASEPRI
 8005248:	f04f 0120 	mov.w	r1, #32
 800524c:	f381 8811 	msr	BASEPRI, r1
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	4819      	ldr	r0, [pc, #100]	; (80052b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005254:	f7ff f9b0 	bl	80045b8 <_PreparePacket>
 8005258:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800525e:	4b17      	ldr	r3, [pc, #92]	; (80052bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	61fb      	str	r3, [r7, #28]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	e00b      	b.n	800528a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	b2da      	uxtb	r2, r3
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	1c59      	adds	r1, r3, #1
 800527a:	61f9      	str	r1, [r7, #28]
 800527c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	09db      	lsrs	r3, r3, #7
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b7f      	cmp	r3, #127	; 0x7f
 800528e:	d8f0      	bhi.n	8005272 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	61fa      	str	r2, [r7, #28]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80052a0:	2208      	movs	r2, #8
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	6938      	ldr	r0, [r7, #16]
 80052a6:	f7ff fa79 	bl	800479c <_SendPacket>
  RECORD_END();
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f383 8811 	msr	BASEPRI, r3
}
 80052b0:	bf00      	nop
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20014254 	.word	0x20014254
 80052bc:	20014224 	.word	0x20014224

080052c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052c8:	f3ef 8311 	mrs	r3, BASEPRI
 80052cc:	f04f 0120 	mov.w	r1, #32
 80052d0:	f381 8811 	msr	BASEPRI, r1
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	4819      	ldr	r0, [pc, #100]	; (800533c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80052d8:	f7ff f96e 	bl	80045b8 <_PreparePacket>
 80052dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052e2:	4b17      	ldr	r3, [pc, #92]	; (8005340 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e00b      	b.n	800530e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	61f9      	str	r1, [r7, #28]
 8005300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	09db      	lsrs	r3, r3, #7
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b7f      	cmp	r3, #127	; 0x7f
 8005312:	d8f0      	bhi.n	80052f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	61fa      	str	r2, [r7, #28]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005324:	2204      	movs	r2, #4
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	6938      	ldr	r0, [r7, #16]
 800532a:	f7ff fa37 	bl	800479c <_SendPacket>
  RECORD_END();
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f383 8811 	msr	BASEPRI, r3
}
 8005334:	bf00      	nop
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20014254 	.word	0x20014254
 8005340:	20014224 	.word	0x20014224

08005344 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800534c:	f3ef 8311 	mrs	r3, BASEPRI
 8005350:	f04f 0120 	mov.w	r1, #32
 8005354:	f381 8811 	msr	BASEPRI, r1
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	4819      	ldr	r0, [pc, #100]	; (80053c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800535c:	f7ff f92c 	bl	80045b8 <_PreparePacket>
 8005360:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005366:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e00b      	b.n	8005392 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	1c59      	adds	r1, r3, #1
 8005382:	61f9      	str	r1, [r7, #28]
 8005384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	09db      	lsrs	r3, r3, #7
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b7f      	cmp	r3, #127	; 0x7f
 8005396:	d8f0      	bhi.n	800537a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	61fa      	str	r2, [r7, #28]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80053a8:	2206      	movs	r2, #6
 80053aa:	68f9      	ldr	r1, [r7, #12]
 80053ac:	6938      	ldr	r0, [r7, #16]
 80053ae:	f7ff f9f5 	bl	800479c <_SendPacket>
  RECORD_END();
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f383 8811 	msr	BASEPRI, r3
}
 80053b8:	bf00      	nop
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20014254 	.word	0x20014254
 80053c4:	20014224 	.word	0x20014224

080053c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	1ad3      	subs	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20014224 	.word	0x20014224

080053e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	; 0x30
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80053f2:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d06d      	beq.n	80054d6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80053fa:	4b39      	ldr	r3, [pc, #228]	; (80054e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005400:	2300      	movs	r3, #0
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
 8005404:	e008      	b.n	8005418 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	3301      	adds	r3, #1
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541c:	429a      	cmp	r2, r3
 800541e:	d3f2      	bcc.n	8005406 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005420:	e000      	b.n	8005424 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005422:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d055      	beq.n	80054d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800542a:	f3ef 8311 	mrs	r3, BASEPRI
 800542e:	f04f 0120 	mov.w	r1, #32
 8005432:	f381 8811 	msr	BASEPRI, r1
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	482a      	ldr	r0, [pc, #168]	; (80054e4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800543a:	f7ff f8bd 	bl	80045b8 <_PreparePacket>
 800543e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	623b      	str	r3, [r7, #32]
 800544c:	e00b      	b.n	8005466 <SEGGER_SYSVIEW_SendModule+0x7e>
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	1c59      	adds	r1, r3, #1
 8005456:	6279      	str	r1, [r7, #36]	; 0x24
 8005458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	09db      	lsrs	r3, r3, #7
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2b7f      	cmp	r3, #127	; 0x7f
 800546a:	d8f0      	bhi.n	800544e <SEGGER_SYSVIEW_SendModule+0x66>
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	627a      	str	r2, [r7, #36]	; 0x24
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e00b      	b.n	80054a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	b2da      	uxtb	r2, r3
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	1c59      	adds	r1, r3, #1
 8005490:	61f9      	str	r1, [r7, #28]
 8005492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	09db      	lsrs	r3, r3, #7
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b7f      	cmp	r3, #127	; 0x7f
 80054a4:	d8f0      	bhi.n	8005488 <SEGGER_SYSVIEW_SendModule+0xa0>
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	61fa      	str	r2, [r7, #28]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2280      	movs	r2, #128	; 0x80
 80054bc:	4619      	mov	r1, r3
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff f82a 	bl	8004518 <_EncodeStr>
 80054c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80054c6:	2216      	movs	r2, #22
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	6938      	ldr	r0, [r7, #16]
 80054cc:	f7ff f966 	bl	800479c <_SendPacket>
      RECORD_END();
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80054d6:	bf00      	nop
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	2001424c 	.word	0x2001424c
 80054e4:	20014254 	.word	0x20014254

080054e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00f      	beq.n	8005516 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f2      	bne.n	80054fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	2001424c 	.word	0x2001424c

08005524 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800552a:	f3ef 8311 	mrs	r3, BASEPRI
 800552e:	f04f 0120 	mov.w	r1, #32
 8005532:	f381 8811 	msr	BASEPRI, r1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	4817      	ldr	r0, [pc, #92]	; (8005598 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800553a:	f7ff f83d 	bl	80045b8 <_PreparePacket>
 800553e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	4b14      	ldr	r3, [pc, #80]	; (800559c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	e00b      	b.n	8005568 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	6179      	str	r1, [r7, #20]
 800555a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b7f      	cmp	r3, #127	; 0x7f
 800556c:	d8f0      	bhi.n	8005550 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	617a      	str	r2, [r7, #20]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800557e:	221b      	movs	r2, #27
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	68b8      	ldr	r0, [r7, #8]
 8005584:	f7ff f90a 	bl	800479c <_SendPacket>
  RECORD_END();
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f383 8811 	msr	BASEPRI, r3
}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20014254 	.word	0x20014254
 800559c:	20014250 	.word	0x20014250

080055a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055a8:	f3ef 8311 	mrs	r3, BASEPRI
 80055ac:	f04f 0120 	mov.w	r1, #32
 80055b0:	f381 8811 	msr	BASEPRI, r1
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	4827      	ldr	r0, [pc, #156]	; (8005654 <SEGGER_SYSVIEW_Warn+0xb4>)
 80055b8:	f7fe fffe 	bl	80045b8 <_PreparePacket>
 80055bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	6938      	ldr	r0, [r7, #16]
 80055c4:	f7fe ffa8 	bl	8004518 <_EncodeStr>
 80055c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
 80055ce:	2301      	movs	r3, #1
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	e00b      	b.n	80055ec <SEGGER_SYSVIEW_Warn+0x4c>
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	1c59      	adds	r1, r3, #1
 80055dc:	6279      	str	r1, [r7, #36]	; 0x24
 80055de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	09db      	lsrs	r3, r3, #7
 80055ea:	623b      	str	r3, [r7, #32]
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	2b7f      	cmp	r3, #127	; 0x7f
 80055f0:	d8f0      	bhi.n	80055d4 <SEGGER_SYSVIEW_Warn+0x34>
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	627a      	str	r2, [r7, #36]	; 0x24
 80055f8:	6a3a      	ldr	r2, [r7, #32]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	2300      	movs	r3, #0
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e00b      	b.n	8005624 <SEGGER_SYSVIEW_Warn+0x84>
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	1c59      	adds	r1, r3, #1
 8005614:	61f9      	str	r1, [r7, #28]
 8005616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	09db      	lsrs	r3, r3, #7
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b7f      	cmp	r3, #127	; 0x7f
 8005628:	d8f0      	bhi.n	800560c <SEGGER_SYSVIEW_Warn+0x6c>
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	61fa      	str	r2, [r7, #28]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800563a:	221a      	movs	r2, #26
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	6938      	ldr	r0, [r7, #16]
 8005640:	f7ff f8ac 	bl	800479c <_SendPacket>
  RECORD_END();
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f383 8811 	msr	BASEPRI, r3
}
 800564a:	bf00      	nop
 800564c:	3728      	adds	r7, #40	; 0x28
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20014254 	.word	0x20014254

08005658 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800565c:	4b13      	ldr	r3, [pc, #76]	; (80056ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 800565e:	7e1b      	ldrb	r3, [r3, #24]
 8005660:	4619      	mov	r1, r3
 8005662:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005664:	460b      	mov	r3, r1
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	440b      	add	r3, r1
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	336c      	adds	r3, #108	; 0x6c
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005674:	7e1b      	ldrb	r3, [r3, #24]
 8005676:	4618      	mov	r0, r3
 8005678:	490d      	ldr	r1, [pc, #52]	; (80056b0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800567a:	4603      	mov	r3, r0
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4403      	add	r3, r0
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	440b      	add	r3, r1
 8005684:	3370      	adds	r3, #112	; 0x70
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d00b      	beq.n	80056a4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 800568e:	789b      	ldrb	r3, [r3, #2]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d107      	bne.n	80056a4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005696:	2201      	movs	r2, #1
 8005698:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800569a:	f7fe ff99 	bl	80045d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800569e:	4b03      	ldr	r3, [pc, #12]	; (80056ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80056a4:	4b01      	ldr	r3, [pc, #4]	; (80056ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20014224 	.word	0x20014224
 80056b0:	20014384 	.word	0x20014384

080056b4 <__libc_init_array>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	4d0d      	ldr	r5, [pc, #52]	; (80056ec <__libc_init_array+0x38>)
 80056b8:	4c0d      	ldr	r4, [pc, #52]	; (80056f0 <__libc_init_array+0x3c>)
 80056ba:	1b64      	subs	r4, r4, r5
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	2600      	movs	r6, #0
 80056c0:	42a6      	cmp	r6, r4
 80056c2:	d109      	bne.n	80056d8 <__libc_init_array+0x24>
 80056c4:	4d0b      	ldr	r5, [pc, #44]	; (80056f4 <__libc_init_array+0x40>)
 80056c6:	4c0c      	ldr	r4, [pc, #48]	; (80056f8 <__libc_init_array+0x44>)
 80056c8:	f000 f83c 	bl	8005744 <_init>
 80056cc:	1b64      	subs	r4, r4, r5
 80056ce:	10a4      	asrs	r4, r4, #2
 80056d0:	2600      	movs	r6, #0
 80056d2:	42a6      	cmp	r6, r4
 80056d4:	d105      	bne.n	80056e2 <__libc_init_array+0x2e>
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056dc:	4798      	blx	r3
 80056de:	3601      	adds	r6, #1
 80056e0:	e7ee      	b.n	80056c0 <__libc_init_array+0xc>
 80056e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e6:	4798      	blx	r3
 80056e8:	3601      	adds	r6, #1
 80056ea:	e7f2      	b.n	80056d2 <__libc_init_array+0x1e>
 80056ec:	08005874 	.word	0x08005874
 80056f0:	08005874 	.word	0x08005874
 80056f4:	08005874 	.word	0x08005874
 80056f8:	08005878 	.word	0x08005878

080056fc <memcmp>:
 80056fc:	b530      	push	{r4, r5, lr}
 80056fe:	3901      	subs	r1, #1
 8005700:	2400      	movs	r4, #0
 8005702:	42a2      	cmp	r2, r4
 8005704:	d101      	bne.n	800570a <memcmp+0xe>
 8005706:	2000      	movs	r0, #0
 8005708:	e005      	b.n	8005716 <memcmp+0x1a>
 800570a:	5d03      	ldrb	r3, [r0, r4]
 800570c:	3401      	adds	r4, #1
 800570e:	5d0d      	ldrb	r5, [r1, r4]
 8005710:	42ab      	cmp	r3, r5
 8005712:	d0f6      	beq.n	8005702 <memcmp+0x6>
 8005714:	1b58      	subs	r0, r3, r5
 8005716:	bd30      	pop	{r4, r5, pc}

08005718 <memcpy>:
 8005718:	440a      	add	r2, r1
 800571a:	4291      	cmp	r1, r2
 800571c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005720:	d100      	bne.n	8005724 <memcpy+0xc>
 8005722:	4770      	bx	lr
 8005724:	b510      	push	{r4, lr}
 8005726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800572a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800572e:	4291      	cmp	r1, r2
 8005730:	d1f9      	bne.n	8005726 <memcpy+0xe>
 8005732:	bd10      	pop	{r4, pc}

08005734 <memset>:
 8005734:	4402      	add	r2, r0
 8005736:	4603      	mov	r3, r0
 8005738:	4293      	cmp	r3, r2
 800573a:	d100      	bne.n	800573e <memset+0xa>
 800573c:	4770      	bx	lr
 800573e:	f803 1b01 	strb.w	r1, [r3], #1
 8005742:	e7f9      	b.n	8005738 <memset+0x4>

08005744 <_init>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	bf00      	nop
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr

08005750 <_fini>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	bf00      	nop
 8005754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005756:	bc08      	pop	{r3}
 8005758:	469e      	mov	lr, r3
 800575a:	4770      	bx	lr
