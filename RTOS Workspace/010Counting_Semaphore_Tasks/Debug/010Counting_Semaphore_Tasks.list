
010Counting_Semaphore_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d48  08008d48  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008d48  08008d48  00018d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d50  08008d50  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014604  20000084  08008ddc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014688  08008ddc  00024688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020307  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e23  00000000  00000000  000403bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  000441e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  00045930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026311  00000000  00000000  00046ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002057f  00000000  00000000  0006d1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e61f4  00000000  00000000  0008d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017396c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d0  00000000  00000000  001739c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b10 	.word	0x08008b10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08008b10 	.word	0x08008b10

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200145d0 	.word	0x200145d0

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96e 	b.w	8000654 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468c      	mov	ip, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8083 	bne.w	80004a6 <__udivmoddi4+0x116>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d947      	bls.n	8000436 <__udivmoddi4+0xa6>
 80003a6:	fab2 f282 	clz	r2, r2
 80003aa:	b142      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003ac:	f1c2 0020 	rsb	r0, r2, #32
 80003b0:	fa24 f000 	lsr.w	r0, r4, r0
 80003b4:	4091      	lsls	r1, r2
 80003b6:	4097      	lsls	r7, r2
 80003b8:	ea40 0c01 	orr.w	ip, r0, r1
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbbc f6f8 	udiv	r6, ip, r8
 80003c8:	fa1f fe87 	uxth.w	lr, r7
 80003cc:	fb08 c116 	mls	r1, r8, r6, ip
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f10e 	mul.w	r1, r6, lr
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e2:	f080 8119 	bcs.w	8000618 <__udivmoddi4+0x288>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8116 	bls.w	8000618 <__udivmoddi4+0x288>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8105 	bcs.w	800061c <__udivmoddi4+0x28c>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f240 8102 	bls.w	800061c <__udivmoddi4+0x28c>
 8000418:	3802      	subs	r0, #2
 800041a:	443c      	add	r4, r7
 800041c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	2600      	movs	r6, #0
 8000426:	b11d      	cbz	r5, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c5 4300 	strd	r4, r3, [r5]
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	b902      	cbnz	r2, 800043a <__udivmoddi4+0xaa>
 8000438:	deff      	udf	#255	; 0xff
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	2a00      	cmp	r2, #0
 8000440:	d150      	bne.n	80004e4 <__udivmoddi4+0x154>
 8000442:	1bcb      	subs	r3, r1, r7
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fa1f f887 	uxth.w	r8, r7
 800044c:	2601      	movs	r6, #1
 800044e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000452:	0c21      	lsrs	r1, r4, #16
 8000454:	fb0e 331c 	mls	r3, lr, ip, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb08 f30c 	mul.w	r3, r8, ip
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0xe4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0xe2>
 800046c:	428b      	cmp	r3, r1
 800046e:	f200 80e9 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 8000472:	4684      	mov	ip, r0
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000480:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x10c>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x10a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80d9 	bhi.w	800064c <__udivmoddi4+0x2bc>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e7bf      	b.n	8000426 <__udivmoddi4+0x96>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0x12e>
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	f000 80b1 	beq.w	8000612 <__udivmoddi4+0x282>
 80004b0:	2600      	movs	r6, #0
 80004b2:	e9c5 0100 	strd	r0, r1, [r5]
 80004b6:	4630      	mov	r0, r6
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f683 	clz	r6, r3
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d14a      	bne.n	800055c <__udivmoddi4+0x1cc>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0x140>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80b8 	bhi.w	8000640 <__udivmoddi4+0x2b0>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0103 	sbc.w	r1, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	468c      	mov	ip, r1
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d0a8      	beq.n	8000430 <__udivmoddi4+0xa0>
 80004de:	e9c5 4c00 	strd	r4, ip, [r5]
 80004e2:	e7a5      	b.n	8000430 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ec:	4097      	lsls	r7, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f6:	40d9      	lsrs	r1, r3
 80004f8:	4330      	orrs	r0, r6
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	fb0e 1116 	mls	r1, lr, r6, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb06 f108 	mul.w	r1, r6, r8
 8000510:	4299      	cmp	r1, r3
 8000512:	fa04 f402 	lsl.w	r4, r4, r2
 8000516:	d909      	bls.n	800052c <__udivmoddi4+0x19c>
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	f106 3cff 	add.w	ip, r6, #4294967295
 800051e:	f080 808d 	bcs.w	800063c <__udivmoddi4+0x2ac>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 808a 	bls.w	800063c <__udivmoddi4+0x2ac>
 8000528:	3e02      	subs	r6, #2
 800052a:	443b      	add	r3, r7
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b281      	uxth	r1, r0
 8000530:	fbb3 f0fe 	udiv	r0, r3, lr
 8000534:	fb0e 3310 	mls	r3, lr, r0, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb00 f308 	mul.w	r3, r0, r8
 8000540:	428b      	cmp	r3, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x1c4>
 8000544:	1879      	adds	r1, r7, r1
 8000546:	f100 3cff 	add.w	ip, r0, #4294967295
 800054a:	d273      	bcs.n	8000634 <__udivmoddi4+0x2a4>
 800054c:	428b      	cmp	r3, r1
 800054e:	d971      	bls.n	8000634 <__udivmoddi4+0x2a4>
 8000550:	3802      	subs	r0, #2
 8000552:	4439      	add	r1, r7
 8000554:	1acb      	subs	r3, r1, r3
 8000556:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800055a:	e778      	b.n	800044e <__udivmoddi4+0xbe>
 800055c:	f1c6 0c20 	rsb	ip, r6, #32
 8000560:	fa03 f406 	lsl.w	r4, r3, r6
 8000564:	fa22 f30c 	lsr.w	r3, r2, ip
 8000568:	431c      	orrs	r4, r3
 800056a:	fa20 f70c 	lsr.w	r7, r0, ip
 800056e:	fa01 f306 	lsl.w	r3, r1, r6
 8000572:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000576:	fa21 f10c 	lsr.w	r1, r1, ip
 800057a:	431f      	orrs	r7, r3
 800057c:	0c3b      	lsrs	r3, r7, #16
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fa1f f884 	uxth.w	r8, r4
 8000586:	fb0e 1119 	mls	r1, lr, r9, r1
 800058a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800058e:	fb09 fa08 	mul.w	sl, r9, r8
 8000592:	458a      	cmp	sl, r1
 8000594:	fa02 f206 	lsl.w	r2, r2, r6
 8000598:	fa00 f306 	lsl.w	r3, r0, r6
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x220>
 800059e:	1861      	adds	r1, r4, r1
 80005a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a4:	d248      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 80005a6:	458a      	cmp	sl, r1
 80005a8:	d946      	bls.n	8000638 <__udivmoddi4+0x2a8>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4421      	add	r1, r4
 80005b0:	eba1 010a 	sub.w	r1, r1, sl
 80005b4:	b2bf      	uxth	r7, r7
 80005b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80005be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005c2:	fb00 f808 	mul.w	r8, r0, r8
 80005c6:	45b8      	cmp	r8, r7
 80005c8:	d907      	bls.n	80005da <__udivmoddi4+0x24a>
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d22e      	bcs.n	8000630 <__udivmoddi4+0x2a0>
 80005d2:	45b8      	cmp	r8, r7
 80005d4:	d92c      	bls.n	8000630 <__udivmoddi4+0x2a0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4427      	add	r7, r4
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	eba7 0708 	sub.w	r7, r7, r8
 80005e2:	fba0 8902 	umull	r8, r9, r0, r2
 80005e6:	454f      	cmp	r7, r9
 80005e8:	46c6      	mov	lr, r8
 80005ea:	4649      	mov	r1, r9
 80005ec:	d31a      	bcc.n	8000624 <__udivmoddi4+0x294>
 80005ee:	d017      	beq.n	8000620 <__udivmoddi4+0x290>
 80005f0:	b15d      	cbz	r5, 800060a <__udivmoddi4+0x27a>
 80005f2:	ebb3 020e 	subs.w	r2, r3, lr
 80005f6:	eb67 0701 	sbc.w	r7, r7, r1
 80005fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005fe:	40f2      	lsrs	r2, r6
 8000600:	ea4c 0202 	orr.w	r2, ip, r2
 8000604:	40f7      	lsrs	r7, r6
 8000606:	e9c5 2700 	strd	r2, r7, [r5]
 800060a:	2600      	movs	r6, #0
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e70b      	b.n	8000430 <__udivmoddi4+0xa0>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0x60>
 800061c:	4618      	mov	r0, r3
 800061e:	e6fd      	b.n	800041c <__udivmoddi4+0x8c>
 8000620:	4543      	cmp	r3, r8
 8000622:	d2e5      	bcs.n	80005f0 <__udivmoddi4+0x260>
 8000624:	ebb8 0e02 	subs.w	lr, r8, r2
 8000628:	eb69 0104 	sbc.w	r1, r9, r4
 800062c:	3801      	subs	r0, #1
 800062e:	e7df      	b.n	80005f0 <__udivmoddi4+0x260>
 8000630:	4608      	mov	r0, r1
 8000632:	e7d2      	b.n	80005da <__udivmoddi4+0x24a>
 8000634:	4660      	mov	r0, ip
 8000636:	e78d      	b.n	8000554 <__udivmoddi4+0x1c4>
 8000638:	4681      	mov	r9, r0
 800063a:	e7b9      	b.n	80005b0 <__udivmoddi4+0x220>
 800063c:	4666      	mov	r6, ip
 800063e:	e775      	b.n	800052c <__udivmoddi4+0x19c>
 8000640:	4630      	mov	r0, r6
 8000642:	e74a      	b.n	80004da <__udivmoddi4+0x14a>
 8000644:	f1ac 0c02 	sub.w	ip, ip, #2
 8000648:	4439      	add	r1, r7
 800064a:	e713      	b.n	8000474 <__udivmoddi4+0xe4>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	e724      	b.n	800049c <__udivmoddi4+0x10c>
 8000652:	bf00      	nop

08000654 <__aeabi_idiv0>:
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0c      	blt.n	80006c0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_SetPendingIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	3340      	adds	r3, #64	; 0x40
 80006bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SEGGER_UART_init(500000);
 800072a:	4824      	ldr	r0, [pc, #144]	; (80007bc <main+0x98>)
 800072c:	f005 feec 	bl	8006508 <SEGGER_UART_init>
	// Used to collect SEGGER Event time-stamps
	DWT->CTRL |= (1 << 0); //Enable CYCCNT in DWT_CTRL
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <main+0x9c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <main+0x9c>)
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fbba 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f850 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 f936 	bl	80009b4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000748:	f000 f8e4 	bl	8000914 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800074c:	f000 f908 	bl	8000960 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Start Recording with Segger SystemView
	SEGGER_SYSVIEW_Conf();
 8000750:	f005 fd0c 	bl	800616c <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start();

	sprintf(usr_msg,"Demo of usage of counting semaphore\r\n");
 8000754:	491b      	ldr	r1, [pc, #108]	; (80007c4 <main+0xa0>)
 8000756:	481c      	ldr	r0, [pc, #112]	; (80007c8 <main+0xa4>)
 8000758:	f007 fdac 	bl	80082b4 <siprintf>
	printmsg(usr_msg);
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <main+0xa4>)
 800075e:	f000 fa2b 	bl	8000bb8 <printmsg>

	/* Before a semaphore is used it must be explicitly created.  In this example
	a counting semaphore is created.  The semaphore is created to have a maximum
	count value of 10, and an initial count value of 0. */
	xCountingSemaphore = xSemaphoreCreateCounting(10, 0);
 8000762:	2100      	movs	r1, #0
 8000764:	200a      	movs	r0, #10
 8000766:	f002 ffb5 	bl	80036d4 <xQueueCreateCountingSemaphore>
 800076a:	4603      	mov	r3, r0
 800076c:	4a17      	ldr	r2, [pc, #92]	; (80007cc <main+0xa8>)
 800076e:	6013      	str	r3, [r2, #0]

	/* Check the semaphore was created successfully. */
	if(xCountingSemaphore != NULL) {
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <main+0xa8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d019      	beq.n	80007ac <main+0x88>

		/* Enable the button interrupt and set its priority. */
		prvSetupSoftwareInterrupt();
 8000778:	f000 f9c6 	bl	8000b08 <prvSetupSoftwareInterrupt>

		/* Create the 'handler' task.  This is the task that will be synchronized
		with the interrupt.  The handler task is created with a high priority to
		ensure it runs immediately after the interrupt exits.  In this case a
		priority of 3 is chosen. */
		xTaskCreate(vHandlerTask, "Handler", 500, NULL, 3, NULL);
 800077c:	2300      	movs	r3, #0
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2303      	movs	r3, #3
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2300      	movs	r3, #0
 8000786:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800078a:	4911      	ldr	r1, [pc, #68]	; (80007d0 <main+0xac>)
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <main+0xb0>)
 800078e:	f003 fe43 	bl	8004418 <xTaskCreate>

		/* Create the task that will periodically generate a software interrupt.
		This is created with a priority below the handler task to ensure it will
		get preempted each time the handler task exist the Blocked state. */
		xTaskCreate(vPeriodicTask, "Periodic", 500, NULL, 1, NULL);
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <main+0xb4>)
 80007a2:	480e      	ldr	r0, [pc, #56]	; (80007dc <main+0xb8>)
 80007a4:	f003 fe38 	bl	8004418 <xTaskCreate>

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
 80007a8:	f003 ffd2 	bl	8004750 <vTaskStartScheduler>
	}

	sprintf(usr_msg, "Semaphore creation failed... \r\n");
 80007ac:	490c      	ldr	r1, [pc, #48]	; (80007e0 <main+0xbc>)
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <main+0xa4>)
 80007b0:	f007 fd80 	bl	80082b4 <siprintf>
	printmsg(usr_msg);
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <main+0xa4>)
 80007b6:	f000 f9ff 	bl	8000bb8 <printmsg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <main+0x96>
 80007bc:	0007a120 	.word	0x0007a120
 80007c0:	e0001000 	.word	0xe0001000
 80007c4:	08008b28 	.word	0x08008b28
 80007c8:	200000a0 	.word	0x200000a0
 80007cc:	200144dc 	.word	0x200144dc
 80007d0:	08008b50 	.word	0x08008b50
 80007d4:	08000a95 	.word	0x08000a95
 80007d8:	08008b58 	.word	0x08008b58
 80007dc:	08000ac9 	.word	0x08000ac9
 80007e0:	08008b64 	.word	0x08008b64

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0ac      	sub	sp, #176	; 0xb0
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ee:	2234      	movs	r2, #52	; 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f007 fd56 	bl	80082a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	225c      	movs	r2, #92	; 0x5c
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fd47 	bl	80082a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b3c      	ldr	r3, [pc, #240]	; (800090c <SystemClock_Config+0x128>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a3b      	ldr	r2, [pc, #236]	; (800090c <SystemClock_Config+0x128>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <SystemClock_Config+0x128>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b36      	ldr	r3, [pc, #216]	; (8000910 <SystemClock_Config+0x12c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a35      	ldr	r2, [pc, #212]	; (8000910 <SystemClock_Config+0x12c>)
 800083c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <SystemClock_Config+0x12c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800084e:	230a      	movs	r3, #10
 8000850:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085e:	2310      	movs	r3, #16
 8000860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000876:	2308      	movs	r3, #8
 8000878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800087c:	23b4      	movs	r3, #180	; 0xb4
 800087e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fc55 	bl	8002148 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a4:	f000 f9bc 	bl	8000c20 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a8:	f000 fdd6 	bl	8001458 <HAL_PWREx_EnableOverDrive>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008b2:	f000 f9b5 	bl	8000c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2302      	movs	r3, #2
 80008bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008d2:	2105      	movs	r1, #5
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fe0f 	bl	80014f8 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80008e0:	f000 f99e 	bl	8000c20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008e4:	2320      	movs	r3, #32
 80008e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 ff4c 	bl	8001790 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80008fe:	f000 f98f 	bl	8000c20 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	37b0      	adds	r7, #176	; 0xb0
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_RTC_Init+0x44>)
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <MX_RTC_Init+0x48>)
 800091c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_RTC_Init+0x44>)
 8000920:	2240      	movs	r2, #64	; 0x40
 8000922:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_RTC_Init+0x44>)
 8000926:	227f      	movs	r2, #127	; 0x7f
 8000928:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_RTC_Init+0x44>)
 800092c:	22ff      	movs	r2, #255	; 0xff
 800092e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_RTC_Init+0x44>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_RTC_Init+0x44>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_RTC_Init+0x44>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_RTC_Init+0x44>)
 8000944:	f001 fe9e 	bl	8002684 <HAL_RTC_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800094e:	f000 f967 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200144e0 	.word	0x200144e0
 800095c:	40002800 	.word	0x40002800

08000960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_USART2_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_USART2_UART_Init+0x4c>)
 8000998:	f002 fa06 	bl	8002da8 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 f93d 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20014500 	.word	0x20014500
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_GPIO_Init+0xd0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	4812      	ldr	r0, [pc, #72]	; (8000a88 <MX_GPIO_Init+0xd4>)
 8000a40:	f000 fcf0 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_GPIO_Init+0xd8>)
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_GPIO_Init+0xdc>)
 8000a5a:	f000 fb4f 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0xd4>)
 8000a76:	f000 fb41 	bl	80010fc <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	10110000 	.word	0x10110000
 8000a90:	40020800 	.word	0x40020800

08000a94 <vHandlerTask>:

/* USER CODE BEGIN 4 */
static void vHandlerTask(void *pvParameters) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
		/* Use the semaphore to wait for the event.  The semaphore was created
		before the scheduler was started so before this task ran for the first
		time.  The task blocks indefinitely meaning this function call will only
		return once the semaphore has been successfully obtained - so there is no
		need to check the returned value. */
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <vHandlerTask+0x28>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 f9ed 	bl	8003e84 <xQueueSemaphoreTake>

		/* To get here the event must have occurred.  Process the event (in this
		case we just print out a message). */
		sprintf(usr_msg, "Handler task - Processing event.\r\n");
 8000aaa:	4905      	ldr	r1, [pc, #20]	; (8000ac0 <vHandlerTask+0x2c>)
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <vHandlerTask+0x30>)
 8000aae:	f007 fc01 	bl	80082b4 <siprintf>
		printmsg(usr_msg);
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <vHandlerTask+0x30>)
 8000ab4:	f000 f880 	bl	8000bb8 <printmsg>
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 8000ab8:	e7f0      	b.n	8000a9c <vHandlerTask+0x8>
 8000aba:	bf00      	nop
 8000abc:	200144dc 	.word	0x200144dc
 8000ac0:	08008b84 	.word	0x08008b84
 8000ac4:	200000a0 	.word	0x200000a0

08000ac8 <vPeriodicTask>:
	}
}

static void vPeriodicTask(void *pvParameters) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	for(;;) {
		/* This task is just used to 'simulate' an interrupt. This is done by
		periodically generating a software interrupt. */
		vTaskDelay(pdMS_TO_TICKS(500));
 8000ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad4:	f003 fe04 	bl	80046e0 <vTaskDelay>

		/* Generate the interrupt, printing a message both beforehand and
		afterwards so the sequence of execution is evident from the output. */
        sprintf(usr_msg, "Periodic task - Pending the interrupt.\r\n" );
 8000ad8:	4908      	ldr	r1, [pc, #32]	; (8000afc <vPeriodicTask+0x34>)
 8000ada:	4809      	ldr	r0, [pc, #36]	; (8000b00 <vPeriodicTask+0x38>)
 8000adc:	f007 fbea 	bl	80082b4 <siprintf>
    	printmsg(usr_msg);
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <vPeriodicTask+0x38>)
 8000ae2:	f000 f869 	bl	8000bb8 <printmsg>

        /* Pend the interrupt */
        NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 8000ae6:	2028      	movs	r0, #40	; 0x28
 8000ae8:	f7ff fdd4 	bl	8000694 <__NVIC_SetPendingIRQ>

        sprintf(usr_msg, "Periodic task - Resuming.\r\n" );
 8000aec:	4905      	ldr	r1, [pc, #20]	; (8000b04 <vPeriodicTask+0x3c>)
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <vPeriodicTask+0x38>)
 8000af0:	f007 fbe0 	bl	80082b4 <siprintf>
        printmsg(usr_msg);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <vPeriodicTask+0x38>)
 8000af6:	f000 f85f 	bl	8000bb8 <printmsg>
		vTaskDelay(pdMS_TO_TICKS(500));
 8000afa:	e7e9      	b.n	8000ad0 <vPeriodicTask+0x8>
 8000afc:	08008ba8 	.word	0x08008ba8
 8000b00:	200000a0 	.word	0x200000a0
 8000b04:	08008bd4 	.word	0x08008bd4

08000b08 <prvSetupSoftwareInterrupt>:
	}
}

static void prvSetupSoftwareInterrupt(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

	/* The interrupt service routine uses an (interrupt safe) FreeRTOS API
	function so the interrupt priority must be at or below the priority defined
	by configSYSCALL_INTERRUPT_PRIORITY. */

	NVIC_SetPriority(EXTI15_10_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
 8000b0c:	2105      	movs	r1, #5
 8000b0e:	2028      	movs	r0, #40	; 0x28
 8000b10:	f7ff fdde 	bl	80006d0 <__NVIC_SetPriority>

	/* Enable the interrupt */
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b14:	2028      	movs	r0, #40	; 0x28
 8000b16:	f7ff fd9f 	bl	8000658 <__NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
	task, the following 'gives' are to demonstrate that the semaphore latches
	the events to allow the handler task to process them in turn without any
	events getting lost.  This simulates multiple interrupts being taken by the
	processor, even though in this case the events are simulated within a single
	interrupt occurrence.*/
	sprintf(usr_msg, "==>Button_Handler\r\n");
 8000b2a:	491f      	ldr	r1, [pc, #124]	; (8000ba8 <EXTI15_10_IRQHandler+0x88>)
 8000b2c:	481f      	ldr	r0, [pc, #124]	; (8000bac <EXTI15_10_IRQHandler+0x8c>)
 8000b2e:	f007 fbc1 	bl	80082b4 <siprintf>
	printmsg(usr_msg);
 8000b32:	481e      	ldr	r0, [pc, #120]	; (8000bac <EXTI15_10_IRQHandler+0x8c>)
 8000b34:	f000 f840 	bl	8000bb8 <printmsg>

	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <EXTI15_10_IRQHandler+0x90>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	1d3a      	adds	r2, r7, #4
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 ffdf 	bl	8003b04 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <EXTI15_10_IRQHandler+0x90>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1d3a      	adds	r2, r7, #4
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 ffd8 	bl	8003b04 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <EXTI15_10_IRQHandler+0x90>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	1d3a      	adds	r2, r7, #4
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 ffd1 	bl	8003b04 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <EXTI15_10_IRQHandler+0x90>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1d3a      	adds	r2, r7, #4
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 ffca 	bl	8003b04 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <EXTI15_10_IRQHandler+0x90>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	1d3a      	adds	r2, r7, #4
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 ffc3 	bl	8003b04 <xQueueGiveFromISR>
    higher priority task.
    NOTE: The syntax for forcing a context switch within an ISR varies between
    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
    from an ISR! */
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00a      	beq.n	8000b9a <EXTI15_10_IRQHandler+0x7a>
 8000b84:	f007 f87a 	bl	8007c7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <EXTI15_10_IRQHandler+0x94>)
 8000b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	f3bf 8f4f 	dsb	sy
 8000b94:	f3bf 8f6f 	isb	sy
}
 8000b98:	e001      	b.n	8000b9e <EXTI15_10_IRQHandler+0x7e>
    portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000b9a:	f007 f853 	bl	8007c44 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08008bf0 	.word	0x08008bf0
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	200144dc 	.word	0x200144dc
 8000bb4:	e000ed04 	.word	0xe000ed04

08000bb8 <printmsg>:

void printmsg(char *msg) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0; i < strlen(msg); i++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e00b      	b.n	8000bde <printmsg+0x26>
		HAL_UART_Transmit(&huart2, (uint8_t*)&msg[i], sizeof(msg[i]), HAL_MAX_DELAY);
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	18d1      	adds	r1, r2, r3
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <printmsg+0x40>)
 8000bd4:	f002 f935 	bl	8002e42 <HAL_UART_Transmit>
	for(uint32_t i = 0; i < strlen(msg); i++) {
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fb60 	bl	80002a4 <strlen>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d3ec      	bcc.n	8000bc6 <printmsg+0xe>
	}
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20014500 	.word	0x20014500

08000bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0e:	f000 f973 	bl	8000ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40001000 	.word	0x40001000

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <HAL_RTC_MspInit+0x24>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d102      	bne.n	8000c94 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_RTC_MspInit+0x28>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	40002800 	.word	0x40002800
 8000ca4:	42470e3c 	.word	0x42470e3c

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_UART_MspInit+0x94>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d133      	bne.n	8000d32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d02:	230c      	movs	r3, #12
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <HAL_UART_MspInit+0x9c>)
 8000d1e:	f000 f9ed 	bl	80010fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2106      	movs	r1, #6
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f000 f9be 	bl	80010a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2c:	2026      	movs	r0, #38	; 0x26
 8000d2e:	f000 f9d7 	bl	80010e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2036      	movs	r0, #54	; 0x36
 8000d5e:	f000 f9a3 	bl	80010a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d62:	2036      	movs	r0, #54	; 0x36
 8000d64:	f000 f9bc 	bl	80010e0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_InitTick+0xa4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_InitTick+0xa4>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_InitTick+0xa4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f003 0310 	and.w	r3, r3, #16
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d84:	f107 0210 	add.w	r2, r7, #16
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fccc 	bl	800172c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d94:	f000 fca2 	bl	80016dc <HAL_RCC_GetPCLK1Freq>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_InitTick+0xa8>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3b01      	subs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_InitTick+0xac>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_InitTick+0xb0>)
 8000db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_InitTick+0xac>)
 8000db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_InitTick+0xac>)
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_InitTick+0xac>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_InitTick+0xac>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_InitTick+0xac>)
 8000dce:	f001 fd3e 	bl	800284e <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_InitTick+0xac>)
 8000dda:	f001 fd91 	bl	8002900 <HAL_TIM_Base_Start_IT>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	20014544 	.word	0x20014544
 8000df8:	40001000 	.word	0x40001000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM6_DAC_IRQHandler+0x10>)
 8000e2e:	f001 fdd7 	bl	80029e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20014544 	.word	0x20014544

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	; (8000eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e8a:	f7ff ffd7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f007 f9c9 	bl	8008224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fc47 	bl	8000724 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ea4:	08008d58 	.word	0x08008d58
  ldr r2, =_sbss
 8000ea8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000eac:	20014688 	.word	0x20014688

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f8d8 	bl	8001092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff ff30 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fea0 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	2001458c 	.word	0x2001458c

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2001458c 	.word	0x2001458c

08000f38 <__NVIC_SetPriorityGrouping>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff4c 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ba:	f7ff ff61 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff ffb1 	bl	800102c <NVIC_EncodePriority>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff80 	bl	8000fd8 <__NVIC_SetPriority>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff54 	bl	8000f9c <__NVIC_EnableIRQ>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e165      	b.n	80013e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8154 	bne.w	80013de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d005      	beq.n	800114e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	2b02      	cmp	r3, #2
 800114c:	d130      	bne.n	80011b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 0201 	and.w	r2, r3, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d017      	beq.n	80011ec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80ae 	beq.w	80013de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b5d      	ldr	r3, [pc, #372]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a5c      	ldr	r2, [pc, #368]	; (80013fc <HAL_GPIO_Init+0x300>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b5a      	ldr	r3, [pc, #360]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129e:	4a58      	ldr	r2, [pc, #352]	; (8001400 <HAL_GPIO_Init+0x304>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_GPIO_Init+0x308>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x21a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4e      	ldr	r2, [pc, #312]	; (8001408 <HAL_GPIO_Init+0x30c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x216>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4d      	ldr	r2, [pc, #308]	; (800140c <HAL_GPIO_Init+0x310>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x212>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <HAL_GPIO_Init+0x314>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x20e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4b      	ldr	r2, [pc, #300]	; (8001414 <HAL_GPIO_Init+0x318>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x20a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4a      	ldr	r2, [pc, #296]	; (8001418 <HAL_GPIO_Init+0x31c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x206>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a49      	ldr	r2, [pc, #292]	; (800141c <HAL_GPIO_Init+0x320>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x202>
 80012fa:	2306      	movs	r3, #6
 80012fc:	e00c      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 80012fe:	2307      	movs	r3, #7
 8001300:	e00a      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 8001302:	2305      	movs	r3, #5
 8001304:	e008      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 8001306:	2304      	movs	r3, #4
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 800130a:	2303      	movs	r3, #3
 800130c:	e004      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 800130e:	2302      	movs	r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x21c>
 8001316:	2300      	movs	r3, #0
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	f002 0203 	and.w	r2, r2, #3
 800131e:	0092      	lsls	r2, r2, #2
 8001320:	4093      	lsls	r3, r2
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001328:	4935      	ldr	r1, [pc, #212]	; (8001400 <HAL_GPIO_Init+0x304>)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <HAL_GPIO_Init+0x324>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135a:	4a31      	ldr	r2, [pc, #196]	; (8001420 <HAL_GPIO_Init+0x324>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_GPIO_Init+0x324>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001384:	4a26      	ldr	r2, [pc, #152]	; (8001420 <HAL_GPIO_Init+0x324>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_GPIO_Init+0x324>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ae:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <HAL_GPIO_Init+0x324>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_GPIO_Init+0x324>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_GPIO_Init+0x324>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	f67f ae96 	bls.w	8001118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40013800 	.word	0x40013800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021000 	.word	0x40021000
 8001418:	40021400 	.word	0x40021400
 800141c:	40021800 	.word	0x40021800
 8001420:	40013c00 	.word	0x40013c00

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001440:	e003      	b.n	800144a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	041a      	lsls	r2, r3, #16
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_PWREx_EnableOverDrive+0x94>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001484:	f7ff fd4c 	bl	8000f20 <HAL_GetTick>
 8001488:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800148a:	e009      	b.n	80014a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800148c:	f7ff fd48 	bl	8000f20 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800149a:	d901      	bls.n	80014a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e01f      	b.n	80014e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ac:	d1ee      	bne.n	800148c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff fd34 	bl	8000f20 <HAL_GetTick>
 80014b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014ba:	e009      	b.n	80014d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014bc:	f7ff fd30 	bl	8000f20 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ca:	d901      	bls.n	80014d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e007      	b.n	80014e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014dc:	d1ee      	bne.n	80014bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	420e0040 	.word	0x420e0040
 80014f0:	40007000 	.word	0x40007000
 80014f4:	420e0044 	.word	0x420e0044

080014f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0cc      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 030f 	and.w	r3, r3, #15
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d90c      	bls.n	8001534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0b8      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154c:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800156e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	494d      	ldr	r1, [pc, #308]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d044      	beq.n	8001618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d119      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e07f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e067      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 0203 	bic.w	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4934      	ldr	r1, [pc, #208]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e8:	f7ff fc9a 	bl	8000f20 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff fc96 	bl	8000f20 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e04f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 020c 	and.w	r2, r3, #12
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	429a      	cmp	r2, r3
 8001616:	d1eb      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d20c      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e032      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4916      	ldr	r1, [pc, #88]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167e:	f000 fbb1 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	490a      	ldr	r1, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fb52 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00
 80016b4:	40023800 	.word	0x40023800
 80016b8:	08008ce4 	.word	0x08008ce4
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000000 	.word	0x20000000

080016dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016e0:	f7ff fff0 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	0a9b      	lsrs	r3, r3, #10
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	4903      	ldr	r1, [pc, #12]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	08008cf4 	.word	0x08008cf4

08001704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001708:	f7ff ffdc 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	0b5b      	lsrs	r3, r3, #13
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4903      	ldr	r1, [pc, #12]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	08008cf4 	.word	0x08008cf4

0800172c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	220f      	movs	r2, #15
 800173a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_RCC_GetClockConfig+0x5c>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_RCC_GetClockConfig+0x5c>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_RCC_GetClockConfig+0x5c>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_GetClockConfig+0x5c>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_RCC_GetClockConfig+0x60>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 020f 	and.w	r2, r3, #15
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	601a      	str	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d010      	beq.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80017c8:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d6:	496c      	ldr	r1, [pc, #432]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80017e6:	2301      	movs	r3, #1
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d010      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80017f6:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	4960      	ldr	r1, [pc, #384]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001806:	4313      	orrs	r3, r2
 8001808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001814:	2301      	movs	r3, #1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d017      	beq.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800182a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4955      	ldr	r1, [pc, #340]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001834:	4313      	orrs	r3, r2
 8001836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001842:	d101      	bne.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001844:	2301      	movs	r3, #1
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001850:	2301      	movs	r3, #1
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d017      	beq.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001860:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	4946      	ldr	r1, [pc, #280]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001870:	4313      	orrs	r3, r2
 8001872:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800187e:	d101      	bne.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001880:	2301      	movs	r3, #1
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800188c:	2301      	movs	r3, #1
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 808a 	beq.w	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a33      	ldr	r2, [pc, #204]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018c6:	f7ff fb2b 	bl	8000f20 <HAL_GetTick>
 80018ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fb27 	bl	8000f20 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e278      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018ec:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d02f      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001904:	6a3a      	ldr	r2, [r7, #32]
 8001906:	429a      	cmp	r2, r3
 8001908:	d028      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001912:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d114      	bne.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff faf5 	bl	8000f20 <HAL_GetTick>
 8001936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e00a      	b.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff faf1 	bl	8000f20 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e240      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0ee      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001968:	d114      	bne.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800197a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197e:	4902      	ldr	r1, [pc, #8]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
 8001984:	e00c      	b.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
 8001990:	42470e40 	.word	0x42470e40
 8001994:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a49      	ldr	r2, [pc, #292]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800199a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800199e:	6093      	str	r3, [r2, #8]
 80019a0:	4b47      	ldr	r3, [pc, #284]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ac:	4944      	ldr	r1, [pc, #272]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80019c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00a      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80019d4:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00a      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019f6:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a04:	492e      	ldr	r1, [pc, #184]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d011      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a18:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	4926      	ldr	r1, [pc, #152]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a36:	d101      	bne.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	491a      	ldr	r1, [pc, #104]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d011      	beq.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a78:	4911      	ldr	r1, [pc, #68]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a88:	d101      	bne.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a9c:	f040 80ff 	bne.w	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aa6:	f7ff fa3b 	bl	8000f20 <HAL_GetTick>
 8001aaa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001aac:	e00e      	b.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001aae:	f7ff fa37 	bl	8000f20 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d907      	bls.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e188      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	424711e0 	.word	0x424711e0
 8001ac8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001acc:	4b7e      	ldr	r3, [pc, #504]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ea      	bne.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d028      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d124      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b00:	4b71      	ldr	r3, [pc, #452]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b12:	4b6d      	ldr	r3, [pc, #436]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b18:	0e1b      	lsrs	r3, r3, #24
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	085b      	lsrs	r3, r3, #1
 8001b30:	3b01      	subs	r3, #1
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	431a      	orrs	r2, r3
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	061b      	lsls	r3, r3, #24
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	071b      	lsls	r3, r3, #28
 8001b42:	4961      	ldr	r1, [pc, #388]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b5e:	d00a      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d035      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b74:	d130      	bne.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	3301      	adds	r3, #1
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b8e:	0f1b      	lsrs	r3, r3, #28
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	019b      	lsls	r3, r3, #6
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	061b      	lsls	r3, r3, #24
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	071b      	lsls	r3, r3, #28
 8001bb8:	4943      	ldr	r1, [pc, #268]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc6:	f023 021f 	bic.w	r2, r3, #31
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	493d      	ldr	r1, [pc, #244]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d029      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bec:	d124      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bf4:	0c1b      	lsrs	r3, r3, #16
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c06:	0f1b      	lsrs	r3, r3, #28
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	019b      	lsls	r3, r3, #6
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	085b      	lsrs	r3, r3, #1
 8001c20:	3b01      	subs	r3, #1
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	431a      	orrs	r2, r3
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	071b      	lsls	r3, r3, #28
 8001c30:	4925      	ldr	r1, [pc, #148]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d016      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	3b01      	subs	r3, #1
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	071b      	lsls	r3, r3, #28
 8001c6a:	4917      	ldr	r1, [pc, #92]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff f952 	bl	8000f20 <HAL_GetTick>
 8001c7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c80:	f7ff f94e 	bl	8000f20 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e09f      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	f040 8095 	bne.w	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cac:	f7ff f938 	bl	8000f20 <HAL_GetTick>
 8001cb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cb4:	f7ff f934 	bl	8000f20 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d908      	bls.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e085      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	42470068 	.word	0x42470068
 8001cd0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ce0:	d0e8      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02b      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d127      	bne.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	3301      	adds	r3, #1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	019b      	lsls	r3, r3, #6
 8001d26:	431a      	orrs	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	061b      	lsls	r3, r3, #24
 8001d38:	4928      	ldr	r1, [pc, #160]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	4922      	ldr	r1, [pc, #136]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01d      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d6e:	d118      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	0e1b      	lsrs	r3, r3, #24
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	019b      	lsls	r3, r3, #6
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	3b01      	subs	r3, #1
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	431a      	orrs	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	4910      	ldr	r1, [pc, #64]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff f8ba 	bl	8000f20 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001db0:	f7ff f8b6 	bl	8000f20 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e007      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dce:	d1ef      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3730      	adds	r7, #48	; 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	42470070 	.word	0x42470070

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e00:	4bce      	ldr	r3, [pc, #824]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	f200 818d 	bhi.w	8002128 <HAL_RCC_GetSysClockFreq+0x344>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <HAL_RCC_GetSysClockFreq+0x30>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e49 	.word	0x08001e49
 8001e18:	08002129 	.word	0x08002129
 8001e1c:	08002129 	.word	0x08002129
 8001e20:	08002129 	.word	0x08002129
 8001e24:	08001e4f 	.word	0x08001e4f
 8001e28:	08002129 	.word	0x08002129
 8001e2c:	08002129 	.word	0x08002129
 8001e30:	08002129 	.word	0x08002129
 8001e34:	08001e55 	.word	0x08001e55
 8001e38:	08002129 	.word	0x08002129
 8001e3c:	08002129 	.word	0x08002129
 8001e40:	08002129 	.word	0x08002129
 8001e44:	08001fc9 	.word	0x08001fc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4bbd      	ldr	r3, [pc, #756]	; (8002140 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e4a:	61bb      	str	r3, [r7, #24]
       break;
 8001e4c:	e16f      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4e:	4bbd      	ldr	r3, [pc, #756]	; (8002144 <HAL_RCC_GetSysClockFreq+0x360>)
 8001e50:	61bb      	str	r3, [r7, #24]
      break;
 8001e52:	e16c      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e54:	4bb9      	ldr	r3, [pc, #740]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e5c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5e:	4bb7      	ldr	r3, [pc, #732]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d053      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4bb4      	ldr	r3, [pc, #720]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	461a      	mov	r2, r3
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	ea02 0400 	and.w	r4, r2, r0
 8001e82:	603c      	str	r4, [r7, #0]
 8001e84:	400b      	ands	r3, r1
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	014b      	lsls	r3, r1, #5
 8001e9a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e9e:	0142      	lsls	r2, r0, #5
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4623      	mov	r3, r4
 8001ea6:	1ac0      	subs	r0, r0, r3
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	eb61 0103 	sbc.w	r1, r1, r3
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	018b      	lsls	r3, r1, #6
 8001eb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ebc:	0182      	lsls	r2, r0, #6
 8001ebe:	1a12      	subs	r2, r2, r0
 8001ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	00d9      	lsls	r1, r3, #3
 8001ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed2:	00d0      	lsls	r0, r2, #3
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4621      	mov	r1, r4
 8001eda:	1852      	adds	r2, r2, r1
 8001edc:	4629      	mov	r1, r5
 8001ede:	eb43 0101 	adc.w	r1, r3, r1
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	0259      	lsls	r1, r3, #9
 8001eee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ef2:	0250      	lsls	r0, r2, #9
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	f7fe fa2c 	bl	8000360 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	e04c      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f12:	4b8a      	ldr	r3, [pc, #552]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	099b      	lsrs	r3, r3, #6
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f22:	f04f 0100 	mov.w	r1, #0
 8001f26:	ea02 0a00 	and.w	sl, r2, r0
 8001f2a:	ea03 0b01 	and.w	fp, r3, r1
 8001f2e:	4650      	mov	r0, sl
 8001f30:	4659      	mov	r1, fp
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	014b      	lsls	r3, r1, #5
 8001f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f40:	0142      	lsls	r2, r0, #5
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	ebb0 000a 	subs.w	r0, r0, sl
 8001f4a:	eb61 010b 	sbc.w	r1, r1, fp
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	018b      	lsls	r3, r1, #6
 8001f58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f5c:	0182      	lsls	r2, r0, #6
 8001f5e:	1a12      	subs	r2, r2, r0
 8001f60:	eb63 0301 	sbc.w	r3, r3, r1
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	00d9      	lsls	r1, r3, #3
 8001f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f72:	00d0      	lsls	r0, r2, #3
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	eb12 020a 	adds.w	r2, r2, sl
 8001f7c:	eb43 030b 	adc.w	r3, r3, fp
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0299      	lsls	r1, r3, #10
 8001f8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f8e:	0290      	lsls	r0, r2, #10
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	f7fe f9de 	bl	8000360 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fac:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	61bb      	str	r3, [r7, #24]
      break;
 8001fc6:	e0b2      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc8:	4b5c      	ldr	r3, [pc, #368]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd2:	4b5a      	ldr	r3, [pc, #360]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d04d      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fde:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fee:	f04f 0100 	mov.w	r1, #0
 8001ff2:	ea02 0800 	and.w	r8, r2, r0
 8001ff6:	ea03 0901 	and.w	r9, r3, r1
 8001ffa:	4640      	mov	r0, r8
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	014b      	lsls	r3, r1, #5
 8002008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800200c:	0142      	lsls	r2, r0, #5
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	ebb0 0008 	subs.w	r0, r0, r8
 8002016:	eb61 0109 	sbc.w	r1, r1, r9
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	018b      	lsls	r3, r1, #6
 8002024:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002028:	0182      	lsls	r2, r0, #6
 800202a:	1a12      	subs	r2, r2, r0
 800202c:	eb63 0301 	sbc.w	r3, r3, r1
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	00d9      	lsls	r1, r3, #3
 800203a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800203e:	00d0      	lsls	r0, r2, #3
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	eb12 0208 	adds.w	r2, r2, r8
 8002048:	eb43 0309 	adc.w	r3, r3, r9
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	0259      	lsls	r1, r3, #9
 8002056:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800205a:	0250      	lsls	r0, r2, #9
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	461a      	mov	r2, r3
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	f7fe f978 	bl	8000360 <__aeabi_uldivmod>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4613      	mov	r3, r2
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	e04a      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	461a      	mov	r2, r3
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	ea02 0400 	and.w	r4, r2, r0
 8002092:	ea03 0501 	and.w	r5, r3, r1
 8002096:	4620      	mov	r0, r4
 8002098:	4629      	mov	r1, r5
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	014b      	lsls	r3, r1, #5
 80020a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020a8:	0142      	lsls	r2, r0, #5
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	1b00      	subs	r0, r0, r4
 80020b0:	eb61 0105 	sbc.w	r1, r1, r5
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	018b      	lsls	r3, r1, #6
 80020be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020c2:	0182      	lsls	r2, r0, #6
 80020c4:	1a12      	subs	r2, r2, r0
 80020c6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	00d9      	lsls	r1, r3, #3
 80020d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020d8:	00d0      	lsls	r0, r2, #3
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	1912      	adds	r2, r2, r4
 80020e0:	eb45 0303 	adc.w	r3, r5, r3
 80020e4:	f04f 0000 	mov.w	r0, #0
 80020e8:	f04f 0100 	mov.w	r1, #0
 80020ec:	0299      	lsls	r1, r3, #10
 80020ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020f2:	0290      	lsls	r0, r2, #10
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	461a      	mov	r2, r3
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	f7fe f92c 	bl	8000360 <__aeabi_uldivmod>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4613      	mov	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_GetSysClockFreq+0x358>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	0f1b      	lsrs	r3, r3, #28
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	61bb      	str	r3, [r7, #24]
      break;
 8002126:	e002      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetSysClockFreq+0x35c>)
 800212a:	61bb      	str	r3, [r7, #24]
      break;
 800212c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212e:	69bb      	ldr	r3, [r7, #24]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	00f42400 	.word	0x00f42400
 8002144:	007a1200 	.word	0x007a1200

08002148 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e28d      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8083 	beq.w	800226e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002168:	4b94      	ldr	r3, [pc, #592]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b04      	cmp	r3, #4
 8002172:	d019      	beq.n	80021a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002174:	4b91      	ldr	r3, [pc, #580]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800217c:	2b08      	cmp	r3, #8
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002180:	4b8e      	ldr	r3, [pc, #568]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218c:	d00c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4b84      	ldr	r3, [pc, #528]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d05b      	beq.n	800226c <HAL_RCC_OscConfig+0x124>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d157      	bne.n	800226c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e25a      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x90>
 80021ca:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7b      	ldr	r2, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xcc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0xb4>
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a75      	ldr	r2, [pc, #468]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a72      	ldr	r2, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xcc>
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6e      	ldr	r2, [pc, #440]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b6c      	ldr	r3, [pc, #432]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6b      	ldr	r2, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fe80 	bl	8000f20 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fe7c 	bl	8000f20 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e21f      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b61      	ldr	r3, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xdc>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fe6c 	bl	8000f20 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe fe68 	bl	8000f20 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e20b      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x104>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d06f      	beq.n	800235a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800227a:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d017      	beq.n	80022b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002286:	4b4d      	ldr	r3, [pc, #308]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800228e:	2b08      	cmp	r3, #8
 8002290:	d105      	bne.n	800229e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002292:	4b4a      	ldr	r3, [pc, #296]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b44      	ldr	r3, [pc, #272]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x186>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1d3      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fe15 	bl	8000f20 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fa:	f7fe fe11 	bl	8000f20 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1b4      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4925      	ldr	r1, [pc, #148]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RCC_OscConfig+0x278>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fdf4 	bl	8000f20 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233c:	f7fe fdf0 	bl	8000f20 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e193      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d036      	beq.n	80023d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_RCC_OscConfig+0x27c>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe fdd4 	bl	8000f20 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7fe fdd0 	bl	8000f20 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e173      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x234>
 800239a:	e01b      	b.n	80023d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_OscConfig+0x27c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7fe fdbd 	bl	8000f20 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e00e      	b.n	80023c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023aa:	f7fe fdb9 	bl	8000f20 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d907      	bls.n	80023c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e15c      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470000 	.word	0x42470000
 80023c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b8a      	ldr	r3, [pc, #552]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ea      	bne.n	80023aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8097 	beq.w	8002510 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b83      	ldr	r3, [pc, #524]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a7e      	ldr	r2, [pc, #504]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b79      	ldr	r3, [pc, #484]	; (80025f8 <HAL_RCC_OscConfig+0x4b0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCC_OscConfig+0x4b0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a75      	ldr	r2, [pc, #468]	; (80025f8 <HAL_RCC_OscConfig+0x4b0>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7fe fd79 	bl	8000f20 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe fd75 	bl	8000f20 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e118      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b6c      	ldr	r3, [pc, #432]	; (80025f8 <HAL_RCC_OscConfig+0x4b0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x31e>
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a65      	ldr	r2, [pc, #404]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x358>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x340>
 800246e:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a60      	ldr	r2, [pc, #384]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
 800247a:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a5d      	ldr	r2, [pc, #372]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x358>
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	4a59      	ldr	r2, [pc, #356]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	; 0x70
 8002494:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	4a56      	ldr	r2, [pc, #344]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe fd3a 	bl	8000f20 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7fe fd36 	bl	8000f20 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0d7      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	4b4b      	ldr	r3, [pc, #300]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ee      	beq.n	80024b0 <HAL_RCC_OscConfig+0x368>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe fd24 	bl	8000f20 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fd20 	bl	8000f20 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0c1      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ee      	bne.n	80024dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80ad 	beq.w	8002674 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251a:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d060      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d145      	bne.n	80025ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b33      	ldr	r3, [pc, #204]	; (80025fc <HAL_RCC_OscConfig+0x4b4>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fcf4 	bl	8000f20 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fcf0 	bl	8000f20 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e093      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	3b01      	subs	r3, #1
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	071b      	lsls	r3, r3, #28
 8002586:	491b      	ldr	r1, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x4b4>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fcc5 	bl	8000f20 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fcc1 	bl	8000f20 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e064      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x452>
 80025b8:	e05c      	b.n	8002674 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x4b4>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fcae 	bl	8000f20 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fcaa 	bl	8000f20 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e04d      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x480>
 80025e6:	e045      	b.n	8002674 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e040      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x538>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d030      	beq.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d129      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d122      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d119      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e083      	b.n	800279e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7f5b      	ldrb	r3, [r3, #29]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fae8 	bl	8000c7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	22ca      	movs	r2, #202	; 0xca
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2253      	movs	r2, #83	; 0x53
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f897 	bl	80027f6 <RTC_EnterInitMode>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	22ff      	movs	r2, #255	; 0xff
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2204      	movs	r2, #4
 80026da:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e05e      	b.n	800279e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80026ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	041a      	lsls	r2, r3, #16
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f829 	bl	80027a6 <HAL_RTC_WaitForSynchro>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	22ff      	movs	r2, #255	; 0xff
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2204      	movs	r2, #4
 8002766:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e018      	b.n	800279e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c2:	f7fe fbad 	bl	8000f20 <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80027c8:	e009      	b.n	80027de <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80027ca:	f7fe fba9 	bl	8000f20 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d8:	d901      	bls.n	80027de <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e007      	b.n	80027ee <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ee      	beq.n	80027ca <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d119      	bne.n	8002844 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f04f 32ff 	mov.w	r2, #4294967295
 8002818:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800281a:	f7fe fb81 	bl	8000f20 <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002820:	e009      	b.n	8002836 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002822:	f7fe fb7d 	bl	8000f20 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002830:	d901      	bls.n	8002836 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e007      	b.n	8002846 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ee      	beq.n	8002822 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e041      	b.n	80028e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f839 	bl	80028ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3304      	adds	r3, #4
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f000 f9d7 	bl	8002c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d001      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e04e      	b.n	80029b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d022      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x80>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d01d      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x80>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x80>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_TIM_Base_Start_IT+0xcc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x80>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x80>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x80>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x80>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_TIM_Base_Start_IT+0xdc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d010      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	e007      	b.n	80029b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40010400 	.word	0x40010400
 80029d8:	40014000 	.word	0x40014000
 80029dc:	40001800 	.word	0x40001800

080029e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0202 	mvn.w	r2, #2
 8002a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8ee 	bl	8002c04 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8e0 	bl	8002bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8f1 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0204 	mvn.w	r2, #4
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8c4 	bl	8002c04 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8b6 	bl	8002bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8c7 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0208 	mvn.w	r2, #8
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f89a 	bl	8002c04 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f88c 	bl	8002bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f89d 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0210 	mvn.w	r2, #16
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f870 	bl	8002c04 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f862 	bl	8002bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f873 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0201 	mvn.w	r2, #1
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe f84c 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b80      	cmp	r3, #128	; 0x80
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f902 	bl	8002d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f838 	bl	8002c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0220 	mvn.w	r2, #32
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8cc 	bl	8002d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a40      	ldr	r2, [pc, #256]	; (8002d54 <TIM_Base_SetConfig+0x114>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5e:	d00f      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3d      	ldr	r2, [pc, #244]	; (8002d58 <TIM_Base_SetConfig+0x118>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00b      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3c      	ldr	r2, [pc, #240]	; (8002d5c <TIM_Base_SetConfig+0x11c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d007      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <TIM_Base_SetConfig+0x120>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d003      	beq.n	8002c80 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a3a      	ldr	r2, [pc, #232]	; (8002d64 <TIM_Base_SetConfig+0x124>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d108      	bne.n	8002c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2f      	ldr	r2, [pc, #188]	; (8002d54 <TIM_Base_SetConfig+0x114>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca0:	d027      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2c      	ldr	r2, [pc, #176]	; (8002d58 <TIM_Base_SetConfig+0x118>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d023      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2b      	ldr	r2, [pc, #172]	; (8002d5c <TIM_Base_SetConfig+0x11c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2a      	ldr	r2, [pc, #168]	; (8002d60 <TIM_Base_SetConfig+0x120>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <TIM_Base_SetConfig+0x124>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d017      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <TIM_Base_SetConfig+0x128>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <TIM_Base_SetConfig+0x12c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <TIM_Base_SetConfig+0x130>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <TIM_Base_SetConfig+0x134>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <TIM_Base_SetConfig+0x138>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a23      	ldr	r2, [pc, #140]	; (8002d7c <TIM_Base_SetConfig+0x13c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <TIM_Base_SetConfig+0x114>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0xf8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <TIM_Base_SetConfig+0x124>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d103      	bne.n	8002d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	615a      	str	r2, [r3, #20]
}
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40000c00 	.word	0x40000c00
 8002d64:	40010400 	.word	0x40010400
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800
 8002d74:	40001800 	.word	0x40001800
 8002d78:	40001c00 	.word	0x40001c00
 8002d7c:	40002000 	.word	0x40002000

08002d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e03f      	b.n	8002e3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fd ff6a 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f905 	bl	8002ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b08a      	sub	sp, #40	; 0x28
 8002e46:	af02      	add	r7, sp, #8
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d17c      	bne.n	8002f5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_UART_Transmit+0x2c>
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e075      	b.n	8002f5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x3e>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e06e      	b.n	8002f5e <HAL_UART_Transmit+0x11c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2221      	movs	r2, #33	; 0x21
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e96:	f7fe f843 	bl	8000f20 <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb0:	d108      	bne.n	8002ec4 <HAL_UART_Transmit+0x82>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e003      	b.n	8002ecc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ed4:	e02a      	b.n	8002f2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f840 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e036      	b.n	8002f5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10b      	bne.n	8002f0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	3302      	adds	r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	e007      	b.n	8002f1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1cf      	bne.n	8002ed6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2140      	movs	r1, #64	; 0x40
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f810 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e006      	b.n	8002f5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f76:	e02c      	b.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d028      	beq.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f86:	f7fd ffcb 	bl	8000f20 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d21d      	bcs.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fa4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e00f      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d0c3      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003000:	b09f      	sub	sp, #124	; 0x7c
 8003002:	af00      	add	r7, sp, #0
 8003004:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003012:	68d9      	ldr	r1, [r3, #12]
 8003014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	ea40 0301 	orr.w	r3, r0, r1
 800301c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800301e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	431a      	orrs	r2, r3
 8003028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	431a      	orrs	r2, r3
 800302e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4313      	orrs	r3, r2
 8003034:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003040:	f021 010c 	bic.w	r1, r1, #12
 8003044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800304a:	430b      	orrs	r3, r1
 800304c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800304e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305a:	6999      	ldr	r1, [r3, #24]
 800305c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	ea40 0301 	orr.w	r3, r0, r1
 8003064:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4bc5      	ldr	r3, [pc, #788]	; (8003380 <UART_SetConfig+0x384>)
 800306c:	429a      	cmp	r2, r3
 800306e:	d004      	beq.n	800307a <UART_SetConfig+0x7e>
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4bc3      	ldr	r3, [pc, #780]	; (8003384 <UART_SetConfig+0x388>)
 8003076:	429a      	cmp	r2, r3
 8003078:	d103      	bne.n	8003082 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800307a:	f7fe fb43 	bl	8001704 <HAL_RCC_GetPCLK2Freq>
 800307e:	6778      	str	r0, [r7, #116]	; 0x74
 8003080:	e002      	b.n	8003088 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003082:	f7fe fb2b 	bl	80016dc <HAL_RCC_GetPCLK1Freq>
 8003086:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003090:	f040 80b6 	bne.w	8003200 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003096:	461c      	mov	r4, r3
 8003098:	f04f 0500 	mov.w	r5, #0
 800309c:	4622      	mov	r2, r4
 800309e:	462b      	mov	r3, r5
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	6439      	str	r1, [r7, #64]	; 0x40
 80030a4:	415b      	adcs	r3, r3
 80030a6:	647b      	str	r3, [r7, #68]	; 0x44
 80030a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ac:	1912      	adds	r2, r2, r4
 80030ae:	eb45 0303 	adc.w	r3, r5, r3
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	00d9      	lsls	r1, r3, #3
 80030bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c0:	00d0      	lsls	r0, r2, #3
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	1911      	adds	r1, r2, r4
 80030c8:	6639      	str	r1, [r7, #96]	; 0x60
 80030ca:	416b      	adcs	r3, r5
 80030cc:	667b      	str	r3, [r7, #100]	; 0x64
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	1891      	adds	r1, r2, r2
 80030da:	63b9      	str	r1, [r7, #56]	; 0x38
 80030dc:	415b      	adcs	r3, r3
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030e8:	f7fd f93a 	bl	8000360 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4ba5      	ldr	r3, [pc, #660]	; (8003388 <UART_SetConfig+0x38c>)
 80030f2:	fba3 2302 	umull	r2, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	011e      	lsls	r6, r3, #4
 80030fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030fc:	461c      	mov	r4, r3
 80030fe:	f04f 0500 	mov.w	r5, #0
 8003102:	4622      	mov	r2, r4
 8003104:	462b      	mov	r3, r5
 8003106:	1891      	adds	r1, r2, r2
 8003108:	6339      	str	r1, [r7, #48]	; 0x30
 800310a:	415b      	adcs	r3, r3
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
 800310e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003112:	1912      	adds	r2, r2, r4
 8003114:	eb45 0303 	adc.w	r3, r5, r3
 8003118:	f04f 0000 	mov.w	r0, #0
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	00d9      	lsls	r1, r3, #3
 8003122:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003126:	00d0      	lsls	r0, r2, #3
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	1911      	adds	r1, r2, r4
 800312e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003130:	416b      	adcs	r3, r5
 8003132:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	461a      	mov	r2, r3
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	1891      	adds	r1, r2, r2
 8003140:	62b9      	str	r1, [r7, #40]	; 0x28
 8003142:	415b      	adcs	r3, r3
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800314a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800314e:	f7fd f907 	bl	8000360 <__aeabi_uldivmod>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4b8c      	ldr	r3, [pc, #560]	; (8003388 <UART_SetConfig+0x38c>)
 8003158:	fba3 1302 	umull	r1, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2164      	movs	r1, #100	; 0x64
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3332      	adds	r3, #50	; 0x32
 800316a:	4a87      	ldr	r2, [pc, #540]	; (8003388 <UART_SetConfig+0x38c>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003178:	441e      	add	r6, r3
 800317a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317c:	4618      	mov	r0, r3
 800317e:	f04f 0100 	mov.w	r1, #0
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	1894      	adds	r4, r2, r2
 8003188:	623c      	str	r4, [r7, #32]
 800318a:	415b      	adcs	r3, r3
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003192:	1812      	adds	r2, r2, r0
 8003194:	eb41 0303 	adc.w	r3, r1, r3
 8003198:	f04f 0400 	mov.w	r4, #0
 800319c:	f04f 0500 	mov.w	r5, #0
 80031a0:	00dd      	lsls	r5, r3, #3
 80031a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031a6:	00d4      	lsls	r4, r2, #3
 80031a8:	4622      	mov	r2, r4
 80031aa:	462b      	mov	r3, r5
 80031ac:	1814      	adds	r4, r2, r0
 80031ae:	653c      	str	r4, [r7, #80]	; 0x50
 80031b0:	414b      	adcs	r3, r1
 80031b2:	657b      	str	r3, [r7, #84]	; 0x54
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	1891      	adds	r1, r2, r2
 80031c0:	61b9      	str	r1, [r7, #24]
 80031c2:	415b      	adcs	r3, r3
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031ce:	f7fd f8c7 	bl	8000360 <__aeabi_uldivmod>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <UART_SetConfig+0x38c>)
 80031d8:	fba3 1302 	umull	r1, r3, r3, r2
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	2164      	movs	r1, #100	; 0x64
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	3332      	adds	r3, #50	; 0x32
 80031ea:	4a67      	ldr	r2, [pc, #412]	; (8003388 <UART_SetConfig+0x38c>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	f003 0207 	and.w	r2, r3, #7
 80031f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4432      	add	r2, r6
 80031fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031fe:	e0b9      	b.n	8003374 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003202:	461c      	mov	r4, r3
 8003204:	f04f 0500 	mov.w	r5, #0
 8003208:	4622      	mov	r2, r4
 800320a:	462b      	mov	r3, r5
 800320c:	1891      	adds	r1, r2, r2
 800320e:	6139      	str	r1, [r7, #16]
 8003210:	415b      	adcs	r3, r3
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003218:	1912      	adds	r2, r2, r4
 800321a:	eb45 0303 	adc.w	r3, r5, r3
 800321e:	f04f 0000 	mov.w	r0, #0
 8003222:	f04f 0100 	mov.w	r1, #0
 8003226:	00d9      	lsls	r1, r3, #3
 8003228:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800322c:	00d0      	lsls	r0, r2, #3
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	eb12 0804 	adds.w	r8, r2, r4
 8003236:	eb43 0905 	adc.w	r9, r3, r5
 800323a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	008b      	lsls	r3, r1, #2
 800324e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003252:	0082      	lsls	r2, r0, #2
 8003254:	4640      	mov	r0, r8
 8003256:	4649      	mov	r1, r9
 8003258:	f7fd f882 	bl	8000360 <__aeabi_uldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4b49      	ldr	r3, [pc, #292]	; (8003388 <UART_SetConfig+0x38c>)
 8003262:	fba3 2302 	umull	r2, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	011e      	lsls	r6, r3, #4
 800326a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800326c:	4618      	mov	r0, r3
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	1894      	adds	r4, r2, r2
 8003278:	60bc      	str	r4, [r7, #8]
 800327a:	415b      	adcs	r3, r3
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003282:	1812      	adds	r2, r2, r0
 8003284:	eb41 0303 	adc.w	r3, r1, r3
 8003288:	f04f 0400 	mov.w	r4, #0
 800328c:	f04f 0500 	mov.w	r5, #0
 8003290:	00dd      	lsls	r5, r3, #3
 8003292:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003296:	00d4      	lsls	r4, r2, #3
 8003298:	4622      	mov	r2, r4
 800329a:	462b      	mov	r3, r5
 800329c:	1814      	adds	r4, r2, r0
 800329e:	64bc      	str	r4, [r7, #72]	; 0x48
 80032a0:	414b      	adcs	r3, r1
 80032a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	008b      	lsls	r3, r1, #2
 80032b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032bc:	0082      	lsls	r2, r0, #2
 80032be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032c2:	f7fd f84d 	bl	8000360 <__aeabi_uldivmod>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <UART_SetConfig+0x38c>)
 80032cc:	fba3 1302 	umull	r1, r3, r3, r2
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	2164      	movs	r1, #100	; 0x64
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	3332      	adds	r3, #50	; 0x32
 80032de:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <UART_SetConfig+0x38c>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ea:	441e      	add	r6, r3
 80032ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ee:	4618      	mov	r0, r3
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	1894      	adds	r4, r2, r2
 80032fa:	603c      	str	r4, [r7, #0]
 80032fc:	415b      	adcs	r3, r3
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003304:	1812      	adds	r2, r2, r0
 8003306:	eb41 0303 	adc.w	r3, r1, r3
 800330a:	f04f 0400 	mov.w	r4, #0
 800330e:	f04f 0500 	mov.w	r5, #0
 8003312:	00dd      	lsls	r5, r3, #3
 8003314:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003318:	00d4      	lsls	r4, r2, #3
 800331a:	4622      	mov	r2, r4
 800331c:	462b      	mov	r3, r5
 800331e:	eb12 0a00 	adds.w	sl, r2, r0
 8003322:	eb43 0b01 	adc.w	fp, r3, r1
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4618      	mov	r0, r3
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800333e:	0082      	lsls	r2, r0, #2
 8003340:	4650      	mov	r0, sl
 8003342:	4659      	mov	r1, fp
 8003344:	f7fd f80c 	bl	8000360 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <UART_SetConfig+0x38c>)
 800334e:	fba3 1302 	umull	r1, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2164      	movs	r1, #100	; 0x64
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	4a09      	ldr	r2, [pc, #36]	; (8003388 <UART_SetConfig+0x38c>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	f003 020f 	and.w	r2, r3, #15
 800336c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4432      	add	r2, r6
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	377c      	adds	r7, #124	; 0x7c
 8003378:	46bd      	mov	sp, r7
 800337a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337e:	bf00      	nop
 8003380:	40011000 	.word	0x40011000
 8003384:	40011400 	.word	0x40011400
 8003388:	51eb851f 	.word	0x51eb851f

0800338c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f103 0208 	add.w	r2, r3, #8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295
 80033a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f103 0208 	add.w	r2, r3, #8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f103 0208 	add.w	r2, r3, #8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d103      	bne.n	800344e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e00c      	b.n	8003468 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3308      	adds	r3, #8
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e002      	b.n	800345c <vListInsert+0x2e>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	d2f6      	bcs.n	8003456 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	601a      	str	r2, [r3, #0]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6852      	ldr	r2, [r2, #4]
 80034c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d103      	bne.n	80034d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800351e:	f002 fbdb 	bl	8005cd8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	441a      	add	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	3b01      	subs	r3, #1
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	441a      	add	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d114      	bne.n	800359e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01a      	beq.n	80035b2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3310      	adds	r3, #16
 8003580:	4618      	mov	r0, r3
 8003582:	f001 fb8f 	bl	8004ca4 <xTaskRemoveFromEventList>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <xQueueGenericReset+0xcc>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	e009      	b.n	80035b2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3310      	adds	r3, #16
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fef2 	bl	800338c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3324      	adds	r3, #36	; 0x24
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff feed 	bl	800338c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80035b2:	f002 fbc1 	bl	8005d38 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80035b6:	2301      	movs	r3, #1
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	e000ed04 	.word	0xe000ed04

080035c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08c      	sub	sp, #48	; 0x30
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <xQueueGenericCreate+0x2a>
        __asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	61bb      	str	r3, [r7, #24]
    }
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d006      	beq.n	800360c <xQueueGenericCreate+0x48>
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	429a      	cmp	r2, r3
 800360a:	d101      	bne.n	8003610 <xQueueGenericCreate+0x4c>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <xQueueGenericCreate+0x4e>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <xQueueGenericCreate+0x68>
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	617b      	str	r3, [r7, #20]
    }
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003632:	d90a      	bls.n	800364a <xQueueGenericCreate+0x86>
        __asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	613b      	str	r3, [r7, #16]
    }
 8003646:	bf00      	nop
 8003648:	e7fe      	b.n	8003648 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	3350      	adds	r3, #80	; 0x50
 800364e:	4618      	mov	r0, r3
 8003650:	f002 fc6c 	bl	8005f2c <pvPortMalloc>
 8003654:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	3350      	adds	r3, #80	; 0x50
 8003664:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003666:	79fa      	ldrb	r2, [r7, #7]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f805 	bl	8003682 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003678:	6a3b      	ldr	r3, [r7, #32]
    }
 800367a:	4618      	mov	r0, r3
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e002      	b.n	80036a4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036b0:	2101      	movs	r1, #1
 80036b2:	69b8      	ldr	r0, [r7, #24]
 80036b4:	f7ff ff1e 	bl	80034f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	68f9      	ldr	r1, [r7, #12]
 80036c6:	2073      	movs	r0, #115	; 0x73
 80036c8:	f003 fea8 	bl	800741c <SEGGER_SYSVIEW_RecordU32x3>
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	613b      	str	r3, [r7, #16]
    }
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d90a      	bls.n	8003718 <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	60fb      	str	r3, [r7, #12]
    }
 8003714:	bf00      	nop
 8003716:	e7fe      	b.n	8003716 <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003718:	2202      	movs	r2, #2
 800371a:	2100      	movs	r1, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff ff51 	bl	80035c4 <xQueueGenericCreate>
 8003722:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8003730:	697b      	ldr	r3, [r7, #20]
    }
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b090      	sub	sp, #64	; 0x40
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800374a:	2300      	movs	r3, #0
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xQueueGenericSend+0x32>
        __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d103      	bne.n	800377c <xQueueGenericSend+0x40>
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <xQueueGenericSend+0x44>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <xQueueGenericSend+0x46>
 8003780:	2300      	movs	r3, #0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <xQueueGenericSend+0x60>
        __asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d103      	bne.n	80037aa <xQueueGenericSend+0x6e>
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <xQueueGenericSend+0x72>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <xQueueGenericSend+0x74>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericSend+0x8e>
        __asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	623b      	str	r3, [r7, #32]
    }
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ca:	f001 fc0b 	bl	8004fe4 <xTaskGetSchedulerState>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d102      	bne.n	80037da <xQueueGenericSend+0x9e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <xQueueGenericSend+0xa2>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <xQueueGenericSend+0xa4>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xQueueGenericSend+0xbe>
        __asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	61fb      	str	r3, [r7, #28]
    }
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80037fa:	f002 fa6d 	bl	8005cd8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <xQueueGenericSend+0xd4>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d136      	bne.n	800387e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	4618      	mov	r0, r3
 8003814:	f004 fb90 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	460b      	mov	r3, r1
 8003822:	4601      	mov	r1, r0
 8003824:	205a      	movs	r0, #90	; 0x5a
 8003826:	f003 fe6f 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003830:	f000 fc7c 	bl	800412c <prvCopyDataToQueue>
 8003834:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	3324      	adds	r3, #36	; 0x24
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fa2e 	bl	8004ca4 <xTaskRemoveFromEventList>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d013      	beq.n	8003876 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800384e:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <xQueueGenericSend+0x248>)
 8003850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	e00a      	b.n	8003876 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <xQueueGenericSend+0x248>)
 8003868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003876:	f002 fa5f 	bl	8005d38 <vPortExitCritical>
                return pdPASS;
 800387a:	2301      	movs	r3, #1
 800387c:	e07d      	b.n	800397a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d110      	bne.n	80038a6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003884:	f002 fa58 	bl	8005d38 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fb54 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	460b      	mov	r3, r1
 800389a:	4601      	mov	r1, r0
 800389c:	205a      	movs	r0, #90	; 0x5a
 800389e:	f003 fe33 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e069      	b.n	800397a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80038ac:	f107 0314 	add.w	r3, r7, #20
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fa5d 	bl	8004d70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80038b6:	2301      	movs	r3, #1
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80038ba:	f002 fa3d 	bl	8005d38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80038be:	f000 ffa9 	bl	8004814 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80038c2:	f002 fa09 	bl	8005cd8 <vPortEnterCritical>
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d103      	bne.n	80038dc <xQueueGenericSend+0x1a0>
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038e2:	b25b      	sxtb	r3, r3
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d103      	bne.n	80038f2 <xQueueGenericSend+0x1b6>
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038f2:	f002 fa21 	bl	8005d38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038f6:	1d3a      	adds	r2, r7, #4
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	4611      	mov	r1, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 fa4c 	bl	8004d9c <xTaskCheckForTimeOut>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d124      	bne.n	8003954 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800390a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800390c:	f000 fd06 	bl	800431c <prvIsQueueFull>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d018      	beq.n	8003948 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	3310      	adds	r3, #16
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f001 f96e 	bl	8004c00 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003926:	f000 fc91 	bl	800424c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800392a:	f000 ff81 	bl	8004830 <xTaskResumeAll>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	f47f af62 	bne.w	80037fa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <xQueueGenericSend+0x248>)
 8003938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	e758      	b.n	80037fa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800394a:	f000 fc7f 	bl	800424c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800394e:	f000 ff6f 	bl	8004830 <xTaskResumeAll>
 8003952:	e752      	b.n	80037fa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003956:	f000 fc79 	bl	800424c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800395a:	f000 ff69 	bl	8004830 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	4618      	mov	r0, r3
 8003962:	f004 fae9 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	460b      	mov	r3, r1
 8003970:	4601      	mov	r1, r0
 8003972:	205a      	movs	r0, #90	; 0x5a
 8003974:	f003 fdc8 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003978:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800397a:	4618      	mov	r0, r3
 800397c:	3738      	adds	r7, #56	; 0x38
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b090      	sub	sp, #64	; 0x40
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <xQueueGenericSendFromISR+0x3c>
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <xQueueGenericSendFromISR+0x40>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <xQueueGenericSendFromISR+0x42>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d103      	bne.n	80039f2 <xQueueGenericSendFromISR+0x6a>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <xQueueGenericSendFromISR+0x6e>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueGenericSendFromISR+0x70>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	623b      	str	r3, [r7, #32]
    }
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a12:	f002 fa4b 	bl	8005eac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003a16:	f3ef 8211 	mrs	r2, BASEPRI
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	61fa      	str	r2, [r7, #28]
 8003a2c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <xQueueGenericSendFromISR+0xbc>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d148      	bne.n	8003ad6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	4618      	mov	r0, r3
 8003a58:	f004 fa6e 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003a5c:	4601      	mov	r1, r0
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	461a      	mov	r2, r3
 8003a62:	2060      	movs	r0, #96	; 0x60
 8003a64:	f003 fc80 	bl	8007368 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a6e:	f000 fb5d 	bl	800412c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003a72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d112      	bne.n	8003aa2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d025      	beq.n	8003ad0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a86:	3324      	adds	r3, #36	; 0x24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 f90b 	bl	8004ca4 <xTaskRemoveFromEventList>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01d      	beq.n	8003ad0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01a      	beq.n	8003ad0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e016      	b.n	8003ad0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003aa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8003aa8:	d10a      	bne.n	8003ac0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	617b      	str	r3, [r7, #20]
    }
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	b25a      	sxtb	r2, r3
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003ad4:	e00b      	b.n	8003aee <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f004 fa2d 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003ade:	4601      	mov	r1, r0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2060      	movs	r0, #96	; 0x60
 8003ae6:	f003 fc3f 	bl	8007368 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003af8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3740      	adds	r7, #64	; 0x40
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08e      	sub	sp, #56	; 0x38
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xQueueGiveFromISR+0x2a>
        __asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	623b      	str	r3, [r7, #32]
    }
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <xQueueGiveFromISR+0x48>
        __asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	61fb      	str	r3, [r7, #28]
    }
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <xQueueGiveFromISR+0x58>
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <xQueueGiveFromISR+0x5c>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <xQueueGiveFromISR+0x5e>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <xQueueGiveFromISR+0x78>
        __asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	61bb      	str	r3, [r7, #24]
    }
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b7c:	f002 f996 	bl	8005eac <vPortValidateInterruptPriority>
        __asm volatile
 8003b80:	f3ef 8211 	mrs	r2, BASEPRI
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	617a      	str	r2, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8003b98:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d244      	bcs.n	8003c36 <xQueueGiveFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 f9bd 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2060      	movs	r0, #96	; 0x60
 8003bc6:	f003 fbcf 	bl	8007368 <SEGGER_SYSVIEW_RecordU32x2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003bd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d112      	bne.n	8003c02 <xQueueGiveFromISR+0xfe>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d025      	beq.n	8003c30 <xQueueGiveFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	3324      	adds	r3, #36	; 0x24
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 f85b 	bl	8004ca4 <xTaskRemoveFromEventList>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01d      	beq.n	8003c30 <xQueueGiveFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01a      	beq.n	8003c30 <xQueueGiveFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e016      	b.n	8003c30 <xQueueGiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003c02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c06:	2b7f      	cmp	r3, #127	; 0x7f
 8003c08:	d10a      	bne.n	8003c20 <xQueueGiveFromISR+0x11c>
        __asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	60fb      	str	r3, [r7, #12]
    }
 8003c1c:	bf00      	nop
 8003c1e:	e7fe      	b.n	8003c1e <xQueueGiveFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c24:	3301      	adds	r3, #1
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	b25a      	sxtb	r2, r3
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003c30:	2301      	movs	r3, #1
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
 8003c34:	e00b      	b.n	8003c4e <xQueueGiveFromISR+0x14a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f004 f97d 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003c3e:	4601      	mov	r1, r0
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	2060      	movs	r0, #96	; 0x60
 8003c46:	f003 fb8f 	bl	8007368 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f383 8811 	msr	BASEPRI, r3
    }
 8003c58:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3738      	adds	r7, #56	; 0x38
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b08f      	sub	sp, #60	; 0x3c
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <xQueueReceive+0x30>
        __asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	623b      	str	r3, [r7, #32]
    }
 8003c90:	bf00      	nop
 8003c92:	e7fe      	b.n	8003c92 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <xQueueReceive+0x3e>
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <xQueueReceive+0x42>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <xQueueReceive+0x44>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xQueueReceive+0x5e>
        __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	61fb      	str	r3, [r7, #28]
    }
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cc2:	f001 f98f 	bl	8004fe4 <xTaskGetSchedulerState>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <xQueueReceive+0x6e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <xQueueReceive+0x72>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueReceive+0x74>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xQueueReceive+0x8e>
        __asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	61bb      	str	r3, [r7, #24]
    }
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003cf2:	f001 fff1 	bl	8005cd8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d02f      	beq.n	8003d62 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d06:	f000 fa7b 	bl	8004200 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f004 f913 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003d12:	4604      	mov	r4, r0
 8003d14:	2000      	movs	r0, #0
 8003d16:	f004 f90f 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	9100      	str	r1, [sp, #0]
 8003d22:	4621      	mov	r1, r4
 8003d24:	205c      	movs	r0, #92	; 0x5c
 8003d26:	f003 fbef 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00f      	beq.n	8003d5a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 ffb0 	bl	8004ca4 <xTaskRemoveFromEventList>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003d4a:	4b4d      	ldr	r3, [pc, #308]	; (8003e80 <xQueueReceive+0x21c>)
 8003d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003d5a:	f001 ffed 	bl	8005d38 <vPortExitCritical>
                return pdPASS;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e08a      	b.n	8003e78 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d113      	bne.n	8003d90 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d68:	f001 ffe6 	bl	8005d38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f004 f8e2 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003d74:	4604      	mov	r4, r0
 8003d76:	2000      	movs	r0, #0
 8003d78:	f004 f8de 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2101      	movs	r1, #1
 8003d82:	9100      	str	r1, [sp, #0]
 8003d84:	4621      	mov	r1, r4
 8003d86:	205c      	movs	r0, #92	; 0x5c
 8003d88:	f003 fbbe 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e073      	b.n	8003e78 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d96:	f107 0310 	add.w	r3, r7, #16
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 ffe8 	bl	8004d70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003da4:	f001 ffc8 	bl	8005d38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003da8:	f000 fd34 	bl	8004814 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003dac:	f001 ff94 	bl	8005cd8 <vPortEnterCritical>
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d103      	bne.n	8003dc6 <xQueueReceive+0x162>
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d103      	bne.n	8003ddc <xQueueReceive+0x178>
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ddc:	f001 ffac 	bl	8005d38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de0:	1d3a      	adds	r2, r7, #4
 8003de2:	f107 0310 	add.w	r3, r7, #16
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 ffd7 	bl	8004d9c <xTaskCheckForTimeOut>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d124      	bne.n	8003e3e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df6:	f000 fa7b 	bl	80042f0 <prvIsQueueEmpty>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d018      	beq.n	8003e32 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	3324      	adds	r3, #36	; 0x24
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fef9 	bl	8004c00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e10:	f000 fa1c 	bl	800424c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003e14:	f000 fd0c 	bl	8004830 <xTaskResumeAll>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f47f af69 	bne.w	8003cf2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003e20:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <xQueueReceive+0x21c>)
 8003e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	e75f      	b.n	8003cf2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e34:	f000 fa0a 	bl	800424c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e38:	f000 fcfa 	bl	8004830 <xTaskResumeAll>
 8003e3c:	e759      	b.n	8003cf2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e40:	f000 fa04 	bl	800424c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e44:	f000 fcf4 	bl	8004830 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e4a:	f000 fa51 	bl	80042f0 <prvIsQueueEmpty>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f43f af4e 	beq.w	8003cf2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 f86d 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	2000      	movs	r0, #0
 8003e62:	f004 f869 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003e66:	4602      	mov	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	9100      	str	r1, [sp, #0]
 8003e6e:	4621      	mov	r1, r4
 8003e70:	205c      	movs	r0, #92	; 0x5c
 8003e72:	f003 fb49 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003e76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3734      	adds	r7, #52	; 0x34
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd90      	pop	{r4, r7, pc}
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b091      	sub	sp, #68	; 0x44
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	623b      	str	r3, [r7, #32]
    }
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	61fb      	str	r3, [r7, #28]
    }
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ed4:	f001 f886 	bl	8004fe4 <xTaskGetSchedulerState>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <xQueueSemaphoreTake+0x60>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <xQueueSemaphoreTake+0x64>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <xQueueSemaphoreTake+0x66>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	61bb      	str	r3, [r7, #24]
    }
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003f04:	f001 fee8 	bl	8005cd8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d034      	beq.n	8003f7e <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	4618      	mov	r0, r3
 8003f18:	f004 f80e 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f004 f80a 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003f24:	4602      	mov	r2, r0
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	9100      	str	r1, [sp, #0]
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	205c      	movs	r0, #92	; 0x5c
 8003f30:	f003 faea 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f44:	f001 f9fe 	bl	8005344 <pvTaskIncrementMutexHeldCount>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00f      	beq.n	8003f76 <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	3310      	adds	r3, #16
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fea2 	bl	8004ca4 <xTaskRemoveFromEventList>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003f66:	4b64      	ldr	r3, [pc, #400]	; (80040f8 <xQueueSemaphoreTake+0x274>)
 8003f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003f76:	f001 fedf 	bl	8005d38 <vPortExitCritical>
                return pdPASS;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0b7      	b.n	80040ee <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d121      	bne.n	8003fc8 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	617b      	str	r3, [r7, #20]
    }
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003fa0:	f001 feca 	bl	8005d38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f003 ffc6 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003fac:	4604      	mov	r4, r0
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f003 ffc2 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2101      	movs	r1, #1
 8003fba:	9100      	str	r1, [sp, #0]
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	205c      	movs	r0, #92	; 0x5c
 8003fc0:	f003 faa2 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e092      	b.n	80040ee <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003fce:	f107 030c 	add.w	r3, r7, #12
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fecc 	bl	8004d70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003fdc:	f001 feac 	bl	8005d38 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003fe0:	f000 fc18 	bl	8004814 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003fe4:	f001 fe78 	bl	8005cd8 <vPortEnterCritical>
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d103      	bne.n	8003ffe <xQueueSemaphoreTake+0x17a>
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004004:	b25b      	sxtb	r3, r3
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d103      	bne.n	8004014 <xQueueSemaphoreTake+0x190>
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004014:	f001 fe90 	bl	8005d38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004018:	463a      	mov	r2, r7
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f000 febb 	bl	8004d9c <xTaskCheckForTimeOut>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d132      	bne.n	8004092 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800402c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800402e:	f000 f95f 	bl	80042f0 <prvIsQueueEmpty>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d026      	beq.n	8004086 <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8004040:	f001 fe4a 	bl	8005cd8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ffe9 	bl	8005020 <xTaskPriorityInherit>
 800404e:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8004050:	f001 fe72 	bl	8005d38 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fdcf 	bl	8004c00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004064:	f000 f8f2 	bl	800424c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004068:	f000 fbe2 	bl	8004830 <xTaskResumeAll>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	f47f af48 	bne.w	8003f04 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8004074:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <xQueueSemaphoreTake+0x274>)
 8004076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	e73e      	b.n	8003f04 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004088:	f000 f8e0 	bl	800424c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800408c:	f000 fbd0 	bl	8004830 <xTaskResumeAll>
 8004090:	e738      	b.n	8003f04 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004094:	f000 f8da 	bl	800424c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004098:	f000 fbca 	bl	8004830 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800409c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800409e:	f000 f927 	bl	80042f0 <prvIsQueueEmpty>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f43f af2d 	beq.w	8003f04 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 80040b0:	f001 fe12 	bl	8005cd8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80040b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040b6:	f000 f821 	bl	80040fc <prvGetDisinheritPriorityAfterTimeout>
 80040ba:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 f8a6 	bl	8005214 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80040c8:	f001 fe36 	bl	8005d38 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	4618      	mov	r0, r3
 80040d0:	f003 ff32 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 80040d4:	4604      	mov	r4, r0
 80040d6:	2000      	movs	r0, #0
 80040d8:	f003 ff2e 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 80040dc:	4602      	mov	r2, r0
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	9100      	str	r1, [sp, #0]
 80040e4:	4621      	mov	r1, r4
 80040e6:	205c      	movs	r0, #92	; 0x5c
 80040e8:	f003 fa0e 	bl	8007508 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80040ec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	373c      	adds	r7, #60	; 0x3c
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	bf00      	nop
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d006      	beq.n	800411a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1c3 0305 	rsb	r3, r3, #5
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e001      	b.n	800411e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800411e:	68fb      	ldr	r3, [r7, #12]
    }
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d14d      	bne.n	80041ee <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 ffdc 	bl	8005114 <xTaskPriorityDisinherit>
 800415c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	e043      	b.n	80041ee <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d119      	bne.n	80041a0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6858      	ldr	r0, [r3, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	461a      	mov	r2, r3
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	f004 f886 	bl	8008288 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	441a      	add	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	d32b      	bcc.n	80041ee <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e026      	b.n	80041ee <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	68d8      	ldr	r0, [r3, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	461a      	mov	r2, r3
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	f004 f86c 	bl	8008288 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	425b      	negs	r3, r3
 80041ba:	441a      	add	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d207      	bcs.n	80041dc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	425b      	negs	r3, r3
 80041d6:	441a      	add	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d105      	bne.n	80041ee <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80041f6:	697b      	ldr	r3, [r7, #20]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d018      	beq.n	8004244 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	441a      	add	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	d303      	bcc.n	8004234 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68d9      	ldr	r1, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	461a      	mov	r2, r3
 800423e:	6838      	ldr	r0, [r7, #0]
 8004240:	f004 f822 	bl	8008288 <memcpy>
    }
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004254:	f001 fd40 	bl	8005cd8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800425e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004260:	e011      	b.n	8004286 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d012      	beq.n	8004290 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3324      	adds	r3, #36	; 0x24
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fd18 	bl	8004ca4 <xTaskRemoveFromEventList>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800427a:	f000 fdf5 	bl	8004e68 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	3b01      	subs	r3, #1
 8004282:	b2db      	uxtb	r3, r3
 8004284:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	dce9      	bgt.n	8004262 <prvUnlockQueue+0x16>
 800428e:	e000      	b.n	8004292 <prvUnlockQueue+0x46>
                        break;
 8004290:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800429a:	f001 fd4d 	bl	8005d38 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800429e:	f001 fd1b 	bl	8005cd8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80042aa:	e011      	b.n	80042d0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d012      	beq.n	80042da <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3310      	adds	r3, #16
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fcf3 	bl	8004ca4 <xTaskRemoveFromEventList>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80042c4:	f000 fdd0 	bl	8004e68 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80042c8:	7bbb      	ldrb	r3, [r7, #14]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80042d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dce9      	bgt.n	80042ac <prvUnlockQueue+0x60>
 80042d8:	e000      	b.n	80042dc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80042da:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	22ff      	movs	r2, #255	; 0xff
 80042e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80042e4:	f001 fd28 	bl	8005d38 <vPortExitCritical>
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80042f8:	f001 fcee 	bl	8005cd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d102      	bne.n	800430a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	e001      	b.n	800430e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800430e:	f001 fd13 	bl	8005d38 <vPortExitCritical>

    return xReturn;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004324:	f001 fcd8 	bl	8005cd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	429a      	cmp	r2, r3
 8004332:	d102      	bne.n	800433a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004334:	2301      	movs	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e001      	b.n	800433e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800433e:	f001 fcfb 	bl	8005d38 <vPortExitCritical>

    return xReturn;
 8004342:	68fb      	ldr	r3, [r7, #12]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	e01e      	b.n	800439a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800435c:	4a13      	ldr	r2, [pc, #76]	; (80043ac <vQueueAddToRegistry+0x60>)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d115      	bne.n	8004394 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004368:	4910      	ldr	r1, [pc, #64]	; (80043ac <vQueueAddToRegistry+0x60>)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004372:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <vQueueAddToRegistry+0x60>)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4618      	mov	r0, r3
 8004382:	f003 fdd9 	bl	8007f38 <SEGGER_SYSVIEW_ShrinkId>
 8004386:	4601      	mov	r1, r0
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	2071      	movs	r0, #113	; 0x71
 800438e:	f002 ffeb 	bl	8007368 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8004392:	e006      	b.n	80043a2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b07      	cmp	r3, #7
 800439e:	d9dd      	bls.n	800435c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20014590 	.word	0x20014590

080043b0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80043c0:	f001 fc8a 	bl	8005cd8 <vPortEnterCritical>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d103      	bne.n	80043da <vQueueWaitForMessageRestricted+0x2a>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d103      	bne.n	80043f0 <vQueueWaitForMessageRestricted+0x40>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f0:	f001 fca2 	bl	8005d38 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3324      	adds	r3, #36	; 0x24
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fc1f 	bl	8004c48 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800440a:	6978      	ldr	r0, [r7, #20]
 800440c:	f7ff ff1e 	bl	800424c <prvUnlockQueue>
    }
 8004410:	bf00      	nop
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	; 0x30
 800441c:	af04      	add	r7, sp, #16
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fd7d 	bl	8005f2c <pvPortMalloc>
 8004432:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800443a:	2058      	movs	r0, #88	; 0x58
 800443c:	f001 fd76 	bl	8005f2c <pvPortMalloc>
 8004440:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
 800444e:	e005      	b.n	800445c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004450:	6978      	ldr	r0, [r7, #20]
 8004452:	f001 fe19 	bl	8006088 <vPortFree>
 8004456:	e001      	b.n	800445c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d013      	beq.n	800448a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	2300      	movs	r3, #0
 8004466:	9303      	str	r3, [sp, #12]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	9302      	str	r3, [sp, #8]
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f80e 	bl	800449a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800447e:	69f8      	ldr	r0, [r7, #28]
 8004480:	f000 f8a2 	bl	80045c8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004484:	2301      	movs	r3, #1
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e002      	b.n	8004490 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004490:	69bb      	ldr	r3, [r7, #24]
    }
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b088      	sub	sp, #32
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	461a      	mov	r2, r3
 80044b2:	21a5      	movs	r1, #165	; 0xa5
 80044b4:	f003 fef6 	bl	80082a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044c2:	3b01      	subs	r3, #1
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	617b      	str	r3, [r7, #20]
    }
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01f      	beq.n	8004538 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	e012      	b.n	8004524 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	7819      	ldrb	r1, [r3, #0]
 8004506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	3334      	adds	r3, #52	; 0x34
 800450e:	460a      	mov	r2, r1
 8004510:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3301      	adds	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b09      	cmp	r3, #9
 8004528:	d9e9      	bls.n	80044fe <prvInitialiseNewTask+0x64>
 800452a:	e000      	b.n	800452e <prvInitialiseNewTask+0x94>
            {
                break;
 800452c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004536:	e003      	b.n	8004540 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	2b04      	cmp	r3, #4
 8004544:	d901      	bls.n	800454a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004546:	2304      	movs	r3, #4
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004554:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	2200      	movs	r2, #0
 800455a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe ff33 	bl	80033cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	3318      	adds	r3, #24
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe ff2e 	bl	80033cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004574:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	f1c3 0205 	rsb	r2, r3, #5
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	3350      	adds	r3, #80	; 0x50
 800458a:	2204      	movs	r2, #4
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f003 fe88 	bl	80082a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	3354      	adds	r3, #84	; 0x54
 8004598:	2201      	movs	r2, #1
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f003 fe81 	bl	80082a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	69b8      	ldr	r0, [r7, #24]
 80045a8:	f001 fa6a 	bl	8005a80 <pxPortInitialiseStack>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80045be:	bf00      	nop
 80045c0:	3720      	adds	r7, #32
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80045c8:	b5b0      	push	{r4, r5, r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80045d0:	f001 fb82 	bl	8005cd8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80045d4:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <prvAddNewTaskToReadyList+0xfc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	4a3a      	ldr	r2, [pc, #232]	; (80046c4 <prvAddNewTaskToReadyList+0xfc>)
 80045dc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80045de:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <prvAddNewTaskToReadyList+0x100>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80045e6:	4a38      	ldr	r2, [pc, #224]	; (80046c8 <prvAddNewTaskToReadyList+0x100>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045ec:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <prvAddNewTaskToReadyList+0xfc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d110      	bne.n	8004616 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80045f4:	f000 fc5c 	bl	8004eb0 <prvInitialiseTaskLists>
 80045f8:	e00d      	b.n	8004616 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80045fa:	4b34      	ldr	r3, [pc, #208]	; (80046cc <prvAddNewTaskToReadyList+0x104>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004602:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <prvAddNewTaskToReadyList+0x100>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	429a      	cmp	r2, r3
 800460e:	d802      	bhi.n	8004616 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004610:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <prvAddNewTaskToReadyList+0x100>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004616:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <prvAddNewTaskToReadyList+0x108>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3301      	adds	r3, #1
 800461c:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <prvAddNewTaskToReadyList+0x108>)
 800461e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004620:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <prvAddNewTaskToReadyList+0x108>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <prvAddNewTaskToReadyList+0x94>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4618      	mov	r0, r3
 8004632:	f003 fb5b 	bl	8007cec <SEGGER_SYSVIEW_OnTaskCreate>
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	461d      	mov	r5, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461c      	mov	r4, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	1ae3      	subs	r3, r4, r3
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	462b      	mov	r3, r5
 8004658:	f001 fe22 	bl	80062a0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4618      	mov	r0, r3
 8004660:	f003 fbc8 	bl	8007df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	2201      	movs	r2, #1
 800466a:	409a      	lsls	r2, r3
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <prvAddNewTaskToReadyList+0x10c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4313      	orrs	r3, r2
 8004672:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <prvAddNewTaskToReadyList+0x10c>)
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <prvAddNewTaskToReadyList+0x110>)
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fe feaa 	bl	80033e6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004692:	f001 fb51 	bl	8005d38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <prvAddNewTaskToReadyList+0x104>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <prvAddNewTaskToReadyList+0x100>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d207      	bcs.n	80046bc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <prvAddNewTaskToReadyList+0x114>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bdb0      	pop	{r4, r5, r7, pc}
 80046c4:	20000274 	.word	0x20000274
 80046c8:	2000019c 	.word	0x2000019c
 80046cc:	20000280 	.word	0x20000280
 80046d0:	20000290 	.word	0x20000290
 80046d4:	2000027c 	.word	0x2000027c
 80046d8:	200001a0 	.word	0x200001a0
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01b      	beq.n	800472a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <vTaskDelay+0x68>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <vTaskDelay+0x30>
        __asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60bb      	str	r3, [r7, #8]
    }
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004710:	f000 f880 	bl	8004814 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	2023      	movs	r0, #35	; 0x23
 8004718:	f002 fdea 	bl	80072f0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800471c:	2100      	movs	r1, #0
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fe24 	bl	800536c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004724:	f000 f884 	bl	8004830 <xTaskResumeAll>
 8004728:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <vTaskDelay+0x6c>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	2000029c 	.word	0x2000029c
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004756:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <vTaskStartScheduler+0xa4>)
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	2300      	movs	r3, #0
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2300      	movs	r3, #0
 8004760:	2282      	movs	r2, #130	; 0x82
 8004762:	4925      	ldr	r1, [pc, #148]	; (80047f8 <vTaskStartScheduler+0xa8>)
 8004764:	4825      	ldr	r0, [pc, #148]	; (80047fc <vTaskStartScheduler+0xac>)
 8004766:	f7ff fe57 	bl	8004418 <xTaskCreate>
 800476a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d102      	bne.n	8004778 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004772:	f000 fe73 	bl	800545c <xTimerCreateTimerTask>
 8004776:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d124      	bne.n	80047c8 <vTaskStartScheduler+0x78>
        __asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60bb      	str	r3, [r7, #8]
    }
 8004790:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004792:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <vTaskStartScheduler+0xb0>)
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <vTaskStartScheduler+0xb4>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <vTaskStartScheduler+0xb8>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80047a6:	4b19      	ldr	r3, [pc, #100]	; (800480c <vTaskStartScheduler+0xbc>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <vTaskStartScheduler+0xa4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d102      	bne.n	80047b8 <vTaskStartScheduler+0x68>
 80047b2:	f003 fa7f 	bl	8007cb4 <SEGGER_SYSVIEW_OnIdle>
 80047b6:	e004      	b.n	80047c2 <vTaskStartScheduler+0x72>
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <vTaskStartScheduler+0xbc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f003 fad7 	bl	8007d70 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80047c2:	f001 f9e7 	bl	8005b94 <xPortStartScheduler>
 80047c6:	e00e      	b.n	80047e6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ce:	d10a      	bne.n	80047e6 <vTaskStartScheduler+0x96>
        __asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	607b      	str	r3, [r7, #4]
    }
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80047e6:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <vTaskStartScheduler+0xc0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000298 	.word	0x20000298
 80047f8:	08008c04 	.word	0x08008c04
 80047fc:	08004e81 	.word	0x08004e81
 8004800:	20000294 	.word	0x20000294
 8004804:	20000280 	.word	0x20000280
 8004808:	20000278 	.word	0x20000278
 800480c:	2000019c 	.word	0x2000019c
 8004810:	2000000c 	.word	0x2000000c

08004814 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <vTaskSuspendAll+0x18>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	4a03      	ldr	r2, [pc, #12]	; (800482c <vTaskSuspendAll+0x18>)
 8004820:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004822:	bf00      	nop
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	2000029c 	.word	0x2000029c

08004830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800483e:	4b43      	ldr	r3, [pc, #268]	; (800494c <xTaskResumeAll+0x11c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <xTaskResumeAll+0x2c>
        __asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	603b      	str	r3, [r7, #0]
    }
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800485c:	f001 fa3c 	bl	8005cd8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004860:	4b3a      	ldr	r3, [pc, #232]	; (800494c <xTaskResumeAll+0x11c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3b01      	subs	r3, #1
 8004866:	4a39      	ldr	r2, [pc, #228]	; (800494c <xTaskResumeAll+0x11c>)
 8004868:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800486a:	4b38      	ldr	r3, [pc, #224]	; (800494c <xTaskResumeAll+0x11c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d165      	bne.n	800493e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004872:	4b37      	ldr	r3, [pc, #220]	; (8004950 <xTaskResumeAll+0x120>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d061      	beq.n	800493e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800487a:	e032      	b.n	80048e2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487c:	4b35      	ldr	r3, [pc, #212]	; (8004954 <xTaskResumeAll+0x124>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3318      	adds	r3, #24
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe fe09 	bl	80034a0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3304      	adds	r3, #4
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fe04 	bl	80034a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4618      	mov	r0, r3
 800489c:	f003 faaa 	bl	8007df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	2201      	movs	r2, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <xTaskResumeAll+0x128>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <xTaskResumeAll+0x128>)
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4a27      	ldr	r2, [pc, #156]	; (800495c <xTaskResumeAll+0x12c>)
 80048c0:	441a      	add	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fe fd8c 	bl	80033e6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <xTaskResumeAll+0x130>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	429a      	cmp	r2, r3
 80048da:	d302      	bcc.n	80048e2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80048dc:	4b21      	ldr	r3, [pc, #132]	; (8004964 <xTaskResumeAll+0x134>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048e2:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <xTaskResumeAll+0x124>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1c8      	bne.n	800487c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80048f0:	f000 fb5c 	bl	8004fac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048f4:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <xTaskResumeAll+0x138>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004900:	f000 f858 	bl	80049b4 <xTaskIncrementTick>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <xTaskResumeAll+0x134>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3b01      	subs	r3, #1
 8004914:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f1      	bne.n	8004900 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800491c:	4b12      	ldr	r3, [pc, #72]	; (8004968 <xTaskResumeAll+0x138>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <xTaskResumeAll+0x134>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800492a:	2301      	movs	r3, #1
 800492c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800492e:	4b0f      	ldr	r3, [pc, #60]	; (800496c <xTaskResumeAll+0x13c>)
 8004930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800493e:	f001 f9fb 	bl	8005d38 <vPortExitCritical>

    return xAlreadyYielded;
 8004942:	68bb      	ldr	r3, [r7, #8]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	2000029c 	.word	0x2000029c
 8004950:	20000274 	.word	0x20000274
 8004954:	20000234 	.word	0x20000234
 8004958:	2000027c 	.word	0x2000027c
 800495c:	200001a0 	.word	0x200001a0
 8004960:	2000019c 	.word	0x2000019c
 8004964:	20000288 	.word	0x20000288
 8004968:	20000284 	.word	0x20000284
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <xTaskGetTickCount+0x1c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800497c:	687b      	ldr	r3, [r7, #4]
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000278 	.word	0x20000278

08004990 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004996:	f001 fa89 	bl	8005eac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <xTaskGetTickCountFromISR+0x20>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80049a4:	683b      	ldr	r3, [r7, #0]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000278 	.word	0x20000278

080049b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049be:	4b50      	ldr	r3, [pc, #320]	; (8004b00 <xTaskIncrementTick+0x14c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 8092 	bne.w	8004aec <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049c8:	4b4e      	ldr	r3, [pc, #312]	; (8004b04 <xTaskIncrementTick+0x150>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80049d0:	4a4c      	ldr	r2, [pc, #304]	; (8004b04 <xTaskIncrementTick+0x150>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d120      	bne.n	8004a1e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80049dc:	4b4a      	ldr	r3, [pc, #296]	; (8004b08 <xTaskIncrementTick+0x154>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <xTaskIncrementTick+0x48>
        __asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	603b      	str	r3, [r7, #0]
    }
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <xTaskIncrementTick+0x46>
 80049fc:	4b42      	ldr	r3, [pc, #264]	; (8004b08 <xTaskIncrementTick+0x154>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <xTaskIncrementTick+0x158>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a40      	ldr	r2, [pc, #256]	; (8004b08 <xTaskIncrementTick+0x154>)
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	4a40      	ldr	r2, [pc, #256]	; (8004b0c <xTaskIncrementTick+0x158>)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b3f      	ldr	r3, [pc, #252]	; (8004b10 <xTaskIncrementTick+0x15c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	4a3e      	ldr	r2, [pc, #248]	; (8004b10 <xTaskIncrementTick+0x15c>)
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	f000 fac7 	bl	8004fac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <xTaskIncrementTick+0x160>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d34c      	bcc.n	8004ac2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a28:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <xTaskIncrementTick+0x154>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d104      	bne.n	8004a3c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a32:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <xTaskIncrementTick+0x160>)
 8004a34:	f04f 32ff 	mov.w	r2, #4294967295
 8004a38:	601a      	str	r2, [r3, #0]
                    break;
 8004a3a:	e042      	b.n	8004ac2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a3c:	4b32      	ldr	r3, [pc, #200]	; (8004b08 <xTaskIncrementTick+0x154>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d203      	bcs.n	8004a5c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004a54:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <xTaskIncrementTick+0x160>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a5a:	e032      	b.n	8004ac2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fd1d 	bl	80034a0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d004      	beq.n	8004a78 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3318      	adds	r3, #24
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe fd14 	bl	80034a0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f003 f9ba 	bl	8007df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	2201      	movs	r2, #1
 8004a86:	409a      	lsls	r2, r3
 8004a88:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <xTaskIncrementTick+0x164>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <xTaskIncrementTick+0x164>)
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <xTaskIncrementTick+0x168>)
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7fe fc9c 	bl	80033e6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <xTaskIncrementTick+0x16c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d3b5      	bcc.n	8004a28 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac0:	e7b2      	b.n	8004a28 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ac2:	4b17      	ldr	r3, [pc, #92]	; (8004b20 <xTaskIncrementTick+0x16c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	4914      	ldr	r1, [pc, #80]	; (8004b1c <xTaskIncrementTick+0x168>)
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d901      	bls.n	8004ade <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <xTaskIncrementTick+0x170>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e004      	b.n	8004af6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <xTaskIncrementTick+0x174>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	4a0d      	ldr	r2, [pc, #52]	; (8004b28 <xTaskIncrementTick+0x174>)
 8004af4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004af6:	697b      	ldr	r3, [r7, #20]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	2000029c 	.word	0x2000029c
 8004b04:	20000278 	.word	0x20000278
 8004b08:	2000022c 	.word	0x2000022c
 8004b0c:	20000230 	.word	0x20000230
 8004b10:	2000028c 	.word	0x2000028c
 8004b14:	20000294 	.word	0x20000294
 8004b18:	2000027c 	.word	0x2000027c
 8004b1c:	200001a0 	.word	0x200001a0
 8004b20:	2000019c 	.word	0x2000019c
 8004b24:	20000288 	.word	0x20000288
 8004b28:	20000284 	.word	0x20000284

08004b2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b32:	4b2d      	ldr	r3, [pc, #180]	; (8004be8 <vTaskSwitchContext+0xbc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004b3a:	4b2c      	ldr	r3, [pc, #176]	; (8004bec <vTaskSwitchContext+0xc0>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004b40:	e04d      	b.n	8004bde <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <vTaskSwitchContext+0xc0>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b48:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <vTaskSwitchContext+0xc4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	fab3 f383 	clz	r3, r3
 8004b54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	f1c3 031f 	rsb	r3, r3, #31
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	4925      	ldr	r1, [pc, #148]	; (8004bf4 <vTaskSwitchContext+0xc8>)
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	607b      	str	r3, [r7, #4]
    }
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <vTaskSwitchContext+0x5a>
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <vTaskSwitchContext+0xc8>)
 8004b94:	4413      	add	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d104      	bne.n	8004bb8 <vTaskSwitchContext+0x8c>
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	605a      	str	r2, [r3, #4]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <vTaskSwitchContext+0xcc>)
 8004bc0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <vTaskSwitchContext+0xcc>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <vTaskSwitchContext+0xd0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d102      	bne.n	8004bd4 <vTaskSwitchContext+0xa8>
 8004bce:	f003 f871 	bl	8007cb4 <SEGGER_SYSVIEW_OnIdle>
}
 8004bd2:	e004      	b.n	8004bde <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <vTaskSwitchContext+0xcc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f003 f8c9 	bl	8007d70 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004bde:	bf00      	nop
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2000029c 	.word	0x2000029c
 8004bec:	20000288 	.word	0x20000288
 8004bf0:	2000027c 	.word	0x2000027c
 8004bf4:	200001a0 	.word	0x200001a0
 8004bf8:	2000019c 	.word	0x2000019c
 8004bfc:	20000298 	.word	0x20000298

08004c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
    }
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <vTaskPlaceOnEventList+0x44>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fe fbfd 	bl	800342e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c34:	2101      	movs	r1, #1
 8004c36:	6838      	ldr	r0, [r7, #0]
 8004c38:	f000 fb98 	bl	800536c <prvAddCurrentTaskToDelayedList>
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	2000019c 	.word	0x2000019c

08004c48 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	617b      	str	r3, [r7, #20]
    }
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <vTaskPlaceOnEventListRestricted+0x58>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3318      	adds	r3, #24
 8004c76:	4619      	mov	r1, r3
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7fe fbb4 	bl	80033e6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004c8a:	2024      	movs	r0, #36	; 0x24
 8004c8c:	f002 fb12 	bl	80072b4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f000 fb6a 	bl	800536c <prvAddCurrentTaskToDelayedList>
    }
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	2000019c 	.word	0x2000019c

08004ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10a      	bne.n	8004cd0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	60fb      	str	r3, [r7, #12]
    }
 8004ccc:	bf00      	nop
 8004cce:	e7fe      	b.n	8004cce <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	3318      	adds	r3, #24
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fe fbe3 	bl	80034a0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cda:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <xTaskRemoveFromEventList+0xb4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d120      	bne.n	8004d24 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fbda 	bl	80034a0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f003 f880 	bl	8007df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <xTaskRemoveFromEventList+0xb8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <xTaskRemoveFromEventList+0xb8>)
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <xTaskRemoveFromEventList+0xbc>)
 8004d14:	441a      	add	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	f7fe fb62 	bl	80033e6 <vListInsertEnd>
 8004d22:	e005      	b.n	8004d30 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3318      	adds	r3, #24
 8004d28:	4619      	mov	r1, r3
 8004d2a:	480e      	ldr	r0, [pc, #56]	; (8004d64 <xTaskRemoveFromEventList+0xc0>)
 8004d2c:	f7fe fb5b 	bl	80033e6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <xTaskRemoveFromEventList+0xc4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d905      	bls.n	8004d4a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <xTaskRemoveFromEventList+0xc8>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e001      	b.n	8004d4e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	2000029c 	.word	0x2000029c
 8004d5c:	2000027c 	.word	0x2000027c
 8004d60:	200001a0 	.word	0x200001a0
 8004d64:	20000234 	.word	0x20000234
 8004d68:	2000019c 	.word	0x2000019c
 8004d6c:	20000288 	.word	0x20000288

08004d70 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d78:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <vTaskInternalSetTimeOutState+0x24>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <vTaskInternalSetTimeOutState+0x28>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	2000028c 	.word	0x2000028c
 8004d98:	20000278 	.word	0x20000278

08004d9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	613b      	str	r3, [r7, #16]
    }
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60fb      	str	r3, [r7, #12]
    }
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004dde:	f000 ff7b 	bl	8005cd8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004de2:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <xTaskCheckForTimeOut+0xc4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d102      	bne.n	8004e02 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	e026      	b.n	8004e50 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <xTaskCheckForTimeOut+0xc8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d00a      	beq.n	8004e24 <xTaskCheckForTimeOut+0x88>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d305      	bcc.n	8004e24 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e015      	b.n	8004e50 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d20b      	bcs.n	8004e46 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	1ad2      	subs	r2, r2, r3
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff ff98 	bl	8004d70 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	e004      	b.n	8004e50 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004e50:	f000 ff72 	bl	8005d38 <vPortExitCritical>

    return xReturn;
 8004e54:	69fb      	ldr	r3, [r7, #28]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000278 	.word	0x20000278
 8004e64:	2000028c 	.word	0x2000028c

08004e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <vTaskMissedYield+0x14>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
}
 8004e72:	bf00      	nop
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	20000288 	.word	0x20000288

08004e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004e88:	f000 f852 	bl	8004f30 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <prvIdleTask+0x28>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d9f9      	bls.n	8004e88 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <prvIdleTask+0x2c>)
 8004e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004ea4:	e7f0      	b.n	8004e88 <prvIdleTask+0x8>
 8004ea6:	bf00      	nop
 8004ea8:	200001a0 	.word	0x200001a0
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	e00c      	b.n	8004ed6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4a12      	ldr	r2, [pc, #72]	; (8004f10 <prvInitialiseTaskLists+0x60>)
 8004ec8:	4413      	add	r3, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fa5e 	bl	800338c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d9ef      	bls.n	8004ebc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004edc:	480d      	ldr	r0, [pc, #52]	; (8004f14 <prvInitialiseTaskLists+0x64>)
 8004ede:	f7fe fa55 	bl	800338c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004ee2:	480d      	ldr	r0, [pc, #52]	; (8004f18 <prvInitialiseTaskLists+0x68>)
 8004ee4:	f7fe fa52 	bl	800338c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004ee8:	480c      	ldr	r0, [pc, #48]	; (8004f1c <prvInitialiseTaskLists+0x6c>)
 8004eea:	f7fe fa4f 	bl	800338c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004eee:	480c      	ldr	r0, [pc, #48]	; (8004f20 <prvInitialiseTaskLists+0x70>)
 8004ef0:	f7fe fa4c 	bl	800338c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004ef4:	480b      	ldr	r0, [pc, #44]	; (8004f24 <prvInitialiseTaskLists+0x74>)
 8004ef6:	f7fe fa49 	bl	800338c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004efa:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <prvInitialiseTaskLists+0x78>)
 8004efc:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <prvInitialiseTaskLists+0x64>)
 8004efe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <prvInitialiseTaskLists+0x7c>)
 8004f02:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <prvInitialiseTaskLists+0x68>)
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200001a0 	.word	0x200001a0
 8004f14:	20000204 	.word	0x20000204
 8004f18:	20000218 	.word	0x20000218
 8004f1c:	20000234 	.word	0x20000234
 8004f20:	20000248 	.word	0x20000248
 8004f24:	20000260 	.word	0x20000260
 8004f28:	2000022c 	.word	0x2000022c
 8004f2c:	20000230 	.word	0x20000230

08004f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f36:	e019      	b.n	8004f6c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004f38:	f000 fece 	bl	8005cd8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <prvCheckTasksWaitingTermination+0x50>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe faa9 	bl	80034a0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <prvCheckTasksWaitingTermination+0x54>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	4a0b      	ldr	r2, [pc, #44]	; (8004f84 <prvCheckTasksWaitingTermination+0x54>)
 8004f56:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <prvCheckTasksWaitingTermination+0x58>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <prvCheckTasksWaitingTermination+0x58>)
 8004f60:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004f62:	f000 fee9 	bl	8005d38 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f810 	bl	8004f8c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <prvCheckTasksWaitingTermination+0x58>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e1      	bne.n	8004f38 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000248 	.word	0x20000248
 8004f84:	20000274 	.word	0x20000274
 8004f88:	2000025c 	.word	0x2000025c

08004f8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f001 f875 	bl	8006088 <vPortFree>
                vPortFree( pxTCB );
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f001 f872 	bl	8006088 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <prvResetNextTaskUnblockTime+0x30>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d104      	bne.n	8004fc4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <prvResetNextTaskUnblockTime+0x34>)
 8004fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004fc2:	e005      	b.n	8004fd0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <prvResetNextTaskUnblockTime+0x30>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <prvResetNextTaskUnblockTime+0x34>)
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	2000022c 	.word	0x2000022c
 8004fe0:	20000294 	.word	0x20000294

08004fe4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <xTaskGetSchedulerState+0x34>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	e008      	b.n	800500a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff8:	4b08      	ldr	r3, [pc, #32]	; (800501c <xTaskGetSchedulerState+0x38>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d102      	bne.n	8005006 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005000:	2302      	movs	r3, #2
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	e001      	b.n	800500a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005006:	2300      	movs	r3, #0
 8005008:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800500a:	687b      	ldr	r3, [r7, #4]
    }
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	20000280 	.word	0x20000280
 800501c:	2000029c 	.word	0x2000029c

08005020 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d063      	beq.n	80050fe <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503a:	4b33      	ldr	r3, [pc, #204]	; (8005108 <xTaskPriorityInherit+0xe8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	429a      	cmp	r2, r3
 8005042:	d253      	bcs.n	80050ec <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	db06      	blt.n	800505a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800504c:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <xTaskPriorityInherit+0xe8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	f1c3 0205 	rsb	r2, r3, #5
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6959      	ldr	r1, [r3, #20]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <xTaskPriorityInherit+0xec>)
 800506c:	4413      	add	r3, r2
 800506e:	4299      	cmp	r1, r3
 8005070:	d12f      	bne.n	80050d2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3304      	adds	r3, #4
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fa12 	bl	80034a0 <uxListRemove>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	2201      	movs	r2, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43da      	mvns	r2, r3
 800508e:	4b20      	ldr	r3, [pc, #128]	; (8005110 <xTaskPriorityInherit+0xf0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4013      	ands	r3, r2
 8005094:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <xTaskPriorityInherit+0xf0>)
 8005096:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005098:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <xTaskPriorityInherit+0xe8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	2201      	movs	r2, #1
 80050a8:	409a      	lsls	r2, r3
 80050aa:	4b19      	ldr	r3, [pc, #100]	; (8005110 <xTaskPriorityInherit+0xf0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	4a17      	ldr	r2, [pc, #92]	; (8005110 <xTaskPriorityInherit+0xf0>)
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4a12      	ldr	r2, [pc, #72]	; (800510c <xTaskPriorityInherit+0xec>)
 80050c2:	441a      	add	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f7fe f98b 	bl	80033e6 <vListInsertEnd>
 80050d0:	e004      	b.n	80050dc <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050d2:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <xTaskPriorityInherit+0xe8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4619      	mov	r1, r3
 80050e0:	2049      	movs	r0, #73	; 0x49
 80050e2:	f002 f905 	bl	80072f0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e008      	b.n	80050fe <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <xTaskPriorityInherit+0xe8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d201      	bcs.n	80050fe <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80050fa:	2301      	movs	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80050fe:	68fb      	ldr	r3, [r7, #12]
    }
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	2000019c 	.word	0x2000019c
 800510c:	200001a0 	.word	0x200001a0
 8005110:	2000027c 	.word	0x2000027c

08005114 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d068      	beq.n	80051fc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800512a:	4b37      	ldr	r3, [pc, #220]	; (8005208 <xTaskPriorityDisinherit+0xf4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	429a      	cmp	r2, r3
 8005132:	d00a      	beq.n	800514a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	60fb      	str	r3, [r7, #12]
    }
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60bb      	str	r3, [r7, #8]
    }
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517a:	429a      	cmp	r2, r3
 800517c:	d03e      	beq.n	80051fc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d13a      	bne.n	80051fc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	3304      	adds	r3, #4
 800518a:	4618      	mov	r0, r3
 800518c:	f7fe f988 	bl	80034a0 <uxListRemove>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	2201      	movs	r2, #1
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	43da      	mvns	r2, r3
 80051a2:	4b1a      	ldr	r3, [pc, #104]	; (800520c <xTaskPriorityDisinherit+0xf8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4013      	ands	r3, r2
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <xTaskPriorityDisinherit+0xf8>)
 80051aa:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4619      	mov	r1, r3
 80051b0:	204a      	movs	r0, #74	; 0x4a
 80051b2:	f002 f89d 	bl	80072f0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	f1c3 0205 	rsb	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	2201      	movs	r2, #1
 80051d0:	409a      	lsls	r2, r3
 80051d2:	4b0e      	ldr	r3, [pc, #56]	; (800520c <xTaskPriorityDisinherit+0xf8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	4a0c      	ldr	r2, [pc, #48]	; (800520c <xTaskPriorityDisinherit+0xf8>)
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <xTaskPriorityDisinherit+0xfc>)
 80051ea:	441a      	add	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f7fe f8f7 	bl	80033e6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80051fc:	697b      	ldr	r3, [r7, #20]
    }
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	2000019c 	.word	0x2000019c
 800520c:	2000027c 	.word	0x2000027c
 8005210:	200001a0 	.word	0x200001a0

08005214 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005222:	2301      	movs	r3, #1
 8005224:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8081 	beq.w	8005330 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60fb      	str	r3, [r7, #12]
    }
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d902      	bls.n	800525c <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	61fb      	str	r3, [r7, #28]
 800525a:	e002      	b.n	8005262 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005260:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	429a      	cmp	r2, r3
 800526a:	d061      	beq.n	8005330 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	429a      	cmp	r2, r3
 8005274:	d15c      	bne.n	8005330 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005276:	4b30      	ldr	r3, [pc, #192]	; (8005338 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d10a      	bne.n	8005296 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60bb      	str	r3, [r7, #8]
    }
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4619      	mov	r1, r3
 800529a:	204a      	movs	r0, #74	; 0x4a
 800529c:	f002 f828 	bl	80072f0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	db04      	blt.n	80052be <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f1c3 0205 	rsb	r2, r3, #5
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	6959      	ldr	r1, [r3, #20]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a1b      	ldr	r2, [pc, #108]	; (800533c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80052ce:	4413      	add	r3, r2
 80052d0:	4299      	cmp	r1, r3
 80052d2:	d12d      	bne.n	8005330 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe f8e1 	bl	80034a0 <uxListRemove>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	2201      	movs	r2, #1
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43da      	mvns	r2, r3
 80052f0:	4b13      	ldr	r3, [pc, #76]	; (8005340 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4013      	ands	r3, r2
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80052f8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f002 fd79 	bl	8007df4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	2201      	movs	r2, #1
 8005308:	409a      	lsls	r2, r3
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4313      	orrs	r3, r2
 8005310:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a06      	ldr	r2, [pc, #24]	; (800533c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005322:	441a      	add	r2, r3
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f7fe f85b 	bl	80033e6 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005330:	bf00      	nop
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	2000019c 	.word	0x2000019c
 800533c:	200001a0 	.word	0x200001a0
 8005340:	2000027c 	.word	0x2000027c

08005344 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <pvTaskIncrementMutexHeldCount+0x24>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <pvTaskIncrementMutexHeldCount+0x24>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005356:	3201      	adds	r2, #1
 8005358:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <pvTaskIncrementMutexHeldCount+0x24>)
 800535c:	681b      	ldr	r3, [r3, #0]
    }
 800535e:	4618      	mov	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	2000019c 	.word	0x2000019c

0800536c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005376:	4b32      	ldr	r3, [pc, #200]	; (8005440 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800537c:	4b31      	ldr	r3, [pc, #196]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3304      	adds	r3, #4
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe f88c 	bl	80034a0 <uxListRemove>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800538e:	4b2d      	ldr	r3, [pc, #180]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	2201      	movs	r2, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43da      	mvns	r2, r3
 800539c:	4b2a      	ldr	r3, [pc, #168]	; (8005448 <prvAddCurrentTaskToDelayedList+0xdc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4013      	ands	r3, r2
 80053a2:	4a29      	ldr	r2, [pc, #164]	; (8005448 <prvAddCurrentTaskToDelayedList+0xdc>)
 80053a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d110      	bne.n	80053d0 <prvAddCurrentTaskToDelayedList+0x64>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80053b4:	4b23      	ldr	r3, [pc, #140]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	211b      	movs	r1, #27
 80053ba:	4618      	mov	r0, r3
 80053bc:	f002 fd5c 	bl	8007e78 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053c0:	4b20      	ldr	r3, [pc, #128]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3304      	adds	r3, #4
 80053c6:	4619      	mov	r1, r3
 80053c8:	4820      	ldr	r0, [pc, #128]	; (800544c <prvAddCurrentTaskToDelayedList+0xe0>)
 80053ca:	f7fe f80c 	bl	80033e6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80053ce:	e032      	b.n	8005436 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4413      	add	r3, r2
 80053d6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053d8:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d20f      	bcs.n	8005408 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80053e8:	4b16      	ldr	r3, [pc, #88]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2104      	movs	r1, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f002 fd42 	bl	8007e78 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053f4:	4b16      	ldr	r3, [pc, #88]	; (8005450 <prvAddCurrentTaskToDelayedList+0xe4>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b12      	ldr	r3, [pc, #72]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7fe f814 	bl	800342e <vListInsert>
}
 8005406:	e016      	b.n	8005436 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2104      	movs	r1, #4
 800540e:	4618      	mov	r0, r3
 8005410:	f002 fd32 	bl	8007e78 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <prvAddCurrentTaskToDelayedList+0xd8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f7fe f804 	bl	800342e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005426:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <prvAddCurrentTaskToDelayedList+0xec>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d202      	bcs.n	8005436 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8005430:	4a09      	ldr	r2, [pc, #36]	; (8005458 <prvAddCurrentTaskToDelayedList+0xec>)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6013      	str	r3, [r2, #0]
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000278 	.word	0x20000278
 8005444:	2000019c 	.word	0x2000019c
 8005448:	2000027c 	.word	0x2000027c
 800544c:	20000260 	.word	0x20000260
 8005450:	20000230 	.word	0x20000230
 8005454:	2000022c 	.word	0x2000022c
 8005458:	20000294 	.word	0x20000294

0800545c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005462:	2300      	movs	r3, #0
 8005464:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005466:	f000 fad5 	bl	8005a14 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800546a:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <xTimerCreateTimerTask+0x54>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <xTimerCreateTimerTask+0x58>)
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	2302      	movs	r3, #2
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005480:	490d      	ldr	r1, [pc, #52]	; (80054b8 <xTimerCreateTimerTask+0x5c>)
 8005482:	480e      	ldr	r0, [pc, #56]	; (80054bc <xTimerCreateTimerTask+0x60>)
 8005484:	f7fe ffc8 	bl	8004418 <xTaskCreate>
 8005488:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	603b      	str	r3, [r7, #0]
    }
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80054a6:	687b      	ldr	r3, [r7, #4]
    }
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	200002d0 	.word	0x200002d0
 80054b4:	200002d4 	.word	0x200002d4
 80054b8:	08008c0c 	.word	0x08008c0c
 80054bc:	080055f5 	.word	0x080055f5

080054c0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	; 0x28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <xTimerGenericCommand+0x2e>
        __asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	623b      	str	r3, [r7, #32]
    }
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80054ee:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <xTimerGenericCommand+0x98>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d02a      	beq.n	800554c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b05      	cmp	r3, #5
 8005506:	dc18      	bgt.n	800553a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005508:	f7ff fd6c 	bl	8004fe4 <xTaskGetSchedulerState>
 800550c:	4603      	mov	r3, r0
 800550e:	2b02      	cmp	r3, #2
 8005510:	d109      	bne.n	8005526 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <xTimerGenericCommand+0x98>)
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	f107 0114 	add.w	r1, r7, #20
 800551a:	2300      	movs	r3, #0
 800551c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551e:	f7fe f90d 	bl	800373c <xQueueGenericSend>
 8005522:	6278      	str	r0, [r7, #36]	; 0x24
 8005524:	e012      	b.n	800554c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <xTimerGenericCommand+0x98>)
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f107 0114 	add.w	r1, r7, #20
 800552e:	2300      	movs	r3, #0
 8005530:	2200      	movs	r2, #0
 8005532:	f7fe f903 	bl	800373c <xQueueGenericSend>
 8005536:	6278      	str	r0, [r7, #36]	; 0x24
 8005538:	e008      	b.n	800554c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800553a:	4b07      	ldr	r3, [pc, #28]	; (8005558 <xTimerGenericCommand+0x98>)
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	f107 0114 	add.w	r1, r7, #20
 8005542:	2300      	movs	r3, #0
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	f7fe fa1f 	bl	8003988 <xQueueGenericSendFromISR>
 800554a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	200002d0 	.word	0x200002d0

0800555c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af02      	add	r7, sp, #8
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <prvProcessExpiredTimer+0x94>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	3304      	adds	r3, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7fd ff93 	bl	80034a0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d022      	beq.n	80055ce <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	18d1      	adds	r1, r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	6978      	ldr	r0, [r7, #20]
 8005596:	f000 f8d1 	bl	800573c <prvInsertTimerInActiveList>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01f      	beq.n	80055e0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055a0:	2300      	movs	r3, #0
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2300      	movs	r3, #0
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	2100      	movs	r1, #0
 80055aa:	6978      	ldr	r0, [r7, #20]
 80055ac:	f7ff ff88 	bl	80054c0 <xTimerGenericCommand>
 80055b0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d113      	bne.n	80055e0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	60fb      	str	r3, [r7, #12]
    }
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	6978      	ldr	r0, [r7, #20]
 80055e6:	4798      	blx	r3
    }
 80055e8:	bf00      	nop
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	200002c8 	.word	0x200002c8

080055f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055fc:	f107 0308 	add.w	r3, r7, #8
 8005600:	4618      	mov	r0, r3
 8005602:	f000 f857 	bl	80056b4 <prvGetNextExpireTime>
 8005606:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4619      	mov	r1, r3
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f803 	bl	8005618 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005612:	f000 f8d5 	bl	80057c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005616:	e7f1      	b.n	80055fc <prvTimerTask+0x8>

08005618 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005622:	f7ff f8f7 	bl	8004814 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f866 	bl	80056fc <prvSampleTimeNow>
 8005630:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d130      	bne.n	800569a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <prvProcessTimerOrBlockTask+0x3c>
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	429a      	cmp	r2, r3
 8005644:	d806      	bhi.n	8005654 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005646:	f7ff f8f3 	bl	8004830 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff ff85 	bl	800555c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005652:	e024      	b.n	800569e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800565a:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <prvProcessTimerOrBlockTask+0x90>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <prvProcessTimerOrBlockTask+0x50>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <prvProcessTimerOrBlockTask+0x52>
 8005668:	2300      	movs	r3, #0
 800566a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800566c:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <prvProcessTimerOrBlockTask+0x94>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	4619      	mov	r1, r3
 800567a:	f7fe fe99 	bl	80043b0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800567e:	f7ff f8d7 	bl	8004830 <xTaskResumeAll>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <prvProcessTimerOrBlockTask+0x98>)
 800568a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	f3bf 8f6f 	isb	sy
    }
 8005698:	e001      	b.n	800569e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800569a:	f7ff f8c9 	bl	8004830 <xTaskResumeAll>
    }
 800569e:	bf00      	nop
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	200002cc 	.word	0x200002cc
 80056ac:	200002d0 	.word	0x200002d0
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <prvGetNextExpireTime+0x44>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <prvGetNextExpireTime+0x16>
 80056c6:	2201      	movs	r2, #1
 80056c8:	e000      	b.n	80056cc <prvGetNextExpireTime+0x18>
 80056ca:	2200      	movs	r2, #0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d105      	bne.n	80056e4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056d8:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <prvGetNextExpireTime+0x44>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e001      	b.n	80056e8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80056e8:	68fb      	ldr	r3, [r7, #12]
    }
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	200002c8 	.word	0x200002c8

080056fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005704:	f7ff f934 	bl	8004970 <xTaskGetTickCount>
 8005708:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <prvSampleTimeNow+0x3c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	429a      	cmp	r2, r3
 8005712:	d205      	bcs.n	8005720 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005714:	f000 f91a 	bl	800594c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e002      	b.n	8005726 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005726:	4a04      	ldr	r2, [pc, #16]	; (8005738 <prvSampleTimeNow+0x3c>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800572c:	68fb      	ldr	r3, [r7, #12]
    }
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200002d8 	.word	0x200002d8

0800573c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	429a      	cmp	r2, r3
 8005760:	d812      	bhi.n	8005788 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e01b      	b.n	80057ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <prvInsertTimerInActiveList+0x7c>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fd fe54 	bl	800342e <vListInsert>
 8005786:	e012      	b.n	80057ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d206      	bcs.n	800579e <prvInsertTimerInActiveList+0x62>
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e007      	b.n	80057ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800579e:	4b07      	ldr	r3, [pc, #28]	; (80057bc <prvInsertTimerInActiveList+0x80>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4619      	mov	r1, r3
 80057a8:	4610      	mov	r0, r2
 80057aa:	f7fd fe40 	bl	800342e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80057ae:	697b      	ldr	r3, [r7, #20]
    }
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	200002cc 	.word	0x200002cc
 80057bc:	200002c8 	.word	0x200002c8

080057c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08c      	sub	sp, #48	; 0x30
 80057c4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057c6:	e0ae      	b.n	8005926 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f2c0 80aa 	blt.w	8005924 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	3304      	adds	r3, #4
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fd fe5d 	bl	80034a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ff87 	bl	80056fc <prvSampleTimeNow>
 80057ee:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b09      	cmp	r3, #9
 80057f4:	f200 8097 	bhi.w	8005926 <prvProcessReceivedCommands+0x166>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <prvProcessReceivedCommands+0x40>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005829 	.word	0x08005829
 8005804:	08005829 	.word	0x08005829
 8005808:	08005829 	.word	0x08005829
 800580c:	0800589d 	.word	0x0800589d
 8005810:	080058b1 	.word	0x080058b1
 8005814:	080058fb 	.word	0x080058fb
 8005818:	08005829 	.word	0x08005829
 800581c:	08005829 	.word	0x08005829
 8005820:	0800589d 	.word	0x0800589d
 8005824:	080058b1 	.word	0x080058b1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	18d1      	adds	r1, r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005848:	f7ff ff78 	bl	800573c <prvInsertTimerInActiveList>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d069      	beq.n	8005926 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005858:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05e      	beq.n	8005926 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	441a      	add	r2, r3
 8005870:	2300      	movs	r3, #0
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	2100      	movs	r1, #0
 8005878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800587a:	f7ff fe21 	bl	80054c0 <xTimerGenericCommand>
 800587e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d14f      	bne.n	8005926 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	61bb      	str	r3, [r7, #24]
    }
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80058ae:	e03a      	b.n	8005926 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	617b      	str	r3, [r7, #20]
    }
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	18d1      	adds	r1, r2, r3
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	6a3a      	ldr	r2, [r7, #32]
 80058f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058f4:	f7ff ff22 	bl	800573c <prvInsertTimerInActiveList>
                        break;
 80058f8:	e015      	b.n	8005926 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800590a:	f000 fbbd 	bl	8006088 <vPortFree>
 800590e:	e00a      	b.n	8005926 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005916:	f023 0301 	bic.w	r3, r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005922:	e000      	b.n	8005926 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005924:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005926:	4b08      	ldr	r3, [pc, #32]	; (8005948 <prvProcessReceivedCommands+0x188>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f107 0108 	add.w	r1, r7, #8
 800592e:	2200      	movs	r2, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe f997 	bl	8003c64 <xQueueReceive>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	f47f af45 	bne.w	80057c8 <prvProcessReceivedCommands+0x8>
        }
    }
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	3728      	adds	r7, #40	; 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	200002d0 	.word	0x200002d0

0800594c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005952:	e048      	b.n	80059e6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005954:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <prvSwitchTimerLists+0xc0>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595e:	4b2b      	ldr	r3, [pc, #172]	; (8005a0c <prvSwitchTimerLists+0xc0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3304      	adds	r3, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f7fd fd97 	bl	80034a0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d02e      	beq.n	80059e6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d90e      	bls.n	80059b8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059a6:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <prvSwitchTimerLists+0xc0>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7fd fd3c 	bl	800342e <vListInsert>
 80059b6:	e016      	b.n	80059e6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059b8:	2300      	movs	r3, #0
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	2300      	movs	r3, #0
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	2100      	movs	r1, #0
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7ff fd7c 	bl	80054c0 <xTimerGenericCommand>
 80059c8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	603b      	str	r3, [r7, #0]
    }
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <prvSwitchTimerLists+0xc0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1b1      	bne.n	8005954 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <prvSwitchTimerLists+0xc0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <prvSwitchTimerLists+0xc4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <prvSwitchTimerLists+0xc0>)
 80059fc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80059fe:	4a04      	ldr	r2, [pc, #16]	; (8005a10 <prvSwitchTimerLists+0xc4>)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	6013      	str	r3, [r2, #0]
    }
 8005a04:	bf00      	nop
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200002c8 	.word	0x200002c8
 8005a10:	200002cc 	.word	0x200002cc

08005a14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005a18:	f000 f95e 	bl	8005cd8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <prvCheckForValidListAndQueue+0x54>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11d      	bne.n	8005a60 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005a24:	4811      	ldr	r0, [pc, #68]	; (8005a6c <prvCheckForValidListAndQueue+0x58>)
 8005a26:	f7fd fcb1 	bl	800338c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005a2a:	4811      	ldr	r0, [pc, #68]	; (8005a70 <prvCheckForValidListAndQueue+0x5c>)
 8005a2c:	f7fd fcae 	bl	800338c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005a30:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <prvCheckForValidListAndQueue+0x60>)
 8005a32:	4a0e      	ldr	r2, [pc, #56]	; (8005a6c <prvCheckForValidListAndQueue+0x58>)
 8005a34:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005a36:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <prvCheckForValidListAndQueue+0x64>)
 8005a38:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <prvCheckForValidListAndQueue+0x5c>)
 8005a3a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	210c      	movs	r1, #12
 8005a40:	200a      	movs	r0, #10
 8005a42:	f7fd fdbf 	bl	80035c4 <xQueueGenericCreate>
 8005a46:	4603      	mov	r3, r0
 8005a48:	4a07      	ldr	r2, [pc, #28]	; (8005a68 <prvCheckForValidListAndQueue+0x54>)
 8005a4a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <prvCheckForValidListAndQueue+0x54>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <prvCheckForValidListAndQueue+0x54>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4908      	ldr	r1, [pc, #32]	; (8005a7c <prvCheckForValidListAndQueue+0x68>)
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fc76 	bl	800434c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005a60:	f000 f96a 	bl	8005d38 <vPortExitCritical>
    }
 8005a64:	bf00      	nop
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200002d0 	.word	0x200002d0
 8005a6c:	200002a0 	.word	0x200002a0
 8005a70:	200002b4 	.word	0x200002b4
 8005a74:	200002c8 	.word	0x200002c8
 8005a78:	200002cc 	.word	0x200002cc
 8005a7c:	08008c14 	.word	0x08008c14

08005a80 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3b04      	subs	r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3b04      	subs	r3, #4
 8005a9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3b04      	subs	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <pxPortInitialiseStack+0x64>)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3b14      	subs	r3, #20
 8005aba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f06f 0202 	mvn.w	r2, #2
 8005ace:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3b20      	subs	r3, #32
 8005ad4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	08005ae9 	.word	0x08005ae9

08005ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005af2:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <prvTaskExitError+0x54>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d00a      	beq.n	8005b12 <prvTaskExitError+0x2a>
        __asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60fb      	str	r3, [r7, #12]
    }
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <prvTaskExitError+0x28>
        __asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	60bb      	str	r3, [r7, #8]
    }
 8005b24:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005b26:	bf00      	nop
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0fc      	beq.n	8005b28 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000010 	.word	0x20000010

08005b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <pxCurrentTCBConst2>)
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	6808      	ldr	r0, [r1, #0]
 8005b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	f380 8809 	msr	PSP, r0
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f04f 0000 	mov.w	r0, #0
 8005b56:	f380 8811 	msr	BASEPRI, r0
 8005b5a:	4770      	bx	lr
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst2>:
 8005b60:	2000019c 	.word	0x2000019c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005b68:	4808      	ldr	r0, [pc, #32]	; (8005b8c <prvPortStartFirstTask+0x24>)
 8005b6a:	6800      	ldr	r0, [r0, #0]
 8005b6c:	6800      	ldr	r0, [r0, #0]
 8005b6e:	f380 8808 	msr	MSP, r0
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8814 	msr	CONTROL, r0
 8005b7a:	b662      	cpsie	i
 8005b7c:	b661      	cpsie	f
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	df00      	svc	0
 8005b88:	bf00      	nop
 8005b8a:	0000      	.short	0x0000
 8005b8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop

08005b94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b9a:	4b46      	ldr	r3, [pc, #280]	; (8005cb4 <xPortStartScheduler+0x120>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a46      	ldr	r2, [pc, #280]	; (8005cb8 <xPortStartScheduler+0x124>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d10a      	bne.n	8005bba <xPortStartScheduler+0x26>
        __asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	613b      	str	r3, [r7, #16]
    }
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bba:	4b3e      	ldr	r3, [pc, #248]	; (8005cb4 <xPortStartScheduler+0x120>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a3f      	ldr	r2, [pc, #252]	; (8005cbc <xPortStartScheduler+0x128>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10a      	bne.n	8005bda <xPortStartScheduler+0x46>
        __asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	60fb      	str	r3, [r7, #12]
    }
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bda:	4b39      	ldr	r3, [pc, #228]	; (8005cc0 <xPortStartScheduler+0x12c>)
 8005bdc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	22ff      	movs	r2, #255	; 0xff
 8005bea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	4b31      	ldr	r3, [pc, #196]	; (8005cc4 <xPortStartScheduler+0x130>)
 8005c00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c02:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <xPortStartScheduler+0x134>)
 8005c04:	2207      	movs	r2, #7
 8005c06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c08:	e009      	b.n	8005c1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005c0a:	4b2f      	ldr	r3, [pc, #188]	; (8005cc8 <xPortStartScheduler+0x134>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	4a2d      	ldr	r2, [pc, #180]	; (8005cc8 <xPortStartScheduler+0x134>)
 8005c12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c26:	2b80      	cmp	r3, #128	; 0x80
 8005c28:	d0ef      	beq.n	8005c0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c2a:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <xPortStartScheduler+0x134>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1c3 0307 	rsb	r3, r3, #7
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d00a      	beq.n	8005c4c <xPortStartScheduler+0xb8>
        __asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	60bb      	str	r3, [r7, #8]
    }
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c4c:	4b1e      	ldr	r3, [pc, #120]	; (8005cc8 <xPortStartScheduler+0x134>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	4a1d      	ldr	r2, [pc, #116]	; (8005cc8 <xPortStartScheduler+0x134>)
 8005c54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c56:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <xPortStartScheduler+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c5e:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <xPortStartScheduler+0x134>)
 8005c60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005c6a:	4b18      	ldr	r3, [pc, #96]	; (8005ccc <xPortStartScheduler+0x138>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <xPortStartScheduler+0x138>)
 8005c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005c76:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <xPortStartScheduler+0x138>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a14      	ldr	r2, [pc, #80]	; (8005ccc <xPortStartScheduler+0x138>)
 8005c7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005c82:	f000 f8e3 	bl	8005e4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <xPortStartScheduler+0x13c>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005c8c:	f000 f902 	bl	8005e94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c90:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <xPortStartScheduler+0x140>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a0f      	ldr	r2, [pc, #60]	; (8005cd4 <xPortStartScheduler+0x140>)
 8005c96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005c9c:	f7ff ff64 	bl	8005b68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005ca0:	f7fe ff44 	bl	8004b2c <vTaskSwitchContext>
    prvTaskExitError();
 8005ca4:	f7ff ff20 	bl	8005ae8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	e000ed00 	.word	0xe000ed00
 8005cb8:	410fc271 	.word	0x410fc271
 8005cbc:	410fc270 	.word	0x410fc270
 8005cc0:	e000e400 	.word	0xe000e400
 8005cc4:	200002dc 	.word	0x200002dc
 8005cc8:	200002e0 	.word	0x200002e0
 8005ccc:	e000ed20 	.word	0xe000ed20
 8005cd0:	20000010 	.word	0x20000010
 8005cd4:	e000ef34 	.word	0xe000ef34

08005cd8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
        __asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	607b      	str	r3, [r7, #4]
    }
 8005cf0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <vPortEnterCritical+0x58>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	4a0d      	ldr	r2, [pc, #52]	; (8005d30 <vPortEnterCritical+0x58>)
 8005cfa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <vPortEnterCritical+0x58>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d10f      	bne.n	8005d24 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <vPortEnterCritical+0x5c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <vPortEnterCritical+0x4c>
        __asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	603b      	str	r3, [r7, #0]
    }
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <vPortEnterCritical+0x4a>
    }
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000010 	.word	0x20000010
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005d3e:	4b12      	ldr	r3, [pc, #72]	; (8005d88 <vPortExitCritical+0x50>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <vPortExitCritical+0x24>
        __asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	607b      	str	r3, [r7, #4]
    }
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <vPortExitCritical+0x50>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <vPortExitCritical+0x50>)
 8005d64:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005d66:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <vPortExitCritical+0x50>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <vPortExitCritical+0x42>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	f383 8811 	msr	BASEPRI, r3
    }
 8005d78:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20000010 	.word	0x20000010
 8005d8c:	00000000 	.word	0x00000000

08005d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005d90:	f3ef 8009 	mrs	r0, PSP
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <pxCurrentTCBConst>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f01e 0f10 	tst.w	lr, #16
 8005da0:	bf08      	it	eq
 8005da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005db4:	f380 8811 	msr	BASEPRI, r0
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f7fe feb4 	bl	8004b2c <vTaskSwitchContext>
 8005dc4:	f04f 0000 	mov.w	r0, #0
 8005dc8:	f380 8811 	msr	BASEPRI, r0
 8005dcc:	bc09      	pop	{r0, r3}
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	6808      	ldr	r0, [r1, #0]
 8005dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd6:	f01e 0f10 	tst.w	lr, #16
 8005dda:	bf08      	it	eq
 8005ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005de0:	f380 8809 	msr	PSP, r0
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	f3af 8000 	nop.w

08005df0 <pxCurrentTCBConst>:
 8005df0:	2000019c 	.word	0x2000019c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop

08005df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
        __asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
    }
 8005e10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005e12:	f001 fed5 	bl	8007bc0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005e16:	f7fe fdcd 	bl	80049b4 <xTaskIncrementTick>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d006      	beq.n	8005e2e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005e20:	f001 ff2c 	bl	8007c7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e24:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <SysTick_Handler+0x50>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e001      	b.n	8005e32 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8005e2e:	f001 ff09 	bl	8007c44 <SEGGER_SYSVIEW_RecordExitISR>
 8005e32:	2300      	movs	r3, #0
 8005e34:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f383 8811 	msr	BASEPRI, r3
    }
 8005e3c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vPortSetupTimerInterrupt+0x34>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <vPortSetupTimerInterrupt+0x38>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <vPortSetupTimerInterrupt+0x3c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <vPortSetupTimerInterrupt+0x40>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	099b      	lsrs	r3, r3, #6
 8005e68:	4a09      	ldr	r2, [pc, #36]	; (8005e90 <vPortSetupTimerInterrupt+0x44>)
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e6e:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <vPortSetupTimerInterrupt+0x34>)
 8005e70:	2207      	movs	r2, #7
 8005e72:	601a      	str	r2, [r3, #0]
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000e010 	.word	0xe000e010
 8005e84:	e000e018 	.word	0xe000e018
 8005e88:	20000000 	.word	0x20000000
 8005e8c:	10624dd3 	.word	0x10624dd3
 8005e90:	e000e014 	.word	0xe000e014

08005e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005e94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ea4 <vPortEnableVFP+0x10>
 8005e98:	6801      	ldr	r1, [r0, #0]
 8005e9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e9e:	6001      	str	r1, [r0, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	0000      	.short	0x0000
 8005ea4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop

08005eac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005eb2:	f3ef 8305 	mrs	r3, IPSR
 8005eb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b0f      	cmp	r3, #15
 8005ebc:	d914      	bls.n	8005ee8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ebe:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <vPortValidateInterruptPriority+0x70>)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ec8:	4b15      	ldr	r3, [pc, #84]	; (8005f20 <vPortValidateInterruptPriority+0x74>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	7afa      	ldrb	r2, [r7, #11]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d20a      	bcs.n	8005ee8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	607b      	str	r3, [r7, #4]
    }
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <vPortValidateInterruptPriority+0x78>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <vPortValidateInterruptPriority+0x7c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d90a      	bls.n	8005f0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	603b      	str	r3, [r7, #0]
    }
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <vPortValidateInterruptPriority+0x60>
    }
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000e3f0 	.word	0xe000e3f0
 8005f20:	200002dc 	.word	0x200002dc
 8005f24:	e000ed0c 	.word	0xe000ed0c
 8005f28:	200002e0 	.word	0x200002e0

08005f2c <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005f38:	f7fe fc6c 	bl	8004814 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8005f3c:	4b4e      	ldr	r3, [pc, #312]	; (8006078 <pvPortMalloc+0x14c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8005f44:	f000 f8da 	bl	80060fc <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8005f48:	4b4b      	ldr	r3, [pc, #300]	; (8006078 <pvPortMalloc+0x14c>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) && 
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d02a      	beq.n	8005faa <pvPortMalloc+0x7e>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 8005f54:	2308      	movs	r3, #8
 8005f56:	461a      	mov	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && 
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d223      	bcs.n	8005faa <pvPortMalloc+0x7e>
        {
            xWantedSize += heapSTRUCT_SIZE;
 8005f62:	2308      	movs	r3, #8
 8005f64:	461a      	mov	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4413      	add	r3, r2
 8005f6a:	607b      	str	r3, [r7, #4]

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f023 0307 	bic.w	r3, r3, #7
 8005f72:	3308      	adds	r3, #8
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d214      	bcs.n	8005fa4 <pvPortMalloc+0x78>
                    > xWantedSize )
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f023 0307 	bic.w	r3, r3, #7
 8005f80:	3308      	adds	r3, #8
 8005f82:	607b      	str	r3, [r7, #4]
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d010      	beq.n	8005fb0 <pvPortMalloc+0x84>
        __asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60fb      	str	r3, [r7, #12]
    }
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <pvPortMalloc+0x76>
            }
            else
            {
                xWantedSize = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	607b      	str	r3, [r7, #4]
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005fa8:	e002      	b.n	8005fb0 <pvPortMalloc+0x84>
            }       
        }
        else 
        {
            xWantedSize = 0; 
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	e000      	b.n	8005fb2 <pvPortMalloc+0x86>
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005fb0:	bf00      	nop
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d057      	beq.n	8006068 <pvPortMalloc+0x13c>
 8005fb8:	4b30      	ldr	r3, [pc, #192]	; (800607c <pvPortMalloc+0x150>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d852      	bhi.n	8006068 <pvPortMalloc+0x13c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 8005fc2:	4b2f      	ldr	r3, [pc, #188]	; (8006080 <pvPortMalloc+0x154>)
 8005fc4:	623b      	str	r3, [r7, #32]
            pxBlock = xStart.pxNextFreeBlock;
 8005fc6:	4b2e      	ldr	r3, [pc, #184]	; (8006080 <pvPortMalloc+0x154>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fcc:	e004      	b.n	8005fd8 <pvPortMalloc+0xac>
            {
                pxPreviousBlock = pxBlock;
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	623b      	str	r3, [r7, #32]
                pxBlock = pxBlock->pxNextFreeBlock;
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d903      	bls.n	8005fea <pvPortMalloc+0xbe>
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f1      	bne.n	8005fce <pvPortMalloc+0xa2>
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	4a25      	ldr	r2, [pc, #148]	; (8006084 <pvPortMalloc+0x158>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d03a      	beq.n	8006068 <pvPortMalloc+0x13c>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	4413      	add	r3, r2
 8005ffa:	61fb      	str	r3, [r7, #28]

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	601a      	str	r2, [r3, #0]

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2208      	movs	r2, #8
 800600e:	0052      	lsls	r2, r2, #1
 8006010:	4293      	cmp	r3, r2
 8006012:	d922      	bls.n	800605a <pvPortMalloc+0x12e>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	1ad2      	subs	r2, r2, r3
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	605a      	str	r2, [r3, #4]
                    pxBlock->xBlockSize = xWantedSize;
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	4b12      	ldr	r3, [pc, #72]	; (8006080 <pvPortMalloc+0x154>)
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	e002      	b.n	8006040 <pvPortMalloc+0x114>
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	429a      	cmp	r2, r3
 800604a:	d8f6      	bhi.n	800603a <pvPortMalloc+0x10e>
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	601a      	str	r2, [r3, #0]
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 800605a:	4b08      	ldr	r3, [pc, #32]	; (800607c <pvPortMalloc+0x150>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	4a05      	ldr	r2, [pc, #20]	; (800607c <pvPortMalloc+0x150>)
 8006066:	6013      	str	r3, [r2, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006068:	f7fe fbe2 	bl	8004830 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800606c:	69fb      	ldr	r3, [r7, #28]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3728      	adds	r7, #40	; 0x28
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20012ef4 	.word	0x20012ef4
 800607c:	20000014 	.word	0x20000014
 8006080:	20012ee4 	.word	0x20012ee4
 8006084:	20012eec 	.word	0x20012eec

08006088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d027      	beq.n	80060ea <vPortFree+0x62>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800609a:	2308      	movs	r3, #8
 800609c:	425b      	negs	r3, r3
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4413      	add	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	60fb      	str	r3, [r7, #12]

        vTaskSuspendAll();
 80060a8:	f7fe fbb4 	bl	8004814 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <vPortFree+0x6c>)
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e002      	b.n	80060be <vPortFree+0x36>
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d8f6      	bhi.n	80060b8 <vPortFree+0x30>
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <vPortFree+0x70>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4413      	add	r3, r2
 80060e2:	4a05      	ldr	r2, [pc, #20]	; (80060f8 <vPortFree+0x70>)
 80060e4:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 80060e6:	f7fe fba3 	bl	8004830 <xTaskResumeAll>
    }
}
 80060ea:	bf00      	nop
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20012ee4 	.word	0x20012ee4
 80060f8:	20000014 	.word	0x20000014

080060fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <prvHeapInit+0x44>)
 8006104:	f023 0307 	bic.w	r3, r3, #7
 8006108:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800610a:	4a0e      	ldr	r2, [pc, #56]	; (8006144 <prvHeapInit+0x48>)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <prvHeapInit+0x48>)
 8006112:	2200      	movs	r2, #0
 8006114:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <prvHeapInit+0x4c>)
 8006118:	4a0c      	ldr	r2, [pc, #48]	; (800614c <prvHeapInit+0x50>)
 800611a:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 800611c:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <prvHeapInit+0x4c>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	4a08      	ldr	r2, [pc, #32]	; (800614c <prvHeapInit+0x50>)
 800612a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	4a06      	ldr	r2, [pc, #24]	; (8006148 <prvHeapInit+0x4c>)
 8006130:	601a      	str	r2, [r3, #0]
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	200002ec 	.word	0x200002ec
 8006144:	20012ee4 	.word	0x20012ee4
 8006148:	20012eec 	.word	0x20012eec
 800614c:	00012bf8 	.word	0x00012bf8

08006150 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006154:	4803      	ldr	r0, [pc, #12]	; (8006164 <_cbSendSystemDesc+0x14>)
 8006156:	f001 fcdd 	bl	8007b14 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800615a:	4803      	ldr	r0, [pc, #12]	; (8006168 <_cbSendSystemDesc+0x18>)
 800615c:	f001 fcda 	bl	8007b14 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006160:	bf00      	nop
 8006162:	bd80      	pop	{r7, pc}
 8006164:	08008c1c 	.word	0x08008c1c
 8006168:	08008c5c 	.word	0x08008c5c

0800616c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <SEGGER_SYSVIEW_Conf+0x20>)
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <SEGGER_SYSVIEW_Conf+0x20>)
 8006176:	6819      	ldr	r1, [r3, #0]
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <SEGGER_SYSVIEW_Conf+0x24>)
 800617a:	4a06      	ldr	r2, [pc, #24]	; (8006194 <SEGGER_SYSVIEW_Conf+0x28>)
 800617c:	f001 f846 	bl	800720c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006180:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006184:	f001 f886 	bl	8007294 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006188:	bf00      	nop
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000000 	.word	0x20000000
 8006190:	08006151 	.word	0x08006151
 8006194:	08008cfc 	.word	0x08008cfc

08006198 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619a:	b085      	sub	sp, #20
 800619c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]
 80061a2:	e033      	b.n	800620c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80061a4:	491e      	ldr	r1, [pc, #120]	; (8006220 <_cbSendTaskList+0x88>)
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	491a      	ldr	r1, [pc, #104]	; (8006220 <_cbSendTaskList+0x88>)
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	3304      	adds	r3, #4
 80061c4:	6819      	ldr	r1, [r3, #0]
 80061c6:	4c16      	ldr	r4, [pc, #88]	; (8006220 <_cbSendTaskList+0x88>)
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4423      	add	r3, r4
 80061d4:	3308      	adds	r3, #8
 80061d6:	681c      	ldr	r4, [r3, #0]
 80061d8:	4d11      	ldr	r5, [pc, #68]	; (8006220 <_cbSendTaskList+0x88>)
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	442b      	add	r3, r5
 80061e6:	330c      	adds	r3, #12
 80061e8:	681d      	ldr	r5, [r3, #0]
 80061ea:	4e0d      	ldr	r6, [pc, #52]	; (8006220 <_cbSendTaskList+0x88>)
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4433      	add	r3, r6
 80061f8:	3310      	adds	r3, #16
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	462b      	mov	r3, r5
 8006200:	4622      	mov	r2, r4
 8006202:	f000 f8b5 	bl	8006370 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3301      	adds	r3, #1
 800620a:	607b      	str	r3, [r7, #4]
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <_cbSendTaskList+0x8c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d3c6      	bcc.n	80061a4 <_cbSendTaskList+0xc>
  }
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006220:	20012ef8 	.word	0x20012ef8
 8006224:	20012f98 	.word	0x20012f98

08006228 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006228:	b5b0      	push	{r4, r5, r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800622e:	f7fe fbaf 	bl	8004990 <xTaskGetTickCountFromISR>
 8006232:	4603      	mov	r3, r0
 8006234:	461a      	mov	r2, r3
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800623e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	f04f 0400 	mov.w	r4, #0
 800624a:	f04f 0500 	mov.w	r5, #0
 800624e:	015d      	lsls	r5, r3, #5
 8006250:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8006254:	0154      	lsls	r4, r2, #5
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	1a12      	subs	r2, r2, r0
 800625c:	eb63 0301 	sbc.w	r3, r3, r1
 8006260:	f04f 0400 	mov.w	r4, #0
 8006264:	f04f 0500 	mov.w	r5, #0
 8006268:	009d      	lsls	r5, r3, #2
 800626a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800626e:	0094      	lsls	r4, r2, #2
 8006270:	4622      	mov	r2, r4
 8006272:	462b      	mov	r3, r5
 8006274:	1812      	adds	r2, r2, r0
 8006276:	eb41 0303 	adc.w	r3, r1, r3
 800627a:	f04f 0000 	mov.w	r0, #0
 800627e:	f04f 0100 	mov.w	r1, #0
 8006282:	00d9      	lsls	r1, r3, #3
 8006284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006288:	00d0      	lsls	r0, r2, #3
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8006292:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bdb0      	pop	{r4, r5, r7, pc}

080062a0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80062ae:	2205      	movs	r2, #5
 80062b0:	492b      	ldr	r1, [pc, #172]	; (8006360 <SYSVIEW_AddTask+0xc0>)
 80062b2:	68b8      	ldr	r0, [r7, #8]
 80062b4:	f001 ffda 	bl	800826c <memcmp>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d04b      	beq.n	8006356 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80062be:	4b29      	ldr	r3, [pc, #164]	; (8006364 <SYSVIEW_AddTask+0xc4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b07      	cmp	r3, #7
 80062c4:	d903      	bls.n	80062ce <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80062c6:	4828      	ldr	r0, [pc, #160]	; (8006368 <SYSVIEW_AddTask+0xc8>)
 80062c8:	f001 ff22 	bl	8008110 <SEGGER_SYSVIEW_Warn>
    return;
 80062cc:	e044      	b.n	8006358 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80062ce:	4b25      	ldr	r3, [pc, #148]	; (8006364 <SYSVIEW_AddTask+0xc4>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4926      	ldr	r1, [pc, #152]	; (800636c <SYSVIEW_AddTask+0xcc>)
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80062e2:	4b20      	ldr	r3, [pc, #128]	; (8006364 <SYSVIEW_AddTask+0xc4>)
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4921      	ldr	r1, [pc, #132]	; (800636c <SYSVIEW_AddTask+0xcc>)
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	3304      	adds	r3, #4
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80062f8:	4b1a      	ldr	r3, [pc, #104]	; (8006364 <SYSVIEW_AddTask+0xc4>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	491b      	ldr	r1, [pc, #108]	; (800636c <SYSVIEW_AddTask+0xcc>)
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	3308      	adds	r3, #8
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800630e:	4b15      	ldr	r3, [pc, #84]	; (8006364 <SYSVIEW_AddTask+0xc4>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4916      	ldr	r1, [pc, #88]	; (800636c <SYSVIEW_AddTask+0xcc>)
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	330c      	adds	r3, #12
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006324:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <SYSVIEW_AddTask+0xc4>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4910      	ldr	r1, [pc, #64]	; (800636c <SYSVIEW_AddTask+0xcc>)
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	3310      	adds	r3, #16
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800633a:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <SYSVIEW_AddTask+0xc4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	4a08      	ldr	r2, [pc, #32]	; (8006364 <SYSVIEW_AddTask+0xc4>)
 8006342:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f80e 	bl	8006370 <SYSVIEW_SendTaskInfo>
 8006354:	e000      	b.n	8006358 <SYSVIEW_AddTask+0xb8>
    return;
 8006356:	bf00      	nop

}
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	08008c6c 	.word	0x08008c6c
 8006364:	20012f98 	.word	0x20012f98
 8006368:	08008c74 	.word	0x08008c74
 800636c:	20012ef8 	.word	0x20012ef8

08006370 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	; 0x28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800637e:	f107 0314 	add.w	r3, r7, #20
 8006382:	2214      	movs	r2, #20
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f001 ff8c 	bl	80082a4 <memset>
  TaskInfo.TaskID     = TaskID;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80063a0:	f107 0314 	add.w	r3, r7, #20
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 fabd 	bl	8007924 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80063aa:	bf00      	nop
 80063ac:	3728      	adds	r7, #40	; 0x28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <__NVIC_EnableIRQ>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	db0b      	blt.n	80063de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	f003 021f 	and.w	r2, r3, #31
 80063cc:	4907      	ldr	r1, [pc, #28]	; (80063ec <__NVIC_EnableIRQ+0x38>)
 80063ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	2001      	movs	r0, #1
 80063d6:	fa00 f202 	lsl.w	r2, r0, r2
 80063da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	e000e100 	.word	0xe000e100

080063f0 <__NVIC_SetPriority>:
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4603      	mov	r3, r0
 80063f8:	6039      	str	r1, [r7, #0]
 80063fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006400:	2b00      	cmp	r3, #0
 8006402:	db0a      	blt.n	800641a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	490c      	ldr	r1, [pc, #48]	; (800643c <__NVIC_SetPriority+0x4c>)
 800640a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640e:	0112      	lsls	r2, r2, #4
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	440b      	add	r3, r1
 8006414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006418:	e00a      	b.n	8006430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4908      	ldr	r1, [pc, #32]	; (8006440 <__NVIC_SetPriority+0x50>)
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	3b04      	subs	r3, #4
 8006428:	0112      	lsls	r2, r2, #4
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	440b      	add	r3, r1
 800642e:	761a      	strb	r2, [r3, #24]
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	e000e100 	.word	0xe000e100
 8006440:	e000ed00 	.word	0xe000ed00

08006444 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800644a:	f001 febd 	bl	80081c8 <SEGGER_SYSVIEW_IsStarted>
 800644e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8006456:	f001 f8e9 	bl	800762c <SEGGER_SYSVIEW_Start>
  }
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <_cbOnUARTRx+0x3c>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b03      	cmp	r3, #3
 8006474:	d806      	bhi.n	8006484 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <_cbOnUARTRx+0x3c>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <_cbOnUARTRx+0x3c>)
 8006480:	701a      	strb	r2, [r3, #0]
    goto Done;
 8006482:	e009      	b.n	8006498 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8006484:	f7ff ffde 	bl	8006444 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <_cbOnUARTRx+0x3c>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	1dfb      	adds	r3, r7, #7
 8006490:	2201      	movs	r2, #1
 8006492:	4619      	mov	r1, r3
 8006494:	f000 fb9a 	bl	8006bcc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8006498:	bf00      	nop
}
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20000018 	.word	0x20000018

080064a4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80064ac:	4b14      	ldr	r3, [pc, #80]	; (8006500 <_cbOnUARTTx+0x5c>)
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b03      	cmp	r3, #3
 80064b2:	d80f      	bhi.n	80064d4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80064b4:	4b12      	ldr	r3, [pc, #72]	; (8006500 <_cbOnUARTTx+0x5c>)
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	461a      	mov	r2, r3
 80064ba:	4b12      	ldr	r3, [pc, #72]	; (8006504 <_cbOnUARTTx+0x60>)
 80064bc:	5c9a      	ldrb	r2, [r3, r2]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80064c2:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <_cbOnUARTTx+0x5c>)
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	3301      	adds	r3, #1
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <_cbOnUARTTx+0x5c>)
 80064cc:	705a      	strb	r2, [r3, #1]
    r = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
    goto Done;
 80064d2:	e00f      	b.n	80064f4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <_cbOnUARTTx+0x5c>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fa19 	bl	8006914 <SEGGER_RTT_ReadUpBufferNoLock>
 80064e2:	4603      	mov	r3, r0
 80064e4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da02      	bge.n	80064f2 <_cbOnUARTTx+0x4e>
    r = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e000      	b.n	80064f4 <_cbOnUARTTx+0x50>
  }
Done:
 80064f2:	bf00      	nop
  return r;
 80064f4:	68fb      	ldr	r3, [r7, #12]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000018 	.word	0x20000018
 8006504:	08008d04 	.word	0x08008d04

08006508 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8006510:	4a04      	ldr	r2, [pc, #16]	; (8006524 <SEGGER_UART_init+0x1c>)
 8006512:	4905      	ldr	r1, [pc, #20]	; (8006528 <SEGGER_UART_init+0x20>)
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f863 	bl	80065e0 <HIF_UART_Init>
}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	08006465 	.word	0x08006465
 8006528:	080064a5 	.word	0x080064a5

0800652c <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8006532:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <USART2_IRQHandler+0x80>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d011      	beq.n	8006566 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8006542:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <USART2_IRQHandler+0x84>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f003 030b 	and.w	r3, r3, #11
 8006550:	2b00      	cmp	r3, #0
 8006552:	d108      	bne.n	8006566 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8006554:	4b17      	ldr	r3, [pc, #92]	; (80065b4 <USART2_IRQHandler+0x88>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <USART2_IRQHandler+0x88>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	79fa      	ldrb	r2, [r7, #7]
 8006562:	4610      	mov	r0, r2
 8006564:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01a      	beq.n	80065a6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8006570:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <USART2_IRQHandler+0x8c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d015      	beq.n	80065a4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <USART2_IRQHandler+0x8c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1dfa      	adds	r2, r7, #7
 800657e:	4610      	mov	r0, r2
 8006580:	4798      	blx	r3
 8006582:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800658a:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <USART2_IRQHandler+0x90>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a0b      	ldr	r2, [pc, #44]	; (80065bc <USART2_IRQHandler+0x90>)
 8006590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	e006      	b.n	80065a6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006598:	4b04      	ldr	r3, [pc, #16]	; (80065ac <USART2_IRQHandler+0x80>)
 800659a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800659c:	79fa      	ldrb	r2, [r7, #7]
 800659e:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <USART2_IRQHandler+0x84>)
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e000      	b.n	80065a6 <USART2_IRQHandler+0x7a>
      return;
 80065a4:	bf00      	nop
    }
  }
}
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40004400 	.word	0x40004400
 80065b0:	40004404 	.word	0x40004404
 80065b4:	20012f9c 	.word	0x20012f9c
 80065b8:	20012fa0 	.word	0x20012fa0
 80065bc:	4000440c 	.word	0x4000440c

080065c0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a04      	ldr	r2, [pc, #16]	; (80065dc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80065ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ce:	6013      	str	r3, [r2, #0]
}
 80065d0:	bf00      	nop
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	4000440c 	.word	0x4000440c

080065e0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80065ec:	4b2e      	ldr	r3, [pc, #184]	; (80066a8 <HIF_UART_Init+0xc8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2d      	ldr	r2, [pc, #180]	; (80066a8 <HIF_UART_Init+0xc8>)
 80065f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80065f8:	4b2c      	ldr	r3, [pc, #176]	; (80066ac <HIF_UART_Init+0xcc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a2b      	ldr	r2, [pc, #172]	; (80066ac <HIF_UART_Init+0xcc>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8006604:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <HIF_UART_Init+0xd0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006610:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8006618:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800661a:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <HIF_UART_Init+0xd0>)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8006620:	4b24      	ldr	r3, [pc, #144]	; (80066b4 <HIF_UART_Init+0xd4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800662c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8006634:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8006636:	4a1f      	ldr	r2, [pc, #124]	; (80066b4 <HIF_UART_Init+0xd4>)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800663c:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <HIF_UART_Init+0xd8>)
 800663e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8006642:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8006644:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <HIF_UART_Init+0xdc>)
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <HIF_UART_Init+0xe0>)
 800664c:	2280      	movs	r2, #128	; 0x80
 800664e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8006656:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <HIF_UART_Init+0xe4>)
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	fbb2 f3f3 	udiv	r3, r2, r3
 800665e:	3301      	adds	r3, #1
 8006660:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	085b      	lsrs	r3, r3, #1
 8006666:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666e:	d302      	bcc.n	8006676 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8006670:	f640 73ff 	movw	r3, #4095	; 0xfff
 8006674:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	4a11      	ldr	r2, [pc, #68]	; (80066c8 <HIF_UART_Init+0xe8>)
 8006682:	b29b      	uxth	r3, r3
 8006684:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8006686:	4a11      	ldr	r2, [pc, #68]	; (80066cc <HIF_UART_Init+0xec>)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800668c:	4a10      	ldr	r2, [pc, #64]	; (80066d0 <HIF_UART_Init+0xf0>)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8006692:	2106      	movs	r1, #6
 8006694:	2026      	movs	r0, #38	; 0x26
 8006696:	f7ff feab 	bl	80063f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800669a:	2026      	movs	r0, #38	; 0x26
 800669c:	f7ff fe8a 	bl	80063b4 <__NVIC_EnableIRQ>
}
 80066a0:	bf00      	nop
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40023840 	.word	0x40023840
 80066ac:	40023830 	.word	0x40023830
 80066b0:	40020020 	.word	0x40020020
 80066b4:	40020000 	.word	0x40020000
 80066b8:	4000440c 	.word	0x4000440c
 80066bc:	40004410 	.word	0x40004410
 80066c0:	40004414 	.word	0x40004414
 80066c4:	055d4a80 	.word	0x055d4a80
 80066c8:	40004408 	.word	0x40004408
 80066cc:	20012f9c 	.word	0x20012f9c
 80066d0:	20012fa0 	.word	0x20012fa0

080066d4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <_DoInit+0x98>)
 80066dc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2203      	movs	r2, #3
 80066e2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2203      	movs	r2, #3
 80066e8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a20      	ldr	r2, [pc, #128]	; (8006770 <_DoInit+0x9c>)
 80066ee:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a20      	ldr	r2, [pc, #128]	; (8006774 <_DoInit+0xa0>)
 80066f4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066fc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a17      	ldr	r2, [pc, #92]	; (8006770 <_DoInit+0x9c>)
 8006714:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a17      	ldr	r2, [pc, #92]	; (8006778 <_DoInit+0xa4>)
 800671a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2210      	movs	r2, #16
 8006720:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3307      	adds	r3, #7
 8006738:	4a10      	ldr	r2, [pc, #64]	; (800677c <_DoInit+0xa8>)
 800673a:	6810      	ldr	r0, [r2, #0]
 800673c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800673e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a0e      	ldr	r2, [pc, #56]	; (8006780 <_DoInit+0xac>)
 8006746:	6810      	ldr	r0, [r2, #0]
 8006748:	6018      	str	r0, [r3, #0]
 800674a:	8891      	ldrh	r1, [r2, #4]
 800674c:	7992      	ldrb	r2, [r2, #6]
 800674e:	8099      	strh	r1, [r3, #4]
 8006750:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006752:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800675c:	f3bf 8f5f 	dmb	sy
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	200145d0 	.word	0x200145d0
 8006770:	08008cc4 	.word	0x08008cc4
 8006774:	20012fa4 	.word	0x20012fa4
 8006778:	200133a4 	.word	0x200133a4
 800677c:	08008cd0 	.word	0x08008cd0
 8006780:	08008cd4 	.word	0x08008cd4

08006784 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8006790:	2300      	movs	r3, #0
 8006792:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d905      	bls.n	80067b4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
 80067b2:	e007      	b.n	80067c4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	1acb      	subs	r3, r1, r3
 80067be:	4413      	add	r3, r2
 80067c0:	3b01      	subs	r3, #1
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ce:	4293      	cmp	r3, r2
 80067d0:	bf28      	it	cs
 80067d2:	4613      	movcs	r3, r2
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80067d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4293      	cmp	r3, r2
 80067dc:	bf28      	it	cs
 80067de:	4613      	movcs	r3, r2
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	4413      	add	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80067ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	6978      	ldr	r0, [r7, #20]
 80067f2:	f001 fd49 	bl	8008288 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80067f6:	6a3a      	ldr	r2, [r7, #32]
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	4413      	add	r3, r2
 80067fc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	4413      	add	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	4413      	add	r3, r2
 8006814:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	429a      	cmp	r2, r3
 800681e:	d101      	bne.n	8006824 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006824:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1b2      	bne.n	800679a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8006834:	6a3b      	ldr	r3, [r7, #32]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3728      	adds	r7, #40	; 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800683e:	b580      	push	{r7, lr}
 8006840:	b088      	sub	sp, #32
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	429a      	cmp	r2, r3
 8006860:	d911      	bls.n	8006886 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	6938      	ldr	r0, [r7, #16]
 8006872:	f001 fd09 	bl	8008288 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006876:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	441a      	add	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8006884:	e01f      	b.n	80068c6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	6938      	ldr	r0, [r7, #16]
 800689a:	f001 fcf5 	bl	8008288 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	4413      	add	r3, r2
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4619      	mov	r1, r3
 80068b6:	6938      	ldr	r0, [r7, #16]
 80068b8:	f001 fce6 	bl	8008288 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80068bc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	60da      	str	r2, [r3, #12]
}
 80068c6:	bf00      	nop
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d808      	bhi.n	80068fc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad2      	subs	r2, r2, r3
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4413      	add	r3, r2
 80068f6:	3b01      	subs	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	e004      	b.n	8006906 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006906:	697b      	ldr	r3, [r7, #20]
}
 8006908:	4618      	mov	r0, r3
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b08c      	sub	sp, #48	; 0x30
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8006920:	4b3e      	ldr	r3, [pc, #248]	; (8006a1c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8006922:	623b      	str	r3, [r7, #32]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800692e:	f7ff fed1 	bl	80066d4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	4613      	mov	r3, r2
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	4413      	add	r3, r2
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4a37      	ldr	r2, [pc, #220]	; (8006a1c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8006940:	4413      	add	r3, r2
 8006942:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006954:	2300      	movs	r3, #0
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	429a      	cmp	r2, r3
 800695e:	d92b      	bls.n	80069b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4293      	cmp	r3, r2
 8006970:	bf28      	it	cs
 8006972:	4613      	movcs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	4413      	add	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	6939      	ldr	r1, [r7, #16]
 8006984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006986:	f001 fc7f 	bl	8008288 <memcpy>
    NumBytesRead += NumBytesRem;
 800698a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	4413      	add	r3, r2
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80069a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4413      	add	r3, r2
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d101      	bne.n	80069b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4293      	cmp	r3, r2
 80069c6:	bf28      	it	cs
 80069c8:	4613      	movcs	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d019      	beq.n	8006a06 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	4413      	add	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	6939      	ldr	r1, [r7, #16]
 80069e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069e2:	f001 fc51 	bl	8008288 <memcpy>
    NumBytesRead += NumBytesRem;
 80069e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	4413      	add	r3, r2
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80069ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	4413      	add	r3, r2
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80069fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	4413      	add	r3, r2
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a10:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3730      	adds	r7, #48	; 0x30
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200145d0 	.word	0x200145d0

08006a20 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08c      	sub	sp, #48	; 0x30
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006a2c:	4b3e      	ldr	r3, [pc, #248]	; (8006b28 <SEGGER_RTT_ReadNoLock+0x108>)
 8006a2e:	623b      	str	r3, [r7, #32]
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <SEGGER_RTT_ReadNoLock+0x1e>
 8006a3a:	f7ff fe4b 	bl	80066d4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4613      	mov	r3, r2
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	4413      	add	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	3360      	adds	r3, #96	; 0x60
 8006a4a:	4a37      	ldr	r2, [pc, #220]	; (8006b28 <SEGGER_RTT_ReadNoLock+0x108>)
 8006a4c:	4413      	add	r3, r2
 8006a4e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006a60:	2300      	movs	r3, #0
 8006a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d92b      	bls.n	8006ac4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bf28      	it	cs
 8006a7e:	4613      	movcs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	4413      	add	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	6939      	ldr	r1, [r7, #16]
 8006a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a92:	f001 fbf9 	bl	8008288 <memcpy>
    NumBytesRead += NumBytesRem;
 8006a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d101      	bne.n	8006ac4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	bf28      	it	cs
 8006ad4:	4613      	movcs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d019      	beq.n	8006b12 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	4413      	add	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	6939      	ldr	r1, [r7, #16]
 8006aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aee:	f001 fbcb 	bl	8008288 <memcpy>
    NumBytesRead += NumBytesRem;
 8006af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4413      	add	r3, r2
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	4413      	add	r3, r2
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3730      	adds	r7, #48	; 0x30
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	200145d0 	.word	0x200145d0

08006b2c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	3360      	adds	r3, #96	; 0x60
 8006b48:	4a1f      	ldr	r2, [pc, #124]	; (8006bc8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8006b4a:	4413      	add	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d029      	beq.n	8006baa <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d82e      	bhi.n	8006bb8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d013      	beq.n	8006b8a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8006b62:	e029      	b.n	8006bb8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006b64:	6978      	ldr	r0, [r7, #20]
 8006b66:	f7ff feb2 	bl	80068ce <_GetAvailWriteSpace>
 8006b6a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d202      	bcs.n	8006b7a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006b78:	e021      	b.n	8006bbe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	69b9      	ldr	r1, [r7, #24]
 8006b82:	6978      	ldr	r0, [r7, #20]
 8006b84:	f7ff fe5b 	bl	800683e <_WriteNoCheck>
    break;
 8006b88:	e019      	b.n	8006bbe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006b8a:	6978      	ldr	r0, [r7, #20]
 8006b8c:	f7ff fe9f 	bl	80068ce <_GetAvailWriteSpace>
 8006b90:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	bf28      	it	cs
 8006b9a:	4613      	movcs	r3, r2
 8006b9c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	6978      	ldr	r0, [r7, #20]
 8006ba4:	f7ff fe4b 	bl	800683e <_WriteNoCheck>
    break;
 8006ba8:	e009      	b.n	8006bbe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	69b9      	ldr	r1, [r7, #24]
 8006bae:	6978      	ldr	r0, [r7, #20]
 8006bb0:	f7ff fde8 	bl	8006784 <_WriteBlocking>
 8006bb4:	61f8      	str	r0, [r7, #28]
    break;
 8006bb6:	e002      	b.n	8006bbe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61fb      	str	r3, [r7, #28]
    break;
 8006bbc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	200145d0 	.word	0x200145d0

08006bcc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <SEGGER_RTT_WriteDownBuffer+0x1e>
 8006be6:	f7ff fd75 	bl	80066d4 <_DoInit>
  SEGGER_RTT_LOCK();
 8006bea:	f3ef 8311 	mrs	r3, BASEPRI
 8006bee:	f04f 0120 	mov.w	r1, #32
 8006bf2:	f381 8811 	msr	BASEPRI, r1
 8006bf6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff ff95 	bl	8006b2c <SEGGER_RTT_WriteDownBufferNoLock>
 8006c02:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006c0a:	697b      	ldr	r3, [r7, #20]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3720      	adds	r7, #32
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	200145d0 	.word	0x200145d0

08006c18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006c26:	4b3d      	ldr	r3, [pc, #244]	; (8006d1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006c34:	f7ff fd4e 	bl	80066d4 <_DoInit>
  SEGGER_RTT_LOCK();
 8006c38:	f3ef 8311 	mrs	r3, BASEPRI
 8006c3c:	f04f 0120 	mov.w	r1, #32
 8006c40:	f381 8811 	msr	BASEPRI, r1
 8006c44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006c46:	4b35      	ldr	r3, [pc, #212]	; (8006d1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006c48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006c4e:	6939      	ldr	r1, [r7, #16]
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	4613      	mov	r3, r2
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	4413      	add	r3, r2
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	440b      	add	r3, r1
 8006c5e:	3304      	adds	r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d008      	beq.n	8006c78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	dbeb      	blt.n	8006c4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8006c76:	e000      	b.n	8006c7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006c78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	da3f      	bge.n	8006d04 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006c84:	6939      	ldr	r1, [r7, #16]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	440b      	add	r3, r1
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006c98:	6939      	ldr	r1, [r7, #16]
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3304      	adds	r3, #4
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006cae:	6939      	ldr	r1, [r7, #16]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	440b      	add	r3, r1
 8006cbc:	3320      	adds	r3, #32
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006cc2:	6939      	ldr	r1, [r7, #16]
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	440b      	add	r3, r1
 8006cd0:	3328      	adds	r3, #40	; 0x28
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006cd6:	6939      	ldr	r1, [r7, #16]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3324      	adds	r3, #36	; 0x24
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006cea:	6939      	ldr	r1, [r7, #16]
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	4413      	add	r3, r2
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	440b      	add	r3, r1
 8006cf8:	332c      	adds	r3, #44	; 0x2c
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006cfe:	f3bf 8f5f 	dmb	sy
 8006d02:	e002      	b.n	8006d0a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006d04:	f04f 33ff 	mov.w	r3, #4294967295
 8006d08:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006d10:	69fb      	ldr	r3, [r7, #28]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200145d0 	.word	0x200145d0

08006d20 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8006d2e:	4b21      	ldr	r3, [pc, #132]	; (8006db4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006d3c:	f7ff fcca 	bl	80066d4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006d40:	4b1c      	ldr	r3, [pc, #112]	; (8006db4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8006d42:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d82c      	bhi.n	8006da4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8006d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d4e:	f04f 0120 	mov.w	r1, #32
 8006d52:	f381 8811 	msr	BASEPRI, r1
 8006d56:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	3360      	adds	r3, #96	; 0x60
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00e      	beq.n	8006d8e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d92:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006d94:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
 8006da2:	e002      	b.n	8006daa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006da4:	f04f 33ff 	mov.w	r3, #4294967295
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3728      	adds	r7, #40	; 0x28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	200145d0 	.word	0x200145d0

08006db8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00f      	beq.n	8006dee <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8006dce:	e002      	b.n	8006dd6 <_EncodeStr+0x1e>
      Len++;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f6      	bne.n	8006dd0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d901      	bls.n	8006dee <_EncodeStr+0x36>
      Len = Limit;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2bfe      	cmp	r3, #254	; 0xfe
 8006df2:	d806      	bhi.n	8006e02 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	60fa      	str	r2, [r7, #12]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	e011      	b.n	8006e26 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	60fa      	str	r2, [r7, #12]
 8006e08:	22ff      	movs	r2, #255	; 0xff
 8006e0a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	60fa      	str	r2, [r7, #12]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	b2d2      	uxtb	r2, r2
 8006e16:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	0a19      	lsrs	r1, r3, #8
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	60fa      	str	r2, [r7, #12]
 8006e22:	b2ca      	uxtb	r2, r1
 8006e24:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006e2a:	e00a      	b.n	8006e42 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	1c53      	adds	r3, r2, #1
 8006e30:	60bb      	str	r3, [r7, #8]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1c59      	adds	r1, r3, #1
 8006e36:	60f9      	str	r1, [r7, #12]
 8006e38:	7812      	ldrb	r2, [r2, #0]
 8006e3a:	701a      	strb	r2, [r3, #0]
    n++;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d3f0      	bcc.n	8006e2c <_EncodeStr+0x74>
  }
  return pPayload;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006e76:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <_HandleIncomingPacket+0xe0>)
 8006e78:	7e1b      	ldrb	r3, [r3, #24]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	1cfb      	adds	r3, r7, #3
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4619      	mov	r1, r3
 8006e82:	f7ff fdcd 	bl	8006a20 <SEGGER_RTT_ReadNoLock>
 8006e86:	4603      	mov	r3, r0
 8006e88:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	dd54      	ble.n	8006f3a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d032      	beq.n	8006efc <_HandleIncomingPacket+0x8c>
 8006e96:	2b80      	cmp	r3, #128	; 0x80
 8006e98:	dc42      	bgt.n	8006f20 <_HandleIncomingPacket+0xb0>
 8006e9a:	2b07      	cmp	r3, #7
 8006e9c:	dc16      	bgt.n	8006ecc <_HandleIncomingPacket+0x5c>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dd3e      	ble.n	8006f20 <_HandleIncomingPacket+0xb0>
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	2b06      	cmp	r3, #6
 8006ea6:	d83b      	bhi.n	8006f20 <_HandleIncomingPacket+0xb0>
 8006ea8:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <_HandleIncomingPacket+0x40>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ed3 	.word	0x08006ed3
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006edf 	.word	0x08006edf
 8006ebc:	08006ee5 	.word	0x08006ee5
 8006ec0:	08006eeb 	.word	0x08006eeb
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	08006ef7 	.word	0x08006ef7
 8006ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8006ece:	d036      	beq.n	8006f3e <_HandleIncomingPacket+0xce>
 8006ed0:	e026      	b.n	8006f20 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006ed2:	f000 fbab 	bl	800762c <SEGGER_SYSVIEW_Start>
      break;
 8006ed6:	e037      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006ed8:	f000 fc64 	bl	80077a4 <SEGGER_SYSVIEW_Stop>
      break;
 8006edc:	e034      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006ede:	f000 fe3d 	bl	8007b5c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006ee2:	e031      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006ee4:	f000 fe02 	bl	8007aec <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006ee8:	e02e      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006eea:	f000 fc81 	bl	80077f0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006eee:	e02b      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006ef0:	f001 f8d0 	bl	8008094 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006ef4:	e028      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006ef6:	f001 f8af 	bl	8008058 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006efa:	e025      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006efc:	4b14      	ldr	r3, [pc, #80]	; (8006f50 <_HandleIncomingPacket+0xe0>)
 8006efe:	7e1b      	ldrb	r3, [r3, #24]
 8006f00:	4618      	mov	r0, r3
 8006f02:	1cfb      	adds	r3, r7, #3
 8006f04:	2201      	movs	r2, #1
 8006f06:	4619      	mov	r1, r3
 8006f08:	f7ff fd8a 	bl	8006a20 <SEGGER_RTT_ReadNoLock>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dd15      	ble.n	8006f42 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006f16:	78fb      	ldrb	r3, [r7, #3]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 f81d 	bl	8007f58 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006f1e:	e010      	b.n	8006f42 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	b25b      	sxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da0e      	bge.n	8006f46 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006f28:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <_HandleIncomingPacket+0xe0>)
 8006f2a:	7e1b      	ldrb	r3, [r3, #24]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	1cfb      	adds	r3, r7, #3
 8006f30:	2201      	movs	r2, #1
 8006f32:	4619      	mov	r1, r3
 8006f34:	f7ff fd74 	bl	8006a20 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006f38:	e005      	b.n	8006f46 <_HandleIncomingPacket+0xd6>
    }
  }
 8006f3a:	bf00      	nop
 8006f3c:	e004      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
      break;
 8006f3e:	bf00      	nop
 8006f40:	e002      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
      break;
 8006f42:	bf00      	nop
 8006f44:	e000      	b.n	8006f48 <_HandleIncomingPacket+0xd8>
      break;
 8006f46:	bf00      	nop
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	200143bc 	.word	0x200143bc

08006f54 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08c      	sub	sp, #48	; 0x30
 8006f58:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	3301      	adds	r3, #1
 8006f62:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f68:	4b32      	ldr	r3, [pc, #200]	; (8007034 <_TrySendOverflowPacket+0xe0>)
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6e:	e00b      	b.n	8006f88 <_TrySendOverflowPacket+0x34>
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	1c59      	adds	r1, r3, #1
 8006f78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	09db      	lsrs	r3, r3, #7
 8006f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f8c:	d8f0      	bhi.n	8006f70 <_TrySendOverflowPacket+0x1c>
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006f9e:	4b26      	ldr	r3, [pc, #152]	; (8007038 <_TrySendOverflowPacket+0xe4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006fa4:	4b23      	ldr	r3, [pc, #140]	; (8007034 <_TrySendOverflowPacket+0xe0>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	623b      	str	r3, [r7, #32]
 8006fb6:	e00b      	b.n	8006fd0 <_TrySendOverflowPacket+0x7c>
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	6279      	str	r1, [r7, #36]	; 0x24
 8006fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	09db      	lsrs	r3, r3, #7
 8006fce:	623b      	str	r3, [r7, #32]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fd4:	d8f0      	bhi.n	8006fb8 <_TrySendOverflowPacket+0x64>
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	627a      	str	r2, [r7, #36]	; 0x24
 8006fdc:	6a3a      	ldr	r2, [r7, #32]
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006fe6:	4b13      	ldr	r3, [pc, #76]	; (8007034 <_TrySendOverflowPacket+0xe0>)
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	4618      	mov	r0, r3
 8006fec:	1d3b      	adds	r3, r7, #4
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	1d3b      	adds	r3, r7, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f7f9 f90a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8007000:	f7ff fade 	bl	80065c0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800700a:	4a0a      	ldr	r2, [pc, #40]	; (8007034 <_TrySendOverflowPacket+0xe0>)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007010:	4b08      	ldr	r3, [pc, #32]	; (8007034 <_TrySendOverflowPacket+0xe0>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	3b01      	subs	r3, #1
 8007016:	b2da      	uxtb	r2, r3
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <_TrySendOverflowPacket+0xe0>)
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e004      	b.n	8007028 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <_TrySendOverflowPacket+0xe0>)
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	3301      	adds	r3, #1
 8007024:	4a03      	ldr	r2, [pc, #12]	; (8007034 <_TrySendOverflowPacket+0xe0>)
 8007026:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007028:	693b      	ldr	r3, [r7, #16]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3730      	adds	r7, #48	; 0x30
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200143bc 	.word	0x200143bc
 8007038:	e0001004 	.word	0xe0001004

0800703c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	; 0x28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007048:	4b6d      	ldr	r3, [pc, #436]	; (8007200 <_SendPacket+0x1c4>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d010      	beq.n	8007072 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007050:	4b6b      	ldr	r3, [pc, #428]	; (8007200 <_SendPacket+0x1c4>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80a5 	beq.w	80071a4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800705a:	4b69      	ldr	r3, [pc, #420]	; (8007200 <_SendPacket+0x1c4>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d109      	bne.n	8007076 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007062:	f7ff ff77 	bl	8006f54 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007066:	4b66      	ldr	r3, [pc, #408]	; (8007200 <_SendPacket+0x1c4>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b01      	cmp	r3, #1
 800706c:	f040 809c 	bne.w	80071a8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8007070:	e001      	b.n	8007076 <_SendPacket+0x3a>
    goto Send;
 8007072:	bf00      	nop
 8007074:	e000      	b.n	8007078 <_SendPacket+0x3c>
Send:
 8007076:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b1f      	cmp	r3, #31
 800707c:	d809      	bhi.n	8007092 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800707e:	4b60      	ldr	r3, [pc, #384]	; (8007200 <_SendPacket+0x1c4>)
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	f040 808d 	bne.w	80071ac <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b17      	cmp	r3, #23
 8007096:	d807      	bhi.n	80070a8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3b01      	subs	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	e03d      	b.n	8007124 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	2b7f      	cmp	r3, #127	; 0x7f
 80070b4:	d912      	bls.n	80070dc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	09da      	lsrs	r2, r3, #7
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3b01      	subs	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	3a01      	subs	r2, #1
 80070ce:	60fa      	str	r2, [r7, #12]
 80070d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	e006      	b.n	80070ea <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3b01      	subs	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b7f      	cmp	r3, #127	; 0x7f
 80070ee:	d912      	bls.n	8007116 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	09da      	lsrs	r2, r3, #7
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	3a01      	subs	r2, #1
 8007108:	60fa      	str	r2, [r7, #12]
 800710a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800710e:	b2da      	uxtb	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	e006      	b.n	8007124 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3b01      	subs	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007124:	4b37      	ldr	r3, [pc, #220]	; (8007204 <_SendPacket+0x1c8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800712a:	4b35      	ldr	r3, [pc, #212]	; (8007200 <_SendPacket+0x1c4>)
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	623b      	str	r3, [r7, #32]
 800713c:	e00b      	b.n	8007156 <_SendPacket+0x11a>
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	1c59      	adds	r1, r3, #1
 8007146:	6279      	str	r1, [r7, #36]	; 0x24
 8007148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	09db      	lsrs	r3, r3, #7
 8007154:	623b      	str	r3, [r7, #32]
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	2b7f      	cmp	r3, #127	; 0x7f
 800715a:	d8f0      	bhi.n	800713e <_SendPacket+0x102>
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	627a      	str	r2, [r7, #36]	; 0x24
 8007162:	6a3a      	ldr	r2, [r7, #32]
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800716c:	4b24      	ldr	r3, [pc, #144]	; (8007200 <_SendPacket+0x1c4>)
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	4618      	mov	r0, r3
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	461a      	mov	r2, r3
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	f7f9 f848 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007180:	4603      	mov	r3, r0
 8007182:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007184:	f7ff fa1c 	bl	80065c0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800718e:	4a1c      	ldr	r2, [pc, #112]	; (8007200 <_SendPacket+0x1c4>)
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	60d3      	str	r3, [r2, #12]
 8007194:	e00b      	b.n	80071ae <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007196:	4b1a      	ldr	r3, [pc, #104]	; (8007200 <_SendPacket+0x1c4>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	b2da      	uxtb	r2, r3
 800719e:	4b18      	ldr	r3, [pc, #96]	; (8007200 <_SendPacket+0x1c4>)
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e004      	b.n	80071ae <_SendPacket+0x172>
    goto SendDone;
 80071a4:	bf00      	nop
 80071a6:	e002      	b.n	80071ae <_SendPacket+0x172>
      goto SendDone;
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <_SendPacket+0x172>
      goto SendDone;
 80071ac:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80071ae:	4b14      	ldr	r3, [pc, #80]	; (8007200 <_SendPacket+0x1c4>)
 80071b0:	7e1b      	ldrb	r3, [r3, #24]
 80071b2:	4619      	mov	r1, r3
 80071b4:	4a14      	ldr	r2, [pc, #80]	; (8007208 <_SendPacket+0x1cc>)
 80071b6:	460b      	mov	r3, r1
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	440b      	add	r3, r1
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	4413      	add	r3, r2
 80071c0:	336c      	adds	r3, #108	; 0x6c
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <_SendPacket+0x1c4>)
 80071c6:	7e1b      	ldrb	r3, [r3, #24]
 80071c8:	4618      	mov	r0, r3
 80071ca:	490f      	ldr	r1, [pc, #60]	; (8007208 <_SendPacket+0x1cc>)
 80071cc:	4603      	mov	r3, r0
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	4403      	add	r3, r0
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	440b      	add	r3, r1
 80071d6:	3370      	adds	r3, #112	; 0x70
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d00b      	beq.n	80071f6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80071de:	4b08      	ldr	r3, [pc, #32]	; (8007200 <_SendPacket+0x1c4>)
 80071e0:	789b      	ldrb	r3, [r3, #2]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d107      	bne.n	80071f6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <_SendPacket+0x1c4>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80071ec:	f7ff fe40 	bl	8006e70 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80071f0:	4b03      	ldr	r3, [pc, #12]	; (8007200 <_SendPacket+0x1c4>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80071f6:	bf00      	nop
 80071f8:	3728      	adds	r7, #40	; 0x28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	200143bc 	.word	0x200143bc
 8007204:	e0001004 	.word	0xe0001004
 8007208:	200145d0 	.word	0x200145d0

0800720c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af02      	add	r7, sp, #8
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800721a:	2300      	movs	r3, #0
 800721c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007220:	4917      	ldr	r1, [pc, #92]	; (8007280 <SEGGER_SYSVIEW_Init+0x74>)
 8007222:	4818      	ldr	r0, [pc, #96]	; (8007284 <SEGGER_SYSVIEW_Init+0x78>)
 8007224:	f7ff fcf8 	bl	8006c18 <SEGGER_RTT_AllocUpBuffer>
 8007228:	4603      	mov	r3, r0
 800722a:	b2da      	uxtb	r2, r3
 800722c:	4b16      	ldr	r3, [pc, #88]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 800722e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007230:	4b15      	ldr	r3, [pc, #84]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 8007232:	785a      	ldrb	r2, [r3, #1]
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 8007236:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007238:	4b13      	ldr	r3, [pc, #76]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 800723a:	7e1b      	ldrb	r3, [r3, #24]
 800723c:	4618      	mov	r0, r3
 800723e:	2300      	movs	r3, #0
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	2308      	movs	r3, #8
 8007244:	4a11      	ldr	r2, [pc, #68]	; (800728c <SEGGER_SYSVIEW_Init+0x80>)
 8007246:	490f      	ldr	r1, [pc, #60]	; (8007284 <SEGGER_SYSVIEW_Init+0x78>)
 8007248:	f7ff fd6a 	bl	8006d20 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800724c:	4b0e      	ldr	r3, [pc, #56]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 800724e:	2200      	movs	r2, #0
 8007250:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007252:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <SEGGER_SYSVIEW_Init+0x84>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a0c      	ldr	r2, [pc, #48]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 8007258:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800725a:	4a0b      	ldr	r2, [pc, #44]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007260:	4a09      	ldr	r2, [pc, #36]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007266:	4a08      	ldr	r2, [pc, #32]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800726c:	4a06      	ldr	r2, [pc, #24]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007272:	4b05      	ldr	r3, [pc, #20]	; (8007288 <SEGGER_SYSVIEW_Init+0x7c>)
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007278:	bf00      	nop
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200133b4 	.word	0x200133b4
 8007284:	08008cdc 	.word	0x08008cdc
 8007288:	200143bc 	.word	0x200143bc
 800728c:	200143b4 	.word	0x200143b4
 8007290:	e0001004 	.word	0xe0001004

08007294 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800729c:	4a04      	ldr	r2, [pc, #16]	; (80072b0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6113      	str	r3, [r2, #16]
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	200143bc 	.word	0x200143bc

080072b4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80072bc:	f3ef 8311 	mrs	r3, BASEPRI
 80072c0:	f04f 0120 	mov.w	r1, #32
 80072c4:	f381 8811 	msr	BASEPRI, r1
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	4808      	ldr	r0, [pc, #32]	; (80072ec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80072cc:	f7ff fdc4 	bl	8006e58 <_PreparePacket>
 80072d0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	f7ff feb0 	bl	800703c <_SendPacket>
  RECORD_END();
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f383 8811 	msr	BASEPRI, r3
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200143ec 	.word	0x200143ec

080072f0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072fa:	f3ef 8311 	mrs	r3, BASEPRI
 80072fe:	f04f 0120 	mov.w	r1, #32
 8007302:	f381 8811 	msr	BASEPRI, r1
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	4816      	ldr	r0, [pc, #88]	; (8007364 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800730a:	f7ff fda5 	bl	8006e58 <_PreparePacket>
 800730e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	61fb      	str	r3, [r7, #28]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	e00b      	b.n	8007336 <SEGGER_SYSVIEW_RecordU32+0x46>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	b2da      	uxtb	r2, r3
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	1c59      	adds	r1, r3, #1
 8007326:	61f9      	str	r1, [r7, #28]
 8007328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	09db      	lsrs	r3, r3, #7
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b7f      	cmp	r3, #127	; 0x7f
 800733a:	d8f0      	bhi.n	800731e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	61fa      	str	r2, [r7, #28]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	701a      	strb	r2, [r3, #0]
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	6938      	ldr	r0, [r7, #16]
 8007352:	f7ff fe73 	bl	800703c <_SendPacket>
  RECORD_END();
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f383 8811 	msr	BASEPRI, r3
}
 800735c:	bf00      	nop
 800735e:	3720      	adds	r7, #32
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	200143ec 	.word	0x200143ec

08007368 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007368:	b580      	push	{r7, lr}
 800736a:	b08c      	sub	sp, #48	; 0x30
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007374:	f3ef 8311 	mrs	r3, BASEPRI
 8007378:	f04f 0120 	mov.w	r1, #32
 800737c:	f381 8811 	msr	BASEPRI, r1
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	4825      	ldr	r0, [pc, #148]	; (8007418 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007384:	f7ff fd68 	bl	8006e58 <_PreparePacket>
 8007388:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
 8007396:	e00b      	b.n	80073b0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	b2da      	uxtb	r2, r3
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	1c59      	adds	r1, r3, #1
 80073a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80073a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	09db      	lsrs	r3, r3, #7
 80073ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	2b7f      	cmp	r3, #127	; 0x7f
 80073b4:	d8f0      	bhi.n	8007398 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	623b      	str	r3, [r7, #32]
 80073ce:	e00b      	b.n	80073e8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	6279      	str	r1, [r7, #36]	; 0x24
 80073da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	09db      	lsrs	r3, r3, #7
 80073e6:	623b      	str	r3, [r7, #32]
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	2b7f      	cmp	r3, #127	; 0x7f
 80073ec:	d8f0      	bhi.n	80073d0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	627a      	str	r2, [r7, #36]	; 0x24
 80073f4:	6a3a      	ldr	r2, [r7, #32]
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	6979      	ldr	r1, [r7, #20]
 8007402:	69b8      	ldr	r0, [r7, #24]
 8007404:	f7ff fe1a 	bl	800703c <_SendPacket>
  RECORD_END();
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f383 8811 	msr	BASEPRI, r3
}
 800740e:	bf00      	nop
 8007410:	3730      	adds	r7, #48	; 0x30
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	200143ec 	.word	0x200143ec

0800741c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800741c:	b580      	push	{r7, lr}
 800741e:	b08e      	sub	sp, #56	; 0x38
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800742a:	f3ef 8311 	mrs	r3, BASEPRI
 800742e:	f04f 0120 	mov.w	r1, #32
 8007432:	f381 8811 	msr	BASEPRI, r1
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	4832      	ldr	r0, [pc, #200]	; (8007504 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800743a:	f7ff fd0d 	bl	8006e58 <_PreparePacket>
 800743e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	633b      	str	r3, [r7, #48]	; 0x30
 800744c:	e00b      	b.n	8007466 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	b2da      	uxtb	r2, r3
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	1c59      	adds	r1, r3, #1
 8007456:	6379      	str	r1, [r7, #52]	; 0x34
 8007458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	09db      	lsrs	r3, r3, #7
 8007464:	633b      	str	r3, [r7, #48]	; 0x30
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	2b7f      	cmp	r3, #127	; 0x7f
 800746a:	d8f0      	bhi.n	800744e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	637a      	str	r2, [r7, #52]	; 0x34
 8007472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
 8007484:	e00b      	b.n	800749e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	b2da      	uxtb	r2, r3
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	1c59      	adds	r1, r3, #1
 800748e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	09db      	lsrs	r3, r3, #7
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	2b7f      	cmp	r3, #127	; 0x7f
 80074a2:	d8f0      	bhi.n	8007486 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80074a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	623b      	str	r3, [r7, #32]
 80074bc:	e00b      	b.n	80074d6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	1c59      	adds	r1, r3, #1
 80074c6:	6279      	str	r1, [r7, #36]	; 0x24
 80074c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	09db      	lsrs	r3, r3, #7
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	2b7f      	cmp	r3, #127	; 0x7f
 80074da:	d8f0      	bhi.n	80074be <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	627a      	str	r2, [r7, #36]	; 0x24
 80074e2:	6a3a      	ldr	r2, [r7, #32]
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	701a      	strb	r2, [r3, #0]
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	6979      	ldr	r1, [r7, #20]
 80074f0:	69b8      	ldr	r0, [r7, #24]
 80074f2:	f7ff fda3 	bl	800703c <_SendPacket>
  RECORD_END();
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	f383 8811 	msr	BASEPRI, r3
}
 80074fc:	bf00      	nop
 80074fe:	3738      	adds	r7, #56	; 0x38
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200143ec 	.word	0x200143ec

08007508 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b090      	sub	sp, #64	; 0x40
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007516:	f3ef 8311 	mrs	r3, BASEPRI
 800751a:	f04f 0120 	mov.w	r1, #32
 800751e:	f381 8811 	msr	BASEPRI, r1
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	4840      	ldr	r0, [pc, #256]	; (8007628 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007526:	f7ff fc97 	bl	8006e58 <_PreparePacket>
 800752a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	63bb      	str	r3, [r7, #56]	; 0x38
 8007538:	e00b      	b.n	8007552 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	b2da      	uxtb	r2, r3
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	1c59      	adds	r1, r3, #1
 8007542:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007544:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	09db      	lsrs	r3, r3, #7
 8007550:	63bb      	str	r3, [r7, #56]	; 0x38
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	2b7f      	cmp	r3, #127	; 0x7f
 8007556:	d8f0      	bhi.n	800753a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800755e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
 8007564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007566:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	633b      	str	r3, [r7, #48]	; 0x30
 8007570:	e00b      	b.n	800758a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	b2da      	uxtb	r2, r3
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	1c59      	adds	r1, r3, #1
 800757a:	6379      	str	r1, [r7, #52]	; 0x34
 800757c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007580:	b2d2      	uxtb	r2, r2
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	09db      	lsrs	r3, r3, #7
 8007588:	633b      	str	r3, [r7, #48]	; 0x30
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	2b7f      	cmp	r3, #127	; 0x7f
 800758e:	d8f0      	bhi.n	8007572 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	637a      	str	r2, [r7, #52]	; 0x34
 8007596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]
 800759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a8:	e00b      	b.n	80075c2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	1c59      	adds	r1, r3, #1
 80075b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80075b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	09db      	lsrs	r3, r3, #7
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	2b7f      	cmp	r3, #127	; 0x7f
 80075c6:	d8f0      	bhi.n	80075aa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
 80075dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075de:	623b      	str	r3, [r7, #32]
 80075e0:	e00b      	b.n	80075fa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	1c59      	adds	r1, r3, #1
 80075ea:	6279      	str	r1, [r7, #36]	; 0x24
 80075ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	09db      	lsrs	r3, r3, #7
 80075f8:	623b      	str	r3, [r7, #32]
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	2b7f      	cmp	r3, #127	; 0x7f
 80075fe:	d8f0      	bhi.n	80075e2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	627a      	str	r2, [r7, #36]	; 0x24
 8007606:	6a3a      	ldr	r2, [r7, #32]
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	6979      	ldr	r1, [r7, #20]
 8007614:	69b8      	ldr	r0, [r7, #24]
 8007616:	f7ff fd11 	bl	800703c <_SendPacket>
  RECORD_END();
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	f383 8811 	msr	BASEPRI, r3
}
 8007620:	bf00      	nop
 8007622:	3740      	adds	r7, #64	; 0x40
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	200143ec 	.word	0x200143ec

0800762c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800762c:	b580      	push	{r7, lr}
 800762e:	b08c      	sub	sp, #48	; 0x30
 8007630:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007632:	4b59      	ldr	r3, [pc, #356]	; (8007798 <SEGGER_SYSVIEW_Start+0x16c>)
 8007634:	2201      	movs	r2, #1
 8007636:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007638:	f3ef 8311 	mrs	r3, BASEPRI
 800763c:	f04f 0120 	mov.w	r1, #32
 8007640:	f381 8811 	msr	BASEPRI, r1
 8007644:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007646:	4b54      	ldr	r3, [pc, #336]	; (8007798 <SEGGER_SYSVIEW_Start+0x16c>)
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	220a      	movs	r2, #10
 800764c:	4953      	ldr	r1, [pc, #332]	; (800779c <SEGGER_SYSVIEW_Start+0x170>)
 800764e:	4618      	mov	r0, r3
 8007650:	f7f8 fdde 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800765a:	f7fe ffb1 	bl	80065c0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800765e:	200a      	movs	r0, #10
 8007660:	f7ff fe28 	bl	80072b4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007664:	f3ef 8311 	mrs	r3, BASEPRI
 8007668:	f04f 0120 	mov.w	r1, #32
 800766c:	f381 8811 	msr	BASEPRI, r1
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	484b      	ldr	r0, [pc, #300]	; (80077a0 <SEGGER_SYSVIEW_Start+0x174>)
 8007674:	f7ff fbf0 	bl	8006e58 <_PreparePacket>
 8007678:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007682:	4b45      	ldr	r3, [pc, #276]	; (8007798 <SEGGER_SYSVIEW_Start+0x16c>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
 8007688:	e00b      	b.n	80076a2 <SEGGER_SYSVIEW_Start+0x76>
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	b2da      	uxtb	r2, r3
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007690:	1c59      	adds	r1, r3, #1
 8007692:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	09db      	lsrs	r3, r3, #7
 80076a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	2b7f      	cmp	r3, #127	; 0x7f
 80076a6:	d8f0      	bhi.n	800768a <SEGGER_SYSVIEW_Start+0x5e>
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
 80076bc:	4b36      	ldr	r3, [pc, #216]	; (8007798 <SEGGER_SYSVIEW_Start+0x16c>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	623b      	str	r3, [r7, #32]
 80076c2:	e00b      	b.n	80076dc <SEGGER_SYSVIEW_Start+0xb0>
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	1c59      	adds	r1, r3, #1
 80076cc:	6279      	str	r1, [r7, #36]	; 0x24
 80076ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	09db      	lsrs	r3, r3, #7
 80076da:	623b      	str	r3, [r7, #32]
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	2b7f      	cmp	r3, #127	; 0x7f
 80076e0:	d8f0      	bhi.n	80076c4 <SEGGER_SYSVIEW_Start+0x98>
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	627a      	str	r2, [r7, #36]	; 0x24
 80076e8:	6a3a      	ldr	r2, [r7, #32]
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	4b28      	ldr	r3, [pc, #160]	; (8007798 <SEGGER_SYSVIEW_Start+0x16c>)
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	e00b      	b.n	8007716 <SEGGER_SYSVIEW_Start+0xea>
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	b2da      	uxtb	r2, r3
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	1c59      	adds	r1, r3, #1
 8007706:	61f9      	str	r1, [r7, #28]
 8007708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	701a      	strb	r2, [r3, #0]
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	09db      	lsrs	r3, r3, #7
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b7f      	cmp	r3, #127	; 0x7f
 800771a:	d8f0      	bhi.n	80076fe <SEGGER_SYSVIEW_Start+0xd2>
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	61fa      	str	r2, [r7, #28]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	2300      	movs	r3, #0
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	e00b      	b.n	800774e <SEGGER_SYSVIEW_Start+0x122>
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	b2da      	uxtb	r2, r3
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	1c59      	adds	r1, r3, #1
 800773e:	6179      	str	r1, [r7, #20]
 8007740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	701a      	strb	r2, [r3, #0]
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	09db      	lsrs	r3, r3, #7
 800774c:	613b      	str	r3, [r7, #16]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	2b7f      	cmp	r3, #127	; 0x7f
 8007752:	d8f0      	bhi.n	8007736 <SEGGER_SYSVIEW_Start+0x10a>
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	617a      	str	r2, [r7, #20]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007764:	2218      	movs	r2, #24
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff fc67 	bl	800703c <_SendPacket>
      RECORD_END();
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007774:	4b08      	ldr	r3, [pc, #32]	; (8007798 <SEGGER_SYSVIEW_Start+0x16c>)
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <SEGGER_SYSVIEW_Start+0x16c>)
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007782:	f000 f9eb 	bl	8007b5c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007786:	f000 f9b1 	bl	8007aec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800778a:	f000 fc83 	bl	8008094 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800778e:	bf00      	nop
 8007790:	3730      	adds	r7, #48	; 0x30
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	200143bc 	.word	0x200143bc
 800779c:	08008d08 	.word	0x08008d08
 80077a0:	200143ec 	.word	0x200143ec

080077a4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80077aa:	f3ef 8311 	mrs	r3, BASEPRI
 80077ae:	f04f 0120 	mov.w	r1, #32
 80077b2:	f381 8811 	msr	BASEPRI, r1
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	480b      	ldr	r0, [pc, #44]	; (80077e8 <SEGGER_SYSVIEW_Stop+0x44>)
 80077ba:	f7ff fb4d 	bl	8006e58 <_PreparePacket>
 80077be:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80077c0:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <SEGGER_SYSVIEW_Stop+0x48>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80077c8:	220b      	movs	r2, #11
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6838      	ldr	r0, [r7, #0]
 80077ce:	f7ff fc35 	bl	800703c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80077d2:	4b06      	ldr	r3, [pc, #24]	; (80077ec <SEGGER_SYSVIEW_Stop+0x48>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f383 8811 	msr	BASEPRI, r3
}
 80077de:	bf00      	nop
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200143ec 	.word	0x200143ec
 80077ec:	200143bc 	.word	0x200143bc

080077f0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08c      	sub	sp, #48	; 0x30
 80077f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80077f6:	f3ef 8311 	mrs	r3, BASEPRI
 80077fa:	f04f 0120 	mov.w	r1, #32
 80077fe:	f381 8811 	msr	BASEPRI, r1
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	4845      	ldr	r0, [pc, #276]	; (800791c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007806:	f7ff fb27 	bl	8006e58 <_PreparePacket>
 800780a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007814:	4b42      	ldr	r3, [pc, #264]	; (8007920 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
 800781a:	e00b      	b.n	8007834 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	b2da      	uxtb	r2, r3
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	1c59      	adds	r1, r3, #1
 8007824:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	09db      	lsrs	r3, r3, #7
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	2b7f      	cmp	r3, #127	; 0x7f
 8007838:	d8f0      	bhi.n	800781c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
 800784e:	4b34      	ldr	r3, [pc, #208]	; (8007920 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	e00b      	b.n	800786e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	b2da      	uxtb	r2, r3
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	1c59      	adds	r1, r3, #1
 800785e:	6279      	str	r1, [r7, #36]	; 0x24
 8007860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	09db      	lsrs	r3, r3, #7
 800786c:	623b      	str	r3, [r7, #32]
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	2b7f      	cmp	r3, #127	; 0x7f
 8007872:	d8f0      	bhi.n	8007856 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	627a      	str	r2, [r7, #36]	; 0x24
 800787a:	6a3a      	ldr	r2, [r7, #32]
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	4b25      	ldr	r3, [pc, #148]	; (8007920 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	e00b      	b.n	80078a8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	1c59      	adds	r1, r3, #1
 8007898:	61f9      	str	r1, [r7, #28]
 800789a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	09db      	lsrs	r3, r3, #7
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b7f      	cmp	r3, #127	; 0x7f
 80078ac:	d8f0      	bhi.n	8007890 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	61fa      	str	r2, [r7, #28]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	e00b      	b.n	80078e0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	1c59      	adds	r1, r3, #1
 80078d0:	6179      	str	r1, [r7, #20]
 80078d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	09db      	lsrs	r3, r3, #7
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b7f      	cmp	r3, #127	; 0x7f
 80078e4:	d8f0      	bhi.n	80078c8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	617a      	str	r2, [r7, #20]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80078f6:	2218      	movs	r2, #24
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	68b8      	ldr	r0, [r7, #8]
 80078fc:	f7ff fb9e 	bl	800703c <_SendPacket>
  RECORD_END();
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007906:	4b06      	ldr	r3, [pc, #24]	; (8007920 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800790e:	4b04      	ldr	r3, [pc, #16]	; (8007920 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	4798      	blx	r3
  }
}
 8007914:	bf00      	nop
 8007916:	3730      	adds	r7, #48	; 0x30
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200143ec 	.word	0x200143ec
 8007920:	200143bc 	.word	0x200143bc

08007924 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007924:	b580      	push	{r7, lr}
 8007926:	b092      	sub	sp, #72	; 0x48
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800792c:	f3ef 8311 	mrs	r3, BASEPRI
 8007930:	f04f 0120 	mov.w	r1, #32
 8007934:	f381 8811 	msr	BASEPRI, r1
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	486a      	ldr	r0, [pc, #424]	; (8007ae4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800793c:	f7ff fa8c 	bl	8006e58 <_PreparePacket>
 8007940:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b66      	ldr	r3, [pc, #408]	; (8007ae8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	643b      	str	r3, [r7, #64]	; 0x40
 8007956:	e00b      	b.n	8007970 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795a:	b2da      	uxtb	r2, r3
 800795c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800795e:	1c59      	adds	r1, r3, #1
 8007960:	6479      	str	r1, [r7, #68]	; 0x44
 8007962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007966:	b2d2      	uxtb	r2, r2
 8007968:	701a      	strb	r2, [r3, #0]
 800796a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796c:	09db      	lsrs	r3, r3, #7
 800796e:	643b      	str	r3, [r7, #64]	; 0x40
 8007970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007972:	2b7f      	cmp	r3, #127	; 0x7f
 8007974:	d8f0      	bhi.n	8007958 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	647a      	str	r2, [r7, #68]	; 0x44
 800797c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007984:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007990:	e00b      	b.n	80079aa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	b2da      	uxtb	r2, r3
 8007996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007998:	1c59      	adds	r1, r3, #1
 800799a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800799c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	09db      	lsrs	r3, r3, #7
 80079a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	2b7f      	cmp	r3, #127	; 0x7f
 80079ae:	d8f0      	bhi.n	8007992 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079be:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	4619      	mov	r1, r3
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f7ff f9f5 	bl	8006db8 <_EncodeStr>
 80079ce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80079d0:	2209      	movs	r2, #9
 80079d2:	68f9      	ldr	r1, [r7, #12]
 80079d4:	6938      	ldr	r0, [r7, #16]
 80079d6:	f7ff fb31 	bl	800703c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	637b      	str	r3, [r7, #52]	; 0x34
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b40      	ldr	r3, [pc, #256]	; (8007ae8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	633b      	str	r3, [r7, #48]	; 0x30
 80079ee:	e00b      	b.n	8007a08 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	6379      	str	r1, [r7, #52]	; 0x34
 80079fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	09db      	lsrs	r3, r3, #7
 8007a06:	633b      	str	r3, [r7, #48]	; 0x30
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a0c:	d8f0      	bhi.n	80079f0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	637a      	str	r2, [r7, #52]	; 0x34
 8007a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a28:	e00b      	b.n	8007a42 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	1c59      	adds	r1, r3, #1
 8007a32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	09db      	lsrs	r3, r3, #7
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	2b7f      	cmp	r3, #127	; 0x7f
 8007a46:	d8f0      	bhi.n	8007a2a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	701a      	strb	r2, [r3, #0]
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	623b      	str	r3, [r7, #32]
 8007a62:	e00b      	b.n	8007a7c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	1c59      	adds	r1, r3, #1
 8007a6c:	6279      	str	r1, [r7, #36]	; 0x24
 8007a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	09db      	lsrs	r3, r3, #7
 8007a7a:	623b      	str	r3, [r7, #32]
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a80:	d8f0      	bhi.n	8007a64 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	627a      	str	r2, [r7, #36]	; 0x24
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	61fb      	str	r3, [r7, #28]
 8007a96:	2300      	movs	r3, #0
 8007a98:	61bb      	str	r3, [r7, #24]
 8007a9a:	e00b      	b.n	8007ab4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	1c59      	adds	r1, r3, #1
 8007aa4:	61f9      	str	r1, [r7, #28]
 8007aa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aaa:	b2d2      	uxtb	r2, r2
 8007aac:	701a      	strb	r2, [r3, #0]
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	09db      	lsrs	r3, r3, #7
 8007ab2:	61bb      	str	r3, [r7, #24]
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ab8:	d8f0      	bhi.n	8007a9c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	61fa      	str	r2, [r7, #28]
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007aca:	2215      	movs	r2, #21
 8007acc:	68f9      	ldr	r1, [r7, #12]
 8007ace:	6938      	ldr	r0, [r7, #16]
 8007ad0:	f7ff fab4 	bl	800703c <_SendPacket>
  RECORD_END();
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f383 8811 	msr	BASEPRI, r3
}
 8007ada:	bf00      	nop
 8007adc:	3748      	adds	r7, #72	; 0x48
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200143ec 	.word	0x200143ec
 8007ae8:	200143bc 	.word	0x200143bc

08007aec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d008      	beq.n	8007b0a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007b02:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	4798      	blx	r3
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	200143bc 	.word	0x200143bc

08007b14 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8007b20:	f04f 0120 	mov.w	r1, #32
 8007b24:	f381 8811 	msr	BASEPRI, r1
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	480b      	ldr	r0, [pc, #44]	; (8007b58 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007b2c:	f7ff f994 	bl	8006e58 <_PreparePacket>
 8007b30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b32:	2280      	movs	r2, #128	; 0x80
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	6938      	ldr	r0, [r7, #16]
 8007b38:	f7ff f93e 	bl	8006db8 <_EncodeStr>
 8007b3c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007b3e:	220e      	movs	r2, #14
 8007b40:	68f9      	ldr	r1, [r7, #12]
 8007b42:	6938      	ldr	r0, [r7, #16]
 8007b44:	f7ff fa7a 	bl	800703c <_SendPacket>
  RECORD_END();
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
}
 8007b4e:	bf00      	nop
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200143ec 	.word	0x200143ec

08007b5c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007b5c:	b590      	push	{r4, r7, lr}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d01a      	beq.n	8007ba0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007b6a:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d015      	beq.n	8007ba0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007b74:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4798      	blx	r3
 8007b7c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007b80:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007b82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b86:	f04f 0200 	mov.w	r2, #0
 8007b8a:	f04f 0300 	mov.w	r3, #0
 8007b8e:	000a      	movs	r2, r1
 8007b90:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007b92:	4613      	mov	r3, r2
 8007b94:	461a      	mov	r2, r3
 8007b96:	4621      	mov	r1, r4
 8007b98:	200d      	movs	r0, #13
 8007b9a:	f7ff fbe5 	bl	8007368 <SEGGER_SYSVIEW_RecordU32x2>
 8007b9e:	e006      	b.n	8007bae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007ba0:	4b06      	ldr	r3, [pc, #24]	; (8007bbc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	200c      	movs	r0, #12
 8007ba8:	f7ff fba2 	bl	80072f0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd90      	pop	{r4, r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	200143bc 	.word	0x200143bc
 8007bbc:	e0001004 	.word	0xe0001004

08007bc0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8007bca:	f04f 0120 	mov.w	r1, #32
 8007bce:	f381 8811 	msr	BASEPRI, r1
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	4819      	ldr	r0, [pc, #100]	; (8007c3c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007bd6:	f7ff f93f 	bl	8006e58 <_PreparePacket>
 8007bda:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007be0:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	617b      	str	r3, [r7, #20]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	e00b      	b.n	8007c0c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	1c59      	adds	r1, r3, #1
 8007bfc:	6179      	str	r1, [r7, #20]
 8007bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c02:	b2d2      	uxtb	r2, r2
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	09db      	lsrs	r3, r3, #7
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c10:	d8f0      	bhi.n	8007bf4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	617a      	str	r2, [r7, #20]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007c22:	2202      	movs	r2, #2
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	68b8      	ldr	r0, [r7, #8]
 8007c28:	f7ff fa08 	bl	800703c <_SendPacket>
  RECORD_END();
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f383 8811 	msr	BASEPRI, r3
}
 8007c32:	bf00      	nop
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200143ec 	.word	0x200143ec
 8007c40:	e000ed04 	.word	0xe000ed04

08007c44 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8007c4e:	f04f 0120 	mov.w	r1, #32
 8007c52:	f381 8811 	msr	BASEPRI, r1
 8007c56:	607b      	str	r3, [r7, #4]
 8007c58:	4807      	ldr	r0, [pc, #28]	; (8007c78 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007c5a:	f7ff f8fd 	bl	8006e58 <_PreparePacket>
 8007c5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007c60:	2203      	movs	r2, #3
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6838      	ldr	r0, [r7, #0]
 8007c66:	f7ff f9e9 	bl	800703c <_SendPacket>
  RECORD_END();
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f383 8811 	msr	BASEPRI, r3
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	200143ec 	.word	0x200143ec

08007c7c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c82:	f3ef 8311 	mrs	r3, BASEPRI
 8007c86:	f04f 0120 	mov.w	r1, #32
 8007c8a:	f381 8811 	msr	BASEPRI, r1
 8007c8e:	607b      	str	r3, [r7, #4]
 8007c90:	4807      	ldr	r0, [pc, #28]	; (8007cb0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007c92:	f7ff f8e1 	bl	8006e58 <_PreparePacket>
 8007c96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007c98:	2212      	movs	r2, #18
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6838      	ldr	r0, [r7, #0]
 8007c9e:	f7ff f9cd 	bl	800703c <_SendPacket>
  RECORD_END();
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f383 8811 	msr	BASEPRI, r3
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	200143ec 	.word	0x200143ec

08007cb4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007cba:	f3ef 8311 	mrs	r3, BASEPRI
 8007cbe:	f04f 0120 	mov.w	r1, #32
 8007cc2:	f381 8811 	msr	BASEPRI, r1
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	4807      	ldr	r0, [pc, #28]	; (8007ce8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007cca:	f7ff f8c5 	bl	8006e58 <_PreparePacket>
 8007cce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007cd0:	2211      	movs	r2, #17
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6838      	ldr	r0, [r7, #0]
 8007cd6:	f7ff f9b1 	bl	800703c <_SendPacket>
  RECORD_END();
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f383 8811 	msr	BASEPRI, r3
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	200143ec 	.word	0x200143ec

08007cec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8007cf8:	f04f 0120 	mov.w	r1, #32
 8007cfc:	f381 8811 	msr	BASEPRI, r1
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	4819      	ldr	r0, [pc, #100]	; (8007d68 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007d04:	f7ff f8a8 	bl	8006e58 <_PreparePacket>
 8007d08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007d0e:	4b17      	ldr	r3, [pc, #92]	; (8007d6c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	61fb      	str	r3, [r7, #28]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	e00b      	b.n	8007d3a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	1c59      	adds	r1, r3, #1
 8007d2a:	61f9      	str	r1, [r7, #28]
 8007d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d30:	b2d2      	uxtb	r2, r2
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	09db      	lsrs	r3, r3, #7
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8007d3e:	d8f0      	bhi.n	8007d22 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	61fa      	str	r2, [r7, #28]
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007d50:	2208      	movs	r2, #8
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	6938      	ldr	r0, [r7, #16]
 8007d56:	f7ff f971 	bl	800703c <_SendPacket>
  RECORD_END();
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f383 8811 	msr	BASEPRI, r3
}
 8007d60:	bf00      	nop
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	200143ec 	.word	0x200143ec
 8007d6c:	200143bc 	.word	0x200143bc

08007d70 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007d78:	f3ef 8311 	mrs	r3, BASEPRI
 8007d7c:	f04f 0120 	mov.w	r1, #32
 8007d80:	f381 8811 	msr	BASEPRI, r1
 8007d84:	617b      	str	r3, [r7, #20]
 8007d86:	4819      	ldr	r0, [pc, #100]	; (8007dec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007d88:	f7ff f866 	bl	8006e58 <_PreparePacket>
 8007d8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007d92:	4b17      	ldr	r3, [pc, #92]	; (8007df0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	61fb      	str	r3, [r7, #28]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	e00b      	b.n	8007dbe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	1c59      	adds	r1, r3, #1
 8007dae:	61f9      	str	r1, [r7, #28]
 8007db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	09db      	lsrs	r3, r3, #7
 8007dbc:	61bb      	str	r3, [r7, #24]
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc2:	d8f0      	bhi.n	8007da6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	61fa      	str	r2, [r7, #28]
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	68f9      	ldr	r1, [r7, #12]
 8007dd8:	6938      	ldr	r0, [r7, #16]
 8007dda:	f7ff f92f 	bl	800703c <_SendPacket>
  RECORD_END();
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f383 8811 	msr	BASEPRI, r3
}
 8007de4:	bf00      	nop
 8007de6:	3720      	adds	r7, #32
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	200143ec 	.word	0x200143ec
 8007df0:	200143bc 	.word	0x200143bc

08007df4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8007e00:	f04f 0120 	mov.w	r1, #32
 8007e04:	f381 8811 	msr	BASEPRI, r1
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	4819      	ldr	r0, [pc, #100]	; (8007e70 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007e0c:	f7ff f824 	bl	8006e58 <_PreparePacket>
 8007e10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e16:	4b17      	ldr	r3, [pc, #92]	; (8007e74 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	61bb      	str	r3, [r7, #24]
 8007e28:	e00b      	b.n	8007e42 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	1c59      	adds	r1, r3, #1
 8007e32:	61f9      	str	r1, [r7, #28]
 8007e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	701a      	strb	r2, [r3, #0]
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	09db      	lsrs	r3, r3, #7
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b7f      	cmp	r3, #127	; 0x7f
 8007e46:	d8f0      	bhi.n	8007e2a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	61fa      	str	r2, [r7, #28]
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007e58:	2206      	movs	r2, #6
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	6938      	ldr	r0, [r7, #16]
 8007e5e:	f7ff f8ed 	bl	800703c <_SendPacket>
  RECORD_END();
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f383 8811 	msr	BASEPRI, r3
}
 8007e68:	bf00      	nop
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	200143ec 	.word	0x200143ec
 8007e74:	200143bc 	.word	0x200143bc

08007e78 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08a      	sub	sp, #40	; 0x28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e82:	f3ef 8311 	mrs	r3, BASEPRI
 8007e86:	f04f 0120 	mov.w	r1, #32
 8007e8a:	f381 8811 	msr	BASEPRI, r1
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	4827      	ldr	r0, [pc, #156]	; (8007f30 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007e92:	f7fe ffe1 	bl	8006e58 <_PreparePacket>
 8007e96:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e9c:	4b25      	ldr	r3, [pc, #148]	; (8007f34 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	623b      	str	r3, [r7, #32]
 8007eae:	e00b      	b.n	8007ec8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	1c59      	adds	r1, r3, #1
 8007eb8:	6279      	str	r1, [r7, #36]	; 0x24
 8007eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ebe:	b2d2      	uxtb	r2, r2
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	09db      	lsrs	r3, r3, #7
 8007ec6:	623b      	str	r3, [r7, #32]
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	2b7f      	cmp	r3, #127	; 0x7f
 8007ecc:	d8f0      	bhi.n	8007eb0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8007ed4:	6a3a      	ldr	r2, [r7, #32]
 8007ed6:	b2d2      	uxtb	r2, r2
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	61fb      	str	r3, [r7, #28]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	61bb      	str	r3, [r7, #24]
 8007ee6:	e00b      	b.n	8007f00 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	1c59      	adds	r1, r3, #1
 8007ef0:	61f9      	str	r1, [r7, #28]
 8007ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	09db      	lsrs	r3, r3, #7
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2b7f      	cmp	r3, #127	; 0x7f
 8007f04:	d8f0      	bhi.n	8007ee8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	61fa      	str	r2, [r7, #28]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007f16:	2207      	movs	r2, #7
 8007f18:	68f9      	ldr	r1, [r7, #12]
 8007f1a:	6938      	ldr	r0, [r7, #16]
 8007f1c:	f7ff f88e 	bl	800703c <_SendPacket>
  RECORD_END();
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f383 8811 	msr	BASEPRI, r3
}
 8007f26:	bf00      	nop
 8007f28:	3728      	adds	r7, #40	; 0x28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	200143ec 	.word	0x200143ec
 8007f34:	200143bc 	.word	0x200143bc

08007f38 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007f40:	4b04      	ldr	r3, [pc, #16]	; (8007f54 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	1ad3      	subs	r3, r2, r3
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	200143bc 	.word	0x200143bc

08007f58 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08c      	sub	sp, #48	; 0x30
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007f62:	4b3b      	ldr	r3, [pc, #236]	; (8008050 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d06d      	beq.n	8008046 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007f6a:	4b39      	ldr	r3, [pc, #228]	; (8008050 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007f70:	2300      	movs	r3, #0
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f74:	e008      	b.n	8007f88 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d007      	beq.n	8007f92 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	3301      	adds	r3, #1
 8007f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d3f2      	bcc.n	8007f76 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007f90:	e000      	b.n	8007f94 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007f92:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d055      	beq.n	8008046 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f9e:	f04f 0120 	mov.w	r1, #32
 8007fa2:	f381 8811 	msr	BASEPRI, r1
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	482a      	ldr	r0, [pc, #168]	; (8008054 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007faa:	f7fe ff55 	bl	8006e58 <_PreparePacket>
 8007fae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	623b      	str	r3, [r7, #32]
 8007fbc:	e00b      	b.n	8007fd6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	1c59      	adds	r1, r3, #1
 8007fc6:	6279      	str	r1, [r7, #36]	; 0x24
 8007fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	701a      	strb	r2, [r3, #0]
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	09db      	lsrs	r3, r3, #7
 8007fd4:	623b      	str	r3, [r7, #32]
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007fda:	d8f0      	bhi.n	8007fbe <SEGGER_SYSVIEW_SendModule+0x66>
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	627a      	str	r2, [r7, #36]	; 0x24
 8007fe2:	6a3a      	ldr	r2, [r7, #32]
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	61fb      	str	r3, [r7, #28]
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	e00b      	b.n	8008010 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	1c59      	adds	r1, r3, #1
 8008000:	61f9      	str	r1, [r7, #28]
 8008002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	09db      	lsrs	r3, r3, #7
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b7f      	cmp	r3, #127	; 0x7f
 8008014:	d8f0      	bhi.n	8007ff8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	61fa      	str	r2, [r7, #28]
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2280      	movs	r2, #128	; 0x80
 800802c:	4619      	mov	r1, r3
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7fe fec2 	bl	8006db8 <_EncodeStr>
 8008034:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008036:	2216      	movs	r2, #22
 8008038:	68f9      	ldr	r1, [r7, #12]
 800803a:	6938      	ldr	r0, [r7, #16]
 800803c:	f7fe fffe 	bl	800703c <_SendPacket>
      RECORD_END();
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008046:	bf00      	nop
 8008048:	3730      	adds	r7, #48	; 0x30
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	200143e4 	.word	0x200143e4
 8008054:	200143ec 	.word	0x200143ec

08008058 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800805e:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00f      	beq.n	8008086 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008066:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f2      	bne.n	800806c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	200143e4 	.word	0x200143e4

08008094 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800809a:	f3ef 8311 	mrs	r3, BASEPRI
 800809e:	f04f 0120 	mov.w	r1, #32
 80080a2:	f381 8811 	msr	BASEPRI, r1
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	4817      	ldr	r0, [pc, #92]	; (8008108 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80080aa:	f7fe fed5 	bl	8006e58 <_PreparePacket>
 80080ae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	4b14      	ldr	r3, [pc, #80]	; (800810c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	e00b      	b.n	80080d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	6179      	str	r1, [r7, #20]
 80080ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	09db      	lsrs	r3, r3, #7
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b7f      	cmp	r3, #127	; 0x7f
 80080dc:	d8f0      	bhi.n	80080c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	617a      	str	r2, [r7, #20]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80080ee:	221b      	movs	r2, #27
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	68b8      	ldr	r0, [r7, #8]
 80080f4:	f7fe ffa2 	bl	800703c <_SendPacket>
  RECORD_END();
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f383 8811 	msr	BASEPRI, r3
}
 80080fe:	bf00      	nop
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	200143ec 	.word	0x200143ec
 800810c:	200143e8 	.word	0x200143e8

08008110 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008110:	b580      	push	{r7, lr}
 8008112:	b08a      	sub	sp, #40	; 0x28
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008118:	f3ef 8311 	mrs	r3, BASEPRI
 800811c:	f04f 0120 	mov.w	r1, #32
 8008120:	f381 8811 	msr	BASEPRI, r1
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	4827      	ldr	r0, [pc, #156]	; (80081c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008128:	f7fe fe96 	bl	8006e58 <_PreparePacket>
 800812c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800812e:	2280      	movs	r2, #128	; 0x80
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	6938      	ldr	r0, [r7, #16]
 8008134:	f7fe fe40 	bl	8006db8 <_EncodeStr>
 8008138:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
 800813e:	2301      	movs	r3, #1
 8008140:	623b      	str	r3, [r7, #32]
 8008142:	e00b      	b.n	800815c <SEGGER_SYSVIEW_Warn+0x4c>
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	b2da      	uxtb	r2, r3
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	1c59      	adds	r1, r3, #1
 800814c:	6279      	str	r1, [r7, #36]	; 0x24
 800814e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	09db      	lsrs	r3, r3, #7
 800815a:	623b      	str	r3, [r7, #32]
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	2b7f      	cmp	r3, #127	; 0x7f
 8008160:	d8f0      	bhi.n	8008144 <SEGGER_SYSVIEW_Warn+0x34>
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	627a      	str	r2, [r7, #36]	; 0x24
 8008168:	6a3a      	ldr	r2, [r7, #32]
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	61fb      	str	r3, [r7, #28]
 8008176:	2300      	movs	r3, #0
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	e00b      	b.n	8008194 <SEGGER_SYSVIEW_Warn+0x84>
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	b2da      	uxtb	r2, r3
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	1c59      	adds	r1, r3, #1
 8008184:	61f9      	str	r1, [r7, #28]
 8008186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	09db      	lsrs	r3, r3, #7
 8008192:	61bb      	str	r3, [r7, #24]
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b7f      	cmp	r3, #127	; 0x7f
 8008198:	d8f0      	bhi.n	800817c <SEGGER_SYSVIEW_Warn+0x6c>
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	61fa      	str	r2, [r7, #28]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80081aa:	221a      	movs	r2, #26
 80081ac:	68f9      	ldr	r1, [r7, #12]
 80081ae:	6938      	ldr	r0, [r7, #16]
 80081b0:	f7fe ff44 	bl	800703c <_SendPacket>
  RECORD_END();
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f383 8811 	msr	BASEPRI, r3
}
 80081ba:	bf00      	nop
 80081bc:	3728      	adds	r7, #40	; 0x28
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	200143ec 	.word	0x200143ec

080081c8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80081cc:	4b13      	ldr	r3, [pc, #76]	; (800821c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80081ce:	7e1b      	ldrb	r3, [r3, #24]
 80081d0:	4619      	mov	r1, r3
 80081d2:	4a13      	ldr	r2, [pc, #76]	; (8008220 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80081d4:	460b      	mov	r3, r1
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	440b      	add	r3, r1
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	4413      	add	r3, r2
 80081de:	336c      	adds	r3, #108	; 0x6c
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b0e      	ldr	r3, [pc, #56]	; (800821c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80081e4:	7e1b      	ldrb	r3, [r3, #24]
 80081e6:	4618      	mov	r0, r3
 80081e8:	490d      	ldr	r1, [pc, #52]	; (8008220 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80081ea:	4603      	mov	r3, r0
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4403      	add	r3, r0
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	440b      	add	r3, r1
 80081f4:	3370      	adds	r3, #112	; 0x70
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d00b      	beq.n	8008214 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80081fc:	4b07      	ldr	r3, [pc, #28]	; (800821c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80081fe:	789b      	ldrb	r3, [r3, #2]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d107      	bne.n	8008214 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008206:	2201      	movs	r2, #1
 8008208:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800820a:	f7fe fe31 	bl	8006e70 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008210:	2200      	movs	r2, #0
 8008212:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8008214:	4b01      	ldr	r3, [pc, #4]	; (800821c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008216:	781b      	ldrb	r3, [r3, #0]
}
 8008218:	4618      	mov	r0, r3
 800821a:	bd80      	pop	{r7, pc}
 800821c:	200143bc 	.word	0x200143bc
 8008220:	200145d0 	.word	0x200145d0

08008224 <__libc_init_array>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	4d0d      	ldr	r5, [pc, #52]	; (800825c <__libc_init_array+0x38>)
 8008228:	4c0d      	ldr	r4, [pc, #52]	; (8008260 <__libc_init_array+0x3c>)
 800822a:	1b64      	subs	r4, r4, r5
 800822c:	10a4      	asrs	r4, r4, #2
 800822e:	2600      	movs	r6, #0
 8008230:	42a6      	cmp	r6, r4
 8008232:	d109      	bne.n	8008248 <__libc_init_array+0x24>
 8008234:	4d0b      	ldr	r5, [pc, #44]	; (8008264 <__libc_init_array+0x40>)
 8008236:	4c0c      	ldr	r4, [pc, #48]	; (8008268 <__libc_init_array+0x44>)
 8008238:	f000 fc6a 	bl	8008b10 <_init>
 800823c:	1b64      	subs	r4, r4, r5
 800823e:	10a4      	asrs	r4, r4, #2
 8008240:	2600      	movs	r6, #0
 8008242:	42a6      	cmp	r6, r4
 8008244:	d105      	bne.n	8008252 <__libc_init_array+0x2e>
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	f855 3b04 	ldr.w	r3, [r5], #4
 800824c:	4798      	blx	r3
 800824e:	3601      	adds	r6, #1
 8008250:	e7ee      	b.n	8008230 <__libc_init_array+0xc>
 8008252:	f855 3b04 	ldr.w	r3, [r5], #4
 8008256:	4798      	blx	r3
 8008258:	3601      	adds	r6, #1
 800825a:	e7f2      	b.n	8008242 <__libc_init_array+0x1e>
 800825c:	08008d50 	.word	0x08008d50
 8008260:	08008d50 	.word	0x08008d50
 8008264:	08008d50 	.word	0x08008d50
 8008268:	08008d54 	.word	0x08008d54

0800826c <memcmp>:
 800826c:	b530      	push	{r4, r5, lr}
 800826e:	3901      	subs	r1, #1
 8008270:	2400      	movs	r4, #0
 8008272:	42a2      	cmp	r2, r4
 8008274:	d101      	bne.n	800827a <memcmp+0xe>
 8008276:	2000      	movs	r0, #0
 8008278:	e005      	b.n	8008286 <memcmp+0x1a>
 800827a:	5d03      	ldrb	r3, [r0, r4]
 800827c:	3401      	adds	r4, #1
 800827e:	5d0d      	ldrb	r5, [r1, r4]
 8008280:	42ab      	cmp	r3, r5
 8008282:	d0f6      	beq.n	8008272 <memcmp+0x6>
 8008284:	1b58      	subs	r0, r3, r5
 8008286:	bd30      	pop	{r4, r5, pc}

08008288 <memcpy>:
 8008288:	440a      	add	r2, r1
 800828a:	4291      	cmp	r1, r2
 800828c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008290:	d100      	bne.n	8008294 <memcpy+0xc>
 8008292:	4770      	bx	lr
 8008294:	b510      	push	{r4, lr}
 8008296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800829a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800829e:	4291      	cmp	r1, r2
 80082a0:	d1f9      	bne.n	8008296 <memcpy+0xe>
 80082a2:	bd10      	pop	{r4, pc}

080082a4 <memset>:
 80082a4:	4402      	add	r2, r0
 80082a6:	4603      	mov	r3, r0
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d100      	bne.n	80082ae <memset+0xa>
 80082ac:	4770      	bx	lr
 80082ae:	f803 1b01 	strb.w	r1, [r3], #1
 80082b2:	e7f9      	b.n	80082a8 <memset+0x4>

080082b4 <siprintf>:
 80082b4:	b40e      	push	{r1, r2, r3}
 80082b6:	b500      	push	{lr}
 80082b8:	b09c      	sub	sp, #112	; 0x70
 80082ba:	ab1d      	add	r3, sp, #116	; 0x74
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	9006      	str	r0, [sp, #24]
 80082c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082c4:	4809      	ldr	r0, [pc, #36]	; (80082ec <siprintf+0x38>)
 80082c6:	9107      	str	r1, [sp, #28]
 80082c8:	9104      	str	r1, [sp, #16]
 80082ca:	4909      	ldr	r1, [pc, #36]	; (80082f0 <siprintf+0x3c>)
 80082cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d0:	9105      	str	r1, [sp, #20]
 80082d2:	6800      	ldr	r0, [r0, #0]
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	a902      	add	r1, sp, #8
 80082d8:	f000 f868 	bl	80083ac <_svfiprintf_r>
 80082dc:	9b02      	ldr	r3, [sp, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	b01c      	add	sp, #112	; 0x70
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e8:	b003      	add	sp, #12
 80082ea:	4770      	bx	lr
 80082ec:	20000020 	.word	0x20000020
 80082f0:	ffff0208 	.word	0xffff0208

080082f4 <__ssputs_r>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	688e      	ldr	r6, [r1, #8]
 80082fa:	429e      	cmp	r6, r3
 80082fc:	4682      	mov	sl, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	4690      	mov	r8, r2
 8008302:	461f      	mov	r7, r3
 8008304:	d838      	bhi.n	8008378 <__ssputs_r+0x84>
 8008306:	898a      	ldrh	r2, [r1, #12]
 8008308:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800830c:	d032      	beq.n	8008374 <__ssputs_r+0x80>
 800830e:	6825      	ldr	r5, [r4, #0]
 8008310:	6909      	ldr	r1, [r1, #16]
 8008312:	eba5 0901 	sub.w	r9, r5, r1
 8008316:	6965      	ldr	r5, [r4, #20]
 8008318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800831c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008320:	3301      	adds	r3, #1
 8008322:	444b      	add	r3, r9
 8008324:	106d      	asrs	r5, r5, #1
 8008326:	429d      	cmp	r5, r3
 8008328:	bf38      	it	cc
 800832a:	461d      	movcc	r5, r3
 800832c:	0553      	lsls	r3, r2, #21
 800832e:	d531      	bpl.n	8008394 <__ssputs_r+0xa0>
 8008330:	4629      	mov	r1, r5
 8008332:	f000 fb39 	bl	80089a8 <_malloc_r>
 8008336:	4606      	mov	r6, r0
 8008338:	b950      	cbnz	r0, 8008350 <__ssputs_r+0x5c>
 800833a:	230c      	movs	r3, #12
 800833c:	f8ca 3000 	str.w	r3, [sl]
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008350:	6921      	ldr	r1, [r4, #16]
 8008352:	464a      	mov	r2, r9
 8008354:	f7ff ff98 	bl	8008288 <memcpy>
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800835e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008362:	81a3      	strh	r3, [r4, #12]
 8008364:	6126      	str	r6, [r4, #16]
 8008366:	6165      	str	r5, [r4, #20]
 8008368:	444e      	add	r6, r9
 800836a:	eba5 0509 	sub.w	r5, r5, r9
 800836e:	6026      	str	r6, [r4, #0]
 8008370:	60a5      	str	r5, [r4, #8]
 8008372:	463e      	mov	r6, r7
 8008374:	42be      	cmp	r6, r7
 8008376:	d900      	bls.n	800837a <__ssputs_r+0x86>
 8008378:	463e      	mov	r6, r7
 800837a:	4632      	mov	r2, r6
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	4641      	mov	r1, r8
 8008380:	f000 faa8 	bl	80088d4 <memmove>
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	1b9b      	subs	r3, r3, r6
 800838a:	4432      	add	r2, r6
 800838c:	60a3      	str	r3, [r4, #8]
 800838e:	6022      	str	r2, [r4, #0]
 8008390:	2000      	movs	r0, #0
 8008392:	e7db      	b.n	800834c <__ssputs_r+0x58>
 8008394:	462a      	mov	r2, r5
 8008396:	f000 fb61 	bl	8008a5c <_realloc_r>
 800839a:	4606      	mov	r6, r0
 800839c:	2800      	cmp	r0, #0
 800839e:	d1e1      	bne.n	8008364 <__ssputs_r+0x70>
 80083a0:	6921      	ldr	r1, [r4, #16]
 80083a2:	4650      	mov	r0, sl
 80083a4:	f000 fab0 	bl	8008908 <_free_r>
 80083a8:	e7c7      	b.n	800833a <__ssputs_r+0x46>
	...

080083ac <_svfiprintf_r>:
 80083ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b0:	4698      	mov	r8, r3
 80083b2:	898b      	ldrh	r3, [r1, #12]
 80083b4:	061b      	lsls	r3, r3, #24
 80083b6:	b09d      	sub	sp, #116	; 0x74
 80083b8:	4607      	mov	r7, r0
 80083ba:	460d      	mov	r5, r1
 80083bc:	4614      	mov	r4, r2
 80083be:	d50e      	bpl.n	80083de <_svfiprintf_r+0x32>
 80083c0:	690b      	ldr	r3, [r1, #16]
 80083c2:	b963      	cbnz	r3, 80083de <_svfiprintf_r+0x32>
 80083c4:	2140      	movs	r1, #64	; 0x40
 80083c6:	f000 faef 	bl	80089a8 <_malloc_r>
 80083ca:	6028      	str	r0, [r5, #0]
 80083cc:	6128      	str	r0, [r5, #16]
 80083ce:	b920      	cbnz	r0, 80083da <_svfiprintf_r+0x2e>
 80083d0:	230c      	movs	r3, #12
 80083d2:	603b      	str	r3, [r7, #0]
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	e0d1      	b.n	800857e <_svfiprintf_r+0x1d2>
 80083da:	2340      	movs	r3, #64	; 0x40
 80083dc:	616b      	str	r3, [r5, #20]
 80083de:	2300      	movs	r3, #0
 80083e0:	9309      	str	r3, [sp, #36]	; 0x24
 80083e2:	2320      	movs	r3, #32
 80083e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ec:	2330      	movs	r3, #48	; 0x30
 80083ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008598 <_svfiprintf_r+0x1ec>
 80083f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083f6:	f04f 0901 	mov.w	r9, #1
 80083fa:	4623      	mov	r3, r4
 80083fc:	469a      	mov	sl, r3
 80083fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008402:	b10a      	cbz	r2, 8008408 <_svfiprintf_r+0x5c>
 8008404:	2a25      	cmp	r2, #37	; 0x25
 8008406:	d1f9      	bne.n	80083fc <_svfiprintf_r+0x50>
 8008408:	ebba 0b04 	subs.w	fp, sl, r4
 800840c:	d00b      	beq.n	8008426 <_svfiprintf_r+0x7a>
 800840e:	465b      	mov	r3, fp
 8008410:	4622      	mov	r2, r4
 8008412:	4629      	mov	r1, r5
 8008414:	4638      	mov	r0, r7
 8008416:	f7ff ff6d 	bl	80082f4 <__ssputs_r>
 800841a:	3001      	adds	r0, #1
 800841c:	f000 80aa 	beq.w	8008574 <_svfiprintf_r+0x1c8>
 8008420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008422:	445a      	add	r2, fp
 8008424:	9209      	str	r2, [sp, #36]	; 0x24
 8008426:	f89a 3000 	ldrb.w	r3, [sl]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 80a2 	beq.w	8008574 <_svfiprintf_r+0x1c8>
 8008430:	2300      	movs	r3, #0
 8008432:	f04f 32ff 	mov.w	r2, #4294967295
 8008436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800843a:	f10a 0a01 	add.w	sl, sl, #1
 800843e:	9304      	str	r3, [sp, #16]
 8008440:	9307      	str	r3, [sp, #28]
 8008442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008446:	931a      	str	r3, [sp, #104]	; 0x68
 8008448:	4654      	mov	r4, sl
 800844a:	2205      	movs	r2, #5
 800844c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008450:	4851      	ldr	r0, [pc, #324]	; (8008598 <_svfiprintf_r+0x1ec>)
 8008452:	f7f7 ff35 	bl	80002c0 <memchr>
 8008456:	9a04      	ldr	r2, [sp, #16]
 8008458:	b9d8      	cbnz	r0, 8008492 <_svfiprintf_r+0xe6>
 800845a:	06d0      	lsls	r0, r2, #27
 800845c:	bf44      	itt	mi
 800845e:	2320      	movmi	r3, #32
 8008460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008464:	0711      	lsls	r1, r2, #28
 8008466:	bf44      	itt	mi
 8008468:	232b      	movmi	r3, #43	; 0x2b
 800846a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800846e:	f89a 3000 	ldrb.w	r3, [sl]
 8008472:	2b2a      	cmp	r3, #42	; 0x2a
 8008474:	d015      	beq.n	80084a2 <_svfiprintf_r+0xf6>
 8008476:	9a07      	ldr	r2, [sp, #28]
 8008478:	4654      	mov	r4, sl
 800847a:	2000      	movs	r0, #0
 800847c:	f04f 0c0a 	mov.w	ip, #10
 8008480:	4621      	mov	r1, r4
 8008482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008486:	3b30      	subs	r3, #48	; 0x30
 8008488:	2b09      	cmp	r3, #9
 800848a:	d94e      	bls.n	800852a <_svfiprintf_r+0x17e>
 800848c:	b1b0      	cbz	r0, 80084bc <_svfiprintf_r+0x110>
 800848e:	9207      	str	r2, [sp, #28]
 8008490:	e014      	b.n	80084bc <_svfiprintf_r+0x110>
 8008492:	eba0 0308 	sub.w	r3, r0, r8
 8008496:	fa09 f303 	lsl.w	r3, r9, r3
 800849a:	4313      	orrs	r3, r2
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	46a2      	mov	sl, r4
 80084a0:	e7d2      	b.n	8008448 <_svfiprintf_r+0x9c>
 80084a2:	9b03      	ldr	r3, [sp, #12]
 80084a4:	1d19      	adds	r1, r3, #4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	9103      	str	r1, [sp, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bfbb      	ittet	lt
 80084ae:	425b      	neglt	r3, r3
 80084b0:	f042 0202 	orrlt.w	r2, r2, #2
 80084b4:	9307      	strge	r3, [sp, #28]
 80084b6:	9307      	strlt	r3, [sp, #28]
 80084b8:	bfb8      	it	lt
 80084ba:	9204      	strlt	r2, [sp, #16]
 80084bc:	7823      	ldrb	r3, [r4, #0]
 80084be:	2b2e      	cmp	r3, #46	; 0x2e
 80084c0:	d10c      	bne.n	80084dc <_svfiprintf_r+0x130>
 80084c2:	7863      	ldrb	r3, [r4, #1]
 80084c4:	2b2a      	cmp	r3, #42	; 0x2a
 80084c6:	d135      	bne.n	8008534 <_svfiprintf_r+0x188>
 80084c8:	9b03      	ldr	r3, [sp, #12]
 80084ca:	1d1a      	adds	r2, r3, #4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	9203      	str	r2, [sp, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	bfb8      	it	lt
 80084d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80084d8:	3402      	adds	r4, #2
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085a8 <_svfiprintf_r+0x1fc>
 80084e0:	7821      	ldrb	r1, [r4, #0]
 80084e2:	2203      	movs	r2, #3
 80084e4:	4650      	mov	r0, sl
 80084e6:	f7f7 feeb 	bl	80002c0 <memchr>
 80084ea:	b140      	cbz	r0, 80084fe <_svfiprintf_r+0x152>
 80084ec:	2340      	movs	r3, #64	; 0x40
 80084ee:	eba0 000a 	sub.w	r0, r0, sl
 80084f2:	fa03 f000 	lsl.w	r0, r3, r0
 80084f6:	9b04      	ldr	r3, [sp, #16]
 80084f8:	4303      	orrs	r3, r0
 80084fa:	3401      	adds	r4, #1
 80084fc:	9304      	str	r3, [sp, #16]
 80084fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008502:	4826      	ldr	r0, [pc, #152]	; (800859c <_svfiprintf_r+0x1f0>)
 8008504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008508:	2206      	movs	r2, #6
 800850a:	f7f7 fed9 	bl	80002c0 <memchr>
 800850e:	2800      	cmp	r0, #0
 8008510:	d038      	beq.n	8008584 <_svfiprintf_r+0x1d8>
 8008512:	4b23      	ldr	r3, [pc, #140]	; (80085a0 <_svfiprintf_r+0x1f4>)
 8008514:	bb1b      	cbnz	r3, 800855e <_svfiprintf_r+0x1b2>
 8008516:	9b03      	ldr	r3, [sp, #12]
 8008518:	3307      	adds	r3, #7
 800851a:	f023 0307 	bic.w	r3, r3, #7
 800851e:	3308      	adds	r3, #8
 8008520:	9303      	str	r3, [sp, #12]
 8008522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008524:	4433      	add	r3, r6
 8008526:	9309      	str	r3, [sp, #36]	; 0x24
 8008528:	e767      	b.n	80083fa <_svfiprintf_r+0x4e>
 800852a:	fb0c 3202 	mla	r2, ip, r2, r3
 800852e:	460c      	mov	r4, r1
 8008530:	2001      	movs	r0, #1
 8008532:	e7a5      	b.n	8008480 <_svfiprintf_r+0xd4>
 8008534:	2300      	movs	r3, #0
 8008536:	3401      	adds	r4, #1
 8008538:	9305      	str	r3, [sp, #20]
 800853a:	4619      	mov	r1, r3
 800853c:	f04f 0c0a 	mov.w	ip, #10
 8008540:	4620      	mov	r0, r4
 8008542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008546:	3a30      	subs	r2, #48	; 0x30
 8008548:	2a09      	cmp	r2, #9
 800854a:	d903      	bls.n	8008554 <_svfiprintf_r+0x1a8>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0c5      	beq.n	80084dc <_svfiprintf_r+0x130>
 8008550:	9105      	str	r1, [sp, #20]
 8008552:	e7c3      	b.n	80084dc <_svfiprintf_r+0x130>
 8008554:	fb0c 2101 	mla	r1, ip, r1, r2
 8008558:	4604      	mov	r4, r0
 800855a:	2301      	movs	r3, #1
 800855c:	e7f0      	b.n	8008540 <_svfiprintf_r+0x194>
 800855e:	ab03      	add	r3, sp, #12
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	462a      	mov	r2, r5
 8008564:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <_svfiprintf_r+0x1f8>)
 8008566:	a904      	add	r1, sp, #16
 8008568:	4638      	mov	r0, r7
 800856a:	f3af 8000 	nop.w
 800856e:	1c42      	adds	r2, r0, #1
 8008570:	4606      	mov	r6, r0
 8008572:	d1d6      	bne.n	8008522 <_svfiprintf_r+0x176>
 8008574:	89ab      	ldrh	r3, [r5, #12]
 8008576:	065b      	lsls	r3, r3, #25
 8008578:	f53f af2c 	bmi.w	80083d4 <_svfiprintf_r+0x28>
 800857c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800857e:	b01d      	add	sp, #116	; 0x74
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	ab03      	add	r3, sp, #12
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	462a      	mov	r2, r5
 800858a:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <_svfiprintf_r+0x1f8>)
 800858c:	a904      	add	r1, sp, #16
 800858e:	4638      	mov	r0, r7
 8008590:	f000 f87a 	bl	8008688 <_printf_i>
 8008594:	e7eb      	b.n	800856e <_svfiprintf_r+0x1c2>
 8008596:	bf00      	nop
 8008598:	08008d12 	.word	0x08008d12
 800859c:	08008d1c 	.word	0x08008d1c
 80085a0:	00000000 	.word	0x00000000
 80085a4:	080082f5 	.word	0x080082f5
 80085a8:	08008d18 	.word	0x08008d18

080085ac <_printf_common>:
 80085ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	4616      	mov	r6, r2
 80085b2:	4699      	mov	r9, r3
 80085b4:	688a      	ldr	r2, [r1, #8]
 80085b6:	690b      	ldr	r3, [r1, #16]
 80085b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085bc:	4293      	cmp	r3, r2
 80085be:	bfb8      	it	lt
 80085c0:	4613      	movlt	r3, r2
 80085c2:	6033      	str	r3, [r6, #0]
 80085c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085c8:	4607      	mov	r7, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	b10a      	cbz	r2, 80085d2 <_printf_common+0x26>
 80085ce:	3301      	adds	r3, #1
 80085d0:	6033      	str	r3, [r6, #0]
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	0699      	lsls	r1, r3, #26
 80085d6:	bf42      	ittt	mi
 80085d8:	6833      	ldrmi	r3, [r6, #0]
 80085da:	3302      	addmi	r3, #2
 80085dc:	6033      	strmi	r3, [r6, #0]
 80085de:	6825      	ldr	r5, [r4, #0]
 80085e0:	f015 0506 	ands.w	r5, r5, #6
 80085e4:	d106      	bne.n	80085f4 <_printf_common+0x48>
 80085e6:	f104 0a19 	add.w	sl, r4, #25
 80085ea:	68e3      	ldr	r3, [r4, #12]
 80085ec:	6832      	ldr	r2, [r6, #0]
 80085ee:	1a9b      	subs	r3, r3, r2
 80085f0:	42ab      	cmp	r3, r5
 80085f2:	dc26      	bgt.n	8008642 <_printf_common+0x96>
 80085f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085f8:	1e13      	subs	r3, r2, #0
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	bf18      	it	ne
 80085fe:	2301      	movne	r3, #1
 8008600:	0692      	lsls	r2, r2, #26
 8008602:	d42b      	bmi.n	800865c <_printf_common+0xb0>
 8008604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008608:	4649      	mov	r1, r9
 800860a:	4638      	mov	r0, r7
 800860c:	47c0      	blx	r8
 800860e:	3001      	adds	r0, #1
 8008610:	d01e      	beq.n	8008650 <_printf_common+0xa4>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	68e5      	ldr	r5, [r4, #12]
 8008616:	6832      	ldr	r2, [r6, #0]
 8008618:	f003 0306 	and.w	r3, r3, #6
 800861c:	2b04      	cmp	r3, #4
 800861e:	bf08      	it	eq
 8008620:	1aad      	subeq	r5, r5, r2
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	6922      	ldr	r2, [r4, #16]
 8008626:	bf0c      	ite	eq
 8008628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800862c:	2500      	movne	r5, #0
 800862e:	4293      	cmp	r3, r2
 8008630:	bfc4      	itt	gt
 8008632:	1a9b      	subgt	r3, r3, r2
 8008634:	18ed      	addgt	r5, r5, r3
 8008636:	2600      	movs	r6, #0
 8008638:	341a      	adds	r4, #26
 800863a:	42b5      	cmp	r5, r6
 800863c:	d11a      	bne.n	8008674 <_printf_common+0xc8>
 800863e:	2000      	movs	r0, #0
 8008640:	e008      	b.n	8008654 <_printf_common+0xa8>
 8008642:	2301      	movs	r3, #1
 8008644:	4652      	mov	r2, sl
 8008646:	4649      	mov	r1, r9
 8008648:	4638      	mov	r0, r7
 800864a:	47c0      	blx	r8
 800864c:	3001      	adds	r0, #1
 800864e:	d103      	bne.n	8008658 <_printf_common+0xac>
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008658:	3501      	adds	r5, #1
 800865a:	e7c6      	b.n	80085ea <_printf_common+0x3e>
 800865c:	18e1      	adds	r1, r4, r3
 800865e:	1c5a      	adds	r2, r3, #1
 8008660:	2030      	movs	r0, #48	; 0x30
 8008662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008666:	4422      	add	r2, r4
 8008668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800866c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008670:	3302      	adds	r3, #2
 8008672:	e7c7      	b.n	8008604 <_printf_common+0x58>
 8008674:	2301      	movs	r3, #1
 8008676:	4622      	mov	r2, r4
 8008678:	4649      	mov	r1, r9
 800867a:	4638      	mov	r0, r7
 800867c:	47c0      	blx	r8
 800867e:	3001      	adds	r0, #1
 8008680:	d0e6      	beq.n	8008650 <_printf_common+0xa4>
 8008682:	3601      	adds	r6, #1
 8008684:	e7d9      	b.n	800863a <_printf_common+0x8e>
	...

08008688 <_printf_i>:
 8008688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800868c:	460c      	mov	r4, r1
 800868e:	4691      	mov	r9, r2
 8008690:	7e27      	ldrb	r7, [r4, #24]
 8008692:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008694:	2f78      	cmp	r7, #120	; 0x78
 8008696:	4680      	mov	r8, r0
 8008698:	469a      	mov	sl, r3
 800869a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800869e:	d807      	bhi.n	80086b0 <_printf_i+0x28>
 80086a0:	2f62      	cmp	r7, #98	; 0x62
 80086a2:	d80a      	bhi.n	80086ba <_printf_i+0x32>
 80086a4:	2f00      	cmp	r7, #0
 80086a6:	f000 80d8 	beq.w	800885a <_printf_i+0x1d2>
 80086aa:	2f58      	cmp	r7, #88	; 0x58
 80086ac:	f000 80a3 	beq.w	80087f6 <_printf_i+0x16e>
 80086b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086b8:	e03a      	b.n	8008730 <_printf_i+0xa8>
 80086ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086be:	2b15      	cmp	r3, #21
 80086c0:	d8f6      	bhi.n	80086b0 <_printf_i+0x28>
 80086c2:	a001      	add	r0, pc, #4	; (adr r0, 80086c8 <_printf_i+0x40>)
 80086c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80086c8:	08008721 	.word	0x08008721
 80086cc:	08008735 	.word	0x08008735
 80086d0:	080086b1 	.word	0x080086b1
 80086d4:	080086b1 	.word	0x080086b1
 80086d8:	080086b1 	.word	0x080086b1
 80086dc:	080086b1 	.word	0x080086b1
 80086e0:	08008735 	.word	0x08008735
 80086e4:	080086b1 	.word	0x080086b1
 80086e8:	080086b1 	.word	0x080086b1
 80086ec:	080086b1 	.word	0x080086b1
 80086f0:	080086b1 	.word	0x080086b1
 80086f4:	08008841 	.word	0x08008841
 80086f8:	08008765 	.word	0x08008765
 80086fc:	08008823 	.word	0x08008823
 8008700:	080086b1 	.word	0x080086b1
 8008704:	080086b1 	.word	0x080086b1
 8008708:	08008863 	.word	0x08008863
 800870c:	080086b1 	.word	0x080086b1
 8008710:	08008765 	.word	0x08008765
 8008714:	080086b1 	.word	0x080086b1
 8008718:	080086b1 	.word	0x080086b1
 800871c:	0800882b 	.word	0x0800882b
 8008720:	680b      	ldr	r3, [r1, #0]
 8008722:	1d1a      	adds	r2, r3, #4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	600a      	str	r2, [r1, #0]
 8008728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800872c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008730:	2301      	movs	r3, #1
 8008732:	e0a3      	b.n	800887c <_printf_i+0x1f4>
 8008734:	6825      	ldr	r5, [r4, #0]
 8008736:	6808      	ldr	r0, [r1, #0]
 8008738:	062e      	lsls	r6, r5, #24
 800873a:	f100 0304 	add.w	r3, r0, #4
 800873e:	d50a      	bpl.n	8008756 <_printf_i+0xce>
 8008740:	6805      	ldr	r5, [r0, #0]
 8008742:	600b      	str	r3, [r1, #0]
 8008744:	2d00      	cmp	r5, #0
 8008746:	da03      	bge.n	8008750 <_printf_i+0xc8>
 8008748:	232d      	movs	r3, #45	; 0x2d
 800874a:	426d      	negs	r5, r5
 800874c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008750:	485e      	ldr	r0, [pc, #376]	; (80088cc <_printf_i+0x244>)
 8008752:	230a      	movs	r3, #10
 8008754:	e019      	b.n	800878a <_printf_i+0x102>
 8008756:	f015 0f40 	tst.w	r5, #64	; 0x40
 800875a:	6805      	ldr	r5, [r0, #0]
 800875c:	600b      	str	r3, [r1, #0]
 800875e:	bf18      	it	ne
 8008760:	b22d      	sxthne	r5, r5
 8008762:	e7ef      	b.n	8008744 <_printf_i+0xbc>
 8008764:	680b      	ldr	r3, [r1, #0]
 8008766:	6825      	ldr	r5, [r4, #0]
 8008768:	1d18      	adds	r0, r3, #4
 800876a:	6008      	str	r0, [r1, #0]
 800876c:	0628      	lsls	r0, r5, #24
 800876e:	d501      	bpl.n	8008774 <_printf_i+0xec>
 8008770:	681d      	ldr	r5, [r3, #0]
 8008772:	e002      	b.n	800877a <_printf_i+0xf2>
 8008774:	0669      	lsls	r1, r5, #25
 8008776:	d5fb      	bpl.n	8008770 <_printf_i+0xe8>
 8008778:	881d      	ldrh	r5, [r3, #0]
 800877a:	4854      	ldr	r0, [pc, #336]	; (80088cc <_printf_i+0x244>)
 800877c:	2f6f      	cmp	r7, #111	; 0x6f
 800877e:	bf0c      	ite	eq
 8008780:	2308      	moveq	r3, #8
 8008782:	230a      	movne	r3, #10
 8008784:	2100      	movs	r1, #0
 8008786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800878a:	6866      	ldr	r6, [r4, #4]
 800878c:	60a6      	str	r6, [r4, #8]
 800878e:	2e00      	cmp	r6, #0
 8008790:	bfa2      	ittt	ge
 8008792:	6821      	ldrge	r1, [r4, #0]
 8008794:	f021 0104 	bicge.w	r1, r1, #4
 8008798:	6021      	strge	r1, [r4, #0]
 800879a:	b90d      	cbnz	r5, 80087a0 <_printf_i+0x118>
 800879c:	2e00      	cmp	r6, #0
 800879e:	d04d      	beq.n	800883c <_printf_i+0x1b4>
 80087a0:	4616      	mov	r6, r2
 80087a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80087a6:	fb03 5711 	mls	r7, r3, r1, r5
 80087aa:	5dc7      	ldrb	r7, [r0, r7]
 80087ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087b0:	462f      	mov	r7, r5
 80087b2:	42bb      	cmp	r3, r7
 80087b4:	460d      	mov	r5, r1
 80087b6:	d9f4      	bls.n	80087a2 <_printf_i+0x11a>
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d10b      	bne.n	80087d4 <_printf_i+0x14c>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	07df      	lsls	r7, r3, #31
 80087c0:	d508      	bpl.n	80087d4 <_printf_i+0x14c>
 80087c2:	6923      	ldr	r3, [r4, #16]
 80087c4:	6861      	ldr	r1, [r4, #4]
 80087c6:	4299      	cmp	r1, r3
 80087c8:	bfde      	ittt	le
 80087ca:	2330      	movle	r3, #48	; 0x30
 80087cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087d4:	1b92      	subs	r2, r2, r6
 80087d6:	6122      	str	r2, [r4, #16]
 80087d8:	f8cd a000 	str.w	sl, [sp]
 80087dc:	464b      	mov	r3, r9
 80087de:	aa03      	add	r2, sp, #12
 80087e0:	4621      	mov	r1, r4
 80087e2:	4640      	mov	r0, r8
 80087e4:	f7ff fee2 	bl	80085ac <_printf_common>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d14c      	bne.n	8008886 <_printf_i+0x1fe>
 80087ec:	f04f 30ff 	mov.w	r0, #4294967295
 80087f0:	b004      	add	sp, #16
 80087f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f6:	4835      	ldr	r0, [pc, #212]	; (80088cc <_printf_i+0x244>)
 80087f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	680e      	ldr	r6, [r1, #0]
 8008800:	061f      	lsls	r7, r3, #24
 8008802:	f856 5b04 	ldr.w	r5, [r6], #4
 8008806:	600e      	str	r6, [r1, #0]
 8008808:	d514      	bpl.n	8008834 <_printf_i+0x1ac>
 800880a:	07d9      	lsls	r1, r3, #31
 800880c:	bf44      	itt	mi
 800880e:	f043 0320 	orrmi.w	r3, r3, #32
 8008812:	6023      	strmi	r3, [r4, #0]
 8008814:	b91d      	cbnz	r5, 800881e <_printf_i+0x196>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f023 0320 	bic.w	r3, r3, #32
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	2310      	movs	r3, #16
 8008820:	e7b0      	b.n	8008784 <_printf_i+0xfc>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	f043 0320 	orr.w	r3, r3, #32
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	2378      	movs	r3, #120	; 0x78
 800882c:	4828      	ldr	r0, [pc, #160]	; (80088d0 <_printf_i+0x248>)
 800882e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008832:	e7e3      	b.n	80087fc <_printf_i+0x174>
 8008834:	065e      	lsls	r6, r3, #25
 8008836:	bf48      	it	mi
 8008838:	b2ad      	uxthmi	r5, r5
 800883a:	e7e6      	b.n	800880a <_printf_i+0x182>
 800883c:	4616      	mov	r6, r2
 800883e:	e7bb      	b.n	80087b8 <_printf_i+0x130>
 8008840:	680b      	ldr	r3, [r1, #0]
 8008842:	6826      	ldr	r6, [r4, #0]
 8008844:	6960      	ldr	r0, [r4, #20]
 8008846:	1d1d      	adds	r5, r3, #4
 8008848:	600d      	str	r5, [r1, #0]
 800884a:	0635      	lsls	r5, r6, #24
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	d501      	bpl.n	8008854 <_printf_i+0x1cc>
 8008850:	6018      	str	r0, [r3, #0]
 8008852:	e002      	b.n	800885a <_printf_i+0x1d2>
 8008854:	0671      	lsls	r1, r6, #25
 8008856:	d5fb      	bpl.n	8008850 <_printf_i+0x1c8>
 8008858:	8018      	strh	r0, [r3, #0]
 800885a:	2300      	movs	r3, #0
 800885c:	6123      	str	r3, [r4, #16]
 800885e:	4616      	mov	r6, r2
 8008860:	e7ba      	b.n	80087d8 <_printf_i+0x150>
 8008862:	680b      	ldr	r3, [r1, #0]
 8008864:	1d1a      	adds	r2, r3, #4
 8008866:	600a      	str	r2, [r1, #0]
 8008868:	681e      	ldr	r6, [r3, #0]
 800886a:	6862      	ldr	r2, [r4, #4]
 800886c:	2100      	movs	r1, #0
 800886e:	4630      	mov	r0, r6
 8008870:	f7f7 fd26 	bl	80002c0 <memchr>
 8008874:	b108      	cbz	r0, 800887a <_printf_i+0x1f2>
 8008876:	1b80      	subs	r0, r0, r6
 8008878:	6060      	str	r0, [r4, #4]
 800887a:	6863      	ldr	r3, [r4, #4]
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	2300      	movs	r3, #0
 8008880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008884:	e7a8      	b.n	80087d8 <_printf_i+0x150>
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	4632      	mov	r2, r6
 800888a:	4649      	mov	r1, r9
 800888c:	4640      	mov	r0, r8
 800888e:	47d0      	blx	sl
 8008890:	3001      	adds	r0, #1
 8008892:	d0ab      	beq.n	80087ec <_printf_i+0x164>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	079b      	lsls	r3, r3, #30
 8008898:	d413      	bmi.n	80088c2 <_printf_i+0x23a>
 800889a:	68e0      	ldr	r0, [r4, #12]
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	4298      	cmp	r0, r3
 80088a0:	bfb8      	it	lt
 80088a2:	4618      	movlt	r0, r3
 80088a4:	e7a4      	b.n	80087f0 <_printf_i+0x168>
 80088a6:	2301      	movs	r3, #1
 80088a8:	4632      	mov	r2, r6
 80088aa:	4649      	mov	r1, r9
 80088ac:	4640      	mov	r0, r8
 80088ae:	47d0      	blx	sl
 80088b0:	3001      	adds	r0, #1
 80088b2:	d09b      	beq.n	80087ec <_printf_i+0x164>
 80088b4:	3501      	adds	r5, #1
 80088b6:	68e3      	ldr	r3, [r4, #12]
 80088b8:	9903      	ldr	r1, [sp, #12]
 80088ba:	1a5b      	subs	r3, r3, r1
 80088bc:	42ab      	cmp	r3, r5
 80088be:	dcf2      	bgt.n	80088a6 <_printf_i+0x21e>
 80088c0:	e7eb      	b.n	800889a <_printf_i+0x212>
 80088c2:	2500      	movs	r5, #0
 80088c4:	f104 0619 	add.w	r6, r4, #25
 80088c8:	e7f5      	b.n	80088b6 <_printf_i+0x22e>
 80088ca:	bf00      	nop
 80088cc:	08008d23 	.word	0x08008d23
 80088d0:	08008d34 	.word	0x08008d34

080088d4 <memmove>:
 80088d4:	4288      	cmp	r0, r1
 80088d6:	b510      	push	{r4, lr}
 80088d8:	eb01 0402 	add.w	r4, r1, r2
 80088dc:	d902      	bls.n	80088e4 <memmove+0x10>
 80088de:	4284      	cmp	r4, r0
 80088e0:	4623      	mov	r3, r4
 80088e2:	d807      	bhi.n	80088f4 <memmove+0x20>
 80088e4:	1e43      	subs	r3, r0, #1
 80088e6:	42a1      	cmp	r1, r4
 80088e8:	d008      	beq.n	80088fc <memmove+0x28>
 80088ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088f2:	e7f8      	b.n	80088e6 <memmove+0x12>
 80088f4:	4402      	add	r2, r0
 80088f6:	4601      	mov	r1, r0
 80088f8:	428a      	cmp	r2, r1
 80088fa:	d100      	bne.n	80088fe <memmove+0x2a>
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008906:	e7f7      	b.n	80088f8 <memmove+0x24>

08008908 <_free_r>:
 8008908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890a:	2900      	cmp	r1, #0
 800890c:	d048      	beq.n	80089a0 <_free_r+0x98>
 800890e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008912:	9001      	str	r0, [sp, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f1a1 0404 	sub.w	r4, r1, #4
 800891a:	bfb8      	it	lt
 800891c:	18e4      	addlt	r4, r4, r3
 800891e:	f000 f8d3 	bl	8008ac8 <__malloc_lock>
 8008922:	4a20      	ldr	r2, [pc, #128]	; (80089a4 <_free_r+0x9c>)
 8008924:	9801      	ldr	r0, [sp, #4]
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	4615      	mov	r5, r2
 800892a:	b933      	cbnz	r3, 800893a <_free_r+0x32>
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6014      	str	r4, [r2, #0]
 8008930:	b003      	add	sp, #12
 8008932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008936:	f000 b8cd 	b.w	8008ad4 <__malloc_unlock>
 800893a:	42a3      	cmp	r3, r4
 800893c:	d90b      	bls.n	8008956 <_free_r+0x4e>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	1862      	adds	r2, r4, r1
 8008942:	4293      	cmp	r3, r2
 8008944:	bf04      	itt	eq
 8008946:	681a      	ldreq	r2, [r3, #0]
 8008948:	685b      	ldreq	r3, [r3, #4]
 800894a:	6063      	str	r3, [r4, #4]
 800894c:	bf04      	itt	eq
 800894e:	1852      	addeq	r2, r2, r1
 8008950:	6022      	streq	r2, [r4, #0]
 8008952:	602c      	str	r4, [r5, #0]
 8008954:	e7ec      	b.n	8008930 <_free_r+0x28>
 8008956:	461a      	mov	r2, r3
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	b10b      	cbz	r3, 8008960 <_free_r+0x58>
 800895c:	42a3      	cmp	r3, r4
 800895e:	d9fa      	bls.n	8008956 <_free_r+0x4e>
 8008960:	6811      	ldr	r1, [r2, #0]
 8008962:	1855      	adds	r5, r2, r1
 8008964:	42a5      	cmp	r5, r4
 8008966:	d10b      	bne.n	8008980 <_free_r+0x78>
 8008968:	6824      	ldr	r4, [r4, #0]
 800896a:	4421      	add	r1, r4
 800896c:	1854      	adds	r4, r2, r1
 800896e:	42a3      	cmp	r3, r4
 8008970:	6011      	str	r1, [r2, #0]
 8008972:	d1dd      	bne.n	8008930 <_free_r+0x28>
 8008974:	681c      	ldr	r4, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	6053      	str	r3, [r2, #4]
 800897a:	4421      	add	r1, r4
 800897c:	6011      	str	r1, [r2, #0]
 800897e:	e7d7      	b.n	8008930 <_free_r+0x28>
 8008980:	d902      	bls.n	8008988 <_free_r+0x80>
 8008982:	230c      	movs	r3, #12
 8008984:	6003      	str	r3, [r0, #0]
 8008986:	e7d3      	b.n	8008930 <_free_r+0x28>
 8008988:	6825      	ldr	r5, [r4, #0]
 800898a:	1961      	adds	r1, r4, r5
 800898c:	428b      	cmp	r3, r1
 800898e:	bf04      	itt	eq
 8008990:	6819      	ldreq	r1, [r3, #0]
 8008992:	685b      	ldreq	r3, [r3, #4]
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	bf04      	itt	eq
 8008998:	1949      	addeq	r1, r1, r5
 800899a:	6021      	streq	r1, [r4, #0]
 800899c:	6054      	str	r4, [r2, #4]
 800899e:	e7c7      	b.n	8008930 <_free_r+0x28>
 80089a0:	b003      	add	sp, #12
 80089a2:	bd30      	pop	{r4, r5, pc}
 80089a4:	200144d0 	.word	0x200144d0

080089a8 <_malloc_r>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	1ccd      	adds	r5, r1, #3
 80089ac:	f025 0503 	bic.w	r5, r5, #3
 80089b0:	3508      	adds	r5, #8
 80089b2:	2d0c      	cmp	r5, #12
 80089b4:	bf38      	it	cc
 80089b6:	250c      	movcc	r5, #12
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	4606      	mov	r6, r0
 80089bc:	db01      	blt.n	80089c2 <_malloc_r+0x1a>
 80089be:	42a9      	cmp	r1, r5
 80089c0:	d903      	bls.n	80089ca <_malloc_r+0x22>
 80089c2:	230c      	movs	r3, #12
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	2000      	movs	r0, #0
 80089c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ca:	f000 f87d 	bl	8008ac8 <__malloc_lock>
 80089ce:	4921      	ldr	r1, [pc, #132]	; (8008a54 <_malloc_r+0xac>)
 80089d0:	680a      	ldr	r2, [r1, #0]
 80089d2:	4614      	mov	r4, r2
 80089d4:	b99c      	cbnz	r4, 80089fe <_malloc_r+0x56>
 80089d6:	4f20      	ldr	r7, [pc, #128]	; (8008a58 <_malloc_r+0xb0>)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	b923      	cbnz	r3, 80089e6 <_malloc_r+0x3e>
 80089dc:	4621      	mov	r1, r4
 80089de:	4630      	mov	r0, r6
 80089e0:	f000 f862 	bl	8008aa8 <_sbrk_r>
 80089e4:	6038      	str	r0, [r7, #0]
 80089e6:	4629      	mov	r1, r5
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 f85d 	bl	8008aa8 <_sbrk_r>
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	d123      	bne.n	8008a3a <_malloc_r+0x92>
 80089f2:	230c      	movs	r3, #12
 80089f4:	6033      	str	r3, [r6, #0]
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 f86c 	bl	8008ad4 <__malloc_unlock>
 80089fc:	e7e3      	b.n	80089c6 <_malloc_r+0x1e>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	1b5b      	subs	r3, r3, r5
 8008a02:	d417      	bmi.n	8008a34 <_malloc_r+0x8c>
 8008a04:	2b0b      	cmp	r3, #11
 8008a06:	d903      	bls.n	8008a10 <_malloc_r+0x68>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	441c      	add	r4, r3
 8008a0c:	6025      	str	r5, [r4, #0]
 8008a0e:	e004      	b.n	8008a1a <_malloc_r+0x72>
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	42a2      	cmp	r2, r4
 8008a14:	bf0c      	ite	eq
 8008a16:	600b      	streq	r3, [r1, #0]
 8008a18:	6053      	strne	r3, [r2, #4]
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 f85a 	bl	8008ad4 <__malloc_unlock>
 8008a20:	f104 000b 	add.w	r0, r4, #11
 8008a24:	1d23      	adds	r3, r4, #4
 8008a26:	f020 0007 	bic.w	r0, r0, #7
 8008a2a:	1ac2      	subs	r2, r0, r3
 8008a2c:	d0cc      	beq.n	80089c8 <_malloc_r+0x20>
 8008a2e:	1a1b      	subs	r3, r3, r0
 8008a30:	50a3      	str	r3, [r4, r2]
 8008a32:	e7c9      	b.n	80089c8 <_malloc_r+0x20>
 8008a34:	4622      	mov	r2, r4
 8008a36:	6864      	ldr	r4, [r4, #4]
 8008a38:	e7cc      	b.n	80089d4 <_malloc_r+0x2c>
 8008a3a:	1cc4      	adds	r4, r0, #3
 8008a3c:	f024 0403 	bic.w	r4, r4, #3
 8008a40:	42a0      	cmp	r0, r4
 8008a42:	d0e3      	beq.n	8008a0c <_malloc_r+0x64>
 8008a44:	1a21      	subs	r1, r4, r0
 8008a46:	4630      	mov	r0, r6
 8008a48:	f000 f82e 	bl	8008aa8 <_sbrk_r>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d1dd      	bne.n	8008a0c <_malloc_r+0x64>
 8008a50:	e7cf      	b.n	80089f2 <_malloc_r+0x4a>
 8008a52:	bf00      	nop
 8008a54:	200144d0 	.word	0x200144d0
 8008a58:	200144d4 	.word	0x200144d4

08008a5c <_realloc_r>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	4607      	mov	r7, r0
 8008a60:	4614      	mov	r4, r2
 8008a62:	460e      	mov	r6, r1
 8008a64:	b921      	cbnz	r1, 8008a70 <_realloc_r+0x14>
 8008a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	f7ff bf9c 	b.w	80089a8 <_malloc_r>
 8008a70:	b922      	cbnz	r2, 8008a7c <_realloc_r+0x20>
 8008a72:	f7ff ff49 	bl	8008908 <_free_r>
 8008a76:	4625      	mov	r5, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7c:	f000 f830 	bl	8008ae0 <_malloc_usable_size_r>
 8008a80:	42a0      	cmp	r0, r4
 8008a82:	d20f      	bcs.n	8008aa4 <_realloc_r+0x48>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4638      	mov	r0, r7
 8008a88:	f7ff ff8e 	bl	80089a8 <_malloc_r>
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d0f2      	beq.n	8008a78 <_realloc_r+0x1c>
 8008a92:	4631      	mov	r1, r6
 8008a94:	4622      	mov	r2, r4
 8008a96:	f7ff fbf7 	bl	8008288 <memcpy>
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f7ff ff33 	bl	8008908 <_free_r>
 8008aa2:	e7e9      	b.n	8008a78 <_realloc_r+0x1c>
 8008aa4:	4635      	mov	r5, r6
 8008aa6:	e7e7      	b.n	8008a78 <_realloc_r+0x1c>

08008aa8 <_sbrk_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d06      	ldr	r5, [pc, #24]	; (8008ac4 <_sbrk_r+0x1c>)
 8008aac:	2300      	movs	r3, #0
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f000 f81e 	bl	8008af4 <_sbrk>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_sbrk_r+0x1a>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_sbrk_r+0x1a>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	20014678 	.word	0x20014678

08008ac8 <__malloc_lock>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <__malloc_lock+0x8>)
 8008aca:	f000 b811 	b.w	8008af0 <__retarget_lock_acquire_recursive>
 8008ace:	bf00      	nop
 8008ad0:	20014680 	.word	0x20014680

08008ad4 <__malloc_unlock>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	; (8008adc <__malloc_unlock+0x8>)
 8008ad6:	f000 b80c 	b.w	8008af2 <__retarget_lock_release_recursive>
 8008ada:	bf00      	nop
 8008adc:	20014680 	.word	0x20014680

08008ae0 <_malloc_usable_size_r>:
 8008ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ae4:	1f18      	subs	r0, r3, #4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bfbc      	itt	lt
 8008aea:	580b      	ldrlt	r3, [r1, r0]
 8008aec:	18c0      	addlt	r0, r0, r3
 8008aee:	4770      	bx	lr

08008af0 <__retarget_lock_acquire_recursive>:
 8008af0:	4770      	bx	lr

08008af2 <__retarget_lock_release_recursive>:
 8008af2:	4770      	bx	lr

08008af4 <_sbrk>:
 8008af4:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <_sbrk+0x14>)
 8008af6:	6819      	ldr	r1, [r3, #0]
 8008af8:	4602      	mov	r2, r0
 8008afa:	b909      	cbnz	r1, 8008b00 <_sbrk+0xc>
 8008afc:	4903      	ldr	r1, [pc, #12]	; (8008b0c <_sbrk+0x18>)
 8008afe:	6019      	str	r1, [r3, #0]
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	4402      	add	r2, r0
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	4770      	bx	lr
 8008b08:	200144d8 	.word	0x200144d8
 8008b0c:	20014688 	.word	0x20014688

08008b10 <_init>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr

08008b1c <_fini>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	bf00      	nop
 8008b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b22:	bc08      	pop	{r3}
 8008b24:	469e      	mov	lr, r3
 8008b26:	4770      	bx	lr
