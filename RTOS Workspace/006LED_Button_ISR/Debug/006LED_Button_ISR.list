
006LED_Button_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006380  08006380  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006388  08006388  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001441c  20000020  080063b0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001443c  080063b0  0002443c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001742d  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315a  00000000  00000000  0003747d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a40  00000000  00000000  0003c860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c5e  00000000  00000000  000602a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db7df  00000000  00000000  00078efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001546dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a74  00000000  00000000  00154730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000020 	.word	0x20000020
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800616c 	.word	0x0800616c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000024 	.word	0x20000024
 800020c:	0800616c 	.word	0x0800616c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014394 	.word	0x20014394

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fb83 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f897 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f907 	bl	80007bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	SEGGER_UART_init(500000);
 80005ae:	483b      	ldr	r0, [pc, #236]	; (800069c <main+0x100>)
 80005b0:	f003 fbce 	bl	8003d50 <SEGGER_UART_init>

	//CYCLCNT enable
	DWT_CTRL |= ( 1 << 0);
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <main+0x104>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a39      	ldr	r2, [pc, #228]	; (80006a0 <main+0x104>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 80005c0:	f003 f93c 	bl	800383c <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start(); //comment out if using UART based continuous recording

	//Create Task 1: Red LED
	status = xTaskCreate(led_red_handler, "LED_RED_TASK", 200, NULL, 2, &ledr_task_handle);
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <main+0x108>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	4935      	ldr	r1, [pc, #212]	; (80006a8 <main+0x10c>)
 80005d2:	4836      	ldr	r0, [pc, #216]	; (80006ac <main+0x110>)
 80005d4:	f001 ffb4 	bl	8002540 <xTaskCreate>
 80005d8:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d00a      	beq.n	80005f6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e4:	f383 8811 	msr	BASEPRI, r3
 80005e8:	f3bf 8f6f 	isb	sy
 80005ec:	f3bf 8f4f 	dsb	sy
 80005f0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f2:	bf00      	nop
 80005f4:	e7fe      	b.n	80005f4 <main+0x58>

	next_task_handle = ledy_task_handle;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <main+0x114>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <main+0x118>)
 80005fc:	6013      	str	r3, [r2, #0]

	//Create Task 2: Yellow LED
	status = xTaskCreate(led_yellow_handler, "LED_YELLOW_TASK", 200, NULL, 2, &ledy_task_handle);
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <main+0x114>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	492b      	ldr	r1, [pc, #172]	; (80006b8 <main+0x11c>)
 800060c:	482b      	ldr	r0, [pc, #172]	; (80006bc <main+0x120>)
 800060e:	f001 ff97 	bl	8002540 <xTaskCreate>
 8000612:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00a      	beq.n	8000630 <main+0x94>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	60fb      	str	r3, [r7, #12]
    }
 800062c:	bf00      	nop
 800062e:	e7fe      	b.n	800062e <main+0x92>

	//Create Task 3: Blue LED
	status = xTaskCreate(led_blue_handler, "LED_BLUE_TASK", 200, NULL, 2, &ledb_task_handle);
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <main+0x124>)
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4921      	ldr	r1, [pc, #132]	; (80006c4 <main+0x128>)
 800063e:	4822      	ldr	r0, [pc, #136]	; (80006c8 <main+0x12c>)
 8000640:	f001 ff7e 	bl	8002540 <xTaskCreate>
 8000644:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0xc6>
        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	60bb      	str	r3, [r7, #8]
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0xc4>

	//Create Task 4: Green LED
	status = xTaskCreate(led_green_handler, "LED_GREEN_TASK", 200, NULL, 2, &ledg_task_handle);
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <main+0x130>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	4918      	ldr	r1, [pc, #96]	; (80006d0 <main+0x134>)
 8000670:	4818      	ldr	r0, [pc, #96]	; (80006d4 <main+0x138>)
 8000672:	f001 ff65 	bl	8002540 <xTaskCreate>
 8000676:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0xf8>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	607b      	str	r3, [r7, #4]
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0xf6>

	//start the freeRTOS scheduler
	vTaskStartScheduler();
 8000694:	f002 f962 	bl	800295c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000698:	e7fe      	b.n	8000698 <main+0xfc>
 800069a:	bf00      	nop
 800069c:	0007a120 	.word	0x0007a120
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	20014340 	.word	0x20014340
 80006a8:	08006184 	.word	0x08006184
 80006ac:	080008f9 	.word	0x080008f9
 80006b0:	2001433c 	.word	0x2001433c
 80006b4:	2000003c 	.word	0x2000003c
 80006b8:	08006194 	.word	0x08006194
 80006bc:	08000965 	.word	0x08000965
 80006c0:	20014344 	.word	0x20014344
 80006c4:	080061a4 	.word	0x080061a4
 80006c8:	080009d5 	.word	0x080009d5
 80006cc:	20014338 	.word	0x20014338
 80006d0:	080061b4 	.word	0x080061b4
 80006d4:	08000a45 	.word	0x08000a45

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2234      	movs	r2, #52	; 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 fd38 	bl	800615c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <SystemClock_Config+0xdc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a2b      	ldr	r2, [pc, #172]	; (80007b4 <SystemClock_Config+0xdc>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <SystemClock_Config+0xdc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <SystemClock_Config+0xe0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a25      	ldr	r2, [pc, #148]	; (80007b8 <SystemClock_Config+0xe0>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <SystemClock_Config+0xe0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800074c:	23b4      	movs	r3, #180	; 0xb4
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f8ed 	bl	8001940 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800076c:	f000 f9b2 	bl	8000ad4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000770:	f000 fdac 	bl	80012cc <HAL_PWREx_EnableOverDrive>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800077a:	f000 f9ab 	bl	8000ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2105      	movs	r1, #5
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fde5 	bl	800136c <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007a8:	f000 f994 	bl	8000ad4 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	; 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b43      	ldr	r3, [pc, #268]	; (80008e4 <MX_GPIO_Init+0x128>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a42      	ldr	r2, [pc, #264]	; (80008e4 <MX_GPIO_Init+0x128>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b40      	ldr	r3, [pc, #256]	; (80008e4 <MX_GPIO_Init+0x128>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <MX_GPIO_Init+0x128>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a3b      	ldr	r2, [pc, #236]	; (80008e4 <MX_GPIO_Init+0x128>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <MX_GPIO_Init+0x128>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <MX_GPIO_Init+0x128>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a34      	ldr	r2, [pc, #208]	; (80008e4 <MX_GPIO_Init+0x128>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <MX_GPIO_Init+0x128>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <MX_GPIO_Init+0x128>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2d      	ldr	r2, [pc, #180]	; (80008e4 <MX_GPIO_Init+0x128>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_GPIO_Init+0x128>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4828      	ldr	r0, [pc, #160]	; (80008e8 <MX_GPIO_Init+0x12c>)
 8000848:	f000 fce8 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000852:	4826      	ldr	r0, [pc, #152]	; (80008ec <MX_GPIO_Init+0x130>)
 8000854:	f000 fce2 	bl	800121c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <MX_GPIO_Init+0x134>)
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4821      	ldr	r0, [pc, #132]	; (80008f4 <MX_GPIO_Init+0x138>)
 800086e:	f000 fb41 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000872:	230c      	movs	r3, #12
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000882:	2307      	movs	r3, #7
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <MX_GPIO_Init+0x12c>)
 800088e:	f000 fb31 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000892:	2320      	movs	r3, #32
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <MX_GPIO_Init+0x12c>)
 80008aa:	f000 fb23 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_YELLOW_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin;
 80008ae:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_GPIO_Init+0x130>)
 80008c8:	f000 fb14 	bl	8000ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2106      	movs	r1, #6
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f000 fae5 	bl	8000ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d6:	2028      	movs	r0, #40	; 0x28
 80008d8:	f000 fafe 	bl	8000ed8 <HAL_NVIC_EnableIRQ>

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400
 80008f0:	10110000 	.word	0x10110000
 80008f4:	40020800 	.word	0x40020800

080008f8 <led_red_handler>:

/* USER CODE BEGIN 4 */
static void led_red_handler(void* parameters) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <led_red_handler+0x58>)
 8000902:	f005 fb4d 	bl	8005fa0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <led_red_handler+0x5c>)
 800090a:	f000 fca0 	bl	800124e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2000      	movs	r0, #0
 800091c:	f002 fb12 	bl	8002f44 <xTaskGenericNotifyWait>
 8000920:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d1eb      	bne.n	8000900 <led_red_handler+0x8>
			portENTER_CRITICAL();
 8000928:	f002 fd3e 	bl	80033a8 <vPortEnterCritical>
			next_task_handle = ledy_task_handle;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <led_red_handler+0x60>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <led_red_handler+0x64>)
 8000932:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2180      	movs	r1, #128	; 0x80
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <led_red_handler+0x5c>)
 800093a:	f000 fc6f 	bl	800121c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Red LED task");
 800093e:	4808      	ldr	r0, [pc, #32]	; (8000960 <led_red_handler+0x68>)
 8000940:	f005 fb2e 	bl	8005fa0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000944:	f002 fd60 	bl	8003408 <vPortExitCritical>
			vTaskDelete(NULL);
 8000948:	2000      	movs	r0, #0
 800094a:	f001 ff5d 	bl	8002808 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 800094e:	e7d7      	b.n	8000900 <led_red_handler+0x8>
 8000950:	080061c4 	.word	0x080061c4
 8000954:	40020400 	.word	0x40020400
 8000958:	2001433c 	.word	0x2001433c
 800095c:	2000003c 	.word	0x2000003c
 8000960:	080061d8 	.word	0x080061d8

08000964 <led_yellow_handler>:
		}
	}
}


static void led_yellow_handler(void* parameters) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 800096c:	4814      	ldr	r0, [pc, #80]	; (80009c0 <led_yellow_handler+0x5c>)
 800096e:	f005 fb17 	bl	8005fa0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <led_yellow_handler+0x60>)
 8000978:	f000 fc69 	bl	800124e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 800097c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2300      	movs	r3, #0
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2000      	movs	r0, #0
 800098a:	f002 fadb 	bl	8002f44 <xTaskGenericNotifyWait>
 800098e:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE) {
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d1ea      	bne.n	800096c <led_yellow_handler+0x8>
			portENTER_CRITICAL();
 8000996:	f002 fd07 	bl	80033a8 <vPortEnterCritical>
			next_task_handle = ledb_task_handle;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <led_yellow_handler+0x64>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <led_yellow_handler+0x68>)
 80009a0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <led_yellow_handler+0x60>)
 80009aa:	f000 fc37 	bl	800121c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Yellow LED task");
 80009ae:	4808      	ldr	r0, [pc, #32]	; (80009d0 <led_yellow_handler+0x6c>)
 80009b0:	f005 faf6 	bl	8005fa0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 80009b4:	f002 fd28 	bl	8003408 <vPortExitCritical>
			vTaskDelete(NULL);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 ff25 	bl	8002808 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 80009be:	e7d5      	b.n	800096c <led_yellow_handler+0x8>
 80009c0:	080061ec 	.word	0x080061ec
 80009c4:	40020400 	.word	0x40020400
 80009c8:	20014344 	.word	0x20014344
 80009cc:	2000003c 	.word	0x2000003c
 80009d0:	08006200 	.word	0x08006200

080009d4 <led_blue_handler>:
		}
	}
}

static void led_blue_handler(void* parameters) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af02      	add	r7, sp, #8
 80009da:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 80009dc:	4814      	ldr	r0, [pc, #80]	; (8000a30 <led_blue_handler+0x5c>)
 80009de:	f005 fadf 	bl	8005fa0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80009e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e6:	4813      	ldr	r0, [pc, #76]	; (8000a34 <led_blue_handler+0x60>)
 80009e8:	f000 fc31 	bl	800124e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(600));
 80009ec:	f44f 7316 	mov.w	r3, #600	; 0x258
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2000      	movs	r0, #0
 80009fa:	f002 faa3 	bl	8002f44 <xTaskGenericNotifyWait>
 80009fe:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE) {
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d1ea      	bne.n	80009dc <led_blue_handler+0x8>
			portENTER_CRITICAL();
 8000a06:	f002 fccf 	bl	80033a8 <vPortEnterCritical>
			next_task_handle = ledg_task_handle;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <led_blue_handler+0x64>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <led_blue_handler+0x68>)
 8000a10:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <led_blue_handler+0x60>)
 8000a1a:	f000 fbff 	bl	800121c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Blue LED task");
 8000a1e:	4808      	ldr	r0, [pc, #32]	; (8000a40 <led_blue_handler+0x6c>)
 8000a20:	f005 fabe 	bl	8005fa0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a24:	f002 fcf0 	bl	8003408 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 feed 	bl	8002808 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000a2e:	e7d5      	b.n	80009dc <led_blue_handler+0x8>
 8000a30:	08006218 	.word	0x08006218
 8000a34:	40020400 	.word	0x40020400
 8000a38:	20014338 	.word	0x20014338
 8000a3c:	2000003c 	.word	0x2000003c
 8000a40:	0800622c 	.word	0x0800622c

08000a44 <led_green_handler>:
		}
	}
}

static void led_green_handler(void* parameters) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000a4c:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <led_green_handler+0x5c>)
 8000a4e:	f005 faa7 	bl	8005fa0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a56:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <led_green_handler+0x60>)
 8000a58:	f000 fbf9 	bl	800124e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000a5c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f002 fa6b 	bl	8002f44 <xTaskGenericNotifyWait>
 8000a6e:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d1ea      	bne.n	8000a4c <led_green_handler+0x8>
			portENTER_CRITICAL();
 8000a76:	f002 fc97 	bl	80033a8 <vPortEnterCritical>
			next_task_handle = NULL;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <led_green_handler+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <led_green_handler+0x60>)
 8000a88:	f000 fbc8 	bl	800121c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Green LED task");
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <led_green_handler+0x68>)
 8000a8e:	f005 fa87 	bl	8005fa0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a92:	f002 fcb9 	bl	8003408 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f001 feb6 	bl	8002808 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000a9c:	e7d6      	b.n	8000a4c <led_green_handler+0x8>
 8000a9e:	bf00      	nop
 8000aa0:	08006244 	.word	0x08006244
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	2000003c 	.word	0x2000003c
 8000aac:	08006258 	.word	0x08006258

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac2:	f000 f915 	bl	8000cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40001000 	.word	0x40001000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2036      	movs	r0, #54	; 0x36
 8000b46:	f000 f9ab 	bl	8000ea0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b4a:	2036      	movs	r0, #54	; 0x36
 8000b4c:	f000 f9c4 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_InitTick+0xa4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6c:	f107 0210 	add.w	r2, r7, #16
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fcfe 	bl	8001578 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b7c:	f000 fce8 	bl	8001550 <HAL_RCC_GetPCLK1Freq>
 8000b80:	4603      	mov	r3, r0
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <HAL_InitTick+0xa8>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	0c9b      	lsrs	r3, r3, #18
 8000b90:	3b01      	subs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_InitTick+0xac>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <HAL_InitTick+0xb0>)
 8000b98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_InitTick+0xac>)
 8000b9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_InitTick+0xac>)
 8000ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_InitTick+0xac>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_InitTick+0xac>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <HAL_InitTick+0xac>)
 8000bb6:	f001 f961 	bl	8001e7c <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d104      	bne.n	8000bca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <HAL_InitTick+0xac>)
 8000bc2:	f001 f9b5 	bl	8001f30 <HAL_TIM_Base_Start_IT>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	431bde83 	.word	0x431bde83
 8000bdc:	20014348 	.word	0x20014348
 8000be0:	40001000 	.word	0x40001000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c18:	f000 fb34 	bl	8001284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM6_DAC_IRQHandler+0x10>)
 8000c26:	f001 f9f3 	bl	8002010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20014348 	.word	0x20014348

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5e:	490e      	ldr	r1, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c74:	4c0b      	ldr	r4, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c82:	f7ff ffd7 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f005 fa29 	bl	80060dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc87 	bl	800059c <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c9c:	08006390 	.word	0x08006390
  ldr r2, =_sbss
 8000ca0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ca4:	2001443c 	.word	0x2001443c

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f8d8 	bl	8000e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff ff28 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fefe 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20014390 	.word	0x20014390

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20014390 	.word	0x20014390

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff4c 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb2:	f7ff ff61 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	f7ff ffb1 	bl	8000e24 <NVIC_EncodePriority>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff80 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff54 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	e165      	b.n	80011dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	f040 8154 	bne.w	80011d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d005      	beq.n	8000f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d130      	bne.n	8000fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 0201 	and.w	r2, r3, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d017      	beq.n	8000fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d123      	bne.n	8001038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	69b9      	ldr	r1, [r7, #24]
 8001034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0203 	and.w	r2, r3, #3
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80ae 	beq.w	80011d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <HAL_GPIO_Init+0x300>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a5c      	ldr	r2, [pc, #368]	; (80011f4 <HAL_GPIO_Init+0x300>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HAL_GPIO_Init+0x300>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001096:	4a58      	ldr	r2, [pc, #352]	; (80011f8 <HAL_GPIO_Init+0x304>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4f      	ldr	r2, [pc, #316]	; (80011fc <HAL_GPIO_Init+0x308>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d025      	beq.n	800110e <HAL_GPIO_Init+0x21a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4e      	ldr	r2, [pc, #312]	; (8001200 <HAL_GPIO_Init+0x30c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d01f      	beq.n	800110a <HAL_GPIO_Init+0x216>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4d      	ldr	r2, [pc, #308]	; (8001204 <HAL_GPIO_Init+0x310>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x212>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4c      	ldr	r2, [pc, #304]	; (8001208 <HAL_GPIO_Init+0x314>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x20e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4b      	ldr	r2, [pc, #300]	; (800120c <HAL_GPIO_Init+0x318>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x20a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4a      	ldr	r2, [pc, #296]	; (8001210 <HAL_GPIO_Init+0x31c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x206>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a49      	ldr	r2, [pc, #292]	; (8001214 <HAL_GPIO_Init+0x320>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x202>
 80010f2:	2306      	movs	r3, #6
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x21c>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x21c>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x21c>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x21c>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x21c>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x21c>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x21c>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_GPIO_Init+0x304>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_GPIO_Init+0x324>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001152:	4a31      	ldr	r2, [pc, #196]	; (8001218 <HAL_GPIO_Init+0x324>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_GPIO_Init+0x324>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117c:	4a26      	ldr	r2, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x324>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_GPIO_Init+0x324>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <HAL_GPIO_Init+0x324>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_GPIO_Init+0x324>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_GPIO_Init+0x324>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae96 	bls.w	8000f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40013c00 	.word	0x40013c00

0800121c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
 8001228:	4613      	mov	r3, r2
 800122a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001238:	e003      	b.n	8001242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001260:	887a      	ldrh	r2, [r7, #2]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4013      	ands	r3, r2
 8001266:	041a      	lsls	r2, r3, #16
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43d9      	mvns	r1, r3
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	400b      	ands	r3, r1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f806 	bl	80012b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_PWREx_EnableOverDrive+0x90>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_PWREx_EnableOverDrive+0x90>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_PWREx_EnableOverDrive+0x90>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_PWREx_EnableOverDrive+0x94>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f8:	f7ff fd0e 	bl	8000d18 <HAL_GetTick>
 80012fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012fe:	e009      	b.n	8001314 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001300:	f7ff fd0a 	bl	8000d18 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800130e:	d901      	bls.n	8001314 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e01f      	b.n	8001354 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_PWREx_EnableOverDrive+0x98>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001320:	d1ee      	bne.n	8001300 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001328:	f7ff fcf6 	bl	8000d18 <HAL_GetTick>
 800132c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800132e:	e009      	b.n	8001344 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001330:	f7ff fcf2 	bl	8000d18 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800133e:	d901      	bls.n	8001344 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e007      	b.n	8001354 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_PWREx_EnableOverDrive+0x98>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001350:	d1ee      	bne.n	8001330 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	420e0040 	.word	0x420e0040
 8001364:	40007000 	.word	0x40007000
 8001368:	420e0044 	.word	0x420e0044

0800136c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0cc      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001380:	4b68      	ldr	r3, [pc, #416]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d90c      	bls.n	80013a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b65      	ldr	r3, [pc, #404]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0b8      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c0:	4b59      	ldr	r3, [pc, #356]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4a58      	ldr	r2, [pc, #352]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d8:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4a52      	ldr	r2, [pc, #328]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	494d      	ldr	r1, [pc, #308]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d044      	beq.n	800148c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d107      	bne.n	800141a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d119      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e07f      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d003      	beq.n	800142a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001426:	2b03      	cmp	r3, #3
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142a:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e06f      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e067      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f023 0203 	bic.w	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4934      	ldr	r1, [pc, #208]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800145c:	f7ff fc5c 	bl	8000d18 <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	e00a      	b.n	800147a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001464:	f7ff fc58 	bl	8000d18 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e04f      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 020c 	and.w	r2, r3, #12
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	429a      	cmp	r2, r3
 800148a:	d1eb      	bne.n	8001464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d20c      	bcs.n	80014b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e032      	b.n	800151a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4916      	ldr	r1, [pc, #88]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	490e      	ldr	r1, [pc, #56]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014f2:	f000 f873 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	490a      	ldr	r1, [pc, #40]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 8001504:	5ccb      	ldrb	r3, [r1, r3]
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_ClockConfig+0x1c8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fb0c 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00
 8001528:	40023800 	.word	0x40023800
 800152c:	08006340 	.word	0x08006340
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_RCC_GetHCLKFreq+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000

08001550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001554:	f7ff fff0 	bl	8001538 <HAL_RCC_GetHCLKFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	0a9b      	lsrs	r3, r3, #10
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	4903      	ldr	r1, [pc, #12]	; (8001574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	08006350 	.word	0x08006350

08001578 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	220f      	movs	r2, #15
 8001586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_RCC_GetClockConfig+0x5c>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0203 	and.w	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_RCC_GetClockConfig+0x5c>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_GetClockConfig+0x5c>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_RCC_GetClockConfig+0x5c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_RCC_GetClockConfig+0x60>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 020f 	and.w	r2, r3, #15
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	601a      	str	r2, [r3, #0]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e0:	b088      	sub	sp, #32
 80015e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015f8:	4bce      	ldr	r3, [pc, #824]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b0c      	cmp	r3, #12
 8001602:	f200 818d 	bhi.w	8001920 <HAL_RCC_GetSysClockFreq+0x344>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <HAL_RCC_GetSysClockFreq+0x30>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	08001641 	.word	0x08001641
 8001610:	08001921 	.word	0x08001921
 8001614:	08001921 	.word	0x08001921
 8001618:	08001921 	.word	0x08001921
 800161c:	08001647 	.word	0x08001647
 8001620:	08001921 	.word	0x08001921
 8001624:	08001921 	.word	0x08001921
 8001628:	08001921 	.word	0x08001921
 800162c:	0800164d 	.word	0x0800164d
 8001630:	08001921 	.word	0x08001921
 8001634:	08001921 	.word	0x08001921
 8001638:	08001921 	.word	0x08001921
 800163c:	080017c1 	.word	0x080017c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001640:	4bbd      	ldr	r3, [pc, #756]	; (8001938 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001642:	61bb      	str	r3, [r7, #24]
       break;
 8001644:	e16f      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001646:	4bbd      	ldr	r3, [pc, #756]	; (800193c <HAL_RCC_GetSysClockFreq+0x360>)
 8001648:	61bb      	str	r3, [r7, #24]
      break;
 800164a:	e16c      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800164c:	4bb9      	ldr	r3, [pc, #740]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001654:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001656:	4bb7      	ldr	r3, [pc, #732]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d053      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001662:	4bb4      	ldr	r3, [pc, #720]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	099b      	lsrs	r3, r3, #6
 8001668:	461a      	mov	r2, r3
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	ea02 0400 	and.w	r4, r2, r0
 800167a:	603c      	str	r4, [r7, #0]
 800167c:	400b      	ands	r3, r1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	014b      	lsls	r3, r1, #5
 8001692:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001696:	0142      	lsls	r2, r0, #5
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	4623      	mov	r3, r4
 800169e:	1ac0      	subs	r0, r0, r3
 80016a0:	462b      	mov	r3, r5
 80016a2:	eb61 0103 	sbc.w	r1, r1, r3
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	018b      	lsls	r3, r1, #6
 80016b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016b4:	0182      	lsls	r2, r0, #6
 80016b6:	1a12      	subs	r2, r2, r0
 80016b8:	eb63 0301 	sbc.w	r3, r3, r1
 80016bc:	f04f 0000 	mov.w	r0, #0
 80016c0:	f04f 0100 	mov.w	r1, #0
 80016c4:	00d9      	lsls	r1, r3, #3
 80016c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016ca:	00d0      	lsls	r0, r2, #3
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4621      	mov	r1, r4
 80016d2:	1852      	adds	r2, r2, r1
 80016d4:	4629      	mov	r1, r5
 80016d6:	eb43 0101 	adc.w	r1, r3, r1
 80016da:	460b      	mov	r3, r1
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	f04f 0100 	mov.w	r1, #0
 80016e4:	0259      	lsls	r1, r3, #9
 80016e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016ea:	0250      	lsls	r0, r2, #9
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	f7fe fdd2 	bl	80002a4 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4613      	mov	r3, r2
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	e04c      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170a:	4b8a      	ldr	r3, [pc, #552]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	461a      	mov	r2, r3
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	ea02 0a00 	and.w	sl, r2, r0
 8001722:	ea03 0b01 	and.w	fp, r3, r1
 8001726:	4650      	mov	r0, sl
 8001728:	4659      	mov	r1, fp
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	014b      	lsls	r3, r1, #5
 8001734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001738:	0142      	lsls	r2, r0, #5
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	ebb0 000a 	subs.w	r0, r0, sl
 8001742:	eb61 010b 	sbc.w	r1, r1, fp
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001754:	0182      	lsls	r2, r0, #6
 8001756:	1a12      	subs	r2, r2, r0
 8001758:	eb63 0301 	sbc.w	r3, r3, r1
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	00d9      	lsls	r1, r3, #3
 8001766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800176a:	00d0      	lsls	r0, r2, #3
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	eb12 020a 	adds.w	r2, r2, sl
 8001774:	eb43 030b 	adc.w	r3, r3, fp
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	0299      	lsls	r1, r3, #10
 8001782:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001786:	0290      	lsls	r0, r2, #10
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	461a      	mov	r2, r3
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	f7fe fd84 	bl	80002a4 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017a4:	4b63      	ldr	r3, [pc, #396]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	3301      	adds	r3, #1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	61bb      	str	r3, [r7, #24]
      break;
 80017be:	e0b2      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c0:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ca:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d04d      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d6:	4b57      	ldr	r3, [pc, #348]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	099b      	lsrs	r3, r3, #6
 80017dc:	461a      	mov	r2, r3
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017e6:	f04f 0100 	mov.w	r1, #0
 80017ea:	ea02 0800 	and.w	r8, r2, r0
 80017ee:	ea03 0901 	and.w	r9, r3, r1
 80017f2:	4640      	mov	r0, r8
 80017f4:	4649      	mov	r1, r9
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	014b      	lsls	r3, r1, #5
 8001800:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001804:	0142      	lsls	r2, r0, #5
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	ebb0 0008 	subs.w	r0, r0, r8
 800180e:	eb61 0109 	sbc.w	r1, r1, r9
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	018b      	lsls	r3, r1, #6
 800181c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001820:	0182      	lsls	r2, r0, #6
 8001822:	1a12      	subs	r2, r2, r0
 8001824:	eb63 0301 	sbc.w	r3, r3, r1
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	00d9      	lsls	r1, r3, #3
 8001832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001836:	00d0      	lsls	r0, r2, #3
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	eb12 0208 	adds.w	r2, r2, r8
 8001840:	eb43 0309 	adc.w	r3, r3, r9
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	0259      	lsls	r1, r3, #9
 800184e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001852:	0250      	lsls	r0, r2, #9
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	461a      	mov	r2, r3
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	f7fe fd1e 	bl	80002a4 <__aeabi_uldivmod>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4613      	mov	r3, r2
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	e04a      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	461a      	mov	r2, r3
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001882:	f04f 0100 	mov.w	r1, #0
 8001886:	ea02 0400 	and.w	r4, r2, r0
 800188a:	ea03 0501 	and.w	r5, r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	014b      	lsls	r3, r1, #5
 800189c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018a0:	0142      	lsls	r2, r0, #5
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	1b00      	subs	r0, r0, r4
 80018a8:	eb61 0105 	sbc.w	r1, r1, r5
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	018b      	lsls	r3, r1, #6
 80018b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018ba:	0182      	lsls	r2, r0, #6
 80018bc:	1a12      	subs	r2, r2, r0
 80018be:	eb63 0301 	sbc.w	r3, r3, r1
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	00d9      	lsls	r1, r3, #3
 80018cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018d0:	00d0      	lsls	r0, r2, #3
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	1912      	adds	r2, r2, r4
 80018d8:	eb45 0303 	adc.w	r3, r5, r3
 80018dc:	f04f 0000 	mov.w	r0, #0
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	0299      	lsls	r1, r3, #10
 80018e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018ea:	0290      	lsls	r0, r2, #10
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	f7fe fcd2 	bl	80002a4 <__aeabi_uldivmod>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4613      	mov	r3, r2
 8001906:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_GetSysClockFreq+0x358>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0f1b      	lsrs	r3, r3, #28
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	61bb      	str	r3, [r7, #24]
      break;
 800191e:	e002      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001922:	61bb      	str	r3, [r7, #24]
      break;
 8001924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001926:	69bb      	ldr	r3, [r7, #24]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	00f42400 	.word	0x00f42400
 800193c:	007a1200 	.word	0x007a1200

08001940 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e28d      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8083 	beq.w	8001a66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001960:	4b94      	ldr	r3, [pc, #592]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b04      	cmp	r3, #4
 800196a:	d019      	beq.n	80019a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800196c:	4b91      	ldr	r3, [pc, #580]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001974:	2b08      	cmp	r3, #8
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001978:	4b8e      	ldr	r3, [pc, #568]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001984:	d00c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001986:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d112      	bne.n	80019b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800199e:	d10b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d05b      	beq.n	8001a64 <HAL_RCC_OscConfig+0x124>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d157      	bne.n	8001a64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e25a      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d106      	bne.n	80019d0 <HAL_RCC_OscConfig+0x90>
 80019c2:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7b      	ldr	r2, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e01d      	b.n	8001a0c <HAL_RCC_OscConfig+0xcc>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0xb4>
 80019da:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a75      	ldr	r2, [pc, #468]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xcc>
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6e      	ldr	r2, [pc, #440]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 80019fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6b      	ldr	r2, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff f980 	bl	8000d18 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f97c 	bl	8000d18 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e21f      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xdc>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f96c 	bl	8000d18 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f968 	bl	8000d18 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e20b      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x104>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06f      	beq.n	8001b52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a72:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d017      	beq.n	8001aae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a7e:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x186>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1d3      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4937      	ldr	r1, [pc, #220]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e03a      	b.n	8001b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <HAL_RCC_OscConfig+0x278>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff f915 	bl	8000d18 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff f911 	bl	8000d18 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e1b4      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4925      	ldr	r1, [pc, #148]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCC_OscConfig+0x278>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f8f4 	bl	8000d18 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff f8f0 	bl	8000d18 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e193      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d036      	beq.n	8001bcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d016      	beq.n	8001b94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_RCC_OscConfig+0x27c>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f8d4 	bl	8000d18 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff f8d0 	bl	8000d18 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e173      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_OscConfig+0x274>)
 8001b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x234>
 8001b92:	e01b      	b.n	8001bcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_OscConfig+0x27c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f8bd 	bl	8000d18 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	e00e      	b.n	8001bc0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff f8b9 	bl	8000d18 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d907      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e15c      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	42470000 	.word	0x42470000
 8001bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc0:	4b8a      	ldr	r3, [pc, #552]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ea      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 8097 	beq.w	8001d08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bde:	4b83      	ldr	r3, [pc, #524]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10f      	bne.n	8001c0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4b7f      	ldr	r3, [pc, #508]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a7e      	ldr	r2, [pc, #504]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b7c      	ldr	r3, [pc, #496]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c06:	2301      	movs	r3, #1
 8001c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0a:	4b79      	ldr	r3, [pc, #484]	; (8001df0 <HAL_RCC_OscConfig+0x4b0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d118      	bne.n	8001c48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c16:	4b76      	ldr	r3, [pc, #472]	; (8001df0 <HAL_RCC_OscConfig+0x4b0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a75      	ldr	r2, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x4b0>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f879 	bl	8000d18 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2a:	f7ff f875 	bl	8000d18 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e118      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	4b6c      	ldr	r3, [pc, #432]	; (8001df0 <HAL_RCC_OscConfig+0x4b0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x31e>
 8001c50:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	4a65      	ldr	r2, [pc, #404]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5c:	e01c      	b.n	8001c98 <HAL_RCC_OscConfig+0x358>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x340>
 8001c66:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a60      	ldr	r2, [pc, #384]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70
 8001c72:	4b5e      	ldr	r3, [pc, #376]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0x358>
 8001c80:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a59      	ldr	r2, [pc, #356]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	4b57      	ldr	r3, [pc, #348]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a56      	ldr	r2, [pc, #344]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	f023 0304 	bic.w	r3, r3, #4
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d015      	beq.n	8001ccc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f83a 	bl	8000d18 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f836 	bl	8000d18 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0d7      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ee      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x368>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f824 	bl	8000d18 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f820 	bl	8000d18 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0c1      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cea:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ee      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfc:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	4a3a      	ldr	r2, [pc, #232]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80ad 	beq.w	8001e6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d060      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d145      	bne.n	8001db2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_RCC_OscConfig+0x4b4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7fe fff4 	bl	8000d18 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe fff0 	bl	8000d18 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e093      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	041b      	lsls	r3, r3, #16
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	061b      	lsls	r3, r3, #24
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	071b      	lsls	r3, r3, #28
 8001d7e:	491b      	ldr	r1, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x4b4>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7fe ffc5 	bl	8000d18 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe ffc1 	bl	8000d18 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e064      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x452>
 8001db0:	e05c      	b.n	8001e6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_OscConfig+0x4b4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7fe ffae 	bl	8000d18 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe ffaa 	bl	8000d18 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e04d      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x480>
 8001dde:	e045      	b.n	8001e6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e040      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001df8:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_RCC_OscConfig+0x538>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d030      	beq.n	8001e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d129      	bne.n	8001e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d122      	bne.n	8001e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d119      	bne.n	8001e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	3b01      	subs	r3, #1
 8001e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10f      	bne.n	8001e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e041      	b.n	8001f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f839 	bl	8001f1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f000 f9d8 	bl	8002270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d001      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e04e      	b.n	8001fe6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d022      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f72:	d01d      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d018      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_TIM_Base_Start_IT+0xcc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00e      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	; (8002008 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d004      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x80>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a18      	ldr	r2, [pc, #96]	; (800200c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d111      	bne.n	8001fd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d010      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd2:	e007      	b.n	8001fe4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	40000800 	.word	0x40000800
 8002000:	40000c00 	.word	0x40000c00
 8002004:	40010400 	.word	0x40010400
 8002008:	40014000 	.word	0x40014000
 800200c:	40001800 	.word	0x40001800

08002010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d122      	bne.n	800206c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b02      	cmp	r3, #2
 8002032:	d11b      	bne.n	800206c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0202 	mvn.w	r2, #2
 800203c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8ee 	bl	8002234 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8e0 	bl	8002220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f8f1 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b04      	cmp	r3, #4
 8002078:	d122      	bne.n	80020c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d11b      	bne.n	80020c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0204 	mvn.w	r2, #4
 8002090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8c4 	bl	8002234 <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f8b6 	bl	8002220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8c7 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0208 	mvn.w	r2, #8
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2204      	movs	r2, #4
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f89a 	bl	8002234 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f88c 	bl	8002220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f89d 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b10      	cmp	r3, #16
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b10      	cmp	r3, #16
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0210 	mvn.w	r2, #16
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2208      	movs	r2, #8
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f870 	bl	8002234 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f862 	bl	8002220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f873 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0201 	mvn.w	r2, #1
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fc8e 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b80      	cmp	r3, #128	; 0x80
 80021a0:	d10e      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d107      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f902 	bl	80023c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f838 	bl	800225c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b20      	cmp	r3, #32
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0220 	mvn.w	r2, #32
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8cc 	bl	80023b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a40      	ldr	r2, [pc, #256]	; (8002384 <TIM_Base_SetConfig+0x114>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d013      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228e:	d00f      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3d      	ldr	r2, [pc, #244]	; (8002388 <TIM_Base_SetConfig+0x118>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00b      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3c      	ldr	r2, [pc, #240]	; (800238c <TIM_Base_SetConfig+0x11c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <TIM_Base_SetConfig+0x120>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a3a      	ldr	r2, [pc, #232]	; (8002394 <TIM_Base_SetConfig+0x124>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d108      	bne.n	80022c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2f      	ldr	r2, [pc, #188]	; (8002384 <TIM_Base_SetConfig+0x114>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02b      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d027      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2c      	ldr	r2, [pc, #176]	; (8002388 <TIM_Base_SetConfig+0x118>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d023      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <TIM_Base_SetConfig+0x11c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01f      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <TIM_Base_SetConfig+0x120>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01b      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a29      	ldr	r2, [pc, #164]	; (8002394 <TIM_Base_SetConfig+0x124>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d017      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a28      	ldr	r2, [pc, #160]	; (8002398 <TIM_Base_SetConfig+0x128>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a27      	ldr	r2, [pc, #156]	; (800239c <TIM_Base_SetConfig+0x12c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00f      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <TIM_Base_SetConfig+0x130>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00b      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <TIM_Base_SetConfig+0x134>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <TIM_Base_SetConfig+0x138>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d003      	beq.n	8002322 <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <TIM_Base_SetConfig+0x13c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d108      	bne.n	8002334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <TIM_Base_SetConfig+0x114>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0xf8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <TIM_Base_SetConfig+0x124>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	615a      	str	r2, [r3, #20]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40010000 	.word	0x40010000
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800
 8002390:	40000c00 	.word	0x40000c00
 8002394:	40010400 	.word	0x40010400
 8002398:	40014000 	.word	0x40014000
 800239c:	40014400 	.word	0x40014400
 80023a0:	40014800 	.word	0x40014800
 80023a4:	40001800 	.word	0x40001800
 80023a8:	40001c00 	.word	0x40001c00
 80023ac:	40002000 	.word	0x40002000

080023b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 0208 	add.w	r2, r3, #8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f103 0208 	add.w	r2, r3, #8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f103 0208 	add.w	r2, r3, #8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	601a      	str	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d103      	bne.n	800249a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e00c      	b.n	80024b4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3308      	adds	r3, #8
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e002      	b.n	80024a8 <vListInsert+0x2e>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d2f6      	bcs.n	80024a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	601a      	str	r2, [r3, #0]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6892      	ldr	r2, [r2, #8]
 8002502:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6852      	ldr	r2, [r2, #4]
 800250c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	d103      	bne.n	8002520 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af04      	add	r7, sp, #16
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4618      	mov	r0, r3
 8002556:	f001 f851 	bl	80035fc <pvPortMalloc>
 800255a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00e      	beq.n	8002580 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002562:	2058      	movs	r0, #88	; 0x58
 8002564:	f001 f84a 	bl	80035fc <pvPortMalloc>
 8002568:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
 8002576:	e005      	b.n	8002584 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f001 f8ed 	bl	8003758 <vPortFree>
 800257e:	e001      	b.n	8002584 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d013      	beq.n	80025b2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	2300      	movs	r3, #0
 800258e:	9303      	str	r3, [sp, #12]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f80e 	bl	80025c2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80025a6:	69f8      	ldr	r0, [r7, #28]
 80025a8:	f000 f8a2 	bl	80026f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	e002      	b.n	80025b8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80025b8:	69bb      	ldr	r3, [r7, #24]
    }
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b088      	sub	sp, #32
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	461a      	mov	r2, r3
 80025da:	21a5      	movs	r1, #165	; 0xa5
 80025dc:	f003 fdbe 	bl	800615c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025ea:	3b01      	subs	r3, #1
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f023 0307 	bic.w	r3, r3, #7
 80025f8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	617b      	str	r3, [r7, #20]
    }
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01f      	beq.n	8002660 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e012      	b.n	800264c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	7819      	ldrb	r1, [r3, #0]
 800262e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	3334      	adds	r3, #52	; 0x34
 8002636:	460a      	mov	r2, r1
 8002638:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d006      	beq.n	8002654 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b09      	cmp	r3, #9
 8002650:	d9e9      	bls.n	8002626 <prvInitialiseNewTask+0x64>
 8002652:	e000      	b.n	8002656 <prvInitialiseNewTask+0x94>
            {
                break;
 8002654:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800265e:	e003      	b.n	8002668 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	2b04      	cmp	r3, #4
 800266c:	d901      	bls.n	8002672 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800266e:	2304      	movs	r3, #4
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	2200      	movs	r2, #0
 8002682:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	3304      	adds	r3, #4
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fec5 	bl	8002418 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	3318      	adds	r3, #24
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fec0 	bl	8002418 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	f1c3 0205 	rsb	r2, r3, #5
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	3350      	adds	r3, #80	; 0x50
 80026b2:	2204      	movs	r2, #4
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fd50 	bl	800615c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	3354      	adds	r3, #84	; 0x54
 80026c0:	2201      	movs	r2, #1
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fd49 	bl	800615c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	69b8      	ldr	r0, [r7, #24]
 80026d0:	f000 fd38 	bl	8003144 <pxPortInitialiseStack>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80026f8:	f000 fe56 	bl	80033a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80026fc:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <prvAddNewTaskToReadyList+0xfc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a3a      	ldr	r2, [pc, #232]	; (80027ec <prvAddNewTaskToReadyList+0xfc>)
 8002704:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002706:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <prvAddNewTaskToReadyList+0x100>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800270e:	4a38      	ldr	r2, [pc, #224]	; (80027f0 <prvAddNewTaskToReadyList+0x100>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002714:	4b35      	ldr	r3, [pc, #212]	; (80027ec <prvAddNewTaskToReadyList+0xfc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d110      	bne.n	800273e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800271c:	f000 fb78 	bl	8002e10 <prvInitialiseTaskLists>
 8002720:	e00d      	b.n	800273e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002722:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <prvAddNewTaskToReadyList+0x104>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <prvAddNewTaskToReadyList+0x100>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	429a      	cmp	r2, r3
 8002736:	d802      	bhi.n	800273e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002738:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <prvAddNewTaskToReadyList+0x100>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800273e:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <prvAddNewTaskToReadyList+0x108>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <prvAddNewTaskToReadyList+0x108>)
 8002746:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <prvAddNewTaskToReadyList+0x108>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <prvAddNewTaskToReadyList+0x94>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fa0f 	bl	8005b7c <SEGGER_SYSVIEW_OnTaskCreate>
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	461d      	mov	r5, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	461c      	mov	r4, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	1ae3      	subs	r3, r4, r3
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	462b      	mov	r3, r5
 8002780:	f001 f8f6 	bl	8003970 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	f003 fa7c 	bl	8005c84 <SEGGER_SYSVIEW_OnTaskStartReady>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2201      	movs	r2, #1
 8002792:	409a      	lsls	r2, r3
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <prvAddNewTaskToReadyList+0x10c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <prvAddNewTaskToReadyList+0x10c>)
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <prvAddNewTaskToReadyList+0x110>)
 80027ac:	441a      	add	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	4610      	mov	r0, r2
 80027b6:	f7ff fe3c 	bl	8002432 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80027ba:	f000 fe25 	bl	8003408 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <prvAddNewTaskToReadyList+0x104>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00e      	beq.n	80027e4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <prvAddNewTaskToReadyList+0x100>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d207      	bcs.n	80027e4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <prvAddNewTaskToReadyList+0x114>)
 80027d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdb0      	pop	{r4, r5, r7, pc}
 80027ec:	20000118 	.word	0x20000118
 80027f0:	20000040 	.word	0x20000040
 80027f4:	20000124 	.word	0x20000124
 80027f8:	20000134 	.word	0x20000134
 80027fc:	20000120 	.word	0x20000120
 8002800:	20000044 	.word	0x20000044
 8002804:	e000ed04 	.word	0xe000ed04

08002808 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002810:	f000 fdca 	bl	80033a8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <vTaskDelete+0x18>
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <vTaskDelete+0x12c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e000      	b.n	8002822 <vTaskDelete+0x1a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3304      	adds	r3, #4
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fe5f 	bl	80024ec <uxListRemove>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d115      	bne.n	8002860 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002838:	493f      	ldr	r1, [pc, #252]	; (8002938 <vTaskDelete+0x130>)
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <vTaskDelete+0x58>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	2201      	movs	r2, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43da      	mvns	r2, r3
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <vTaskDelete+0x134>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4013      	ands	r3, r2
 800285c:	4a37      	ldr	r2, [pc, #220]	; (800293c <vTaskDelete+0x134>)
 800285e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3318      	adds	r3, #24
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fe3d 	bl	80024ec <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002872:	4b33      	ldr	r3, [pc, #204]	; (8002940 <vTaskDelete+0x138>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	4a31      	ldr	r2, [pc, #196]	; (8002940 <vTaskDelete+0x138>)
 800287a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800287c:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <vTaskDelete+0x12c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	d118      	bne.n	80028b8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3304      	adds	r3, #4
 800288a:	4619      	mov	r1, r3
 800288c:	482d      	ldr	r0, [pc, #180]	; (8002944 <vTaskDelete+0x13c>)
 800288e:	f7ff fdd0 	bl	8002432 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <vTaskDelete+0x140>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <vTaskDelete+0x140>)
 800289a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fa92 	bl	8005dc8 <SEGGER_SYSVIEW_ShrinkId>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4619      	mov	r1, r3
 80028a8:	2022      	movs	r0, #34	; 0x22
 80028aa:	f002 fcdf 	bl	800526c <SEGGER_SYSVIEW_RecordU32>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 f8c5 	bl	8003a40 <SYSVIEW_DeleteTask>
 80028b6:	e016      	b.n	80028e6 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <vTaskDelete+0x144>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3b01      	subs	r3, #1
 80028be:	4a23      	ldr	r2, [pc, #140]	; (800294c <vTaskDelete+0x144>)
 80028c0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fa7f 	bl	8005dc8 <SEGGER_SYSVIEW_ShrinkId>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4619      	mov	r1, r3
 80028ce:	2022      	movs	r0, #34	; 0x22
 80028d0:	f002 fccc 	bl	800526c <SEGGER_SYSVIEW_RecordU32>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 f8b2 	bl	8003a40 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fb05 	bl	8002eec <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80028e2:	f000 fb13 	bl	8002f0c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80028e6:	f000 fd8f 	bl	8003408 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <vTaskDelete+0x148>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01b      	beq.n	800292a <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <vTaskDelete+0x12c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d116      	bne.n	800292a <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <vTaskDelete+0x14c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <vTaskDelete+0x112>
        __asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	60bb      	str	r3, [r7, #8]
    }
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <vTaskDelete+0x150>)
 800291c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000040 	.word	0x20000040
 8002938:	20000044 	.word	0x20000044
 800293c:	20000120 	.word	0x20000120
 8002940:	20000134 	.word	0x20000134
 8002944:	200000ec 	.word	0x200000ec
 8002948:	20000100 	.word	0x20000100
 800294c:	20000118 	.word	0x20000118
 8002950:	20000124 	.word	0x20000124
 8002954:	20000140 	.word	0x20000140
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002962:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <vTaskStartScheduler+0x98>)
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2300      	movs	r3, #0
 800296c:	2282      	movs	r2, #130	; 0x82
 800296e:	4922      	ldr	r1, [pc, #136]	; (80029f8 <vTaskStartScheduler+0x9c>)
 8002970:	4822      	ldr	r0, [pc, #136]	; (80029fc <vTaskStartScheduler+0xa0>)
 8002972:	f7ff fde5 	bl	8002540 <xTaskCreate>
 8002976:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d124      	bne.n	80029c8 <vTaskStartScheduler+0x6c>
        __asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	60bb      	str	r3, [r7, #8]
    }
 8002990:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <vTaskStartScheduler+0xa4>)
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <vTaskStartScheduler+0xa8>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <vTaskStartScheduler+0xac>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <vTaskStartScheduler+0xb0>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <vTaskStartScheduler+0x98>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d102      	bne.n	80029b8 <vTaskStartScheduler+0x5c>
 80029b2:	f003 f8c7 	bl	8005b44 <SEGGER_SYSVIEW_OnIdle>
 80029b6:	e004      	b.n	80029c2 <vTaskStartScheduler+0x66>
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <vTaskStartScheduler+0xb0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 f91f 	bl	8005c00 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80029c2:	f000 fc4f 	bl	8003264 <xPortStartScheduler>
 80029c6:	e00e      	b.n	80029e6 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d10a      	bne.n	80029e6 <vTaskStartScheduler+0x8a>
        __asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	607b      	str	r3, [r7, #4]
    }
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <vTaskStartScheduler+0xb4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000013c 	.word	0x2000013c
 80029f8:	08006270 	.word	0x08006270
 80029fc:	08002de1 	.word	0x08002de1
 8002a00:	20000138 	.word	0x20000138
 8002a04:	20000124 	.word	0x20000124
 8002a08:	2000011c 	.word	0x2000011c
 8002a0c:	20000040 	.word	0x20000040
 8002a10:	2000000c 	.word	0x2000000c

08002a14 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <vTaskSuspendAll+0x18>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <vTaskSuspendAll+0x18>)
 8002a20:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	20000140 	.word	0x20000140

08002a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a3e:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <xTaskResumeAll+0x11c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <xTaskResumeAll+0x2c>
        __asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	603b      	str	r3, [r7, #0]
    }
 8002a58:	bf00      	nop
 8002a5a:	e7fe      	b.n	8002a5a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a5c:	f000 fca4 	bl	80033a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a60:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <xTaskResumeAll+0x11c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	4a39      	ldr	r2, [pc, #228]	; (8002b4c <xTaskResumeAll+0x11c>)
 8002a68:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <xTaskResumeAll+0x11c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d165      	bne.n	8002b3e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <xTaskResumeAll+0x120>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d061      	beq.n	8002b3e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a7a:	e032      	b.n	8002ae2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a7c:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <xTaskResumeAll+0x124>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3318      	adds	r3, #24
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fd2f 	bl	80024ec <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3304      	adds	r3, #4
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fd2a 	bl	80024ec <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 f8f2 	bl	8005c84 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <xTaskResumeAll+0x128>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <xTaskResumeAll+0x128>)
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <xTaskResumeAll+0x12c>)
 8002ac0:	441a      	add	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4610      	mov	r0, r2
 8002aca:	f7ff fcb2 	bl	8002432 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <xTaskResumeAll+0x130>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d302      	bcc.n	8002ae2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <xTaskResumeAll+0x134>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <xTaskResumeAll+0x124>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1c8      	bne.n	8002a7c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002af0:	f000 fa0c 	bl	8002f0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002af4:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <xTaskResumeAll+0x138>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d010      	beq.n	8002b22 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b00:	f000 f848 	bl	8002b94 <xTaskIncrementTick>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <xTaskResumeAll+0x134>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f1      	bne.n	8002b00 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <xTaskResumeAll+0x138>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <xTaskResumeAll+0x134>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <xTaskResumeAll+0x13c>)
 8002b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b3e:	f000 fc63 	bl	8003408 <vPortExitCritical>

    return xAlreadyYielded;
 8002b42:	68bb      	ldr	r3, [r7, #8]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000140 	.word	0x20000140
 8002b50:	20000118 	.word	0x20000118
 8002b54:	200000d8 	.word	0x200000d8
 8002b58:	20000120 	.word	0x20000120
 8002b5c:	20000044 	.word	0x20000044
 8002b60:	20000040 	.word	0x20000040
 8002b64:	2000012c 	.word	0x2000012c
 8002b68:	20000128 	.word	0x20000128
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b76:	f000 fd01 	bl	800357c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <xTaskGetTickCountFromISR+0x20>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b84:	683b      	ldr	r3, [r7, #0]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2000011c 	.word	0x2000011c

08002b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b9e:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <xTaskIncrementTick+0x14c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 8092 	bne.w	8002ccc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ba8:	4b4e      	ldr	r3, [pc, #312]	; (8002ce4 <xTaskIncrementTick+0x150>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	; (8002ce4 <xTaskIncrementTick+0x150>)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d120      	bne.n	8002bfe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <xTaskIncrementTick+0x154>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <xTaskIncrementTick+0x48>
        __asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	603b      	str	r3, [r7, #0]
    }
 8002bd8:	bf00      	nop
 8002bda:	e7fe      	b.n	8002bda <xTaskIncrementTick+0x46>
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <xTaskIncrementTick+0x154>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <xTaskIncrementTick+0x158>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <xTaskIncrementTick+0x154>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4a40      	ldr	r2, [pc, #256]	; (8002cec <xTaskIncrementTick+0x158>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <xTaskIncrementTick+0x15c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a3e      	ldr	r2, [pc, #248]	; (8002cf0 <xTaskIncrementTick+0x15c>)
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	f000 f987 	bl	8002f0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <xTaskIncrementTick+0x160>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d34c      	bcc.n	8002ca2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c08:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <xTaskIncrementTick+0x154>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c12:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <xTaskIncrementTick+0x160>)
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	601a      	str	r2, [r3, #0]
                    break;
 8002c1a:	e042      	b.n	8002ca2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1c:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <xTaskIncrementTick+0x154>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d203      	bcs.n	8002c3c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c34:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <xTaskIncrementTick+0x160>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c3a:	e032      	b.n	8002ca2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fc53 	bl	80024ec <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3318      	adds	r3, #24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fc4a 	bl	80024ec <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 f812 	bl	8005c84 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <xTaskIncrementTick+0x164>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <xTaskIncrementTick+0x164>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <xTaskIncrementTick+0x168>)
 8002c80:	441a      	add	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3304      	adds	r3, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f7ff fbd2 	bl	8002432 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <xTaskIncrementTick+0x16c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3b5      	bcc.n	8002c08 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ca0:	e7b2      	b.n	8002c08 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <xTaskIncrementTick+0x16c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca8:	4914      	ldr	r1, [pc, #80]	; (8002cfc <xTaskIncrementTick+0x168>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d901      	bls.n	8002cbe <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <xTaskIncrementTick+0x170>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e004      	b.n	8002cd6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <xTaskIncrementTick+0x174>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <xTaskIncrementTick+0x174>)
 8002cd4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002cd6:	697b      	ldr	r3, [r7, #20]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000140 	.word	0x20000140
 8002ce4:	2000011c 	.word	0x2000011c
 8002ce8:	200000d0 	.word	0x200000d0
 8002cec:	200000d4 	.word	0x200000d4
 8002cf0:	20000130 	.word	0x20000130
 8002cf4:	20000138 	.word	0x20000138
 8002cf8:	20000120 	.word	0x20000120
 8002cfc:	20000044 	.word	0x20000044
 8002d00:	20000040 	.word	0x20000040
 8002d04:	2000012c 	.word	0x2000012c
 8002d08:	20000128 	.word	0x20000128

08002d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d12:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <vTaskSwitchContext+0xbc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <vTaskSwitchContext+0xc0>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d20:	e04d      	b.n	8002dbe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <vTaskSwitchContext+0xc0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <vTaskSwitchContext+0xc4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d36:	7afb      	ldrb	r3, [r7, #11]
 8002d38:	f1c3 031f 	rsb	r3, r3, #31
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	4925      	ldr	r1, [pc, #148]	; (8002dd4 <vTaskSwitchContext+0xc8>)
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	607b      	str	r3, [r7, #4]
    }
 8002d64:	bf00      	nop
 8002d66:	e7fe      	b.n	8002d66 <vTaskSwitchContext+0x5a>
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <vTaskSwitchContext+0xc8>)
 8002d74:	4413      	add	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	3308      	adds	r3, #8
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d104      	bne.n	8002d98 <vTaskSwitchContext+0x8c>
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <vTaskSwitchContext+0xcc>)
 8002da0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <vTaskSwitchContext+0xcc>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <vTaskSwitchContext+0xd0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d102      	bne.n	8002db4 <vTaskSwitchContext+0xa8>
 8002dae:	f002 fec9 	bl	8005b44 <SEGGER_SYSVIEW_OnIdle>
}
 8002db2:	e004      	b.n	8002dbe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <vTaskSwitchContext+0xcc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 ff21 	bl	8005c00 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000140 	.word	0x20000140
 8002dcc:	2000012c 	.word	0x2000012c
 8002dd0:	20000120 	.word	0x20000120
 8002dd4:	20000044 	.word	0x20000044
 8002dd8:	20000040 	.word	0x20000040
 8002ddc:	2000013c 	.word	0x2000013c

08002de0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002de8:	f000 f852 	bl	8002e90 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <prvIdleTask+0x28>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d9f9      	bls.n	8002de8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <prvIdleTask+0x2c>)
 8002df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e04:	e7f0      	b.n	8002de8 <prvIdleTask+0x8>
 8002e06:	bf00      	nop
 8002e08:	20000044 	.word	0x20000044
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	e00c      	b.n	8002e36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <prvInitialiseTaskLists+0x60>)
 8002e28:	4413      	add	r3, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fad4 	bl	80023d8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3301      	adds	r3, #1
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d9ef      	bls.n	8002e1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e3c:	480d      	ldr	r0, [pc, #52]	; (8002e74 <prvInitialiseTaskLists+0x64>)
 8002e3e:	f7ff facb 	bl	80023d8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e42:	480d      	ldr	r0, [pc, #52]	; (8002e78 <prvInitialiseTaskLists+0x68>)
 8002e44:	f7ff fac8 	bl	80023d8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e48:	480c      	ldr	r0, [pc, #48]	; (8002e7c <prvInitialiseTaskLists+0x6c>)
 8002e4a:	f7ff fac5 	bl	80023d8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002e4e:	480c      	ldr	r0, [pc, #48]	; (8002e80 <prvInitialiseTaskLists+0x70>)
 8002e50:	f7ff fac2 	bl	80023d8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002e54:	480b      	ldr	r0, [pc, #44]	; (8002e84 <prvInitialiseTaskLists+0x74>)
 8002e56:	f7ff fabf 	bl	80023d8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <prvInitialiseTaskLists+0x78>)
 8002e5c:	4a05      	ldr	r2, [pc, #20]	; (8002e74 <prvInitialiseTaskLists+0x64>)
 8002e5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <prvInitialiseTaskLists+0x7c>)
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <prvInitialiseTaskLists+0x68>)
 8002e64:	601a      	str	r2, [r3, #0]
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000044 	.word	0x20000044
 8002e74:	200000a8 	.word	0x200000a8
 8002e78:	200000bc 	.word	0x200000bc
 8002e7c:	200000d8 	.word	0x200000d8
 8002e80:	200000ec 	.word	0x200000ec
 8002e84:	20000104 	.word	0x20000104
 8002e88:	200000d0 	.word	0x200000d0
 8002e8c:	200000d4 	.word	0x200000d4

08002e90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e96:	e019      	b.n	8002ecc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002e98:	f000 fa86 	bl	80033a8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <prvCheckTasksWaitingTermination+0x50>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fb1f 	bl	80024ec <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <prvCheckTasksWaitingTermination+0x54>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <prvCheckTasksWaitingTermination+0x54>)
 8002eb6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <prvCheckTasksWaitingTermination+0x58>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <prvCheckTasksWaitingTermination+0x58>)
 8002ec0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ec2:	f000 faa1 	bl	8003408 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f810 	bl	8002eec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <prvCheckTasksWaitingTermination+0x58>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e1      	bne.n	8002e98 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200000ec 	.word	0x200000ec
 8002ee4:	20000118 	.word	0x20000118
 8002ee8:	20000100 	.word	0x20000100

08002eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fc2d 	bl	8003758 <vPortFree>
                vPortFree( pxTCB );
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fc2a 	bl	8003758 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <prvResetNextTaskUnblockTime+0x30>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <prvResetNextTaskUnblockTime+0x34>)
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f22:	e005      	b.n	8002f30 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <prvResetNextTaskUnblockTime+0x30>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <prvResetNextTaskUnblockTime+0x34>)
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	200000d0 	.word	0x200000d0
 8002f40:	20000138 	.word	0x20000138

08002f44 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	613b      	str	r3, [r7, #16]
    }
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002f6e:	f000 fa1b 	bl	80033a8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002f72:	4b36      	ldr	r3, [pc, #216]	; (800304c <xTaskGenericNotifyWait+0x108>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3354      	adds	r3, #84	; 0x54
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d022      	beq.n	8002fca <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <xTaskGenericNotifyWait+0x108>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	3214      	adds	r2, #20
 8002f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	43d2      	mvns	r2, r2
 8002f94:	4011      	ands	r1, r2
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	3214      	adds	r2, #20
 8002f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <xTaskGenericNotifyWait+0x108>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3354      	adds	r3, #84	; 0x54
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	6a38      	ldr	r0, [r7, #32]
 8002fb6:	f000 f84d 	bl	8003054 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <xTaskGenericNotifyWait+0x10c>)
 8002fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002fca:	f000 fa1d 	bl	8003408 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002fce:	f000 f9eb 	bl	80033a8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	2040      	movs	r0, #64	; 0x40
 8002fe0:	f002 f9da 	bl	8005398 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <xTaskGenericNotifyWait+0x108>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	3214      	adds	r2, #20
 8002ff2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <xTaskGenericNotifyWait+0x108>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	3354      	adds	r3, #84	; 0x54
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d002      	beq.n	8003012 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e00e      	b.n	8003030 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <xTaskGenericNotifyWait+0x108>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	3214      	adds	r2, #20
 800301a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	43d2      	mvns	r2, r2
 8003022:	4011      	ands	r1, r2
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	3214      	adds	r2, #20
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800302c:	2301      	movs	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <xTaskGenericNotifyWait+0x108>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	3354      	adds	r3, #84	; 0x54
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800303e:	f000 f9e3 	bl	8003408 <vPortExitCritical>

        return xReturn;
 8003042:	697b      	ldr	r3, [r7, #20]
    }
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000040 	.word	0x20000040
 8003050:	e000ed04 	.word	0xe000ed04

08003054 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800305e:	4b32      	ldr	r3, [pc, #200]	; (8003128 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3304      	adds	r3, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fa3e 	bl	80024ec <uxListRemove>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	2201      	movs	r2, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4013      	ands	r3, r2
 800308a:	4a29      	ldr	r2, [pc, #164]	; (8003130 <prvAddCurrentTaskToDelayedList+0xdc>)
 800308c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d110      	bne.n	80030b8 <prvAddCurrentTaskToDelayedList+0x64>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800309c:	4b23      	ldr	r3, [pc, #140]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	211b      	movs	r1, #27
 80030a2:	4618      	mov	r0, r3
 80030a4:	f002 fe30 	bl	8005d08 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4820      	ldr	r0, [pc, #128]	; (8003134 <prvAddCurrentTaskToDelayedList+0xe0>)
 80030b2:	f7ff f9be 	bl	8002432 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80030b6:	e032      	b.n	800311e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d20f      	bcs.n	80030f0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80030d0:	4b16      	ldr	r3, [pc, #88]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2104      	movs	r1, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fe16 	bl	8005d08 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <prvAddCurrentTaskToDelayedList+0xe4>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3304      	adds	r3, #4
 80030e6:	4619      	mov	r1, r3
 80030e8:	4610      	mov	r0, r2
 80030ea:	f7ff f9c6 	bl	800247a <vListInsert>
}
 80030ee:	e016      	b.n	800311e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2104      	movs	r1, #4
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fe06 	bl	8005d08 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <prvAddCurrentTaskToDelayedList+0xe8>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3304      	adds	r3, #4
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f7ff f9b6 	bl	800247a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <prvAddCurrentTaskToDelayedList+0xec>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	d202      	bcs.n	800311e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <prvAddCurrentTaskToDelayedList+0xec>)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	6013      	str	r3, [r2, #0]
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000011c 	.word	0x2000011c
 800312c:	20000040 	.word	0x20000040
 8003130:	20000120 	.word	0x20000120
 8003134:	20000104 	.word	0x20000104
 8003138:	200000d4 	.word	0x200000d4
 800313c:	200000d0 	.word	0x200000d0
 8003140:	20000138 	.word	0x20000138

08003144 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3b04      	subs	r3, #4
 8003154:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800315c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3b04      	subs	r3, #4
 8003162:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f023 0201 	bic.w	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3b04      	subs	r3, #4
 8003172:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003174:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <pxPortInitialiseStack+0x64>)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3b14      	subs	r3, #20
 800317e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3b04      	subs	r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f06f 0202 	mvn.w	r2, #2
 8003192:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3b20      	subs	r3, #32
 8003198:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	080031ad 	.word	0x080031ad

080031ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <prvTaskExitError+0x54>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d00a      	beq.n	80031d6 <prvTaskExitError+0x2a>
        __asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	60fb      	str	r3, [r7, #12]
    }
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <prvTaskExitError+0x28>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	60bb      	str	r3, [r7, #8]
    }
 80031e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80031ea:	bf00      	nop
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0fc      	beq.n	80031ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80031f2:	bf00      	nop
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20000010 	.word	0x20000010
	...

08003210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <pxCurrentTCBConst2>)
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	6808      	ldr	r0, [r1, #0]
 8003216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800321a:	f380 8809 	msr	PSP, r0
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f04f 0000 	mov.w	r0, #0
 8003226:	f380 8811 	msr	BASEPRI, r0
 800322a:	4770      	bx	lr
 800322c:	f3af 8000 	nop.w

08003230 <pxCurrentTCBConst2>:
 8003230:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop

08003238 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003238:	4808      	ldr	r0, [pc, #32]	; (800325c <prvPortStartFirstTask+0x24>)
 800323a:	6800      	ldr	r0, [r0, #0]
 800323c:	6800      	ldr	r0, [r0, #0]
 800323e:	f380 8808 	msr	MSP, r0
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f380 8814 	msr	CONTROL, r0
 800324a:	b662      	cpsie	i
 800324c:	b661      	cpsie	f
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	df00      	svc	0
 8003258:	bf00      	nop
 800325a:	0000      	.short	0x0000
 800325c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop

08003264 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800326a:	4b46      	ldr	r3, [pc, #280]	; (8003384 <xPortStartScheduler+0x120>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a46      	ldr	r2, [pc, #280]	; (8003388 <xPortStartScheduler+0x124>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d10a      	bne.n	800328a <xPortStartScheduler+0x26>
        __asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	613b      	str	r3, [r7, #16]
    }
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800328a:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <xPortStartScheduler+0x120>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a3f      	ldr	r2, [pc, #252]	; (800338c <xPortStartScheduler+0x128>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d10a      	bne.n	80032aa <xPortStartScheduler+0x46>
        __asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	60fb      	str	r3, [r7, #12]
    }
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <xPortStartScheduler+0x12c>)
 80032ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	22ff      	movs	r2, #255	; 0xff
 80032ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4b31      	ldr	r3, [pc, #196]	; (8003394 <xPortStartScheduler+0x130>)
 80032d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032d2:	4b31      	ldr	r3, [pc, #196]	; (8003398 <xPortStartScheduler+0x134>)
 80032d4:	2207      	movs	r2, #7
 80032d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032d8:	e009      	b.n	80032ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <xPortStartScheduler+0x134>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3b01      	subs	r3, #1
 80032e0:	4a2d      	ldr	r2, [pc, #180]	; (8003398 <xPortStartScheduler+0x134>)
 80032e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d0ef      	beq.n	80032da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80032fa:	4b27      	ldr	r3, [pc, #156]	; (8003398 <xPortStartScheduler+0x134>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1c3 0307 	rsb	r3, r3, #7
 8003302:	2b04      	cmp	r3, #4
 8003304:	d00a      	beq.n	800331c <xPortStartScheduler+0xb8>
        __asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	60bb      	str	r3, [r7, #8]
    }
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800331c:	4b1e      	ldr	r3, [pc, #120]	; (8003398 <xPortStartScheduler+0x134>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <xPortStartScheduler+0x134>)
 8003324:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <xPortStartScheduler+0x134>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800332e:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <xPortStartScheduler+0x134>)
 8003330:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <xPortStartScheduler+0x138>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a17      	ldr	r2, [pc, #92]	; (800339c <xPortStartScheduler+0x138>)
 8003340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003344:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <xPortStartScheduler+0x138>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a14      	ldr	r2, [pc, #80]	; (800339c <xPortStartScheduler+0x138>)
 800334c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003350:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003352:	f000 f8e3 	bl	800351c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <xPortStartScheduler+0x13c>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800335c:	f000 f902 	bl	8003564 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <xPortStartScheduler+0x140>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <xPortStartScheduler+0x140>)
 8003366:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800336a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800336c:	f7ff ff64 	bl	8003238 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003370:	f7ff fccc 	bl	8002d0c <vTaskSwitchContext>
    prvTaskExitError();
 8003374:	f7ff ff1a 	bl	80031ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00
 8003388:	410fc271 	.word	0x410fc271
 800338c:	410fc270 	.word	0x410fc270
 8003390:	e000e400 	.word	0xe000e400
 8003394:	20000144 	.word	0x20000144
 8003398:	20000148 	.word	0x20000148
 800339c:	e000ed20 	.word	0xe000ed20
 80033a0:	20000010 	.word	0x20000010
 80033a4:	e000ef34 	.word	0xe000ef34

080033a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
        __asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	607b      	str	r3, [r7, #4]
    }
 80033c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80033c2:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <vPortEnterCritical+0x58>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <vPortEnterCritical+0x58>)
 80033ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <vPortEnterCritical+0x58>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10f      	bne.n	80033f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <vPortEnterCritical+0x5c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	603b      	str	r3, [r7, #0]
    }
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <vPortEnterCritical+0x4a>
    }
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	20000010 	.word	0x20000010
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <vPortExitCritical+0x50>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <vPortExitCritical+0x24>
        __asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	607b      	str	r3, [r7, #4]
    }
 8003428:	bf00      	nop
 800342a:	e7fe      	b.n	800342a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <vPortExitCritical+0x50>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3b01      	subs	r3, #1
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <vPortExitCritical+0x50>)
 8003434:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <vPortExitCritical+0x50>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d105      	bne.n	800344a <vPortExitCritical+0x42>
 800343e:	2300      	movs	r3, #0
 8003440:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003448:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000010 	.word	0x20000010
 800345c:	00000000 	.word	0x00000000

08003460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003460:	f3ef 8009 	mrs	r0, PSP
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <pxCurrentTCBConst>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	f01e 0f10 	tst.w	lr, #16
 8003470:	bf08      	it	eq
 8003472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347a:	6010      	str	r0, [r2, #0]
 800347c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003484:	f380 8811 	msr	BASEPRI, r0
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f7ff fc3c 	bl	8002d0c <vTaskSwitchContext>
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f380 8811 	msr	BASEPRI, r0
 800349c:	bc09      	pop	{r0, r3}
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	6808      	ldr	r0, [r1, #0]
 80034a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a6:	f01e 0f10 	tst.w	lr, #16
 80034aa:	bf08      	it	eq
 80034ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034b0:	f380 8809 	msr	PSP, r0
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	f3af 8000 	nop.w

080034c0 <pxCurrentTCBConst>:
 80034c0:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop

080034c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
        __asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	607b      	str	r3, [r7, #4]
    }
 80034e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80034e2:	f002 fab5 	bl	8005a50 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80034e6:	f7ff fb55 	bl	8002b94 <xTaskIncrementTick>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80034f0:	f002 fb0c 	bl	8005b0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <SysTick_Handler+0x50>)
 80034f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e001      	b.n	8003502 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80034fe:	f002 fae9 	bl	8005ad4 <SEGGER_SYSVIEW_RecordExitISR>
 8003502:	2300      	movs	r3, #0
 8003504:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f383 8811 	msr	BASEPRI, r3
    }
 800350c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <vPortSetupTimerInterrupt+0x34>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <vPortSetupTimerInterrupt+0x38>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <vPortSetupTimerInterrupt+0x3c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0a      	ldr	r2, [pc, #40]	; (800355c <vPortSetupTimerInterrupt+0x40>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	4a09      	ldr	r2, [pc, #36]	; (8003560 <vPortSetupTimerInterrupt+0x44>)
 800353a:	3b01      	subs	r3, #1
 800353c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800353e:	4b04      	ldr	r3, [pc, #16]	; (8003550 <vPortSetupTimerInterrupt+0x34>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000e010 	.word	0xe000e010
 8003554:	e000e018 	.word	0xe000e018
 8003558:	20000000 	.word	0x20000000
 800355c:	10624dd3 	.word	0x10624dd3
 8003560:	e000e014 	.word	0xe000e014

08003564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003574 <vPortEnableVFP+0x10>
 8003568:	6801      	ldr	r1, [r0, #0]
 800356a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800356e:	6001      	str	r1, [r0, #0]
 8003570:	4770      	bx	lr
 8003572:	0000      	.short	0x0000
 8003574:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop

0800357c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003582:	f3ef 8305 	mrs	r3, IPSR
 8003586:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	d914      	bls.n	80035b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800358e:	4a17      	ldr	r2, [pc, #92]	; (80035ec <vPortValidateInterruptPriority+0x70>)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <vPortValidateInterruptPriority+0x74>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	7afa      	ldrb	r2, [r7, #11]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20a      	bcs.n	80035b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	607b      	str	r3, [r7, #4]
    }
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <vPortValidateInterruptPriority+0x78>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <vPortValidateInterruptPriority+0x7c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d90a      	bls.n	80035de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	603b      	str	r3, [r7, #0]
    }
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <vPortValidateInterruptPriority+0x60>
    }
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000e3f0 	.word	0xe000e3f0
 80035f0:	20000144 	.word	0x20000144
 80035f4:	e000ed0c 	.word	0xe000ed0c
 80035f8:	20000148 	.word	0x20000148

080035fc <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003608:	f7ff fa04 	bl	8002a14 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 800360c:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <pvPortMalloc+0x14c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8003614:	f000 f8da 	bl	80037cc <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8003618:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <pvPortMalloc+0x14c>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) && 
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d02a      	beq.n	800367a <pvPortMalloc+0x7e>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 8003624:	2308      	movs	r3, #8
 8003626:	461a      	mov	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && 
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	d223      	bcs.n	800367a <pvPortMalloc+0x7e>
        {
            xWantedSize += heapSTRUCT_SIZE;
 8003632:	2308      	movs	r3, #8
 8003634:	461a      	mov	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	607b      	str	r3, [r7, #4]

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f023 0307 	bic.w	r3, r3, #7
 8003642:	3308      	adds	r3, #8
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d214      	bcs.n	8003674 <pvPortMalloc+0x78>
                    > xWantedSize )
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f023 0307 	bic.w	r3, r3, #7
 8003650:	3308      	adds	r3, #8
 8003652:	607b      	str	r3, [r7, #4]
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	2b00      	cmp	r3, #0
 800365c:	d010      	beq.n	8003680 <pvPortMalloc+0x84>
        __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	60fb      	str	r3, [r7, #12]
    }
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <pvPortMalloc+0x76>
            }
            else
            {
                xWantedSize = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	607b      	str	r3, [r7, #4]
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003678:	e002      	b.n	8003680 <pvPortMalloc+0x84>
            }       
        }
        else 
        {
            xWantedSize = 0; 
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	e000      	b.n	8003682 <pvPortMalloc+0x86>
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003680:	bf00      	nop
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d057      	beq.n	8003738 <pvPortMalloc+0x13c>
 8003688:	4b30      	ldr	r3, [pc, #192]	; (800374c <pvPortMalloc+0x150>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	d852      	bhi.n	8003738 <pvPortMalloc+0x13c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 8003692:	4b2f      	ldr	r3, [pc, #188]	; (8003750 <pvPortMalloc+0x154>)
 8003694:	623b      	str	r3, [r7, #32]
            pxBlock = xStart.pxNextFreeBlock;
 8003696:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <pvPortMalloc+0x154>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800369c:	e004      	b.n	80036a8 <pvPortMalloc+0xac>
            {
                pxPreviousBlock = pxBlock;
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	623b      	str	r3, [r7, #32]
                pxBlock = pxBlock->pxNextFreeBlock;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d903      	bls.n	80036ba <pvPortMalloc+0xbe>
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f1      	bne.n	800369e <pvPortMalloc+0xa2>
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	4a25      	ldr	r2, [pc, #148]	; (8003754 <pvPortMalloc+0x158>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d03a      	beq.n	8003738 <pvPortMalloc+0x13c>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2208      	movs	r2, #8
 80036c8:	4413      	add	r3, r2
 80036ca:	61fb      	str	r3, [r7, #28]

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	601a      	str	r2, [r3, #0]

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2208      	movs	r2, #8
 80036de:	0052      	lsls	r2, r2, #1
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d922      	bls.n	800372a <pvPortMalloc+0x12e>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	605a      	str	r2, [r3, #4]
                    pxBlock->xBlockSize = xWantedSize;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	605a      	str	r2, [r3, #4]

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <pvPortMalloc+0x154>)
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	e002      	b.n	8003710 <pvPortMalloc+0x114>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	429a      	cmp	r2, r3
 800371a:	d8f6      	bhi.n	800370a <pvPortMalloc+0x10e>
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	601a      	str	r2, [r3, #0]
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <pvPortMalloc+0x150>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	4a05      	ldr	r2, [pc, #20]	; (800374c <pvPortMalloc+0x150>)
 8003736:	6013      	str	r3, [r2, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003738:	f7ff f97a 	bl	8002a30 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800373c:	69fb      	ldr	r3, [r7, #28]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3728      	adds	r7, #40	; 0x28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20012d5c 	.word	0x20012d5c
 800374c:	20000014 	.word	0x20000014
 8003750:	20012d4c 	.word	0x20012d4c
 8003754:	20012d54 	.word	0x20012d54

08003758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d027      	beq.n	80037ba <vPortFree+0x62>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800376a:	2308      	movs	r3, #8
 800376c:	425b      	negs	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	60fb      	str	r3, [r7, #12]

        vTaskSuspendAll();
 8003778:	f7ff f94c 	bl	8002a14 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <vPortFree+0x6c>)
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e002      	b.n	800378e <vPortFree+0x36>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d8f6      	bhi.n	8003788 <vPortFree+0x30>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <vPortFree+0x70>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <vPortFree+0x70>)
 80037b4:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 80037b6:	f7ff f93b 	bl	8002a30 <xTaskResumeAll>
    }
}
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20012d4c 	.word	0x20012d4c
 80037c8:	20000014 	.word	0x20000014

080037cc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <prvHeapInit+0x44>)
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037da:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <prvHeapInit+0x48>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <prvHeapInit+0x48>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <prvHeapInit+0x4c>)
 80037e8:	4a0c      	ldr	r2, [pc, #48]	; (800381c <prvHeapInit+0x50>)
 80037ea:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <prvHeapInit+0x4c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	4a08      	ldr	r2, [pc, #32]	; (800381c <prvHeapInit+0x50>)
 80037fa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4a06      	ldr	r2, [pc, #24]	; (8003818 <prvHeapInit+0x4c>)
 8003800:	601a      	str	r2, [r3, #0]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000154 	.word	0x20000154
 8003814:	20012d4c 	.word	0x20012d4c
 8003818:	20012d54 	.word	0x20012d54
 800381c:	00012bf8 	.word	0x00012bf8

08003820 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003824:	4803      	ldr	r0, [pc, #12]	; (8003834 <_cbSendSystemDesc+0x14>)
 8003826:	f002 f8bd 	bl	80059a4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800382a:	4803      	ldr	r0, [pc, #12]	; (8003838 <_cbSendSystemDesc+0x18>)
 800382c:	f002 f8ba 	bl	80059a4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	08006278 	.word	0x08006278
 8003838:	080062b8 	.word	0x080062b8

0800383c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <SEGGER_SYSVIEW_Conf+0x20>)
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <SEGGER_SYSVIEW_Conf+0x20>)
 8003846:	6819      	ldr	r1, [r3, #0]
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <SEGGER_SYSVIEW_Conf+0x24>)
 800384a:	4a06      	ldr	r2, [pc, #24]	; (8003864 <SEGGER_SYSVIEW_Conf+0x28>)
 800384c:	f001 fc9c 	bl	8005188 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003850:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003854:	f001 fcdc 	bl	8005210 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000000 	.word	0x20000000
 8003860:	08003821 	.word	0x08003821
 8003864:	08006358 	.word	0x08006358

08003868 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386a:	b085      	sub	sp, #20
 800386c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	e033      	b.n	80038dc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003874:	491e      	ldr	r1, [pc, #120]	; (80038f0 <_cbSendTaskList+0x88>)
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	491a      	ldr	r1, [pc, #104]	; (80038f0 <_cbSendTaskList+0x88>)
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3304      	adds	r3, #4
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	4c16      	ldr	r4, [pc, #88]	; (80038f0 <_cbSendTaskList+0x88>)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4423      	add	r3, r4
 80038a4:	3308      	adds	r3, #8
 80038a6:	681c      	ldr	r4, [r3, #0]
 80038a8:	4d11      	ldr	r5, [pc, #68]	; (80038f0 <_cbSendTaskList+0x88>)
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	442b      	add	r3, r5
 80038b6:	330c      	adds	r3, #12
 80038b8:	681d      	ldr	r5, [r3, #0]
 80038ba:	4e0d      	ldr	r6, [pc, #52]	; (80038f0 <_cbSendTaskList+0x88>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4433      	add	r3, r6
 80038c8:	3310      	adds	r3, #16
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	462b      	mov	r3, r5
 80038d0:	4622      	mov	r2, r4
 80038d2:	f000 f971 	bl	8003bb8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3301      	adds	r3, #1
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <_cbSendTaskList+0x8c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d3c6      	bcc.n	8003874 <_cbSendTaskList+0xc>
  }
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f0:	20012d60 	.word	0x20012d60
 80038f4:	20012e00 	.word	0x20012e00

080038f8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80038f8:	b5b0      	push	{r4, r5, r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80038fe:	f7ff f937 	bl	8002b70 <xTaskGetTickCountFromISR>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800390e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	f04f 0400 	mov.w	r4, #0
 800391a:	f04f 0500 	mov.w	r5, #0
 800391e:	015d      	lsls	r5, r3, #5
 8003920:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003924:	0154      	lsls	r4, r2, #5
 8003926:	4622      	mov	r2, r4
 8003928:	462b      	mov	r3, r5
 800392a:	1a12      	subs	r2, r2, r0
 800392c:	eb63 0301 	sbc.w	r3, r3, r1
 8003930:	f04f 0400 	mov.w	r4, #0
 8003934:	f04f 0500 	mov.w	r5, #0
 8003938:	009d      	lsls	r5, r3, #2
 800393a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800393e:	0094      	lsls	r4, r2, #2
 8003940:	4622      	mov	r2, r4
 8003942:	462b      	mov	r3, r5
 8003944:	1812      	adds	r2, r2, r0
 8003946:	eb41 0303 	adc.w	r3, r1, r3
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	00d9      	lsls	r1, r3, #3
 8003954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003958:	00d0      	lsls	r0, r2, #3
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003962:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bdb0      	pop	{r4, r5, r7, pc}

08003970 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800397e:	2205      	movs	r2, #5
 8003980:	492b      	ldr	r1, [pc, #172]	; (8003a30 <SYSVIEW_AddTask+0xc0>)
 8003982:	68b8      	ldr	r0, [r7, #8]
 8003984:	f002 fbce 	bl	8006124 <memcmp>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d04b      	beq.n	8003a26 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <SYSVIEW_AddTask+0xc4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b07      	cmp	r3, #7
 8003994:	d903      	bls.n	800399e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003996:	4828      	ldr	r0, [pc, #160]	; (8003a38 <SYSVIEW_AddTask+0xc8>)
 8003998:	f002 fb16 	bl	8005fc8 <SEGGER_SYSVIEW_Warn>
    return;
 800399c:	e044      	b.n	8003a28 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800399e:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <SYSVIEW_AddTask+0xc4>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4926      	ldr	r1, [pc, #152]	; (8003a3c <SYSVIEW_AddTask+0xcc>)
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <SYSVIEW_AddTask+0xc4>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4921      	ldr	r1, [pc, #132]	; (8003a3c <SYSVIEW_AddTask+0xcc>)
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	3304      	adds	r3, #4
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80039c8:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <SYSVIEW_AddTask+0xc4>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	491b      	ldr	r1, [pc, #108]	; (8003a3c <SYSVIEW_AddTask+0xcc>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3308      	adds	r3, #8
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <SYSVIEW_AddTask+0xc4>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4916      	ldr	r1, [pc, #88]	; (8003a3c <SYSVIEW_AddTask+0xcc>)
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	330c      	adds	r3, #12
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <SYSVIEW_AddTask+0xc4>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4910      	ldr	r1, [pc, #64]	; (8003a3c <SYSVIEW_AddTask+0xcc>)
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3310      	adds	r3, #16
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <SYSVIEW_AddTask+0xc4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <SYSVIEW_AddTask+0xc4>)
 8003a12:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8ca 	bl	8003bb8 <SYSVIEW_SendTaskInfo>
 8003a24:	e000      	b.n	8003a28 <SYSVIEW_AddTask+0xb8>
    return;
 8003a26:	bf00      	nop

}
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	080062c8 	.word	0x080062c8
 8003a34:	20012e00 	.word	0x20012e00
 8003a38:	080062d0 	.word	0x080062d0
 8003a3c:	20012d60 	.word	0x20012d60

08003a40 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003a48:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80ab 	beq.w	8003ba8 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e00d      	b.n	8003a74 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003a58:	4956      	ldr	r1, [pc, #344]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d008      	beq.n	8003a80 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3301      	adds	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	4b4e      	ldr	r3, [pc, #312]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d3ec      	bcc.n	8003a58 <SYSVIEW_DeleteTask+0x18>
 8003a7e:	e000      	b.n	8003a82 <SYSVIEW_DeleteTask+0x42>
      break;
 8003a80:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003a82:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d111      	bne.n	8003ab2 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a46      	ldr	r2, [pc, #280]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003a9a:	4413      	add	r3, r2
 8003a9c:	2214      	movs	r2, #20
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f002 fb5b 	bl	800615c <memset>
    _NumTasks--;
 8003aa6:	4b42      	ldr	r3, [pc, #264]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	4a40      	ldr	r2, [pc, #256]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	e07b      	b.n	8003baa <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d276      	bcs.n	8003baa <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003abc:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	1e5a      	subs	r2, r3, #1
 8003ac2:	493c      	ldr	r1, [pc, #240]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	4838      	ldr	r0, [pc, #224]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4403      	add	r3, r0
 8003ade:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003ae0:	4b33      	ldr	r3, [pc, #204]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	4933      	ldr	r1, [pc, #204]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3304      	adds	r3, #4
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	482f      	ldr	r0, [pc, #188]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4403      	add	r3, r0
 8003b04:	3304      	adds	r3, #4
 8003b06:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	1e5a      	subs	r2, r3, #1
 8003b0e:	4929      	ldr	r1, [pc, #164]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	4825      	ldr	r0, [pc, #148]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4403      	add	r3, r0
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	491f      	ldr	r1, [pc, #124]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	330c      	adds	r3, #12
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	481b      	ldr	r0, [pc, #108]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4403      	add	r3, r0
 8003b54:	330c      	adds	r3, #12
 8003b56:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	1e5a      	subs	r2, r3, #1
 8003b5e:	4915      	ldr	r1, [pc, #84]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3310      	adds	r3, #16
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	4811      	ldr	r0, [pc, #68]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4403      	add	r3, r0
 8003b7c:	3310      	adds	r3, #16
 8003b7e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1e5a      	subs	r2, r3, #1
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <SYSVIEW_DeleteTask+0x174>)
 8003b90:	4413      	add	r3, r2
 8003b92:	2214      	movs	r2, #20
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f002 fae0 	bl	800615c <memset>
    _NumTasks--;
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	4a03      	ldr	r2, [pc, #12]	; (8003bb0 <SYSVIEW_DeleteTask+0x170>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e000      	b.n	8003baa <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003ba8:	bf00      	nop
  }
}
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20012e00 	.word	0x20012e00
 8003bb4:	20012d60 	.word	0x20012d60

08003bb8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003bc6:	f107 0314 	add.w	r3, r7, #20
 8003bca:	2214      	movs	r2, #20
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f002 fac4 	bl	800615c <memset>
  TaskInfo.TaskID     = TaskID;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 fde1 	bl	80057b4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003bf2:	bf00      	nop
 8003bf4:	3728      	adds	r7, #40	; 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <__NVIC_EnableIRQ>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db0b      	blt.n	8003c26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4907      	ldr	r1, [pc, #28]	; (8003c34 <__NVIC_EnableIRQ+0x38>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000e100 	.word	0xe000e100

08003c38 <__NVIC_SetPriority>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db0a      	blt.n	8003c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	490c      	ldr	r1, [pc, #48]	; (8003c84 <__NVIC_SetPriority+0x4c>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c60:	e00a      	b.n	8003c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4908      	ldr	r1, [pc, #32]	; (8003c88 <__NVIC_SetPriority+0x50>)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	440b      	add	r3, r1
 8003c76:	761a      	strb	r2, [r3, #24]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003c92:	f002 f9f5 	bl	8006080 <SEGGER_SYSVIEW_IsStarted>
 8003c96:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003c9e:	f001 fc0d 	bl	80054bc <SEGGER_SYSVIEW_Start>
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <_cbOnUARTRx+0x3c>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d806      	bhi.n	8003ccc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <_cbOnUARTRx+0x3c>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <_cbOnUARTRx+0x3c>)
 8003cc8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003cca:	e009      	b.n	8003ce0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003ccc:	f7ff ffde 	bl	8003c8c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <_cbOnUARTRx+0x3c>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	1dfb      	adds	r3, r7, #7
 8003cd8:	2201      	movs	r2, #1
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f000 fb9a 	bl	8004414 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003ce0:	bf00      	nop
}
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000018 	.word	0x20000018

08003cec <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <_cbOnUARTTx+0x5c>)
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d80f      	bhi.n	8003d1c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <_cbOnUARTTx+0x5c>)
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <_cbOnUARTTx+0x60>)
 8003d04:	5c9a      	ldrb	r2, [r3, r2]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <_cbOnUARTTx+0x5c>)
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <_cbOnUARTTx+0x5c>)
 8003d14:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003d16:	2301      	movs	r3, #1
 8003d18:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003d1a:	e00f      	b.n	8003d3c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <_cbOnUARTTx+0x5c>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fa19 	bl	800415c <SEGGER_RTT_ReadUpBufferNoLock>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da02      	bge.n	8003d3a <_cbOnUARTTx+0x4e>
    r = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e000      	b.n	8003d3c <_cbOnUARTTx+0x50>
  }
Done:
 8003d3a:	bf00      	nop
  return r;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000018 	.word	0x20000018
 8003d4c:	08006360 	.word	0x08006360

08003d50 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <SEGGER_UART_init+0x1c>)
 8003d5a:	4905      	ldr	r1, [pc, #20]	; (8003d70 <SEGGER_UART_init+0x20>)
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f863 	bl	8003e28 <HIF_UART_Init>
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	08003cad 	.word	0x08003cad
 8003d70:	08003ced 	.word	0x08003ced

08003d74 <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <USART2_IRQHandler+0x80>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d011      	beq.n	8003dae <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <USART2_IRQHandler+0x84>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 030b 	and.w	r3, r3, #11
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <USART2_IRQHandler+0x88>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <USART2_IRQHandler+0x88>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	79fa      	ldrb	r2, [r7, #7]
 8003daa:	4610      	mov	r0, r2
 8003dac:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01a      	beq.n	8003dee <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <USART2_IRQHandler+0x8c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <USART2_IRQHandler+0x8c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	1dfa      	adds	r2, r7, #7
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4798      	blx	r3
 8003dca:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <USART2_IRQHandler+0x90>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <USART2_IRQHandler+0x90>)
 8003dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e006      	b.n	8003dee <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <USART2_IRQHandler+0x80>)
 8003de2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003de4:	79fa      	ldrb	r2, [r7, #7]
 8003de6:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <USART2_IRQHandler+0x84>)
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e000      	b.n	8003dee <USART2_IRQHandler+0x7a>
      return;
 8003dec:	bf00      	nop
    }
  }
}
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40004404 	.word	0x40004404
 8003dfc:	20012e04 	.word	0x20012e04
 8003e00:	20012e08 	.word	0x20012e08
 8003e04:	4000440c 	.word	0x4000440c

08003e08 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	4000440c 	.word	0x4000440c

08003e28 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HIF_UART_Init+0xc8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HIF_UART_Init+0xc8>)
 8003e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003e40:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <HIF_UART_Init+0xcc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <HIF_UART_Init+0xcc>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HIF_UART_Init+0xd0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e58:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003e60:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003e62:	4a25      	ldr	r2, [pc, #148]	; (8003ef8 <HIF_UART_Init+0xd0>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003e68:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HIF_UART_Init+0xd4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e74:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003e7c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <HIF_UART_Init+0xd4>)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003e84:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <HIF_UART_Init+0xd8>)
 8003e86:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003e8a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HIF_UART_Init+0xdc>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HIF_UART_Init+0xe0>)
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HIF_UART_Init+0xe4>)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb6:	d302      	bcc.n	8003ebe <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003eb8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003ebc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d004      	beq.n	8003ece <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <HIF_UART_Init+0xe8>)
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003ece:	4a11      	ldr	r2, [pc, #68]	; (8003f14 <HIF_UART_Init+0xec>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003ed4:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <HIF_UART_Init+0xf0>)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003eda:	2106      	movs	r1, #6
 8003edc:	2026      	movs	r0, #38	; 0x26
 8003ede:	f7ff feab 	bl	8003c38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003ee2:	2026      	movs	r0, #38	; 0x26
 8003ee4:	f7ff fe8a 	bl	8003bfc <__NVIC_EnableIRQ>
}
 8003ee8:	bf00      	nop
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023840 	.word	0x40023840
 8003ef4:	40023830 	.word	0x40023830
 8003ef8:	40020020 	.word	0x40020020
 8003efc:	40020000 	.word	0x40020000
 8003f00:	4000440c 	.word	0x4000440c
 8003f04:	40004410 	.word	0x40004410
 8003f08:	40004414 	.word	0x40004414
 8003f0c:	055d4a80 	.word	0x055d4a80
 8003f10:	40004408 	.word	0x40004408
 8003f14:	20012e04 	.word	0x20012e04
 8003f18:	20012e08 	.word	0x20012e08

08003f1c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003f22:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <_DoInit+0x98>)
 8003f24:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2203      	movs	r2, #3
 8003f2a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2203      	movs	r2, #3
 8003f30:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <_DoInit+0x9c>)
 8003f36:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <_DoInit+0xa0>)
 8003f3c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f44:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <_DoInit+0x9c>)
 8003f5c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <_DoInit+0xa4>)
 8003f62:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2210      	movs	r2, #16
 8003f68:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3307      	adds	r3, #7
 8003f80:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <_DoInit+0xa8>)
 8003f82:	6810      	ldr	r0, [r2, #0]
 8003f84:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003f86:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <_DoInit+0xac>)
 8003f8e:	6810      	ldr	r0, [r2, #0]
 8003f90:	6018      	str	r0, [r3, #0]
 8003f92:	8891      	ldrh	r1, [r2, #4]
 8003f94:	7992      	ldrb	r2, [r2, #6]
 8003f96:	8099      	strh	r1, [r3, #4]
 8003f98:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003f9a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003fa4:	f3bf 8f5f 	dmb	sy
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20014394 	.word	0x20014394
 8003fb8:	08006320 	.word	0x08006320
 8003fbc:	20012e0c 	.word	0x20012e0c
 8003fc0:	2001320c 	.word	0x2001320c
 8003fc4:	0800632c 	.word	0x0800632c
 8003fc8:	08006330 	.word	0x08006330

08003fcc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d905      	bls.n	8003ffc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffa:	e007      	b.n	800400c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	69b9      	ldr	r1, [r7, #24]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	1acb      	subs	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3b01      	subs	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004016:	4293      	cmp	r3, r2
 8004018:	bf28      	it	cs
 800401a:	4613      	movcs	r3, r2
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4293      	cmp	r3, r2
 8004024:	bf28      	it	cs
 8004026:	4613      	movcs	r3, r2
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	6978      	ldr	r0, [r7, #20]
 800403a:	f002 f881 	bl	8006140 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800403e:	6a3a      	ldr	r2, [r7, #32]
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	4413      	add	r3, r2
 8004044:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	4413      	add	r3, r2
 800404c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	4413      	add	r3, r2
 800405c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	429a      	cmp	r2, r3
 8004066:	d101      	bne.n	800406c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800406c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1b2      	bne.n	8003fe2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800407c:	6a3b      	ldr	r3, [r7, #32]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3728      	adds	r7, #40	; 0x28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004086:	b580      	push	{r7, lr}
 8004088:	b088      	sub	sp, #32
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d911      	bls.n	80040ce <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	6938      	ldr	r0, [r7, #16]
 80040ba:	f002 f841 	bl	8006140 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040be:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	441a      	add	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80040cc:	e01f      	b.n	800410e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	6938      	ldr	r0, [r7, #16]
 80040e2:	f002 f82d 	bl	8006140 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	4413      	add	r3, r2
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4619      	mov	r1, r3
 80040fe:	6938      	ldr	r0, [r7, #16]
 8004100:	f002 f81e 	bl	8006140 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004104:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	60da      	str	r2, [r3, #12]
}
 800410e:	bf00      	nop
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004116:	b480      	push	{r7}
 8004118:	b087      	sub	sp, #28
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	429a      	cmp	r2, r3
 8004130:	d808      	bhi.n	8004144 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	3b01      	subs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e004      	b.n	800414e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800414e:	697b      	ldr	r3, [r7, #20]
}
 8004150:	4618      	mov	r0, r3
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004168:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004176:	f7ff fed1 	bl	8003f1c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4a37      	ldr	r2, [pc, #220]	; (8004264 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004188:	4413      	add	r3, r2
 800418a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800419c:	2300      	movs	r3, #0
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80041a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d92b      	bls.n	8004200 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4293      	cmp	r3, r2
 80041b8:	bf28      	it	cs
 80041ba:	4613      	movcs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	4413      	add	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	6939      	ldr	r1, [r7, #16]
 80041cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ce:	f001 ffb7 	bl	8006140 <memcpy>
    NumBytesRead += NumBytesRem;
 80041d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	4413      	add	r3, r2
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	4413      	add	r3, r2
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4413      	add	r3, r2
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d101      	bne.n	8004200 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4293      	cmp	r3, r2
 800420e:	bf28      	it	cs
 8004210:	4613      	movcs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d019      	beq.n	800424e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	4413      	add	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	6939      	ldr	r1, [r7, #16]
 8004228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800422a:	f001 ff89 	bl	8006140 <memcpy>
    NumBytesRead += NumBytesRem;
 800422e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4413      	add	r3, r2
 8004234:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4413      	add	r3, r2
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004258:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800425c:	4618      	mov	r0, r3
 800425e:	3730      	adds	r7, #48	; 0x30
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20014394 	.word	0x20014394

08004268 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004274:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <SEGGER_RTT_ReadNoLock+0x108>)
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <SEGGER_RTT_ReadNoLock+0x1e>
 8004282:	f7ff fe4b 	bl	8003f1c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	3360      	adds	r3, #96	; 0x60
 8004292:	4a37      	ldr	r2, [pc, #220]	; (8004370 <SEGGER_RTT_ReadNoLock+0x108>)
 8004294:	4413      	add	r3, r2
 8004296:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80042a8:	2300      	movs	r3, #0
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80042ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d92b      	bls.n	800430c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4293      	cmp	r3, r2
 80042c4:	bf28      	it	cs
 80042c6:	4613      	movcs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	4413      	add	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	6939      	ldr	r1, [r7, #16]
 80042d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042da:	f001 ff31 	bl	8006140 <memcpy>
    NumBytesRead += NumBytesRem;
 80042de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4413      	add	r3, r2
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	4413      	add	r3, r2
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80042f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4413      	add	r3, r2
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004304:	429a      	cmp	r2, r3
 8004306:	d101      	bne.n	800430c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004308:	2300      	movs	r3, #0
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4293      	cmp	r3, r2
 800431a:	bf28      	it	cs
 800431c:	4613      	movcs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d019      	beq.n	800435a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	4413      	add	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	6939      	ldr	r1, [r7, #16]
 8004334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004336:	f001 ff03 	bl	8006140 <memcpy>
    NumBytesRead += NumBytesRem;
 800433a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	4413      	add	r3, r2
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	4413      	add	r3, r2
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4413      	add	r3, r2
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004364:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004368:	4618      	mov	r0, r3
 800436a:	3730      	adds	r7, #48	; 0x30
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20014394 	.word	0x20014394

08004374 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	3360      	adds	r3, #96	; 0x60
 8004390:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004392:	4413      	add	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d029      	beq.n	80043f2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d82e      	bhi.n	8004400 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d013      	beq.n	80043d2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80043aa:	e029      	b.n	8004400 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80043ac:	6978      	ldr	r0, [r7, #20]
 80043ae:	f7ff feb2 	bl	8004116 <_GetAvailWriteSpace>
 80043b2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d202      	bcs.n	80043c2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80043c0:	e021      	b.n	8004406 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	69b9      	ldr	r1, [r7, #24]
 80043ca:	6978      	ldr	r0, [r7, #20]
 80043cc:	f7ff fe5b 	bl	8004086 <_WriteNoCheck>
    break;
 80043d0:	e019      	b.n	8004406 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80043d2:	6978      	ldr	r0, [r7, #20]
 80043d4:	f7ff fe9f 	bl	8004116 <_GetAvailWriteSpace>
 80043d8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4293      	cmp	r3, r2
 80043e0:	bf28      	it	cs
 80043e2:	4613      	movcs	r3, r2
 80043e4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	69b9      	ldr	r1, [r7, #24]
 80043ea:	6978      	ldr	r0, [r7, #20]
 80043ec:	f7ff fe4b 	bl	8004086 <_WriteNoCheck>
    break;
 80043f0:	e009      	b.n	8004406 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	69b9      	ldr	r1, [r7, #24]
 80043f6:	6978      	ldr	r0, [r7, #20]
 80043f8:	f7ff fde8 	bl	8003fcc <_WriteBlocking>
 80043fc:	61f8      	str	r0, [r7, #28]
    break;
 80043fe:	e002      	b.n	8004406 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
    break;
 8004404:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004406:	69fb      	ldr	r3, [r7, #28]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20014394 	.word	0x20014394

08004414 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800442e:	f7ff fd75 	bl	8003f1c <_DoInit>
  SEGGER_RTT_LOCK();
 8004432:	f3ef 8311 	mrs	r3, BASEPRI
 8004436:	f04f 0120 	mov.w	r1, #32
 800443a:	f381 8811 	msr	BASEPRI, r1
 800443e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ff95 	bl	8004374 <SEGGER_RTT_WriteDownBufferNoLock>
 800444a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004452:	697b      	ldr	r3, [r7, #20]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20014394 	.word	0x20014394

08004460 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800446e:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <SEGGER_RTT_AllocUpBuffer+0x20>
 800447c:	f7ff fd4e 	bl	8003f1c <_DoInit>
  SEGGER_RTT_LOCK();
 8004480:	f3ef 8311 	mrs	r3, BASEPRI
 8004484:	f04f 0120 	mov.w	r1, #32
 8004488:	f381 8811 	msr	BASEPRI, r1
 800448c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800448e:	4b35      	ldr	r3, [pc, #212]	; (8004564 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004490:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004496:	6939      	ldr	r1, [r7, #16]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	3304      	adds	r3, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	dbeb      	blt.n	8004496 <SEGGER_RTT_AllocUpBuffer+0x36>
 80044be:	e000      	b.n	80044c2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80044c0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	da3f      	bge.n	800454c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80044cc:	6939      	ldr	r1, [r7, #16]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	440b      	add	r3, r1
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80044e0:	6939      	ldr	r1, [r7, #16]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	440b      	add	r3, r1
 80044f0:	3304      	adds	r3, #4
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80044f6:	6939      	ldr	r1, [r7, #16]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	4613      	mov	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	440b      	add	r3, r1
 8004504:	3320      	adds	r3, #32
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800450a:	6939      	ldr	r1, [r7, #16]
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	4613      	mov	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	3328      	adds	r3, #40	; 0x28
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800451e:	6939      	ldr	r1, [r7, #16]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	440b      	add	r3, r1
 800452c:	3324      	adds	r3, #36	; 0x24
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004532:	6939      	ldr	r1, [r7, #16]
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	440b      	add	r3, r1
 8004540:	332c      	adds	r3, #44	; 0x2c
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004546:	f3bf 8f5f 	dmb	sy
 800454a:	e002      	b.n	8004552 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004558:	69fb      	ldr	r3, [r7, #28]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20014394 	.word	0x20014394

08004568 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004576:	4b21      	ldr	r3, [pc, #132]	; (80045fc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004578:	623b      	str	r3, [r7, #32]
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004584:	f7ff fcca 	bl	8003f1c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004588:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800458a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d82c      	bhi.n	80045ec <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004592:	f3ef 8311 	mrs	r3, BASEPRI
 8004596:	f04f 0120 	mov.w	r1, #32
 800459a:	f381 8811 	msr	BASEPRI, r1
 800459e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	3360      	adds	r3, #96	; 0x60
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	4413      	add	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045da:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80045dc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	e002      	b.n	80045f2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3728      	adds	r7, #40	; 0x28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20014394 	.word	0x20014394

08004600 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00f      	beq.n	8004636 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004616:	e002      	b.n	800461e <_EncodeStr+0x1e>
      Len++;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	3301      	adds	r3, #1
 800461c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f6      	bne.n	8004618 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	429a      	cmp	r2, r3
 8004630:	d901      	bls.n	8004636 <_EncodeStr+0x36>
      Len = Limit;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2bfe      	cmp	r3, #254	; 0xfe
 800463a:	d806      	bhi.n	800464a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	60fa      	str	r2, [r7, #12]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e011      	b.n	800466e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	60fa      	str	r2, [r7, #12]
 8004650:	22ff      	movs	r2, #255	; 0xff
 8004652:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	60fa      	str	r2, [r7, #12]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	0a19      	lsrs	r1, r3, #8
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	60fa      	str	r2, [r7, #12]
 800466a:	b2ca      	uxtb	r2, r1
 800466c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004672:	e00a      	b.n	800468a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	1c53      	adds	r3, r2, #1
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1c59      	adds	r1, r3, #1
 800467e:	60f9      	str	r1, [r7, #12]
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	701a      	strb	r2, [r3, #0]
    n++;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	429a      	cmp	r2, r3
 8004690:	d3f0      	bcc.n	8004674 <_EncodeStr+0x74>
  }
  return pPayload;
 8004692:	68fb      	ldr	r3, [r7, #12]
}
 8004694:	4618      	mov	r0, r3
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <_HandleIncomingPacket+0xe0>)
 80046c0:	7e1b      	ldrb	r3, [r3, #24]
 80046c2:	4618      	mov	r0, r3
 80046c4:	1cfb      	adds	r3, r7, #3
 80046c6:	2201      	movs	r2, #1
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7ff fdcd 	bl	8004268 <SEGGER_RTT_ReadNoLock>
 80046ce:	4603      	mov	r3, r0
 80046d0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	dd54      	ble.n	8004782 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	2b80      	cmp	r3, #128	; 0x80
 80046dc:	d032      	beq.n	8004744 <_HandleIncomingPacket+0x8c>
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	dc42      	bgt.n	8004768 <_HandleIncomingPacket+0xb0>
 80046e2:	2b07      	cmp	r3, #7
 80046e4:	dc16      	bgt.n	8004714 <_HandleIncomingPacket+0x5c>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dd3e      	ble.n	8004768 <_HandleIncomingPacket+0xb0>
 80046ea:	3b01      	subs	r3, #1
 80046ec:	2b06      	cmp	r3, #6
 80046ee:	d83b      	bhi.n	8004768 <_HandleIncomingPacket+0xb0>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <_HandleIncomingPacket+0x40>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	0800471b 	.word	0x0800471b
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004727 	.word	0x08004727
 8004704:	0800472d 	.word	0x0800472d
 8004708:	08004733 	.word	0x08004733
 800470c:	08004739 	.word	0x08004739
 8004710:	0800473f 	.word	0x0800473f
 8004714:	2b7f      	cmp	r3, #127	; 0x7f
 8004716:	d036      	beq.n	8004786 <_HandleIncomingPacket+0xce>
 8004718:	e026      	b.n	8004768 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800471a:	f000 fecf 	bl	80054bc <SEGGER_SYSVIEW_Start>
      break;
 800471e:	e037      	b.n	8004790 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004720:	f000 ff88 	bl	8005634 <SEGGER_SYSVIEW_Stop>
      break;
 8004724:	e034      	b.n	8004790 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004726:	f001 f961 	bl	80059ec <SEGGER_SYSVIEW_RecordSystime>
      break;
 800472a:	e031      	b.n	8004790 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800472c:	f001 f926 	bl	800597c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004730:	e02e      	b.n	8004790 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004732:	f000 ffa5 	bl	8005680 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004736:	e02b      	b.n	8004790 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004738:	f001 fbf4 	bl	8005f24 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800473c:	e028      	b.n	8004790 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800473e:	f001 fbd3 	bl	8005ee8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004742:	e025      	b.n	8004790 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <_HandleIncomingPacket+0xe0>)
 8004746:	7e1b      	ldrb	r3, [r3, #24]
 8004748:	4618      	mov	r0, r3
 800474a:	1cfb      	adds	r3, r7, #3
 800474c:	2201      	movs	r2, #1
 800474e:	4619      	mov	r1, r3
 8004750:	f7ff fd8a 	bl	8004268 <SEGGER_RTT_ReadNoLock>
 8004754:	4603      	mov	r3, r0
 8004756:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	dd15      	ble.n	800478a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fb41 	bl	8005de8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004766:	e010      	b.n	800478a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	b25b      	sxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	da0e      	bge.n	800478e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <_HandleIncomingPacket+0xe0>)
 8004772:	7e1b      	ldrb	r3, [r3, #24]
 8004774:	4618      	mov	r0, r3
 8004776:	1cfb      	adds	r3, r7, #3
 8004778:	2201      	movs	r2, #1
 800477a:	4619      	mov	r1, r3
 800477c:	f7ff fd74 	bl	8004268 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004780:	e005      	b.n	800478e <_HandleIncomingPacket+0xd6>
    }
  }
 8004782:	bf00      	nop
 8004784:	e004      	b.n	8004790 <_HandleIncomingPacket+0xd8>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <_HandleIncomingPacket+0xd8>
      break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <_HandleIncomingPacket+0xd8>
      break;
 800478e:	bf00      	nop
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20014224 	.word	0x20014224

0800479c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b08c      	sub	sp, #48	; 0x30
 80047a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80047a2:	2301      	movs	r3, #1
 80047a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	3301      	adds	r3, #1
 80047aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b0:	4b32      	ldr	r3, [pc, #200]	; (800487c <_TrySendOverflowPacket+0xe0>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b6:	e00b      	b.n	80047d0 <_TrySendOverflowPacket+0x34>
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	1c59      	adds	r1, r3, #1
 80047c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	09db      	lsrs	r3, r3, #7
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2b7f      	cmp	r3, #127	; 0x7f
 80047d4:	d8f0      	bhi.n	80047b8 <_TrySendOverflowPacket+0x1c>
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047e6:	4b26      	ldr	r3, [pc, #152]	; (8004880 <_TrySendOverflowPacket+0xe4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80047ec:	4b23      	ldr	r3, [pc, #140]	; (800487c <_TrySendOverflowPacket+0xe0>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	e00b      	b.n	8004818 <_TrySendOverflowPacket+0x7c>
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	1c59      	adds	r1, r3, #1
 8004808:	6279      	str	r1, [r7, #36]	; 0x24
 800480a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	09db      	lsrs	r3, r3, #7
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	2b7f      	cmp	r3, #127	; 0x7f
 800481c:	d8f0      	bhi.n	8004800 <_TrySendOverflowPacket+0x64>
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	627a      	str	r2, [r7, #36]	; 0x24
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <_TrySendOverflowPacket+0xe0>)
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	4618      	mov	r0, r3
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	461a      	mov	r2, r3
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	4619      	mov	r1, r3
 8004840:	f7fb fce6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004844:	4603      	mov	r3, r0
 8004846:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004848:	f7ff fade 	bl	8003e08 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <_TrySendOverflowPacket+0xe0>)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <_TrySendOverflowPacket+0xe0>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <_TrySendOverflowPacket+0xe0>)
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e004      	b.n	8004870 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <_TrySendOverflowPacket+0xe0>)
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	3301      	adds	r3, #1
 800486c:	4a03      	ldr	r2, [pc, #12]	; (800487c <_TrySendOverflowPacket+0xe0>)
 800486e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004870:	693b      	ldr	r3, [r7, #16]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3730      	adds	r7, #48	; 0x30
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20014224 	.word	0x20014224
 8004880:	e0001004 	.word	0xe0001004

08004884 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004890:	4b6d      	ldr	r3, [pc, #436]	; (8004a48 <_SendPacket+0x1c4>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d010      	beq.n	80048ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004898:	4b6b      	ldr	r3, [pc, #428]	; (8004a48 <_SendPacket+0x1c4>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a5 	beq.w	80049ec <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80048a2:	4b69      	ldr	r3, [pc, #420]	; (8004a48 <_SendPacket+0x1c4>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d109      	bne.n	80048be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80048aa:	f7ff ff77 	bl	800479c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80048ae:	4b66      	ldr	r3, [pc, #408]	; (8004a48 <_SendPacket+0x1c4>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	f040 809c 	bne.w	80049f0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80048b8:	e001      	b.n	80048be <_SendPacket+0x3a>
    goto Send;
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <_SendPacket+0x3c>
Send:
 80048be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b1f      	cmp	r3, #31
 80048c4:	d809      	bhi.n	80048da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80048c6:	4b60      	ldr	r3, [pc, #384]	; (8004a48 <_SendPacket+0x1c4>)
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 808d 	bne.w	80049f4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b17      	cmp	r3, #23
 80048de:	d807      	bhi.n	80048f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e03d      	b.n	800496c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b7f      	cmp	r3, #127	; 0x7f
 80048fc:	d912      	bls.n	8004924 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	09da      	lsrs	r2, r3, #7
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3b01      	subs	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	3a01      	subs	r2, #1
 8004916:	60fa      	str	r2, [r7, #12]
 8004918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800491c:	b2da      	uxtb	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	e006      	b.n	8004932 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3b01      	subs	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b7f      	cmp	r3, #127	; 0x7f
 8004936:	d912      	bls.n	800495e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	09da      	lsrs	r2, r3, #7
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3b01      	subs	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	3a01      	subs	r2, #1
 8004950:	60fa      	str	r2, [r7, #12]
 8004952:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004956:	b2da      	uxtb	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e006      	b.n	800496c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3b01      	subs	r3, #1
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800496c:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <_SendPacket+0x1c8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004972:	4b35      	ldr	r3, [pc, #212]	; (8004a48 <_SendPacket+0x1c4>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	e00b      	b.n	800499e <_SendPacket+0x11a>
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1c59      	adds	r1, r3, #1
 800498e:	6279      	str	r1, [r7, #36]	; 0x24
 8004990:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	09db      	lsrs	r3, r3, #7
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	2b7f      	cmp	r3, #127	; 0x7f
 80049a2:	d8f0      	bhi.n	8004986 <_SendPacket+0x102>
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	627a      	str	r2, [r7, #36]	; 0x24
 80049aa:	6a3a      	ldr	r2, [r7, #32]
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80049b4:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <_SendPacket+0x1c4>)
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	4618      	mov	r0, r3
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	f7fb fc24 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80049c8:	4603      	mov	r3, r0
 80049ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80049cc:	f7ff fa1c 	bl	8003e08 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80049d6:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <_SendPacket+0x1c4>)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e00b      	b.n	80049f6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <_SendPacket+0x1c4>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <_SendPacket+0x1c4>)
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e004      	b.n	80049f6 <_SendPacket+0x172>
    goto SendDone;
 80049ec:	bf00      	nop
 80049ee:	e002      	b.n	80049f6 <_SendPacket+0x172>
      goto SendDone;
 80049f0:	bf00      	nop
 80049f2:	e000      	b.n	80049f6 <_SendPacket+0x172>
      goto SendDone;
 80049f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <_SendPacket+0x1c4>)
 80049f8:	7e1b      	ldrb	r3, [r3, #24]
 80049fa:	4619      	mov	r1, r3
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <_SendPacket+0x1cc>)
 80049fe:	460b      	mov	r3, r1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	440b      	add	r3, r1
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4413      	add	r3, r2
 8004a08:	336c      	adds	r3, #108	; 0x6c
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <_SendPacket+0x1c4>)
 8004a0e:	7e1b      	ldrb	r3, [r3, #24]
 8004a10:	4618      	mov	r0, r3
 8004a12:	490f      	ldr	r1, [pc, #60]	; (8004a50 <_SendPacket+0x1cc>)
 8004a14:	4603      	mov	r3, r0
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4403      	add	r3, r0
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3370      	adds	r3, #112	; 0x70
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d00b      	beq.n	8004a3e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <_SendPacket+0x1c4>)
 8004a28:	789b      	ldrb	r3, [r3, #2]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <_SendPacket+0x1c4>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004a34:	f7ff fe40 	bl	80046b8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004a38:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <_SendPacket+0x1c4>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004a3e:	bf00      	nop
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20014224 	.word	0x20014224
 8004a4c:	e0001004 	.word	0xe0001004
 8004a50:	20014394 	.word	0x20014394

08004a54 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	; 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d80a      	bhi.n	8004a84 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6051      	str	r1, [r2, #4]
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d15a      	bne.n	8004b42 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	e00b      	b.n	8004ac6 <_StoreChar+0x72>
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	1c59      	adds	r1, r3, #1
 8004ab6:	6279      	str	r1, [r7, #36]	; 0x24
 8004ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	09db      	lsrs	r3, r3, #7
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aca:	d8f0      	bhi.n	8004aae <_StoreChar+0x5a>
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ad2:	6a3a      	ldr	r2, [r7, #32]
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	e00b      	b.n	8004afe <_StoreChar+0xaa>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	1c59      	adds	r1, r3, #1
 8004aee:	61f9      	str	r1, [r7, #28]
 8004af0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	09db      	lsrs	r3, r3, #7
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b7f      	cmp	r3, #127	; 0x7f
 8004b02:	d8f0      	bhi.n	8004ae6 <_StoreChar+0x92>
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	61fa      	str	r2, [r7, #28]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	221a      	movs	r2, #26
 8004b1a:	6939      	ldr	r1, [r7, #16]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff feb1 	bl	8004884 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fdba 	bl	80046a0 <_PreparePacket>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
  }
}
 8004b42:	bf00      	nop
 8004b44:	3728      	adds	r7, #40	; 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004b66:	e007      	b.n	8004b78 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	623b      	str	r3, [r7, #32]
    Width++;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004b78:	6a3a      	ldr	r2, [r7, #32]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d2f3      	bcs.n	8004b68 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d901      	bls.n	8004b8c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d11f      	bne.n	8004bd6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01c      	beq.n	8004bd6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <_PrintUnsigned+0x66>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <_PrintUnsigned+0x66>
        c = '0';
 8004bac:	2330      	movs	r3, #48	; 0x30
 8004bae:	76fb      	strb	r3, [r7, #27]
 8004bb0:	e001      	b.n	8004bb6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bb6:	e007      	b.n	8004bc8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004bbe:	7efb      	ldrb	r3, [r7, #27]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ff46 	bl	8004a54 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <_PrintUnsigned+0x8a>
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d3f0      	bcc.n	8004bb8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d903      	bls.n	8004be4 <_PrintUnsigned+0x98>
      NumDigits--;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	e009      	b.n	8004bf8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d200      	bcs.n	8004bf8 <_PrintUnsigned+0xac>
        break;
 8004bf6:	e005      	b.n	8004c04 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	fb02 f303 	mul.w	r3, r2, r3
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004c02:	e7e8      	b.n	8004bd6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004c1c:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <_PrintUnsigned+0x128>)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	4413      	add	r3, r2
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff ff14 	bl	8004a54 <_StoreChar>
    Digit /= Base;
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e3      	bne.n	8004c04 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d011      	beq.n	8004c6a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c4c:	e006      	b.n	8004c5c <_PrintUnsigned+0x110>
        FieldWidth--;
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	3b01      	subs	r3, #1
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004c54:	2120      	movs	r1, #32
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff fefc 	bl	8004a54 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <_PrintUnsigned+0x11e>
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3f1      	bcc.n	8004c4e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3728      	adds	r7, #40	; 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	08006370 	.word	0x08006370

08004c78 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bfb8      	it	lt
 8004c8c:	425b      	neglt	r3, r3
 8004c8e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004c90:	2301      	movs	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004c94:	e007      	b.n	8004ca6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c9e:	613b      	str	r3, [r7, #16]
    Width++;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	daf3      	bge.n	8004c96 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d901      	bls.n	8004cba <_PrintInt+0x42>
    Width = NumDigits;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <_PrintInt+0x5e>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	db04      	blt.n	8004cd0 <_PrintInt+0x58>
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <_PrintInt+0x5e>
    FieldWidth--;
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <_PrintInt+0x6e>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <_PrintInt+0x9c>
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d111      	bne.n	8004d14 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00e      	beq.n	8004d14 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004cf6:	e006      	b.n	8004d06 <_PrintInt+0x8e>
        FieldWidth--;
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004cfe:	2120      	movs	r1, #32
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f7ff fea7 	bl	8004a54 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <_PrintInt+0x9c>
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d3f1      	bcc.n	8004cf8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da07      	bge.n	8004d2a <_PrintInt+0xb2>
    v = -v;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	425b      	negs	r3, r3
 8004d1e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004d20:	212d      	movs	r1, #45	; 0x2d
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff fe96 	bl	8004a54 <_StoreChar>
 8004d28:	e008      	b.n	8004d3c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004d34:	212b      	movs	r1, #43	; 0x2b
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fe8c 	bl	8004a54 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d019      	beq.n	8004d7a <_PrintInt+0x102>
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d114      	bne.n	8004d7a <_PrintInt+0x102>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d111      	bne.n	8004d7a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d5c:	e006      	b.n	8004d6c <_PrintInt+0xf4>
        FieldWidth--;
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004d64:	2130      	movs	r1, #48	; 0x30
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7ff fe74 	bl	8004a54 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <_PrintInt+0x102>
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3f1      	bcc.n	8004d5e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	9301      	str	r3, [sp, #4]
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff fedf 	bl	8004b4c <_PrintUnsigned>
}
 8004d8e:	bf00      	nop
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b098      	sub	sp, #96	; 0x60
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004da4:	f3ef 8311 	mrs	r3, BASEPRI
 8004da8:	f04f 0120 	mov.w	r1, #32
 8004dac:	f381 8811 	msr	BASEPRI, r1
 8004db0:	633b      	str	r3, [r7, #48]	; 0x30
 8004db2:	48b7      	ldr	r0, [pc, #732]	; (8005090 <_VPrintTarget+0x2f8>)
 8004db4:	f7ff fc74 	bl	80046a0 <_PreparePacket>
 8004db8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004dba:	4bb5      	ldr	r3, [pc, #724]	; (8005090 <_VPrintTarget+0x2f8>)
 8004dbc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004dde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8183 	beq.w	80050ee <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dec:	2b25      	cmp	r3, #37	; 0x25
 8004dee:	f040 8170 	bne.w	80050d2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004df2:	2300      	movs	r3, #0
 8004df4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004e02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e06:	3b23      	subs	r3, #35	; 0x23
 8004e08:	2b0d      	cmp	r3, #13
 8004e0a:	d83f      	bhi.n	8004e8c <_VPrintTarget+0xf4>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <_VPrintTarget+0x7c>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004e8d 	.word	0x08004e8d
 8004e1c:	08004e8d 	.word	0x08004e8d
 8004e20:	08004e8d 	.word	0x08004e8d
 8004e24:	08004e8d 	.word	0x08004e8d
 8004e28:	08004e8d 	.word	0x08004e8d
 8004e2c:	08004e8d 	.word	0x08004e8d
 8004e30:	08004e8d 	.word	0x08004e8d
 8004e34:	08004e6d 	.word	0x08004e6d
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e8d 	.word	0x08004e8d
 8004e44:	08004e8d 	.word	0x08004e8d
 8004e48:	08004e5d 	.word	0x08004e5d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e01a      	b.n	8004e92 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	f043 0302 	orr.w	r3, r3, #2
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e012      	b.n	8004e92 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6e:	f043 0304 	orr.w	r3, r3, #4
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e00a      	b.n	8004e92 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7e:	f043 0308 	orr.w	r3, r3, #8
 8004e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e002      	b.n	8004e92 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e90:	bf00      	nop
        }
      } while (v);
 8004e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1b0      	bne.n	8004dfa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ea8:	2b2f      	cmp	r3, #47	; 0x2f
 8004eaa:	d912      	bls.n	8004ed2 <_VPrintTarget+0x13a>
 8004eac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eb0:	2b39      	cmp	r3, #57	; 0x39
 8004eb2:	d80e      	bhi.n	8004ed2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eca:	4413      	add	r3, r2
 8004ecc:	3b30      	subs	r3, #48	; 0x30
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004ed0:	e7e4      	b.n	8004e9c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004ede:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ee4:	d11d      	bne.n	8004f22 <_VPrintTarget+0x18a>
        sFormat++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ef8:	2b2f      	cmp	r3, #47	; 0x2f
 8004efa:	d912      	bls.n	8004f22 <_VPrintTarget+0x18a>
 8004efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f00:	2b39      	cmp	r3, #57	; 0x39
 8004f02:	d80e      	bhi.n	8004f22 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3301      	adds	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004f0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	461a      	mov	r2, r3
 8004f16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3b30      	subs	r3, #48	; 0x30
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004f20:	e7e4      	b.n	8004eec <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004f2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f2e:	2b6c      	cmp	r3, #108	; 0x6c
 8004f30:	d003      	beq.n	8004f3a <_VPrintTarget+0x1a2>
 8004f32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f36:	2b68      	cmp	r3, #104	; 0x68
 8004f38:	d107      	bne.n	8004f4a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3301      	adds	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004f48:	e7ef      	b.n	8004f2a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004f4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f4e:	2b25      	cmp	r3, #37	; 0x25
 8004f50:	f000 80b3 	beq.w	80050ba <_VPrintTarget+0x322>
 8004f54:	2b25      	cmp	r3, #37	; 0x25
 8004f56:	f2c0 80b7 	blt.w	80050c8 <_VPrintTarget+0x330>
 8004f5a:	2b78      	cmp	r3, #120	; 0x78
 8004f5c:	f300 80b4 	bgt.w	80050c8 <_VPrintTarget+0x330>
 8004f60:	2b58      	cmp	r3, #88	; 0x58
 8004f62:	f2c0 80b1 	blt.w	80050c8 <_VPrintTarget+0x330>
 8004f66:	3b58      	subs	r3, #88	; 0x58
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	f200 80ad 	bhi.w	80050c8 <_VPrintTarget+0x330>
 8004f6e:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <_VPrintTarget+0x1dc>)
 8004f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f74:	0800506b 	.word	0x0800506b
 8004f78:	080050c9 	.word	0x080050c9
 8004f7c:	080050c9 	.word	0x080050c9
 8004f80:	080050c9 	.word	0x080050c9
 8004f84:	080050c9 	.word	0x080050c9
 8004f88:	080050c9 	.word	0x080050c9
 8004f8c:	080050c9 	.word	0x080050c9
 8004f90:	080050c9 	.word	0x080050c9
 8004f94:	080050c9 	.word	0x080050c9
 8004f98:	080050c9 	.word	0x080050c9
 8004f9c:	080050c9 	.word	0x080050c9
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800501f 	.word	0x0800501f
 8004fa8:	080050c9 	.word	0x080050c9
 8004fac:	080050c9 	.word	0x080050c9
 8004fb0:	080050c9 	.word	0x080050c9
 8004fb4:	080050c9 	.word	0x080050c9
 8004fb8:	080050c9 	.word	0x080050c9
 8004fbc:	080050c9 	.word	0x080050c9
 8004fc0:	080050c9 	.word	0x080050c9
 8004fc4:	080050c9 	.word	0x080050c9
 8004fc8:	080050c9 	.word	0x080050c9
 8004fcc:	080050c9 	.word	0x080050c9
 8004fd0:	080050c9 	.word	0x080050c9
 8004fd4:	08005095 	.word	0x08005095
 8004fd8:	080050c9 	.word	0x080050c9
 8004fdc:	080050c9 	.word	0x080050c9
 8004fe0:	080050c9 	.word	0x080050c9
 8004fe4:	080050c9 	.word	0x080050c9
 8004fe8:	08005045 	.word	0x08005045
 8004fec:	080050c9 	.word	0x080050c9
 8004ff0:	080050c9 	.word	0x080050c9
 8004ff4:	0800506b 	.word	0x0800506b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	1d19      	adds	r1, r3, #4
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800500c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fd1c 	bl	8004a54 <_StoreChar>
        break;
 800501c:	e055      	b.n	80050ca <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	1d19      	adds	r1, r3, #4
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6011      	str	r1, [r2, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800502c:	f107 0014 	add.w	r0, r7, #20
 8005030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503a:	220a      	movs	r2, #10
 800503c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800503e:	f7ff fe1b 	bl	8004c78 <_PrintInt>
        break;
 8005042:	e042      	b.n	80050ca <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	1d19      	adds	r1, r3, #4
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6011      	str	r1, [r2, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005052:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005054:	f107 0014 	add.w	r0, r7, #20
 8005058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005062:	220a      	movs	r2, #10
 8005064:	f7ff fd72 	bl	8004b4c <_PrintUnsigned>
        break;
 8005068:	e02f      	b.n	80050ca <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	1d19      	adds	r1, r3, #4
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6011      	str	r1, [r2, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005078:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800507a:	f107 0014 	add.w	r0, r7, #20
 800507e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005088:	2210      	movs	r2, #16
 800508a:	f7ff fd5f 	bl	8004b4c <_PrintUnsigned>
        break;
 800508e:	e01c      	b.n	80050ca <_VPrintTarget+0x332>
 8005090:	20014254 	.word	0x20014254
      case 'p':
        v = va_arg(*pParamList, int);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	1d19      	adds	r1, r3, #4
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6011      	str	r1, [r2, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80050a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050a4:	f107 0014 	add.w	r0, r7, #20
 80050a8:	2300      	movs	r3, #0
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	2308      	movs	r3, #8
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	2308      	movs	r3, #8
 80050b2:	2210      	movs	r2, #16
 80050b4:	f7ff fd4a 	bl	8004b4c <_PrintUnsigned>
        break;
 80050b8:	e007      	b.n	80050ca <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80050ba:	f107 0314 	add.w	r3, r7, #20
 80050be:	2125      	movs	r1, #37	; 0x25
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fcc7 	bl	8004a54 <_StoreChar>
        break;
 80050c6:	e000      	b.n	80050ca <_VPrintTarget+0x332>
      default:
        break;
 80050c8:	bf00      	nop
      }
      sFormat++;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e007      	b.n	80050e2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80050d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80050d6:	f107 0314 	add.w	r3, r7, #20
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fcb9 	bl	8004a54 <_StoreChar>
    }
  } while (*sFormat);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f47f ae72 	bne.w	8004dd0 <_VPrintTarget+0x38>
 80050ec:	e000      	b.n	80050f0 <_VPrintTarget+0x358>
      break;
 80050ee:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d041      	beq.n	800517a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80050f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	643b      	str	r3, [r7, #64]	; 0x40
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005106:	e00b      	b.n	8005120 <_VPrintTarget+0x388>
 8005108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510a:	b2da      	uxtb	r2, r3
 800510c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	6439      	str	r1, [r7, #64]	; 0x40
 8005112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511c:	09db      	lsrs	r3, r3, #7
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005122:	2b7f      	cmp	r3, #127	; 0x7f
 8005124:	d8f0      	bhi.n	8005108 <_VPrintTarget+0x370>
 8005126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	643a      	str	r2, [r7, #64]	; 0x40
 800512c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005134:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	63bb      	str	r3, [r7, #56]	; 0x38
 800513a:	2300      	movs	r3, #0
 800513c:	637b      	str	r3, [r7, #52]	; 0x34
 800513e:	e00b      	b.n	8005158 <_VPrintTarget+0x3c0>
 8005140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005142:	b2da      	uxtb	r2, r3
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	63b9      	str	r1, [r7, #56]	; 0x38
 800514a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	09db      	lsrs	r3, r3, #7
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	2b7f      	cmp	r3, #127	; 0x7f
 800515c:	d8f0      	bhi.n	8005140 <_VPrintTarget+0x3a8>
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	63ba      	str	r2, [r7, #56]	; 0x38
 8005164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	69b9      	ldr	r1, [r7, #24]
 8005172:	221a      	movs	r2, #26
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fb85 	bl	8004884 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005180:	bf00      	nop
 8005182:	3758      	adds	r7, #88	; 0x58
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005196:	2300      	movs	r3, #0
 8005198:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800519c:	4917      	ldr	r1, [pc, #92]	; (80051fc <SEGGER_SYSVIEW_Init+0x74>)
 800519e:	4818      	ldr	r0, [pc, #96]	; (8005200 <SEGGER_SYSVIEW_Init+0x78>)
 80051a0:	f7ff f95e 	bl	8004460 <SEGGER_RTT_AllocUpBuffer>
 80051a4:	4603      	mov	r3, r0
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051aa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80051ac:	4b15      	ldr	r3, [pc, #84]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ae:	785a      	ldrb	r2, [r3, #1]
 80051b0:	4b14      	ldr	r3, [pc, #80]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051b2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051b6:	7e1b      	ldrb	r3, [r3, #24]
 80051b8:	4618      	mov	r0, r3
 80051ba:	2300      	movs	r3, #0
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2308      	movs	r3, #8
 80051c0:	4a11      	ldr	r2, [pc, #68]	; (8005208 <SEGGER_SYSVIEW_Init+0x80>)
 80051c2:	490f      	ldr	r1, [pc, #60]	; (8005200 <SEGGER_SYSVIEW_Init+0x78>)
 80051c4:	f7ff f9d0 	bl	8004568 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80051c8:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <SEGGER_SYSVIEW_Init+0x84>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a0c      	ldr	r2, [pc, #48]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051d4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80051d6:	4a0b      	ldr	r2, [pc, #44]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80051dc:	4a09      	ldr	r2, [pc, #36]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80051e2:	4a08      	ldr	r2, [pc, #32]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80051e8:	4a06      	ldr	r2, [pc, #24]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <SEGGER_SYSVIEW_Init+0x7c>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	2001321c 	.word	0x2001321c
 8005200:	08006338 	.word	0x08006338
 8005204:	20014224 	.word	0x20014224
 8005208:	2001421c 	.word	0x2001421c
 800520c:	e0001004 	.word	0xe0001004

08005210 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005218:	4a04      	ldr	r2, [pc, #16]	; (800522c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6113      	str	r3, [r2, #16]
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20014224 	.word	0x20014224

08005230 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005238:	f3ef 8311 	mrs	r3, BASEPRI
 800523c:	f04f 0120 	mov.w	r1, #32
 8005240:	f381 8811 	msr	BASEPRI, r1
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	4808      	ldr	r0, [pc, #32]	; (8005268 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005248:	f7ff fa2a 	bl	80046a0 <_PreparePacket>
 800524c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68b8      	ldr	r0, [r7, #8]
 8005254:	f7ff fb16 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f383 8811 	msr	BASEPRI, r3
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20014254 	.word	0x20014254

0800526c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005276:	f3ef 8311 	mrs	r3, BASEPRI
 800527a:	f04f 0120 	mov.w	r1, #32
 800527e:	f381 8811 	msr	BASEPRI, r1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	4816      	ldr	r0, [pc, #88]	; (80052e0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005286:	f7ff fa0b 	bl	80046a0 <_PreparePacket>
 800528a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	e00b      	b.n	80052b2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	1c59      	adds	r1, r3, #1
 80052a2:	61f9      	str	r1, [r7, #28]
 80052a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	09db      	lsrs	r3, r3, #7
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b7f      	cmp	r3, #127	; 0x7f
 80052b6:	d8f0      	bhi.n	800529a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	61fa      	str	r2, [r7, #28]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	6938      	ldr	r0, [r7, #16]
 80052ce:	f7ff fad9 	bl	8004884 <_SendPacket>
  RECORD_END();
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f383 8811 	msr	BASEPRI, r3
}
 80052d8:	bf00      	nop
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20014254 	.word	0x20014254

080052e4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	; 0x30
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052f0:	f3ef 8311 	mrs	r3, BASEPRI
 80052f4:	f04f 0120 	mov.w	r1, #32
 80052f8:	f381 8811 	msr	BASEPRI, r1
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	4825      	ldr	r0, [pc, #148]	; (8005394 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005300:	f7ff f9ce 	bl	80046a0 <_PreparePacket>
 8005304:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
 8005312:	e00b      	b.n	800532c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	b2da      	uxtb	r2, r3
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	1c59      	adds	r1, r3, #1
 800531c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800531e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	09db      	lsrs	r3, r3, #7
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	2b7f      	cmp	r3, #127	; 0x7f
 8005330:	d8f0      	bhi.n	8005314 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	e00b      	b.n	8005364 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	6279      	str	r1, [r7, #36]	; 0x24
 8005356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	09db      	lsrs	r3, r3, #7
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	2b7f      	cmp	r3, #127	; 0x7f
 8005368:	d8f0      	bhi.n	800534c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	627a      	str	r2, [r7, #36]	; 0x24
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	6979      	ldr	r1, [r7, #20]
 800537e:	69b8      	ldr	r0, [r7, #24]
 8005380:	f7ff fa80 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f383 8811 	msr	BASEPRI, r3
}
 800538a:	bf00      	nop
 800538c:	3730      	adds	r7, #48	; 0x30
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20014254 	.word	0x20014254

08005398 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b090      	sub	sp, #64	; 0x40
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80053a6:	f3ef 8311 	mrs	r3, BASEPRI
 80053aa:	f04f 0120 	mov.w	r1, #32
 80053ae:	f381 8811 	msr	BASEPRI, r1
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	4840      	ldr	r0, [pc, #256]	; (80054b8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80053b6:	f7ff f973 	bl	80046a0 <_PreparePacket>
 80053ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053c8:	e00b      	b.n	80053e2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d0:	1c59      	adds	r1, r3, #1
 80053d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80053d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	09db      	lsrs	r3, r3, #7
 80053e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	2b7f      	cmp	r3, #127	; 0x7f
 80053e6:	d8f0      	bhi.n	80053ca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005400:	e00b      	b.n	800541a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	b2da      	uxtb	r2, r3
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	1c59      	adds	r1, r3, #1
 800540a:	6379      	str	r1, [r7, #52]	; 0x34
 800540c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	09db      	lsrs	r3, r3, #7
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2b7f      	cmp	r3, #127	; 0x7f
 800541e:	d8f0      	bhi.n	8005402 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	637a      	str	r2, [r7, #52]	; 0x34
 8005426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
 8005438:	e00b      	b.n	8005452 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	b2da      	uxtb	r2, r3
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	1c59      	adds	r1, r3, #1
 8005442:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	09db      	lsrs	r3, r3, #7
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	2b7f      	cmp	r3, #127	; 0x7f
 8005456:	d8f0      	bhi.n	800543a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800545e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
 800546c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546e:	623b      	str	r3, [r7, #32]
 8005470:	e00b      	b.n	800548a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	1c59      	adds	r1, r3, #1
 800547a:	6279      	str	r1, [r7, #36]	; 0x24
 800547c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	09db      	lsrs	r3, r3, #7
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	2b7f      	cmp	r3, #127	; 0x7f
 800548e:	d8f0      	bhi.n	8005472 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	627a      	str	r2, [r7, #36]	; 0x24
 8005496:	6a3a      	ldr	r2, [r7, #32]
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	69b8      	ldr	r0, [r7, #24]
 80054a6:	f7ff f9ed 	bl	8004884 <_SendPacket>
  RECORD_END();
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f383 8811 	msr	BASEPRI, r3
}
 80054b0:	bf00      	nop
 80054b2:	3740      	adds	r7, #64	; 0x40
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20014254 	.word	0x20014254

080054bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08c      	sub	sp, #48	; 0x30
 80054c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80054c2:	4b59      	ldr	r3, [pc, #356]	; (8005628 <SEGGER_SYSVIEW_Start+0x16c>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80054c8:	f3ef 8311 	mrs	r3, BASEPRI
 80054cc:	f04f 0120 	mov.w	r1, #32
 80054d0:	f381 8811 	msr	BASEPRI, r1
 80054d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80054d6:	4b54      	ldr	r3, [pc, #336]	; (8005628 <SEGGER_SYSVIEW_Start+0x16c>)
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	220a      	movs	r2, #10
 80054dc:	4953      	ldr	r1, [pc, #332]	; (800562c <SEGGER_SYSVIEW_Start+0x170>)
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fa fe96 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80054ea:	f7fe fc8d 	bl	8003e08 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80054ee:	200a      	movs	r0, #10
 80054f0:	f7ff fe9e 	bl	8005230 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054f4:	f3ef 8311 	mrs	r3, BASEPRI
 80054f8:	f04f 0120 	mov.w	r1, #32
 80054fc:	f381 8811 	msr	BASEPRI, r1
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	484b      	ldr	r0, [pc, #300]	; (8005630 <SEGGER_SYSVIEW_Start+0x174>)
 8005504:	f7ff f8cc 	bl	80046a0 <_PreparePacket>
 8005508:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005512:	4b45      	ldr	r3, [pc, #276]	; (8005628 <SEGGER_SYSVIEW_Start+0x16c>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
 8005518:	e00b      	b.n	8005532 <SEGGER_SYSVIEW_Start+0x76>
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	b2da      	uxtb	r2, r3
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	1c59      	adds	r1, r3, #1
 8005522:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	09db      	lsrs	r3, r3, #7
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	2b7f      	cmp	r3, #127	; 0x7f
 8005536:	d8f0      	bhi.n	800551a <SEGGER_SYSVIEW_Start+0x5e>
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800553e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <SEGGER_SYSVIEW_Start+0x16c>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	623b      	str	r3, [r7, #32]
 8005552:	e00b      	b.n	800556c <SEGGER_SYSVIEW_Start+0xb0>
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	1c59      	adds	r1, r3, #1
 800555c:	6279      	str	r1, [r7, #36]	; 0x24
 800555e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	09db      	lsrs	r3, r3, #7
 800556a:	623b      	str	r3, [r7, #32]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2b7f      	cmp	r3, #127	; 0x7f
 8005570:	d8f0      	bhi.n	8005554 <SEGGER_SYSVIEW_Start+0x98>
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	627a      	str	r2, [r7, #36]	; 0x24
 8005578:	6a3a      	ldr	r2, [r7, #32]
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	4b28      	ldr	r3, [pc, #160]	; (8005628 <SEGGER_SYSVIEW_Start+0x16c>)
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	e00b      	b.n	80055a6 <SEGGER_SYSVIEW_Start+0xea>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	61f9      	str	r1, [r7, #28]
 8005598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	09db      	lsrs	r3, r3, #7
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b7f      	cmp	r3, #127	; 0x7f
 80055aa:	d8f0      	bhi.n	800558e <SEGGER_SYSVIEW_Start+0xd2>
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	61fa      	str	r2, [r7, #28]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e00b      	b.n	80055de <SEGGER_SYSVIEW_Start+0x122>
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	6179      	str	r1, [r7, #20]
 80055d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	09db      	lsrs	r3, r3, #7
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b7f      	cmp	r3, #127	; 0x7f
 80055e2:	d8f0      	bhi.n	80055c6 <SEGGER_SYSVIEW_Start+0x10a>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	617a      	str	r2, [r7, #20]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055f4:	2218      	movs	r2, #24
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff f943 	bl	8004884 <_SendPacket>
      RECORD_END();
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <SEGGER_SYSVIEW_Start+0x16c>)
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800560c:	4b06      	ldr	r3, [pc, #24]	; (8005628 <SEGGER_SYSVIEW_Start+0x16c>)
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005612:	f000 f9eb 	bl	80059ec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005616:	f000 f9b1 	bl	800597c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800561a:	f000 fc83 	bl	8005f24 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800561e:	bf00      	nop
 8005620:	3730      	adds	r7, #48	; 0x30
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20014224 	.word	0x20014224
 800562c:	08006364 	.word	0x08006364
 8005630:	20014254 	.word	0x20014254

08005634 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800563a:	f3ef 8311 	mrs	r3, BASEPRI
 800563e:	f04f 0120 	mov.w	r1, #32
 8005642:	f381 8811 	msr	BASEPRI, r1
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	480b      	ldr	r0, [pc, #44]	; (8005678 <SEGGER_SYSVIEW_Stop+0x44>)
 800564a:	f7ff f829 	bl	80046a0 <_PreparePacket>
 800564e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <SEGGER_SYSVIEW_Stop+0x48>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005658:	220b      	movs	r2, #11
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6838      	ldr	r0, [r7, #0]
 800565e:	f7ff f911 	bl	8004884 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005662:	4b06      	ldr	r3, [pc, #24]	; (800567c <SEGGER_SYSVIEW_Stop+0x48>)
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f383 8811 	msr	BASEPRI, r3
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20014254 	.word	0x20014254
 800567c:	20014224 	.word	0x20014224

08005680 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	; 0x30
 8005684:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005686:	f3ef 8311 	mrs	r3, BASEPRI
 800568a:	f04f 0120 	mov.w	r1, #32
 800568e:	f381 8811 	msr	BASEPRI, r1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	4845      	ldr	r0, [pc, #276]	; (80057ac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005696:	f7ff f803 	bl	80046a0 <_PreparePacket>
 800569a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a4:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056aa:	e00b      	b.n	80056c4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	1c59      	adds	r1, r3, #1
 80056b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	09db      	lsrs	r3, r3, #7
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2b7f      	cmp	r3, #127	; 0x7f
 80056c8:	d8f0      	bhi.n	80056ac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
 80056de:	4b34      	ldr	r3, [pc, #208]	; (80057b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	e00b      	b.n	80056fe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	6279      	str	r1, [r7, #36]	; 0x24
 80056f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	09db      	lsrs	r3, r3, #7
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	2b7f      	cmp	r3, #127	; 0x7f
 8005702:	d8f0      	bhi.n	80056e6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	627a      	str	r2, [r7, #36]	; 0x24
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e00b      	b.n	8005738 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	61f9      	str	r1, [r7, #28]
 800572a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	09db      	lsrs	r3, r3, #7
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	d8f0      	bhi.n	8005720 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	61fa      	str	r2, [r7, #28]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e00b      	b.n	8005770 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1c59      	adds	r1, r3, #1
 8005760:	6179      	str	r1, [r7, #20]
 8005762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	09db      	lsrs	r3, r3, #7
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b7f      	cmp	r3, #127	; 0x7f
 8005774:	d8f0      	bhi.n	8005758 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	617a      	str	r2, [r7, #20]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005786:	2218      	movs	r2, #24
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	68b8      	ldr	r0, [r7, #8]
 800578c:	f7ff f87a 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	4798      	blx	r3
  }
}
 80057a4:	bf00      	nop
 80057a6:	3730      	adds	r7, #48	; 0x30
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	20014254 	.word	0x20014254
 80057b0:	20014224 	.word	0x20014224

080057b4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b092      	sub	sp, #72	; 0x48
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80057bc:	f3ef 8311 	mrs	r3, BASEPRI
 80057c0:	f04f 0120 	mov.w	r1, #32
 80057c4:	f381 8811 	msr	BASEPRI, r1
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	486a      	ldr	r0, [pc, #424]	; (8005974 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80057cc:	f7fe ff68 	bl	80046a0 <_PreparePacket>
 80057d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	647b      	str	r3, [r7, #68]	; 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b66      	ldr	r3, [pc, #408]	; (8005978 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40
 80057e6:	e00b      	b.n	8005800 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80057e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ee:	1c59      	adds	r1, r3, #1
 80057f0:	6479      	str	r1, [r7, #68]	; 0x44
 80057f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fc:	09db      	lsrs	r3, r3, #7
 80057fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005802:	2b7f      	cmp	r3, #127	; 0x7f
 8005804:	d8f0      	bhi.n	80057e8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	647a      	str	r2, [r7, #68]	; 0x44
 800580c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005814:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005820:	e00b      	b.n	800583a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	b2da      	uxtb	r2, r3
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	1c59      	adds	r1, r3, #1
 800582a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800582c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	09db      	lsrs	r3, r3, #7
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	2b7f      	cmp	r3, #127	; 0x7f
 800583e:	d8f0      	bhi.n	8005822 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	4619      	mov	r1, r3
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7fe fed1 	bl	8004600 <_EncodeStr>
 800585e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005860:	2209      	movs	r2, #9
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	6938      	ldr	r0, [r7, #16]
 8005866:	f7ff f80d 	bl	8004884 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b40      	ldr	r3, [pc, #256]	; (8005978 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	633b      	str	r3, [r7, #48]	; 0x30
 800587e:	e00b      	b.n	8005898 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	b2da      	uxtb	r2, r3
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	1c59      	adds	r1, r3, #1
 8005888:	6379      	str	r1, [r7, #52]	; 0x34
 800588a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	09db      	lsrs	r3, r3, #7
 8005896:	633b      	str	r3, [r7, #48]	; 0x30
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	2b7f      	cmp	r3, #127	; 0x7f
 800589c:	d8f0      	bhi.n	8005880 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	637a      	str	r2, [r7, #52]	; 0x34
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058b8:	e00b      	b.n	80058d2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	1c59      	adds	r1, r3, #1
 80058c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	09db      	lsrs	r3, r3, #7
 80058d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	2b7f      	cmp	r3, #127	; 0x7f
 80058d6:	d8f0      	bhi.n	80058ba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	623b      	str	r3, [r7, #32]
 80058f2:	e00b      	b.n	800590c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	6279      	str	r1, [r7, #36]	; 0x24
 80058fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	09db      	lsrs	r3, r3, #7
 800590a:	623b      	str	r3, [r7, #32]
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	2b7f      	cmp	r3, #127	; 0x7f
 8005910:	d8f0      	bhi.n	80058f4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	627a      	str	r2, [r7, #36]	; 0x24
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	2300      	movs	r3, #0
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e00b      	b.n	8005944 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	b2da      	uxtb	r2, r3
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	1c59      	adds	r1, r3, #1
 8005934:	61f9      	str	r1, [r7, #28]
 8005936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	09db      	lsrs	r3, r3, #7
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b7f      	cmp	r3, #127	; 0x7f
 8005948:	d8f0      	bhi.n	800592c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	61fa      	str	r2, [r7, #28]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800595a:	2215      	movs	r2, #21
 800595c:	68f9      	ldr	r1, [r7, #12]
 800595e:	6938      	ldr	r0, [r7, #16]
 8005960:	f7fe ff90 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f383 8811 	msr	BASEPRI, r3
}
 800596a:	bf00      	nop
 800596c:	3748      	adds	r7, #72	; 0x48
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20014254 	.word	0x20014254
 8005978:	20014224 	.word	0x20014224

0800597c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005980:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d008      	beq.n	800599a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005992:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4798      	blx	r3
  }
}
 800599a:	bf00      	nop
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20014224 	.word	0x20014224

080059a4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059ac:	f3ef 8311 	mrs	r3, BASEPRI
 80059b0:	f04f 0120 	mov.w	r1, #32
 80059b4:	f381 8811 	msr	BASEPRI, r1
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	480b      	ldr	r0, [pc, #44]	; (80059e8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80059bc:	f7fe fe70 	bl	80046a0 <_PreparePacket>
 80059c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	6938      	ldr	r0, [r7, #16]
 80059c8:	f7fe fe1a 	bl	8004600 <_EncodeStr>
 80059cc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80059ce:	220e      	movs	r2, #14
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	6938      	ldr	r0, [r7, #16]
 80059d4:	f7fe ff56 	bl	8004884 <_SendPacket>
  RECORD_END();
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f383 8811 	msr	BASEPRI, r3
}
 80059de:	bf00      	nop
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20014254 	.word	0x20014254

080059ec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01a      	beq.n	8005a30 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005a04:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4798      	blx	r3
 8005a0c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005a10:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005a12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	000a      	movs	r2, r1
 8005a20:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005a22:	4613      	mov	r3, r2
 8005a24:	461a      	mov	r2, r3
 8005a26:	4621      	mov	r1, r4
 8005a28:	200d      	movs	r0, #13
 8005a2a:	f7ff fc5b 	bl	80052e4 <SEGGER_SYSVIEW_RecordU32x2>
 8005a2e:	e006      	b.n	8005a3e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4619      	mov	r1, r3
 8005a36:	200c      	movs	r0, #12
 8005a38:	f7ff fc18 	bl	800526c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd90      	pop	{r4, r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20014224 	.word	0x20014224
 8005a4c:	e0001004 	.word	0xe0001004

08005a50 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a56:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5a:	f04f 0120 	mov.w	r1, #32
 8005a5e:	f381 8811 	msr	BASEPRI, r1
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	4819      	ldr	r0, [pc, #100]	; (8005acc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005a66:	f7fe fe1b 	bl	80046a0 <_PreparePacket>
 8005a6a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a78:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e00b      	b.n	8005a9c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	6179      	str	r1, [r7, #20]
 8005a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa0:	d8f0      	bhi.n	8005a84 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	617a      	str	r2, [r7, #20]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	68b8      	ldr	r0, [r7, #8]
 8005ab8:	f7fe fee4 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f383 8811 	msr	BASEPRI, r3
}
 8005ac2:	bf00      	nop
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20014254 	.word	0x20014254
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ada:	f3ef 8311 	mrs	r3, BASEPRI
 8005ade:	f04f 0120 	mov.w	r1, #32
 8005ae2:	f381 8811 	msr	BASEPRI, r1
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	4807      	ldr	r0, [pc, #28]	; (8005b08 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005aea:	f7fe fdd9 	bl	80046a0 <_PreparePacket>
 8005aee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005af0:	2203      	movs	r2, #3
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6838      	ldr	r0, [r7, #0]
 8005af6:	f7fe fec5 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f383 8811 	msr	BASEPRI, r3
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20014254 	.word	0x20014254

08005b0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b12:	f3ef 8311 	mrs	r3, BASEPRI
 8005b16:	f04f 0120 	mov.w	r1, #32
 8005b1a:	f381 8811 	msr	BASEPRI, r1
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	4807      	ldr	r0, [pc, #28]	; (8005b40 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005b22:	f7fe fdbd 	bl	80046a0 <_PreparePacket>
 8005b26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005b28:	2212      	movs	r2, #18
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6838      	ldr	r0, [r7, #0]
 8005b2e:	f7fe fea9 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f383 8811 	msr	BASEPRI, r3
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20014254 	.word	0x20014254

08005b44 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b4e:	f04f 0120 	mov.w	r1, #32
 8005b52:	f381 8811 	msr	BASEPRI, r1
 8005b56:	607b      	str	r3, [r7, #4]
 8005b58:	4807      	ldr	r0, [pc, #28]	; (8005b78 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005b5a:	f7fe fda1 	bl	80046a0 <_PreparePacket>
 8005b5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005b60:	2211      	movs	r2, #17
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6838      	ldr	r0, [r7, #0]
 8005b66:	f7fe fe8d 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f383 8811 	msr	BASEPRI, r3
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20014254 	.word	0x20014254

08005b7c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b84:	f3ef 8311 	mrs	r3, BASEPRI
 8005b88:	f04f 0120 	mov.w	r1, #32
 8005b8c:	f381 8811 	msr	BASEPRI, r1
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	4819      	ldr	r0, [pc, #100]	; (8005bf8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005b94:	f7fe fd84 	bl	80046a0 <_PreparePacket>
 8005b98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b9e:	4b17      	ldr	r3, [pc, #92]	; (8005bfc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	e00b      	b.n	8005bca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	1c59      	adds	r1, r3, #1
 8005bba:	61f9      	str	r1, [r7, #28]
 8005bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	09db      	lsrs	r3, r3, #7
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bce:	d8f0      	bhi.n	8005bb2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	61fa      	str	r2, [r7, #28]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005be0:	2208      	movs	r2, #8
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	6938      	ldr	r0, [r7, #16]
 8005be6:	f7fe fe4d 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f383 8811 	msr	BASEPRI, r3
}
 8005bf0:	bf00      	nop
 8005bf2:	3720      	adds	r7, #32
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20014254 	.word	0x20014254
 8005bfc:	20014224 	.word	0x20014224

08005c00 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c08:	f3ef 8311 	mrs	r3, BASEPRI
 8005c0c:	f04f 0120 	mov.w	r1, #32
 8005c10:	f381 8811 	msr	BASEPRI, r1
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	4819      	ldr	r0, [pc, #100]	; (8005c7c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005c18:	f7fe fd42 	bl	80046a0 <_PreparePacket>
 8005c1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c22:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	61bb      	str	r3, [r7, #24]
 8005c34:	e00b      	b.n	8005c4e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	1c59      	adds	r1, r3, #1
 8005c3e:	61f9      	str	r1, [r7, #28]
 8005c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	09db      	lsrs	r3, r3, #7
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b7f      	cmp	r3, #127	; 0x7f
 8005c52:	d8f0      	bhi.n	8005c36 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	61fa      	str	r2, [r7, #28]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005c64:	2204      	movs	r2, #4
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	6938      	ldr	r0, [r7, #16]
 8005c6a:	f7fe fe0b 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f383 8811 	msr	BASEPRI, r3
}
 8005c74:	bf00      	nop
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20014254 	.word	0x20014254
 8005c80:	20014224 	.word	0x20014224

08005c84 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c90:	f04f 0120 	mov.w	r1, #32
 8005c94:	f381 8811 	msr	BASEPRI, r1
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	4819      	ldr	r0, [pc, #100]	; (8005d00 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005c9c:	f7fe fd00 	bl	80046a0 <_PreparePacket>
 8005ca0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ca6:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	e00b      	b.n	8005cd2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1c59      	adds	r1, r3, #1
 8005cc2:	61f9      	str	r1, [r7, #28]
 8005cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	09db      	lsrs	r3, r3, #7
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd6:	d8f0      	bhi.n	8005cba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	61fa      	str	r2, [r7, #28]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005ce8:	2206      	movs	r2, #6
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	6938      	ldr	r0, [r7, #16]
 8005cee:	f7fe fdc9 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f383 8811 	msr	BASEPRI, r3
}
 8005cf8:	bf00      	nop
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20014254 	.word	0x20014254
 8005d04:	20014224 	.word	0x20014224

08005d08 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d12:	f3ef 8311 	mrs	r3, BASEPRI
 8005d16:	f04f 0120 	mov.w	r1, #32
 8005d1a:	f381 8811 	msr	BASEPRI, r1
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	4827      	ldr	r0, [pc, #156]	; (8005dc0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005d22:	f7fe fcbd 	bl	80046a0 <_PreparePacket>
 8005d26:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d2c:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	e00b      	b.n	8005d58 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	6279      	str	r1, [r7, #36]	; 0x24
 8005d4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	09db      	lsrs	r3, r3, #7
 8005d56:	623b      	str	r3, [r7, #32]
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5c:	d8f0      	bhi.n	8005d40 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	627a      	str	r2, [r7, #36]	; 0x24
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	e00b      	b.n	8005d90 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	61f9      	str	r1, [r7, #28]
 8005d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	09db      	lsrs	r3, r3, #7
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b7f      	cmp	r3, #127	; 0x7f
 8005d94:	d8f0      	bhi.n	8005d78 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	61fa      	str	r2, [r7, #28]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005da6:	2207      	movs	r2, #7
 8005da8:	68f9      	ldr	r1, [r7, #12]
 8005daa:	6938      	ldr	r0, [r7, #16]
 8005dac:	f7fe fd6a 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f383 8811 	msr	BASEPRI, r3
}
 8005db6:	bf00      	nop
 8005db8:	3728      	adds	r7, #40	; 0x28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20014254 	.word	0x20014254
 8005dc4:	20014224 	.word	0x20014224

08005dc8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	1ad3      	subs	r3, r2, r3
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	20014224 	.word	0x20014224

08005de8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08c      	sub	sp, #48	; 0x30
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005df2:	4b3b      	ldr	r3, [pc, #236]	; (8005ee0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d06d      	beq.n	8005ed6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005dfa:	4b39      	ldr	r3, [pc, #228]	; (8005ee0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005e00:	2300      	movs	r3, #0
 8005e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e04:	e008      	b.n	8005e18 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	3301      	adds	r3, #1
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3f2      	bcc.n	8005e06 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005e20:	e000      	b.n	8005e24 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005e22:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d055      	beq.n	8005ed6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e2e:	f04f 0120 	mov.w	r1, #32
 8005e32:	f381 8811 	msr	BASEPRI, r1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	482a      	ldr	r0, [pc, #168]	; (8005ee4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005e3a:	f7fe fc31 	bl	80046a0 <_PreparePacket>
 8005e3e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	623b      	str	r3, [r7, #32]
 8005e4c:	e00b      	b.n	8005e66 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	1c59      	adds	r1, r3, #1
 8005e56:	6279      	str	r1, [r7, #36]	; 0x24
 8005e58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	09db      	lsrs	r3, r3, #7
 8005e64:	623b      	str	r3, [r7, #32]
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6a:	d8f0      	bhi.n	8005e4e <SEGGER_SYSVIEW_SendModule+0x66>
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	627a      	str	r2, [r7, #36]	; 0x24
 8005e72:	6a3a      	ldr	r2, [r7, #32]
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	e00b      	b.n	8005ea0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	1c59      	adds	r1, r3, #1
 8005e90:	61f9      	str	r1, [r7, #28]
 8005e92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	09db      	lsrs	r3, r3, #7
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea4:	d8f0      	bhi.n	8005e88 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	61fa      	str	r2, [r7, #28]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2280      	movs	r2, #128	; 0x80
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7fe fb9e 	bl	8004600 <_EncodeStr>
 8005ec4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005ec6:	2216      	movs	r2, #22
 8005ec8:	68f9      	ldr	r1, [r7, #12]
 8005eca:	6938      	ldr	r0, [r7, #16]
 8005ecc:	f7fe fcda 	bl	8004884 <_SendPacket>
      RECORD_END();
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	3730      	adds	r7, #48	; 0x30
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	2001424c 	.word	0x2001424c
 8005ee4:	20014254 	.word	0x20014254

08005ee8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005eee:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f2      	bne.n	8005efc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	2001424c 	.word	0x2001424c

08005f24 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f2e:	f04f 0120 	mov.w	r1, #32
 8005f32:	f381 8811 	msr	BASEPRI, r1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	4817      	ldr	r0, [pc, #92]	; (8005f98 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005f3a:	f7fe fbb1 	bl	80046a0 <_PreparePacket>
 8005f3e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	e00b      	b.n	8005f68 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	1c59      	adds	r1, r3, #1
 8005f58:	6179      	str	r1, [r7, #20]
 8005f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	09db      	lsrs	r3, r3, #7
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f6c:	d8f0      	bhi.n	8005f50 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	617a      	str	r2, [r7, #20]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005f7e:	221b      	movs	r2, #27
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	68b8      	ldr	r0, [r7, #8]
 8005f84:	f7fe fc7e 	bl	8004884 <_SendPacket>
  RECORD_END();
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20014254 	.word	0x20014254
 8005f9c:	20014250 	.word	0x20014250

08005fa0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005fa0:	b40f      	push	{r0, r1, r2, r3}
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005fa8:	f107 0314 	add.w	r3, r7, #20
 8005fac:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005fae:	1d3b      	adds	r3, r7, #4
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	6938      	ldr	r0, [r7, #16]
 8005fb6:	f7fe feef 	bl	8004d98 <_VPrintTarget>
  va_end(ParamList);
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fc4:	b004      	add	sp, #16
 8005fc6:	4770      	bx	lr

08005fc8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd4:	f04f 0120 	mov.w	r1, #32
 8005fd8:	f381 8811 	msr	BASEPRI, r1
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	4827      	ldr	r0, [pc, #156]	; (800607c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005fe0:	f7fe fb5e 	bl	80046a0 <_PreparePacket>
 8005fe4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	6938      	ldr	r0, [r7, #16]
 8005fec:	f7fe fb08 	bl	8004600 <_EncodeStr>
 8005ff0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	e00b      	b.n	8006014 <SEGGER_SYSVIEW_Warn+0x4c>
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	6279      	str	r1, [r7, #36]	; 0x24
 8006006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	09db      	lsrs	r3, r3, #7
 8006012:	623b      	str	r3, [r7, #32]
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	2b7f      	cmp	r3, #127	; 0x7f
 8006018:	d8f0      	bhi.n	8005ffc <SEGGER_SYSVIEW_Warn+0x34>
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	627a      	str	r2, [r7, #36]	; 0x24
 8006020:	6a3a      	ldr	r2, [r7, #32]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	e00b      	b.n	800604c <SEGGER_SYSVIEW_Warn+0x84>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	1c59      	adds	r1, r3, #1
 800603c:	61f9      	str	r1, [r7, #28]
 800603e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	09db      	lsrs	r3, r3, #7
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b7f      	cmp	r3, #127	; 0x7f
 8006050:	d8f0      	bhi.n	8006034 <SEGGER_SYSVIEW_Warn+0x6c>
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	61fa      	str	r2, [r7, #28]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006062:	221a      	movs	r2, #26
 8006064:	68f9      	ldr	r1, [r7, #12]
 8006066:	6938      	ldr	r0, [r7, #16]
 8006068:	f7fe fc0c 	bl	8004884 <_SendPacket>
  RECORD_END();
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f383 8811 	msr	BASEPRI, r3
}
 8006072:	bf00      	nop
 8006074:	3728      	adds	r7, #40	; 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20014254 	.word	0x20014254

08006080 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006084:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006086:	7e1b      	ldrb	r3, [r3, #24]
 8006088:	4619      	mov	r1, r3
 800608a:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800608c:	460b      	mov	r3, r1
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	440b      	add	r3, r1
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4413      	add	r3, r2
 8006096:	336c      	adds	r3, #108	; 0x6c
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800609c:	7e1b      	ldrb	r3, [r3, #24]
 800609e:	4618      	mov	r0, r3
 80060a0:	490d      	ldr	r1, [pc, #52]	; (80060d8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80060a2:	4603      	mov	r3, r0
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	4403      	add	r3, r0
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	440b      	add	r3, r1
 80060ac:	3370      	adds	r3, #112	; 0x70
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d00b      	beq.n	80060cc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80060b4:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80060b6:	789b      	ldrb	r3, [r3, #2]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d107      	bne.n	80060cc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80060be:	2201      	movs	r2, #1
 80060c0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80060c2:	f7fe faf9 	bl	80046b8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80060c6:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80060cc:	4b01      	ldr	r3, [pc, #4]	; (80060d4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20014224 	.word	0x20014224
 80060d8:	20014394 	.word	0x20014394

080060dc <__libc_init_array>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	4d0d      	ldr	r5, [pc, #52]	; (8006114 <__libc_init_array+0x38>)
 80060e0:	4c0d      	ldr	r4, [pc, #52]	; (8006118 <__libc_init_array+0x3c>)
 80060e2:	1b64      	subs	r4, r4, r5
 80060e4:	10a4      	asrs	r4, r4, #2
 80060e6:	2600      	movs	r6, #0
 80060e8:	42a6      	cmp	r6, r4
 80060ea:	d109      	bne.n	8006100 <__libc_init_array+0x24>
 80060ec:	4d0b      	ldr	r5, [pc, #44]	; (800611c <__libc_init_array+0x40>)
 80060ee:	4c0c      	ldr	r4, [pc, #48]	; (8006120 <__libc_init_array+0x44>)
 80060f0:	f000 f83c 	bl	800616c <_init>
 80060f4:	1b64      	subs	r4, r4, r5
 80060f6:	10a4      	asrs	r4, r4, #2
 80060f8:	2600      	movs	r6, #0
 80060fa:	42a6      	cmp	r6, r4
 80060fc:	d105      	bne.n	800610a <__libc_init_array+0x2e>
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	f855 3b04 	ldr.w	r3, [r5], #4
 8006104:	4798      	blx	r3
 8006106:	3601      	adds	r6, #1
 8006108:	e7ee      	b.n	80060e8 <__libc_init_array+0xc>
 800610a:	f855 3b04 	ldr.w	r3, [r5], #4
 800610e:	4798      	blx	r3
 8006110:	3601      	adds	r6, #1
 8006112:	e7f2      	b.n	80060fa <__libc_init_array+0x1e>
 8006114:	08006388 	.word	0x08006388
 8006118:	08006388 	.word	0x08006388
 800611c:	08006388 	.word	0x08006388
 8006120:	0800638c 	.word	0x0800638c

08006124 <memcmp>:
 8006124:	b530      	push	{r4, r5, lr}
 8006126:	3901      	subs	r1, #1
 8006128:	2400      	movs	r4, #0
 800612a:	42a2      	cmp	r2, r4
 800612c:	d101      	bne.n	8006132 <memcmp+0xe>
 800612e:	2000      	movs	r0, #0
 8006130:	e005      	b.n	800613e <memcmp+0x1a>
 8006132:	5d03      	ldrb	r3, [r0, r4]
 8006134:	3401      	adds	r4, #1
 8006136:	5d0d      	ldrb	r5, [r1, r4]
 8006138:	42ab      	cmp	r3, r5
 800613a:	d0f6      	beq.n	800612a <memcmp+0x6>
 800613c:	1b58      	subs	r0, r3, r5
 800613e:	bd30      	pop	{r4, r5, pc}

08006140 <memcpy>:
 8006140:	440a      	add	r2, r1
 8006142:	4291      	cmp	r1, r2
 8006144:	f100 33ff 	add.w	r3, r0, #4294967295
 8006148:	d100      	bne.n	800614c <memcpy+0xc>
 800614a:	4770      	bx	lr
 800614c:	b510      	push	{r4, lr}
 800614e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006156:	4291      	cmp	r1, r2
 8006158:	d1f9      	bne.n	800614e <memcpy+0xe>
 800615a:	bd10      	pop	{r4, pc}

0800615c <memset>:
 800615c:	4402      	add	r2, r0
 800615e:	4603      	mov	r3, r0
 8006160:	4293      	cmp	r3, r2
 8006162:	d100      	bne.n	8006166 <memset+0xa>
 8006164:	4770      	bx	lr
 8006166:	f803 1b01 	strb.w	r1, [r3], #1
 800616a:	e7f9      	b.n	8006160 <memset+0x4>

0800616c <_init>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr

08006178 <_fini>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr
