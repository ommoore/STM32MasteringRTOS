
008Queues_and_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08009d38  08009d38  00019d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a23c  0800a23c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a23c  0800a23c  0001a23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a244  0800a244  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a244  0800a244  0001a244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a248  0800a248  0001a248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a24c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013590  20000090  0800a2dc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013620  0800a2dc  00023620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000261df  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000494a  00000000  00000000  0004629f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0004abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  0004c4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e4f  00000000  00000000  0004dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002434b  00000000  00000000  00075a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e73ae  00000000  00000000  00099d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b8  00000000  00000000  00181174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d20 	.word	0x08009d20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08009d20 	.word	0x08009d20

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013568 	.word	0x20013568

080002a4 <strcmp>:
 80002a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d0f7      	beq.n	80002a4 <strcmp>
 80002b4:	1ad0      	subs	r0, r2, r3
 80002b6:	4770      	bx	lr

080002b8 <strlen>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1fb      	bne.n	80002ba <strlen+0x2>
 80002c2:	1a18      	subs	r0, r3, r0
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295
 8000380:	f04f 30ff 	movne.w	r0, #4294967295
 8000384:	f000 b96e 	b.w	8000664 <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	4604      	mov	r4, r0
 80003a8:	468c      	mov	ip, r1
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8083 	bne.w	80004b6 <__udivmoddi4+0x116>
 80003b0:	428a      	cmp	r2, r1
 80003b2:	4617      	mov	r7, r2
 80003b4:	d947      	bls.n	8000446 <__udivmoddi4+0xa6>
 80003b6:	fab2 f282 	clz	r2, r2
 80003ba:	b142      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003bc:	f1c2 0020 	rsb	r0, r2, #32
 80003c0:	fa24 f000 	lsr.w	r0, r4, r0
 80003c4:	4091      	lsls	r1, r2
 80003c6:	4097      	lsls	r7, r2
 80003c8:	ea40 0c01 	orr.w	ip, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fbbc f6f8 	udiv	r6, ip, r8
 80003d8:	fa1f fe87 	uxth.w	lr, r7
 80003dc:	fb08 c116 	mls	r1, r8, r6, ip
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f10e 	mul.w	r1, r6, lr
 80003e8:	4299      	cmp	r1, r3
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x60>
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80003f2:	f080 8119 	bcs.w	8000628 <__udivmoddi4+0x288>
 80003f6:	4299      	cmp	r1, r3
 80003f8:	f240 8116 	bls.w	8000628 <__udivmoddi4+0x288>
 80003fc:	3e02      	subs	r6, #2
 80003fe:	443b      	add	r3, r7
 8000400:	1a5b      	subs	r3, r3, r1
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d909      	bls.n	800042c <__udivmoddi4+0x8c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	f080 8105 	bcs.w	800062c <__udivmoddi4+0x28c>
 8000422:	45a6      	cmp	lr, r4
 8000424:	f240 8102 	bls.w	800062c <__udivmoddi4+0x28c>
 8000428:	3802      	subs	r0, #2
 800042a:	443c      	add	r4, r7
 800042c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000430:	eba4 040e 	sub.w	r4, r4, lr
 8000434:	2600      	movs	r6, #0
 8000436:	b11d      	cbz	r5, 8000440 <__udivmoddi4+0xa0>
 8000438:	40d4      	lsrs	r4, r2
 800043a:	2300      	movs	r3, #0
 800043c:	e9c5 4300 	strd	r4, r3, [r5]
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	b902      	cbnz	r2, 800044a <__udivmoddi4+0xaa>
 8000448:	deff      	udf	#255	; 0xff
 800044a:	fab2 f282 	clz	r2, r2
 800044e:	2a00      	cmp	r2, #0
 8000450:	d150      	bne.n	80004f4 <__udivmoddi4+0x154>
 8000452:	1bcb      	subs	r3, r1, r7
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	fa1f f887 	uxth.w	r8, r7
 800045c:	2601      	movs	r6, #1
 800045e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000462:	0c21      	lsrs	r1, r4, #16
 8000464:	fb0e 331c 	mls	r3, lr, ip, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb08 f30c 	mul.w	r3, r8, ip
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0xe4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0xe2>
 800047c:	428b      	cmp	r3, r1
 800047e:	f200 80e9 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 8000482:	4684      	mov	ip, r0
 8000484:	1ac9      	subs	r1, r1, r3
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000490:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x10c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x10a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80d9 	bhi.w	800065c <__udivmoddi4+0x2bc>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e7bf      	b.n	8000436 <__udivmoddi4+0x96>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d909      	bls.n	80004ce <__udivmoddi4+0x12e>
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	f000 80b1 	beq.w	8000622 <__udivmoddi4+0x282>
 80004c0:	2600      	movs	r6, #0
 80004c2:	e9c5 0100 	strd	r0, r1, [r5]
 80004c6:	4630      	mov	r0, r6
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	fab3 f683 	clz	r6, r3
 80004d2:	2e00      	cmp	r6, #0
 80004d4:	d14a      	bne.n	800056c <__udivmoddi4+0x1cc>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d302      	bcc.n	80004e0 <__udivmoddi4+0x140>
 80004da:	4282      	cmp	r2, r0
 80004dc:	f200 80b8 	bhi.w	8000650 <__udivmoddi4+0x2b0>
 80004e0:	1a84      	subs	r4, r0, r2
 80004e2:	eb61 0103 	sbc.w	r1, r1, r3
 80004e6:	2001      	movs	r0, #1
 80004e8:	468c      	mov	ip, r1
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d0a8      	beq.n	8000440 <__udivmoddi4+0xa0>
 80004ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80004f2:	e7a5      	b.n	8000440 <__udivmoddi4+0xa0>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f603 	lsr.w	r6, r0, r3
 80004fc:	4097      	lsls	r7, r2
 80004fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000502:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000506:	40d9      	lsrs	r1, r3
 8000508:	4330      	orrs	r0, r6
 800050a:	0c03      	lsrs	r3, r0, #16
 800050c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000510:	fa1f f887 	uxth.w	r8, r7
 8000514:	fb0e 1116 	mls	r1, lr, r6, r1
 8000518:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800051c:	fb06 f108 	mul.w	r1, r6, r8
 8000520:	4299      	cmp	r1, r3
 8000522:	fa04 f402 	lsl.w	r4, r4, r2
 8000526:	d909      	bls.n	800053c <__udivmoddi4+0x19c>
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	f106 3cff 	add.w	ip, r6, #4294967295
 800052e:	f080 808d 	bcs.w	800064c <__udivmoddi4+0x2ac>
 8000532:	4299      	cmp	r1, r3
 8000534:	f240 808a 	bls.w	800064c <__udivmoddi4+0x2ac>
 8000538:	3e02      	subs	r6, #2
 800053a:	443b      	add	r3, r7
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b281      	uxth	r1, r0
 8000540:	fbb3 f0fe 	udiv	r0, r3, lr
 8000544:	fb0e 3310 	mls	r3, lr, r0, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb00 f308 	mul.w	r3, r0, r8
 8000550:	428b      	cmp	r3, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x1c4>
 8000554:	1879      	adds	r1, r7, r1
 8000556:	f100 3cff 	add.w	ip, r0, #4294967295
 800055a:	d273      	bcs.n	8000644 <__udivmoddi4+0x2a4>
 800055c:	428b      	cmp	r3, r1
 800055e:	d971      	bls.n	8000644 <__udivmoddi4+0x2a4>
 8000560:	3802      	subs	r0, #2
 8000562:	4439      	add	r1, r7
 8000564:	1acb      	subs	r3, r1, r3
 8000566:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800056a:	e778      	b.n	800045e <__udivmoddi4+0xbe>
 800056c:	f1c6 0c20 	rsb	ip, r6, #32
 8000570:	fa03 f406 	lsl.w	r4, r3, r6
 8000574:	fa22 f30c 	lsr.w	r3, r2, ip
 8000578:	431c      	orrs	r4, r3
 800057a:	fa20 f70c 	lsr.w	r7, r0, ip
 800057e:	fa01 f306 	lsl.w	r3, r1, r6
 8000582:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000586:	fa21 f10c 	lsr.w	r1, r1, ip
 800058a:	431f      	orrs	r7, r3
 800058c:	0c3b      	lsrs	r3, r7, #16
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fa1f f884 	uxth.w	r8, r4
 8000596:	fb0e 1119 	mls	r1, lr, r9, r1
 800059a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800059e:	fb09 fa08 	mul.w	sl, r9, r8
 80005a2:	458a      	cmp	sl, r1
 80005a4:	fa02 f206 	lsl.w	r2, r2, r6
 80005a8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x220>
 80005ae:	1861      	adds	r1, r4, r1
 80005b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005b4:	d248      	bcs.n	8000648 <__udivmoddi4+0x2a8>
 80005b6:	458a      	cmp	sl, r1
 80005b8:	d946      	bls.n	8000648 <__udivmoddi4+0x2a8>
 80005ba:	f1a9 0902 	sub.w	r9, r9, #2
 80005be:	4421      	add	r1, r4
 80005c0:	eba1 010a 	sub.w	r1, r1, sl
 80005c4:	b2bf      	uxth	r7, r7
 80005c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005d2:	fb00 f808 	mul.w	r8, r0, r8
 80005d6:	45b8      	cmp	r8, r7
 80005d8:	d907      	bls.n	80005ea <__udivmoddi4+0x24a>
 80005da:	19e7      	adds	r7, r4, r7
 80005dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005e0:	d22e      	bcs.n	8000640 <__udivmoddi4+0x2a0>
 80005e2:	45b8      	cmp	r8, r7
 80005e4:	d92c      	bls.n	8000640 <__udivmoddi4+0x2a0>
 80005e6:	3802      	subs	r0, #2
 80005e8:	4427      	add	r7, r4
 80005ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ee:	eba7 0708 	sub.w	r7, r7, r8
 80005f2:	fba0 8902 	umull	r8, r9, r0, r2
 80005f6:	454f      	cmp	r7, r9
 80005f8:	46c6      	mov	lr, r8
 80005fa:	4649      	mov	r1, r9
 80005fc:	d31a      	bcc.n	8000634 <__udivmoddi4+0x294>
 80005fe:	d017      	beq.n	8000630 <__udivmoddi4+0x290>
 8000600:	b15d      	cbz	r5, 800061a <__udivmoddi4+0x27a>
 8000602:	ebb3 020e 	subs.w	r2, r3, lr
 8000606:	eb67 0701 	sbc.w	r7, r7, r1
 800060a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800060e:	40f2      	lsrs	r2, r6
 8000610:	ea4c 0202 	orr.w	r2, ip, r2
 8000614:	40f7      	lsrs	r7, r6
 8000616:	e9c5 2700 	strd	r2, r7, [r5]
 800061a:	2600      	movs	r6, #0
 800061c:	4631      	mov	r1, r6
 800061e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000622:	462e      	mov	r6, r5
 8000624:	4628      	mov	r0, r5
 8000626:	e70b      	b.n	8000440 <__udivmoddi4+0xa0>
 8000628:	4606      	mov	r6, r0
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0x60>
 800062c:	4618      	mov	r0, r3
 800062e:	e6fd      	b.n	800042c <__udivmoddi4+0x8c>
 8000630:	4543      	cmp	r3, r8
 8000632:	d2e5      	bcs.n	8000600 <__udivmoddi4+0x260>
 8000634:	ebb8 0e02 	subs.w	lr, r8, r2
 8000638:	eb69 0104 	sbc.w	r1, r9, r4
 800063c:	3801      	subs	r0, #1
 800063e:	e7df      	b.n	8000600 <__udivmoddi4+0x260>
 8000640:	4608      	mov	r0, r1
 8000642:	e7d2      	b.n	80005ea <__udivmoddi4+0x24a>
 8000644:	4660      	mov	r0, ip
 8000646:	e78d      	b.n	8000564 <__udivmoddi4+0x1c4>
 8000648:	4681      	mov	r9, r0
 800064a:	e7b9      	b.n	80005c0 <__udivmoddi4+0x220>
 800064c:	4666      	mov	r6, ip
 800064e:	e775      	b.n	800053c <__udivmoddi4+0x19c>
 8000650:	4630      	mov	r0, r6
 8000652:	e74a      	b.n	80004ea <__udivmoddi4+0x14a>
 8000654:	f1ac 0c02 	sub.w	ip, ip, #2
 8000658:	4439      	add	r1, r7
 800065a:	e713      	b.n	8000484 <__udivmoddi4+0xe4>
 800065c:	3802      	subs	r0, #2
 800065e:	443c      	add	r4, r7
 8000660:	e724      	b.n	80004ac <__udivmoddi4+0x10c>
 8000662:	bf00      	nop

08000664 <__aeabi_idiv0>:
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <led_effect_stop>:
 *      Author: Oliver
 */

#include "main.h"

void led_effect_stop(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	e00e      	b.n	8000692 <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <led_effect_stop+0x3c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2200      	movs	r2, #0
 8000686:	2103      	movs	r1, #3
 8000688:	f005 feb6 	bl	80063f8 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3301      	adds	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b03      	cmp	r3, #3
 8000696:	dded      	ble.n	8000674 <led_effect_stop+0xc>
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20013444 	.word	0x20013444

080006a8 <led_effect>:

void led_effect(int n) {
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80006b0:	f7ff ffda 	bl	8000668 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	4a08      	ldr	r2, [pc, #32]	; (80006dc <led_effect+0x34>)
 80006ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80006be:	f005 f855 	bl	800576c <xTaskGetTickCount>
 80006c2:	4602      	mov	r2, r0
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	4620      	mov	r0, r4
 80006d0:	f005 fe92 	bl	80063f8 <xTimerGenericCommand>
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	20013444 	.word	0x20013444

080006e0 <turn_off_all_leds>:

void turn_off_all_leds(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_PORT, LED1, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <turn_off_all_leds+0x38>)
 80006ea:	f001 fd33 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_PORT, LED2, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <turn_off_all_leds+0x38>)
 80006f6:	f001 fd2d 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_PORT, LED3, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <turn_off_all_leds+0x38>)
 8000702:	f001 fd27 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_PORT, LED4, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <turn_off_all_leds+0x38>)
 800070e:	f001 fd21 	bl	8002154 <HAL_GPIO_WritePin>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020400 	.word	0x40020400

0800071c <turn_on_all_leds>:

void turn_on_all_leds(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_PORT, LED1, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <turn_on_all_leds+0x38>)
 8000726:	f001 fd15 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_PORT, LED2, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	4808      	ldr	r0, [pc, #32]	; (8000754 <turn_on_all_leds+0x38>)
 8000732:	f001 fd0f 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_PORT, LED3, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <turn_on_all_leds+0x38>)
 800073e:	f001 fd09 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_PORT, LED4, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <turn_on_all_leds+0x38>)
 800074a:	f001 fd03 	bl	8002154 <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020400 	.word	0x40020400

08000758 <turn_on_odd_leds>:

void turn_on_odd_leds(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_PORT, LED1, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <turn_on_odd_leds+0x38>)
 8000762:	f001 fcf7 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_PORT, LED2, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <turn_on_odd_leds+0x38>)
 800076e:	f001 fcf1 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_PORT, LED3, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <turn_on_odd_leds+0x38>)
 800077a:	f001 fceb 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_PORT, LED4, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <turn_on_odd_leds+0x38>)
 8000786:	f001 fce5 	bl	8002154 <HAL_GPIO_WritePin>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020400 	.word	0x40020400

08000794 <turn_on_even_leds>:

void turn_on_even_leds(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_PORT, LED1, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	480b      	ldr	r0, [pc, #44]	; (80007cc <turn_on_even_leds+0x38>)
 800079e:	f001 fcd9 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_PORT, LED2, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a8:	4808      	ldr	r0, [pc, #32]	; (80007cc <turn_on_even_leds+0x38>)
 80007aa:	f001 fcd3 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_PORT, LED3, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <turn_on_even_leds+0x38>)
 80007b6:	f001 fccd 	bl	8002154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_PORT, LED4, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <turn_on_even_leds+0x38>)
 80007c2:	f001 fcc7 	bl	8002154 <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020400 	.word	0x40020400

080007d0 <LED_control>:

void LED_control( int value ) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e013      	b.n	8000806 <LED_control+0x36>
	  HAL_GPIO_WritePin(GPIOB, (LED1 << i), ((value >> i)& 0x1));
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	b299      	uxth	r1, r3
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	fa42 f303 	asr.w	r3, r2, r3
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	461a      	mov	r2, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <LED_control+0x48>)
 80007fc:	f001 fcaa 	bl	8002154 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b03      	cmp	r3, #3
 800080a:	dde8      	ble.n	80007de <LED_control+0xe>
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40020400 	.word	0x40020400

0800081c <LED_effect1>:

void LED_effect1(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <LED_effect1+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f083 0301 	eor.w	r3, r3, #1
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <LED_effect1+0x28>)
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <LED_effect1+0x28>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <LED_effect1+0x1e>
 8000834:	f7ff ff54 	bl	80006e0 <turn_off_all_leds>
}
 8000838:	e001      	b.n	800083e <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 800083a:	f7ff ff6f 	bl	800071c <turn_on_all_leds>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000

08000848 <LED_effect2>:


void LED_effect2(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <LED_effect2+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <LED_effect2+0x28>)
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <LED_effect2+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <LED_effect2+0x1e>
 8000860:	f7ff ff98 	bl	8000794 <turn_on_even_leds>
}
 8000864:	e001      	b.n	800086a <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000866:	f7ff ff77 	bl	8000758 <turn_on_odd_leds>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000004 	.word	0x20000004

08000874 <LED_effect3>:

void LED_effect3(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x1 << (i++ % 4));
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <LED_effect3+0x2c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <LED_effect3+0x2c>)
 8000880:	600a      	str	r2, [r1, #0]
 8000882:	425a      	negs	r2, r3
 8000884:	f003 0303 	and.w	r3, r3, #3
 8000888:	f002 0203 	and.w	r2, r2, #3
 800088c:	bf58      	it	pl
 800088e:	4253      	negpl	r3, r2
 8000890:	2201      	movs	r2, #1
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff9a 	bl	80007d0 <LED_control>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000ac 	.word	0x200000ac

080008a4 <LED_effect4>:


void LED_effect4(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x08 >> (i++ % 4));
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <LED_effect4+0x2c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <LED_effect4+0x2c>)
 80008b0:	600a      	str	r2, [r1, #0]
 80008b2:	425a      	negs	r2, r3
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	f002 0203 	and.w	r2, r2, #3
 80008bc:	bf58      	it	pl
 80008be:	4253      	negpl	r3, r2
 80008c0:	2208      	movs	r2, #8
 80008c2:	fa42 f303 	asr.w	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff82 	bl	80007d0 <LED_control>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000b0 	.word	0x200000b0

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f001 f983 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f911 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 f9f7 	bl	8000cd4 <MX_GPIO_Init>
  MX_RTC_Init();
 80008e6:	f000 f9a5 	bl	8000c34 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80008ea:	f000 f9c9 	bl	8000c80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 80008ee:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <main+0x1cc>)
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	22fa      	movs	r2, #250	; 0xfa
 80008fa:	496a      	ldr	r1, [pc, #424]	; (8000aa4 <main+0x1d0>)
 80008fc:	486a      	ldr	r0, [pc, #424]	; (8000aa8 <main+0x1d4>)
 80008fe:	f004 fcc1 	bl	8005284 <xTaskCreate>
 8000902:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000904:	6a3b      	ldr	r3, [r7, #32]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d00a      	beq.n	8000920 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800091c:	bf00      	nop
 800091e:	e7fe      	b.n	800091e <main+0x4a>

	status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000920:	4b62      	ldr	r3, [pc, #392]	; (8000aac <main+0x1d8>)
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	2302      	movs	r3, #2
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	22fa      	movs	r2, #250	; 0xfa
 800092c:	4960      	ldr	r1, [pc, #384]	; (8000ab0 <main+0x1dc>)
 800092e:	4861      	ldr	r0, [pc, #388]	; (8000ab4 <main+0x1e0>)
 8000930:	f004 fca8 	bl	8005284 <xTaskCreate>
 8000934:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d00a      	beq.n	8000952 <main+0x7e>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	61bb      	str	r3, [r7, #24]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0x7c>

	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000952:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <main+0x1e4>)
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	2302      	movs	r3, #2
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	22fa      	movs	r2, #250	; 0xfa
 800095e:	4957      	ldr	r1, [pc, #348]	; (8000abc <main+0x1e8>)
 8000960:	4857      	ldr	r0, [pc, #348]	; (8000ac0 <main+0x1ec>)
 8000962:	f004 fc8f 	bl	8005284 <xTaskCreate>
 8000966:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d00a      	beq.n	8000984 <main+0xb0>
        __asm volatile
 800096e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000972:	f383 8811 	msr	BASEPRI, r3
 8000976:	f3bf 8f6f 	isb	sy
 800097a:	f3bf 8f4f 	dsb	sy
 800097e:	617b      	str	r3, [r7, #20]
    }
 8000980:	bf00      	nop
 8000982:	e7fe      	b.n	8000982 <main+0xae>

	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000984:	4b4f      	ldr	r3, [pc, #316]	; (8000ac4 <main+0x1f0>)
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	2302      	movs	r3, #2
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	22fa      	movs	r2, #250	; 0xfa
 8000990:	494d      	ldr	r1, [pc, #308]	; (8000ac8 <main+0x1f4>)
 8000992:	484e      	ldr	r0, [pc, #312]	; (8000acc <main+0x1f8>)
 8000994:	f004 fc76 	bl	8005284 <xTaskCreate>
 8000998:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d00a      	beq.n	80009b6 <main+0xe2>
        __asm volatile
 80009a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a4:	f383 8811 	msr	BASEPRI, r3
 80009a8:	f3bf 8f6f 	isb	sy
 80009ac:	f3bf 8f4f 	dsb	sy
 80009b0:	613b      	str	r3, [r7, #16]
    }
 80009b2:	bf00      	nop
 80009b4:	e7fe      	b.n	80009b4 <main+0xe0>

	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <main+0x1fc>)
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	2302      	movs	r3, #2
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	22fa      	movs	r2, #250	; 0xfa
 80009c2:	4944      	ldr	r1, [pc, #272]	; (8000ad4 <main+0x200>)
 80009c4:	4844      	ldr	r0, [pc, #272]	; (8000ad8 <main+0x204>)
 80009c6:	f004 fc5d 	bl	8005284 <xTaskCreate>
 80009ca:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80009cc:	6a3b      	ldr	r3, [r7, #32]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d00a      	beq.n	80009e8 <main+0x114>
        __asm volatile
 80009d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	60fb      	str	r3, [r7, #12]
    }
 80009e4:	bf00      	nop
 80009e6:	e7fe      	b.n	80009e6 <main+0x112>

	q_data = xQueueCreate(10, sizeof(char));
 80009e8:	2200      	movs	r2, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	200a      	movs	r0, #10
 80009ee:	f003 ff39 	bl	8004864 <xQueueGenericCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a39      	ldr	r2, [pc, #228]	; (8000adc <main+0x208>)
 80009f6:	6013      	str	r3, [r2, #0]
	configASSERT(q_data != NULL);
 80009f8:	4b38      	ldr	r3, [pc, #224]	; (8000adc <main+0x208>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10a      	bne.n	8000a16 <main+0x142>
        __asm volatile
 8000a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a04:	f383 8811 	msr	BASEPRI, r3
 8000a08:	f3bf 8f6f 	isb	sy
 8000a0c:	f3bf 8f4f 	dsb	sy
 8000a10:	60bb      	str	r3, [r7, #8]
    }
 8000a12:	bf00      	nop
 8000a14:	e7fe      	b.n	8000a14 <main+0x140>

	q_print = xQueueCreate(10, sizeof(size_t));
 8000a16:	2200      	movs	r2, #0
 8000a18:	2104      	movs	r1, #4
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f003 ff22 	bl	8004864 <xQueueGenericCreate>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <main+0x20c>)
 8000a24:	6013      	str	r3, [r2, #0]
	configASSERT(q_print != NULL);
 8000a26:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <main+0x20c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10a      	bne.n	8000a44 <main+0x170>
        __asm volatile
 8000a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a32:	f383 8811 	msr	BASEPRI, r3
 8000a36:	f3bf 8f6f 	isb	sy
 8000a3a:	f3bf 8f4f 	dsb	sy
 8000a3e:	607b      	str	r3, [r7, #4]
    }
 8000a40:	bf00      	nop
 8000a42:	e7fe      	b.n	8000a42 <main+0x16e>


	//Create software timers for LED effects
	for(int i = 0 ; i < 4 ; i++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
 8000a48:	e013      	b.n	8000a72 <main+0x19e>
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i + 1), led_effect_callback);
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <main+0x210>)
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	4613      	mov	r3, r2
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a5c:	4822      	ldr	r0, [pc, #136]	; (8000ae8 <main+0x214>)
 8000a5e:	f005 fc6f 	bl	8006340 <xTimerCreate>
 8000a62:	4602      	mov	r2, r0
 8000a64:	4921      	ldr	r1, [pc, #132]	; (8000aec <main+0x218>)
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0 ; i < 4 ; i++)
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	3301      	adds	r3, #1
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	dde8      	ble.n	8000a4a <main+0x176>

	rtc_timer = xTimerCreate("rtc_report_timer", pdMS_TO_TICKS(1000), pdTRUE, NULL, rtc_report_callback);
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <main+0x21c>)
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a84:	481b      	ldr	r0, [pc, #108]	; (8000af4 <main+0x220>)
 8000a86:	f005 fc5b 	bl	8006340 <xTimerCreate>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <main+0x224>)
 8000a8e:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	491a      	ldr	r1, [pc, #104]	; (8000afc <main+0x228>)
 8000a94:	481a      	ldr	r0, [pc, #104]	; (8000b00 <main+0x22c>)
 8000a96:	f003 fb4c 	bl	8004132 <HAL_UART_Receive_IT>

	vTaskStartScheduler();
 8000a9a:	f004 fd57 	bl	800554c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
 8000a9e:	e7fe      	b.n	8000a9e <main+0x1ca>
 8000aa0:	20013464 	.word	0x20013464
 8000aa4:	08009d38 	.word	0x08009d38
 8000aa8:	08001369 	.word	0x08001369
 8000aac:	2001345c 	.word	0x2001345c
 8000ab0:	08009d44 	.word	0x08009d44
 8000ab4:	08001a75 	.word	0x08001a75
 8000ab8:	2001348c 	.word	0x2001348c
 8000abc:	08009d50 	.word	0x08009d50
 8000ac0:	08001a35 	.word	0x08001a35
 8000ac4:	20013490 	.word	0x20013490
 8000ac8:	08009d5c 	.word	0x08009d5c
 8000acc:	08001451 	.word	0x08001451
 8000ad0:	20013458 	.word	0x20013458
 8000ad4:	08009d68 	.word	0x08009d68
 8000ad8:	080015c9 	.word	0x080015c9
 8000adc:	20013460 	.word	0x20013460
 8000ae0:	20013468 	.word	0x20013468
 8000ae4:	08000df5 	.word	0x08000df5
 8000ae8:	08009d74 	.word	0x08009d74
 8000aec:	20013444 	.word	0x20013444
 8000af0:	08000de1 	.word	0x08000de1
 8000af4:	08009d80 	.word	0x08009d80
 8000af8:	20013454 	.word	0x20013454
 8000afc:	20013494 	.word	0x20013494
 8000b00:	20013498 	.word	0x20013498

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0ac      	sub	sp, #176	; 0xb0
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b0e:	2234      	movs	r2, #52	; 0x34
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 ffe6 	bl	8008ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	225c      	movs	r2, #92	; 0x5c
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 ffd7 	bl	8008ae4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <SystemClock_Config+0x128>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a3b      	ldr	r2, [pc, #236]	; (8000c2c <SystemClock_Config+0x128>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <SystemClock_Config+0x128>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <SystemClock_Config+0x12c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a35      	ldr	r2, [pc, #212]	; (8000c30 <SystemClock_Config+0x12c>)
 8000b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <SystemClock_Config+0x12c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b6e:	230a      	movs	r3, #10
 8000b70:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7e:	2310      	movs	r3, #16
 8000b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b84:	2301      	movs	r3, #1
 8000b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b96:	2308      	movs	r3, #8
 8000b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b9c:	23b4      	movs	r3, #180	; 0xb4
 8000b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 f95d 	bl	8002e78 <HAL_RCC_OscConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bc4:	f000 f950 	bl	8000e68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bc8:	f001 fade 	bl	8002188 <HAL_PWREx_EnableOverDrive>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bd2:	f000 f949 	bl	8000e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bec:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bf2:	2105      	movs	r1, #5
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fb17 	bl	8002228 <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000c00:	f000 f932 	bl	8000e68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c04:	2320      	movs	r3, #32
 8000c06:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fc54 	bl	80024c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000c1e:	f000 f923 	bl	8000e68 <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	37b0      	adds	r7, #176	; 0xb0
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000

08000c34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_RTC_Init+0x44>)
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <MX_RTC_Init+0x48>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_RTC_Init+0x44>)
 8000c40:	2240      	movs	r2, #64	; 0x40
 8000c42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_RTC_Init+0x44>)
 8000c46:	227f      	movs	r2, #127	; 0x7f
 8000c48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_RTC_Init+0x44>)
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_RTC_Init+0x44>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_RTC_Init+0x44>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_RTC_Init+0x44>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_RTC_Init+0x44>)
 8000c64:	f002 fba6 	bl	80033b4 <HAL_RTC_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c6e:	f000 f8fb 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2001346c 	.word	0x2001346c
 8000c7c:	40002800 	.word	0x40002800

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_USART2_UART_Init+0x50>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART2_UART_Init+0x4c>)
 8000cb8:	f003 f95c 	bl	8003f74 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc2:	f000 f8d1 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20013498 	.word	0x20013498
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a28      	ldr	r2, [pc, #160]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_GPIO_Init+0xf8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <MX_GPIO_Init+0xfc>)
 8000d60:	f001 f9f8 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000d6a:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <MX_GPIO_Init+0x100>)
 8000d6c:	f001 f9f2 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0x104>)
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4815      	ldr	r0, [pc, #84]	; (8000ddc <MX_GPIO_Init+0x108>)
 8000d86:	f001 f851 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <MX_GPIO_Init+0xfc>)
 8000da2:	f001 f843 	bl	8001e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_YELLOW_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin;
 8000da6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_GPIO_Init+0x100>)
 8000dc0:	f001 f834 	bl	8001e2c <HAL_GPIO_Init>

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	10110000 	.word	0x10110000
 8000ddc:	40020800 	.word	0x40020800

08000de0 <rtc_report_callback>:

/* USER CODE BEGIN 4 */
void rtc_report_callback(TimerHandle_t xTimer) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	 show_time_date_itm();
 8000de8:	f000 f844 	bl	8000e74 <show_time_date_itm>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

	 int id;
	 id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f005 fe04 	bl	8006a0a <pvTimerGetTimerID>
 8000e02:	4603      	mov	r3, r0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d816      	bhi.n	8000e3c <led_effect_callback+0x48>
 8000e0e:	a201      	add	r2, pc, #4	; (adr r2, 8000e14 <led_effect_callback+0x20>)
 8000e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e14:	08000e25 	.word	0x08000e25
 8000e18:	08000e2b 	.word	0x08000e2b
 8000e1c:	08000e31 	.word	0x08000e31
 8000e20:	08000e37 	.word	0x08000e37

	 switch(id) {
		 case 1 :
			 LED_effect1();
 8000e24:	f7ff fcfa 	bl	800081c <LED_effect1>
			 break;
 8000e28:	e008      	b.n	8000e3c <led_effect_callback+0x48>

		 case 2:
			 LED_effect2();
 8000e2a:	f7ff fd0d 	bl	8000848 <LED_effect2>
			 break;
 8000e2e:	e005      	b.n	8000e3c <led_effect_callback+0x48>

		 case 3:
			 LED_effect3();
 8000e30:	f7ff fd20 	bl	8000874 <LED_effect3>
			 break;
 8000e34:	e002      	b.n	8000e3c <led_effect_callback+0x48>

		 case 4:
			 LED_effect4();
 8000e36:	f7ff fd35 	bl	80008a4 <LED_effect4>
	 }
}
 8000e3a:	e7ff      	b.n	8000e3c <led_effect_callback+0x48>
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e56:	f000 fee7 	bl	8001c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40001000 	.word	0x40001000

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <show_time_date_itm>:



#include "main.h"

void show_time_date_itm(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	2204      	movs	r2, #4
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f007 fe2e 	bl	8008ae4 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2214      	movs	r2, #20
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 fe28 	bl	8008ae4 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <show_time_date_itm+0x7c>)
 8000e9c:	f002 fbd8 	bl	8003650 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <show_time_date_itm+0x7c>)
 8000eaa:	f002 fcd6 	bl	800385a <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <show_time_date_itm+0x44>
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <show_time_date_itm+0x80>)
 8000eb6:	e000      	b.n	8000eba <show_time_date_itm+0x46>
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <show_time_date_itm+0x84>)
 8000eba:	61fb      	str	r3, [r7, #28]

	printf("%02d:%02d:%02d [%s]", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000ebc:	793b      	ldrb	r3, [r7, #4]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	797b      	ldrb	r3, [r7, #5]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4603      	mov	r3, r0
 8000ece:	480b      	ldr	r0, [pc, #44]	; (8000efc <show_time_date_itm+0x88>)
 8000ed0:	f007 fe10 	bl	8008af4 <iprintf>
	printf("\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000ed4:	7e7b      	ldrb	r3, [r7, #25]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	7ebb      	ldrb	r3, [r7, #26]
 8000eda:	461a      	mov	r2, r3
 8000edc:	7efb      	ldrb	r3, [r7, #27]
 8000ede:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <show_time_date_itm+0x8c>)
 8000ee4:	f007 fe06 	bl	8008af4 <iprintf>
}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2001346c 	.word	0x2001346c
 8000ef4:	08009d94 	.word	0x08009d94
 8000ef8:	08009d98 	.word	0x08009d98
 8000efc:	08009d9c 	.word	0x08009d9c
 8000f00:	08009db0 	.word	0x08009db0

08000f04 <show_time_date>:

void show_time_date(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	2204      	movs	r2, #4
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 fde6 	bl	8008ae4 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2214      	movs	r2, #20
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f007 fde0 	bl	8008ae4 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4821      	ldr	r0, [pc, #132]	; (8000fb0 <show_time_date+0xac>)
 8000f2c:	f002 fb90 	bl	8003650 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	481d      	ldr	r0, [pc, #116]	; (8000fb0 <show_time_date+0xac>)
 8000f3a:	f002 fc8e 	bl	800385a <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <show_time_date+0x44>
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <show_time_date+0xb0>)
 8000f46:	e000      	b.n	8000f4a <show_time_date+0x46>
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <show_time_date+0xb4>)
 8000f4a:	61fb      	str	r3, [r7, #28]

	/* Display time format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	797b      	ldrb	r3, [r7, #5]
 8000f52:	461a      	mov	r2, r3
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	4619      	mov	r1, r3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	9101      	str	r1, [sp, #4]
 8000f5e:	9200      	str	r2, [sp, #0]
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <show_time_date+0xb8>)
 8000f64:	4916      	ldr	r1, [pc, #88]	; (8000fc0 <show_time_date+0xbc>)
 8000f66:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <show_time_date+0xc0>)
 8000f68:	f007 fddc 	bl	8008b24 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <show_time_date+0xc4>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295
 8000f76:	4915      	ldr	r1, [pc, #84]	; (8000fcc <show_time_date+0xc8>)
 8000f78:	f003 fcfc 	bl	8004974 <xQueueGenericSend>

	/* Display date format : date-month-year */
	sprintf((char*)showdate, "\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000f7c:	7e7b      	ldrb	r3, [r7, #25]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	7ebb      	ldrb	r3, [r7, #26]
 8000f82:	4619      	mov	r1, r3
 8000f84:	7efb      	ldrb	r3, [r7, #27]
 8000f86:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4910      	ldr	r1, [pc, #64]	; (8000fd0 <show_time_date+0xcc>)
 8000f90:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <show_time_date+0xd0>)
 8000f92:	f007 fdc7 	bl	8008b24 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <show_time_date+0xc4>)
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <show_time_date+0xd4>)
 8000fa2:	f003 fce7 	bl	8004974 <xQueueGenericSend>
}
 8000fa6:	bf00      	nop
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2001346c 	.word	0x2001346c
 8000fb4:	08009d94 	.word	0x08009d94
 8000fb8:	08009d98 	.word	0x08009d98
 8000fbc:	08009dc0 	.word	0x08009dc0
 8000fc0:	08009dd4 	.word	0x08009dd4
 8000fc4:	200000b8 	.word	0x200000b8
 8000fc8:	20013468 	.word	0x20013468
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	08009db0 	.word	0x08009db0
 8000fd4:	200000e0 	.word	0x200000e0
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <rtc_configure_time+0x2c>)
 8000ffc:	f002 fa6b 	bl	80034d6 <HAL_RTC_SetTime>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2001346c 	.word	0x2001346c

0800100c <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <rtc_configure_date+0x1c>)
 800101a:	f002 fb77 	bl	800370c <HAL_RTC_SetDate>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2001346c 	.word	0x2001346c

0800102c <validate_rtc_information>:

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date) {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	if(time){
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00d      	beq.n	8001058 <validate_rtc_information+0x2c>
		if((time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b0c      	cmp	r3, #12
 8001042:	d807      	bhi.n	8001054 <validate_rtc_information+0x28>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	2b3b      	cmp	r3, #59	; 0x3b
 800104a:	d803      	bhi.n	8001054 <validate_rtc_information+0x28>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	2b3b      	cmp	r3, #59	; 0x3b
 8001052:	d901      	bls.n	8001058 <validate_rtc_information+0x2c>
			return 1;
 8001054:	2301      	movs	r3, #1
 8001056:	e015      	b.n	8001084 <validate_rtc_information+0x58>
	}

	if(date){
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d011      	beq.n	8001082 <validate_rtc_information+0x56>
		if((date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12))
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	2b1f      	cmp	r3, #31
 8001064:	d80b      	bhi.n	800107e <validate_rtc_information+0x52>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b07      	cmp	r3, #7
 800106c:	d807      	bhi.n	800107e <validate_rtc_information+0x52>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	78db      	ldrb	r3, [r3, #3]
 8001072:	2b63      	cmp	r3, #99	; 0x63
 8001074:	d803      	bhi.n	800107e <validate_rtc_information+0x52>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	2b0c      	cmp	r3, #12
 800107c:	d901      	bls.n	8001082 <validate_rtc_information+0x56>
			return 1;
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <validate_rtc_information+0x58>
	}

	return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a0f      	ldr	r2, [pc, #60]	; (80010dc <HAL_MspInit+0x4c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_MspInit+0x4c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_MspInit+0x4c>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x4c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <HAL_RTC_MspInit+0x24>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d102      	bne.n	80010f8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_RTC_MspInit+0x28>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40002800 	.word	0x40002800
 8001108:	42470e3c 	.word	0x42470e3c

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_UART_MspInit+0x94>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d133      	bne.n	8001196 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_UART_MspInit+0x98>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_UART_MspInit+0x98>)
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	6413      	str	r3, [r2, #64]	; 0x40
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_UART_MspInit+0x98>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_UART_MspInit+0x98>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_UART_MspInit+0x98>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_UART_MspInit+0x98>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001166:	230c      	movs	r3, #12
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001176:	2307      	movs	r3, #7
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <HAL_UART_MspInit+0x9c>)
 8001182:	f000 fe53 	bl	8001e2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2106      	movs	r1, #6
 800118a:	2026      	movs	r0, #38	; 0x26
 800118c:	f000 fe24 	bl	8001dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001190:	2026      	movs	r0, #38	; 0x26
 8001192:	f000 fe3d 	bl	8001e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000

080011ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2036      	movs	r0, #54	; 0x36
 80011c2:	f000 fe09 	bl	8001dd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011c6:	2036      	movs	r0, #54	; 0x36
 80011c8:	f000 fe22 	bl	8001e10 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_InitTick+0xa4>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <HAL_InitTick+0xa4>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_InitTick+0xa4>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e8:	f107 0210 	add.w	r2, r7, #16
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f932 	bl	800245c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011f8:	f001 f908 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 80011fc:	4603      	mov	r3, r0
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	4a13      	ldr	r2, [pc, #76]	; (8001254 <HAL_InitTick+0xa8>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9b      	lsrs	r3, r3, #18
 800120c:	3b01      	subs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_InitTick+0xac>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_InitTick+0xb0>)
 8001214:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_InitTick+0xac>)
 8001218:	f240 32e7 	movw	r2, #999	; 0x3e7
 800121c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_InitTick+0xac>)
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_InitTick+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_InitTick+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <HAL_InitTick+0xac>)
 8001232:	f002 fbf1 	bl	8003a18 <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <HAL_InitTick+0xac>)
 800123e:	f002 fc45 	bl	8003acc <HAL_TIM_Base_Start_IT>
 8001242:	4603      	mov	r3, r0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3730      	adds	r7, #48	; 0x30
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	431bde83 	.word	0x431bde83
 8001258:	200134dc 	.word	0x200134dc
 800125c:	40001000 	.word	0x40001000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM6_DAC_IRQHandler+0x10>)
 8001292:	f002 fc8b 	bl	8003bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200134dc 	.word	0x200134dc

080012a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	e00a      	b.n	80012c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012b2:	f3af 8000 	nop.w
 80012b6:	4601      	mov	r1, r0
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	60ba      	str	r2, [r7, #8]
 80012be:	b2ca      	uxtb	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbf0      	blt.n	80012b2 <_read+0x12>
	}

return len;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_close>:
	}
	return len;
}

int _close(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
	return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001302:	605a      	str	r2, [r3, #4]
	return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_isatty>:

int _isatty(int file)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	return 1;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <menu_task>:

const char *msg_inv = "////Invalid option////\n";


void menu_task(void *param)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
 800136e:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu ="\n========================\n"
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <menu_task+0xd0>)
 8001372:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice : ";

	while(1) {
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <menu_task+0xd4>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f107 0108 	add.w	r1, r7, #8
 800137c:	2300      	movs	r3, #0
 800137e:	f04f 32ff 	mov.w	r2, #4294967295
 8001382:	f003 faf7 	bl	8004974 <xQueueGenericSend>

		//wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	f04f 32ff 	mov.w	r2, #4294967295
 800138e:	9200      	str	r2, [sp, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	2000      	movs	r0, #0
 8001396:	f004 fdaf 	bl	8005ef8 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1) {
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d133      	bne.n	800140e <menu_task+0xa6>
			option = cmd->payload[0] - 48;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3b30      	subs	r3, #48	; 0x30
 80013ac:	613b      	str	r3, [r7, #16]
			switch(option) {
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d035      	beq.n	8001420 <menu_task+0xb8>
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	dc20      	bgt.n	80013fc <menu_task+0x94>
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <menu_task+0x60>
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d00d      	beq.n	80013e2 <menu_task+0x7a>
 80013c6:	e019      	b.n	80013fc <menu_task+0x94>
				case 0:
					curr_state = sLedEffect;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <menu_task+0xd8>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <menu_task+0xdc>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	f004 fe14 	bl	8006008 <xTaskGenericNotify>
					break;
 80013e0:	e01f      	b.n	8001422 <menu_task+0xba>

				case 1:
					curr_state = sRtcMenu;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <menu_task+0xd8>)
 80013e4:	2202      	movs	r2, #2
 80013e6:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <menu_task+0xe0>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	f004 fe07 	bl	8006008 <xTaskGenericNotify>
					break;
 80013fa:	e012      	b.n	8001422 <menu_task+0xba>
				case 2: /* Exit */
					break;

				default:
					//Invalid option
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <menu_task+0xd4>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	2300      	movs	r3, #0
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
 8001406:	4911      	ldr	r1, [pc, #68]	; (800144c <menu_task+0xe4>)
 8001408:	f003 fab4 	bl	8004974 <xQueueGenericSend>
					continue;
 800140c:	e012      	b.n	8001434 <menu_task+0xcc>
			}
		} else {
			//Invalid option
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <menu_task+0xd4>)
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <menu_task+0xe4>)
 800141a:	f003 faab 	bl	8004974 <xQueueGenericSend>
			continue;
 800141e:	e009      	b.n	8001434 <menu_task+0xcc>
					break;
 8001420:	bf00      	nop
		}

		//wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2000      	movs	r0, #0
 8001430:	f004 fd62 	bl	8005ef8 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001434:	e79e      	b.n	8001374 <menu_task+0xc>
 8001436:	bf00      	nop
 8001438:	08009e04 	.word	0x08009e04
 800143c:	20013468 	.word	0x20013468
 8001440:	200000b4 	.word	0x200000b4
 8001444:	20013490 	.word	0x20013490
 8001448:	20013458 	.word	0x20013458
 800144c:	20000014 	.word	0x20000014

08001450 <led_task>:
	}
}

void led_task(void *param) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8001458:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <led_task+0x108>)
 800145a:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice : ";

	while(1) {
		/* Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800145c:	f04f 33ff 	mov.w	r3, #4294967295
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	2000      	movs	r0, #0
 800146a:	f004 fd45 	bl	8005ef8 <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <led_task+0x10c>)
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	f107 010c 	add.w	r1, r7, #12
 8001476:	2300      	movs	r3, #0
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	f003 fa7a 	bl	8004974 <xQueueGenericSend>

		/* Wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001480:	f107 0310 	add.w	r3, r7, #16
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	9200      	str	r2, [sp, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2000      	movs	r0, #0
 8001490:	f004 fd32 	bl	8005ef8 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4) {
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d845      	bhi.n	800152c <led_task+0xdc>
			if(! strcmp((char*)cmd->payload, "none")) {
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <led_task+0x110>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fefd 	bl	80002a4 <strcmp>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d104      	bne.n	80014ba <led_task+0x6a>
				led_effect_stop();
 80014b0:	f7ff f8da 	bl	8000668 <led_effect_stop>
				turn_off_all_leds();
 80014b4:	f7ff f914 	bl	80006e0 <turn_off_all_leds>
 80014b8:	e040      	b.n	800153c <led_task+0xec>
			}
			else if (! strcmp((char*)cmd->payload, "e1"))
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	4929      	ldr	r1, [pc, #164]	; (8001564 <led_task+0x114>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe fef0 	bl	80002a4 <strcmp>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d103      	bne.n	80014d2 <led_task+0x82>
				led_effect(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f7ff f8ec 	bl	80006a8 <led_effect>
 80014d0:	e034      	b.n	800153c <led_task+0xec>
			else if (! strcmp((char*)cmd->payload, "e2"))
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	4924      	ldr	r1, [pc, #144]	; (8001568 <led_task+0x118>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fee4 	bl	80002a4 <strcmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d103      	bne.n	80014ea <led_task+0x9a>
				led_effect(2);
 80014e2:	2002      	movs	r0, #2
 80014e4:	f7ff f8e0 	bl	80006a8 <led_effect>
 80014e8:	e028      	b.n	800153c <led_task+0xec>
			else if (! strcmp((char*)cmd->payload, "e3"))
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	491f      	ldr	r1, [pc, #124]	; (800156c <led_task+0x11c>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fed8 	bl	80002a4 <strcmp>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <led_task+0xb2>
				led_effect(3);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f7ff f8d4 	bl	80006a8 <led_effect>
 8001500:	e01c      	b.n	800153c <led_task+0xec>
			else if (! strcmp((char*)cmd->payload, "e4"))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	491a      	ldr	r1, [pc, #104]	; (8001570 <led_task+0x120>)
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fecc 	bl	80002a4 <strcmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <led_task+0xca>
				led_effect(4);
 8001512:	2004      	movs	r0, #4
 8001514:	f7ff f8c8 	bl	80006a8 <led_effect>
 8001518:	e010      	b.n	800153c <led_task+0xec>
			else
				//Invalid option
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <led_task+0x10c>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	4913      	ldr	r1, [pc, #76]	; (8001574 <led_task+0x124>)
 8001526:	f003 fa25 	bl	8004974 <xQueueGenericSend>
 800152a:	e007      	b.n	800153c <led_task+0xec>
		} else
			//Invalid option
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <led_task+0x10c>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	2300      	movs	r3, #0
 8001532:	f04f 32ff 	mov.w	r2, #4294967295
 8001536:	490f      	ldr	r1, [pc, #60]	; (8001574 <led_task+0x124>)
 8001538:	f003 fa1c 	bl	8004974 <xQueueGenericSend>

		/* Update state variable */
		curr_state = sMainMenu;
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <led_task+0x128>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]

		/* Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <led_task+0x12c>)
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2300      	movs	r3, #0
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	f004 fd5a 	bl	8006008 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001554:	e782      	b.n	800145c <led_task+0xc>
 8001556:	bf00      	nop
 8001558:	08009ea8 	.word	0x08009ea8
 800155c:	20013468 	.word	0x20013468
 8001560:	08009f1c 	.word	0x08009f1c
 8001564:	08009f24 	.word	0x08009f24
 8001568:	08009f28 	.word	0x08009f28
 800156c:	08009f2c 	.word	0x08009f2c
 8001570:	08009f30 	.word	0x08009f30
 8001574:	20000014 	.word	0x20000014
 8001578:	200000b4 	.word	0x200000b4
 800157c:	20013464 	.word	0x20013464

08001580 <getnumber>:

	}
}

uint8_t getnumber(uint8_t *p , int len) {
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]

	int value;

	if(len > 1)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	dd0f      	ble.n	80015b0 <getnumber+0x30>
	   value =  (((p[0]-48) * 10) + (p[1] - 48));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	3b30      	subs	r3, #48	; 0x30
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e003      	b.n	80015b8 <getnumber+0x38>
	else
		value = (p[0] - 48);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	3b30      	subs	r3, #48	; 0x30
 80015b6:	60fb      	str	r3, [r7, #12]

	return value;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	b2db      	uxtb	r3, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <rtc_task>:

void rtc_task(void *param) {
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b09b      	sub	sp, #108	; 0x6c
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 =  "========================\n"
 80015d0:	4bb2      	ldr	r3, [pc, #712]	; (800189c <rtc_task+0x2d4>)
 80015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 =  "Configure Time            ----> 0\n"
 80015d4:	4bb2      	ldr	r3, [pc, #712]	; (80018a0 <rtc_task+0x2d8>)
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice : ";


	const char *msg_rtc_hh = "Enter hour (1-12):";
 80015d8:	4bb2      	ldr	r3, [pc, #712]	; (80018a4 <rtc_task+0x2dc>)
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes (0-59):";
 80015dc:	4bb2      	ldr	r3, [pc, #712]	; (80018a8 <rtc_task+0x2e0>)
 80015de:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds (0-59):";
 80015e0:	4bb2      	ldr	r3, [pc, #712]	; (80018ac <rtc_task+0x2e4>)
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date (1-31):";
 80015e4:	4bb2      	ldr	r3, [pc, #712]	; (80018b0 <rtc_task+0x2e8>)
 80015e6:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month (1-12):";
 80015e8:	4bb2      	ldr	r3, [pc, #712]	; (80018b4 <rtc_task+0x2ec>)
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day (1-7 sun:1):";
 80015ec:	4bb2      	ldr	r3, [pc, #712]	; (80018b8 <rtc_task+0x2f0>)
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year (0-99):";
 80015f0:	4bb2      	ldr	r3, [pc, #712]	; (80018bc <rtc_task+0x2f4>)
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 80015f4:	4bb2      	ldr	r3, [pc, #712]	; (80018c0 <rtc_task+0x2f8>)
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting? (y/n): ";
 80015f8:	4bb2      	ldr	r3, [pc, #712]	; (80018c4 <rtc_task+0x2fc>)
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	while(1) {
		/* Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2000      	movs	r0, #0
 800160a:	f004 fc75 	bl	8005ef8 <xTaskGenericNotifyWait>

		/* Print the menu and show current date and time information */
		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 800160e:	4bae      	ldr	r3, [pc, #696]	; (80018c8 <rtc_task+0x300>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001616:	2300      	movs	r3, #0
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	f003 f9aa 	bl	8004974 <xQueueGenericSend>
		show_time_date();
 8001620:	f7ff fc70 	bl	8000f04 <show_time_date>
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 8001624:	4ba8      	ldr	r3, [pc, #672]	; (80018c8 <rtc_task+0x300>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800162c:	2300      	movs	r3, #0
 800162e:	f04f 32ff 	mov.w	r2, #4294967295
 8001632:	f003 f99f 	bl	8004974 <xQueueGenericSend>


		while(curr_state != sMainMenu) {
 8001636:	bf00      	nop
 8001638:	e1e1      	b.n	80019fe <rtc_task+0x436>
			/* Wait for command notification (Notify wait) */
			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	f04f 32ff 	mov.w	r2, #4294967295
 8001642:	9200      	str	r2, [sp, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2000      	movs	r0, #0
 800164a:	f004 fc55 	bl	8005ef8 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state) {
 8001652:	4b9e      	ldr	r3, [pc, #632]	; (80018cc <rtc_task+0x304>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3b02      	subs	r3, #2
 8001658:	2b03      	cmp	r3, #3
 800165a:	f200 81d0 	bhi.w	80019fe <rtc_task+0x436>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <rtc_task+0x9c>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	08001675 	.word	0x08001675
 8001668:	08001727 	.word	0x08001727
 800166c:	08001815 	.word	0x08001815
 8001670:	0800197b 	.word	0x0800197b
				case sRtcMenu:{
					/* Process RTC menu commands */
					if(cmd->len == 1) {
 8001674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d148      	bne.n	800170e <rtc_task+0x146>
						menu_code = cmd->payload[0] - 48;
 800167c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	3b30      	subs	r3, #48	; 0x30
 8001682:	653b      	str	r3, [r7, #80]	; 0x50
 8001684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001686:	2b03      	cmp	r3, #3
 8001688:	d835      	bhi.n	80016f6 <rtc_task+0x12e>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <rtc_task+0xc8>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016bb 	.word	0x080016bb
 8001698:	080016d5 	.word	0x080016d5
 800169c:	080016ef 	.word	0x080016ef
						switch(menu_code) {
							case 0:
								curr_state = sRtcTimeConfig;
 80016a0:	4b8a      	ldr	r3, [pc, #552]	; (80018cc <rtc_task+0x304>)
 80016a2:	2203      	movs	r2, #3
 80016a4:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 80016a6:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <rtc_task+0x300>)
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80016ae:	2300      	movs	r3, #0
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	f003 f95e 	bl	8004974 <xQueueGenericSend>
								break;
 80016b8:	e034      	b.n	8001724 <rtc_task+0x15c>

							case 1:
								curr_state = sRtcDateConfig;
 80016ba:	4b84      	ldr	r3, [pc, #528]	; (80018cc <rtc_task+0x304>)
 80016bc:	2204      	movs	r2, #4
 80016be:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 80016c0:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <rtc_task+0x300>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80016c8:	2300      	movs	r3, #0
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	f003 f951 	bl	8004974 <xQueueGenericSend>
								break;
 80016d2:	e027      	b.n	8001724 <rtc_task+0x15c>

							case 2:
								curr_state = sRtcReport;
 80016d4:	4b7d      	ldr	r3, [pc, #500]	; (80018cc <rtc_task+0x304>)
 80016d6:	2205      	movs	r2, #5
 80016d8:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_report, portMAX_DELAY);
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <rtc_task+0x300>)
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016e2:	2300      	movs	r3, #0
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	f003 f944 	bl	8004974 <xQueueGenericSend>
								break;
 80016ec:	e01a      	b.n	8001724 <rtc_task+0x15c>

							case 3:
								curr_state = sMainMenu;
 80016ee:	4b77      	ldr	r3, [pc, #476]	; (80018cc <rtc_task+0x304>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
								break;
 80016f4:	e016      	b.n	8001724 <rtc_task+0x15c>

							default:
								curr_state = sMainMenu;
 80016f6:	4b75      	ldr	r3, [pc, #468]	; (80018cc <rtc_task+0x304>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
								//Invalid option
								xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80016fc:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <rtc_task+0x300>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	f04f 32ff 	mov.w	r2, #4294967295
 8001706:	4972      	ldr	r1, [pc, #456]	; (80018d0 <rtc_task+0x308>)
 8001708:	f003 f934 	bl	8004974 <xQueueGenericSend>
 800170c:	e177      	b.n	80019fe <rtc_task+0x436>
						}
					} else {
						curr_state = sMainMenu;
 800170e:	4b6f      	ldr	r3, [pc, #444]	; (80018cc <rtc_task+0x304>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
						//Invalid option
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001714:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <rtc_task+0x300>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	f04f 32ff 	mov.w	r2, #4294967295
 800171e:	496c      	ldr	r1, [pc, #432]	; (80018d0 <rtc_task+0x308>)
 8001720:	f003 f928 	bl	8004974 <xQueueGenericSend>
					}
					break;}
 8001724:	e16b      	b.n	80019fe <rtc_task+0x436>

				case sRtcTimeConfig:{
					/* Get hh, mm, ss info and configure RTC */
					/* Take care of invalid entries */
					switch(rtc_state) {
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <rtc_task+0x30c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d03b      	beq.n	80017a6 <rtc_task+0x1de>
 800172e:	2b02      	cmp	r3, #2
 8001730:	f300 8165 	bgt.w	80019fe <rtc_task+0x436>
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <rtc_task+0x176>
 8001738:	2b01      	cmp	r3, #1
 800173a:	d01a      	beq.n	8001772 <rtc_task+0x1aa>
 800173c:	e15f      	b.n	80019fe <rtc_task+0x436>
						case HH_CONFIG:{
							uint8_t hour = getnumber(cmd->payload, cmd->len);
 800173e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4619      	mov	r1, r3
 8001746:	4610      	mov	r0, r2
 8001748:	f7ff ff1a 	bl	8001580 <getnumber>
 800174c:	4603      	mov	r3, r0
 800174e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							time.Hours = hour;
 8001752:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001756:	733b      	strb	r3, [r7, #12]
							rtc_state = MM_CONFIG;
 8001758:	4b5e      	ldr	r3, [pc, #376]	; (80018d4 <rtc_task+0x30c>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 800175e:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <rtc_task+0x300>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001766:	2300      	movs	r3, #0
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	f003 f902 	bl	8004974 <xQueueGenericSend>
							break;}
 8001770:	e04f      	b.n	8001812 <rtc_task+0x24a>

						case MM_CONFIG:{
							uint8_t min = getnumber(cmd->payload, cmd->len);
 8001772:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4619      	mov	r1, r3
 800177a:	4610      	mov	r0, r2
 800177c:	f7ff ff00 	bl	8001580 <getnumber>
 8001780:	4603      	mov	r3, r0
 8001782:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							time.Minutes = min;
 8001786:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800178a:	737b      	strb	r3, [r7, #13]
							rtc_state = SS_CONFIG;
 800178c:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <rtc_task+0x30c>)
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 8001792:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <rtc_task+0x300>)
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800179a:	2300      	movs	r3, #0
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	f003 f8e8 	bl	8004974 <xQueueGenericSend>
							break;}
 80017a4:	e035      	b.n	8001812 <rtc_task+0x24a>

						case SS_CONFIG:{
							uint8_t sec = getnumber(cmd->payload, cmd->len);
 80017a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f7ff fee6 	bl	8001580 <getnumber>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							time.Seconds = sec;
 80017ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017be:	73bb      	strb	r3, [r7, #14]
							if(!validate_rtc_information(&time, NULL)) {
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fc30 	bl	800102c <validate_rtc_information>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d110      	bne.n	80017f4 <rtc_task+0x22c>
								rtc_configure_time(&time);
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc00 	bl	8000fdc <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <rtc_task+0x300>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80017e4:	2300      	movs	r3, #0
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	f003 f8c3 	bl	8004974 <xQueueGenericSend>
								show_time_date();
 80017ee:	f7ff fb89 	bl	8000f04 <show_time_date>
 80017f2:	e007      	b.n	8001804 <rtc_task+0x23c>
							} else
								//Invalid option
								xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <rtc_task+0x300>)
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	2300      	movs	r3, #0
 80017fa:	f04f 32ff 	mov.w	r2, #4294967295
 80017fe:	4934      	ldr	r1, [pc, #208]	; (80018d0 <rtc_task+0x308>)
 8001800:	f003 f8b8 	bl	8004974 <xQueueGenericSend>

							curr_state = sMainMenu;
 8001804:	4b31      	ldr	r3, [pc, #196]	; (80018cc <rtc_task+0x304>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 800180a:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <rtc_task+0x30c>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
							break;}
 8001810:	bf00      	nop
					}
					break;}
 8001812:	e0f4      	b.n	80019fe <rtc_task+0x436>

				case sRtcDateConfig:{
					/* Get date, month, day , year info and configure RTC */
					/* Take care of invalid entries */

					switch(rtc_state) {
 8001814:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <rtc_task+0x30c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b03      	cmp	r3, #3
 800181a:	f200 80f0 	bhi.w	80019fe <rtc_task+0x436>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <rtc_task+0x25c>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	08001869 	.word	0x08001869
 800182c:	080018d9 	.word	0x080018d9
 8001830:	0800190d 	.word	0x0800190d
						case DATE_CONFIG:{
							uint8_t d = getnumber(cmd->payload, cmd->len);
 8001834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7ff fe9f 	bl	8001580 <getnumber>
 8001842:	4603      	mov	r3, r0
 8001844:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
							date.Date = d;
 8001848:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800184c:	72bb      	strb	r3, [r7, #10]
							rtc_state = MONTH_CONFIG;
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <rtc_task+0x30c>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <rtc_task+0x300>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800185c:	2300      	movs	r3, #0
 800185e:	f04f 32ff 	mov.w	r2, #4294967295
 8001862:	f003 f887 	bl	8004974 <xQueueGenericSend>
							break;}
 8001866:	e087      	b.n	8001978 <rtc_task+0x3b0>

						case MONTH_CONFIG:{
							uint8_t month = getnumber(cmd->payload, cmd->len);
 8001868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800186a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	4619      	mov	r1, r3
 8001870:	4610      	mov	r0, r2
 8001872:	f7ff fe85 	bl	8001580 <getnumber>
 8001876:	4603      	mov	r3, r0
 8001878:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
							date.Month = month;
 800187c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001880:	727b      	strb	r3, [r7, #9]
							rtc_state = DAYOFWEEK_CONFIG;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <rtc_task+0x30c>)
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <rtc_task+0x300>)
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001890:	2300      	movs	r3, #0
 8001892:	f04f 32ff 	mov.w	r2, #4294967295
 8001896:	f003 f86d 	bl	8004974 <xQueueGenericSend>
							break;}
 800189a:	e06d      	b.n	8001978 <rtc_task+0x3b0>
 800189c:	08009f34 	.word	0x08009f34
 80018a0:	08009f80 	.word	0x08009f80
 80018a4:	0800a020 	.word	0x0800a020
 80018a8:	0800a034 	.word	0x0800a034
 80018ac:	0800a04c 	.word	0x0800a04c
 80018b0:	0800a064 	.word	0x0800a064
 80018b4:	0800a078 	.word	0x0800a078
 80018b8:	0800a08c 	.word	0x0800a08c
 80018bc:	0800a0a4 	.word	0x0800a0a4
 80018c0:	0800a0b8 	.word	0x0800a0b8
 80018c4:	0800a0d4 	.word	0x0800a0d4
 80018c8:	20013468 	.word	0x20013468
 80018cc:	200000b4 	.word	0x200000b4
 80018d0:	20000014 	.word	0x20000014
 80018d4:	20000108 	.word	0x20000108

						case DAYOFWEEK_CONFIG:{
							uint8_t day = getnumber(cmd->payload, cmd->len);
 80018d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f7ff fe4d 	bl	8001580 <getnumber>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
							date.WeekDay = day;
 80018ec:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80018f0:	723b      	strb	r3, [r7, #8]
							rtc_state = YEAR_CONFIG;
 80018f2:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <rtc_task+0x454>)
 80018f4:	2203      	movs	r2, #3
 80018f6:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 80018f8:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <rtc_task+0x458>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001900:	2300      	movs	r3, #0
 8001902:	f04f 32ff 	mov.w	r2, #4294967295
 8001906:	f003 f835 	bl	8004974 <xQueueGenericSend>
							break;}
 800190a:	e035      	b.n	8001978 <rtc_task+0x3b0>

						case YEAR_CONFIG:{
							uint8_t year = getnumber(cmd->payload, cmd->len);
 800190c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800190e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4619      	mov	r1, r3
 8001914:	4610      	mov	r0, r2
 8001916:	f7ff fe33 	bl	8001580 <getnumber>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
							date.Year = year;
 8001920:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001924:	72fb      	strb	r3, [r7, #11]
							if(!validate_rtc_information(NULL, &date)) {
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4619      	mov	r1, r3
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fb7d 	bl	800102c <validate_rtc_information>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d110      	bne.n	800195a <rtc_task+0x392>
								rtc_configure_date(&date);
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fb65 	bl	800100c <rtc_configure_date>
								xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <rtc_task+0x458>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800194a:	2300      	movs	r3, #0
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	f003 f810 	bl	8004974 <xQueueGenericSend>
								show_time_date();
 8001954:	f7ff fad6 	bl	8000f04 <show_time_date>
 8001958:	e007      	b.n	800196a <rtc_task+0x3a2>
							} else
								//Invalid option
								xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <rtc_task+0x458>)
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	2300      	movs	r3, #0
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	492f      	ldr	r1, [pc, #188]	; (8001a24 <rtc_task+0x45c>)
 8001966:	f003 f805 	bl	8004974 <xQueueGenericSend>

							curr_state = sMainMenu;
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <rtc_task+0x460>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <rtc_task+0x454>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
							break;}
 8001976:	bf00      	nop
					}
					break;}
 8001978:	e041      	b.n	80019fe <rtc_task+0x436>

				case sRtcReport:{
					/* Enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1) {
 800197a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d131      	bne.n	80019e6 <rtc_task+0x41e>
						if(cmd->payload[0] == 'y') {
 8001982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b79      	cmp	r3, #121	; 0x79
 8001988:	d115      	bne.n	80019b6 <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <rtc_task+0x464>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f005 f812 	bl	80069b8 <xTimerIsTimerActive>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d12d      	bne.n	80019f6 <rtc_task+0x42e>
								xTimerStart(rtc_timer, portMAX_DELAY);
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <rtc_task+0x464>)
 800199c:	681c      	ldr	r4, [r3, #0]
 800199e:	f003 fee5 	bl	800576c <xTaskGetTickCount>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	2101      	movs	r1, #1
 80019ae:	4620      	mov	r0, r4
 80019b0:	f004 fd22 	bl	80063f8 <xTimerGenericCommand>
 80019b4:	e01f      	b.n	80019f6 <rtc_task+0x42e>
						} else if(cmd->payload[0] == 'n') {
 80019b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b6e      	cmp	r3, #110	; 0x6e
 80019bc:	d10a      	bne.n	80019d4 <rtc_task+0x40c>
							xTimerStop(rtc_timer, portMAX_DELAY);
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <rtc_task+0x464>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2300      	movs	r3, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	2103      	movs	r1, #3
 80019ce:	f004 fd13 	bl	80063f8 <xTimerGenericCommand>
 80019d2:	e010      	b.n	80019f6 <rtc_task+0x42e>
						} else {
							//Invalid option
							xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <rtc_task+0x458>)
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	2300      	movs	r3, #0
 80019da:	f04f 32ff 	mov.w	r2, #4294967295
 80019de:	4911      	ldr	r1, [pc, #68]	; (8001a24 <rtc_task+0x45c>)
 80019e0:	f002 ffc8 	bl	8004974 <xQueueGenericSend>
 80019e4:	e007      	b.n	80019f6 <rtc_task+0x42e>
						}
					} else
						//Invalid option
					    xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <rtc_task+0x458>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <rtc_task+0x45c>)
 80019f2:	f002 ffbf 	bl	8004974 <xQueueGenericSend>

					curr_state = sMainMenu;
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <rtc_task+0x460>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
					break;}
 80019fc:	bf00      	nop
		while(curr_state != sMainMenu) {
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <rtc_task+0x460>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f47f ae19 	bne.w	800163a <rtc_task+0x72>
			}
		}
		/* Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <rtc_task+0x468>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2300      	movs	r3, #0
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	f004 faf7 	bl	8006008 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001a1a:	e5ef      	b.n	80015fc <rtc_task+0x34>
 8001a1c:	20000108 	.word	0x20000108
 8001a20:	20013468 	.word	0x20013468
 8001a24:	20000014 	.word	0x20000014
 8001a28:	200000b4 	.word	0x200000b4
 8001a2c:	20013454 	.word	0x20013454
 8001a30:	20013464 	.word	0x20013464

08001a34 <print_task>:
	}
}

void print_task(void *param) {
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

	uint32_t *msg;
	while(1) {
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <print_task+0x38>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f107 010c 	add.w	r1, r7, #12
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 f977 	bl	8004d3c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001a4e:	68fc      	ldr	r4, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fc30 	bl	80002b8 <strlen>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	4621      	mov	r1, r4
 8001a62:	4803      	ldr	r0, [pc, #12]	; (8001a70 <print_task+0x3c>)
 8001a64:	f002 fad3 	bl	800400e <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001a68:	e7e8      	b.n	8001a3c <print_task+0x8>
 8001a6a:	bf00      	nop
 8001a6c:	20013468 	.word	0x20013468
 8001a70:	20013498 	.word	0x20013498

08001a74 <cmd_handler_task>:
	}
}

void cmd_handler_task(void *param) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1) {
		/* Implement notify wait */
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f004 fa35 	bl	8005ef8 <xTaskGenericNotifyWait>
 8001a8e:	61f8      	str	r0, [r7, #28]

		if(ret == pdTRUE) {
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d1f2      	bne.n	8001a7c <cmd_handler_task+0x8>
			/* Process the user data(command) stored in input data queue */
			process_command(&cmd);
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f802 	bl	8001aa4 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001aa0:	e7ec      	b.n	8001a7c <cmd_handler_task+0x8>
	...

08001aa4 <process_command>:
		}
	}
}

void process_command(command_t *cmd) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f835 	bl	8001b1c <extract_command>

	switch(curr_state) {
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <process_command+0x68>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	dc24      	bgt.n	8001b04 <process_command+0x60>
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	da18      	bge.n	8001af0 <process_command+0x4c>
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <process_command+0x24>
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d00a      	beq.n	8001adc <process_command+0x38>
		case sRtcDateConfig:
		case sRtcReport:
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}
 8001ac6:	e01d      	b.n	8001b04 <process_command+0x60>
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <process_command+0x6c>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	f004 fa97 	bl	8006008 <xTaskGenericNotify>
			break;
 8001ada:	e013      	b.n	8001b04 <process_command+0x60>
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <process_command+0x70>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f004 fa8d 	bl	8006008 <xTaskGenericNotify>
			break;
 8001aee:	e009      	b.n	8001b04 <process_command+0x60>
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <process_command+0x74>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	2300      	movs	r3, #0
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2303      	movs	r3, #3
 8001afc:	2100      	movs	r1, #0
 8001afe:	f004 fa83 	bl	8006008 <xTaskGenericNotify>
			break;
 8001b02:	bf00      	nop
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200000b4 	.word	0x200000b4
 8001b10:	20013464 	.word	0x20013464
 8001b14:	20013490 	.word	0x20013490
 8001b18:	20013458 	.word	0x20013458

08001b1c <extract_command>:

int extract_command(command_t *cmd) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <extract_command+0x70>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fa17 	bl	8004f5c <uxQueueMessagesWaiting>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <extract_command+0x22>
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	e022      	b.n	8001b84 <extract_command+0x68>
	uint8_t i = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]

	do {
		status = xQueueReceive(q_data, &item, 0);
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <extract_command+0x70>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f107 010f 	add.w	r1, r7, #15
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 f8f5 	bl	8004d3c <xQueueReceive>
 8001b52:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d106      	bne.n	8001b68 <extract_command+0x4c>
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	75fa      	strb	r2, [r7, #23]
 8001b60:	461a      	mov	r2, r3
 8001b62:	7bf9      	ldrb	r1, [r7, #15]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	5499      	strb	r1, [r3, r2]
	} while(item != '\n');
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b0a      	cmp	r3, #10
 8001b6c:	d1e9      	bne.n	8001b42 <extract_command+0x26>

	cmd->payload[i - 1] = '\0';
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	2100      	movs	r1, #0
 8001b76:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1; /* Save length of the command excluding null char */
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60da      	str	r2, [r3, #12]

	return 0;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20013460 	.word	0x20013460

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b96:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b98:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bac:	4c0b      	ldr	r4, [pc, #44]	; (8001bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bba:	f7ff fbc3 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f006 ff51 	bl	8008a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7fe fe87 	bl	80008d4 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001bd4:	0800a24c 	.word	0x0800a24c
  ldr r2, =_sbss
 8001bd8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001bdc:	20013620 	.word	0x20013620

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 f8d8 	bl	8001dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff faca 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fa3a 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000001c 	.word	0x2000001c
 8001c4c:	20013524 	.word	0x20013524

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20013524 	.word	0x20013524

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	; (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff4c 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dea:	f7ff ff61 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	6978      	ldr	r0, [r7, #20]
 8001df6:	f7ff ffb1 	bl	8001d5c <NVIC_EncodePriority>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff80 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff54 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e165      	b.n	8002114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8154 	bne.w	800210e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d017      	beq.n	8001f1c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80ae 	beq.w	800210e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	; (800212c <HAL_GPIO_Init+0x300>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a5c      	ldr	r2, [pc, #368]	; (800212c <HAL_GPIO_Init+0x300>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b5a      	ldr	r3, [pc, #360]	; (800212c <HAL_GPIO_Init+0x300>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_GPIO_Init+0x304>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4f      	ldr	r2, [pc, #316]	; (8002134 <HAL_GPIO_Init+0x308>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d025      	beq.n	8002046 <HAL_GPIO_Init+0x21a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4e      	ldr	r2, [pc, #312]	; (8002138 <HAL_GPIO_Init+0x30c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <HAL_GPIO_Init+0x216>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4d      	ldr	r2, [pc, #308]	; (800213c <HAL_GPIO_Init+0x310>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d019      	beq.n	800203e <HAL_GPIO_Init+0x212>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x314>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4b      	ldr	r2, [pc, #300]	; (8002144 <HAL_GPIO_Init+0x318>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x20a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <HAL_GPIO_Init+0x31c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x206>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a49      	ldr	r2, [pc, #292]	; (800214c <HAL_GPIO_Init+0x320>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x202>
 800202a:	2306      	movs	r3, #6
 800202c:	e00c      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800202e:	2307      	movs	r3, #7
 8002030:	e00a      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002032:	2305      	movs	r3, #5
 8002034:	e008      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002036:	2304      	movs	r3, #4
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_Init+0x21c>
 8002046:	2300      	movs	r3, #0
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002058:	4935      	ldr	r1, [pc, #212]	; (8002130 <HAL_GPIO_Init+0x304>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3302      	adds	r3, #2
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_GPIO_Init+0x324>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800208a:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_GPIO_Init+0x324>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002090:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_GPIO_Init+0x324>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b4:	4a26      	ldr	r2, [pc, #152]	; (8002150 <HAL_GPIO_Init+0x324>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_GPIO_Init+0x324>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_GPIO_Init+0x324>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <HAL_GPIO_Init+0x324>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_GPIO_Init+0x324>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	f67f ae96 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	40013800 	.word	0x40013800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400
 800213c:	40020800 	.word	0x40020800
 8002140:	40020c00 	.word	0x40020c00
 8002144:	40021000 	.word	0x40021000
 8002148:	40021400 	.word	0x40021400
 800214c:	40021800 	.word	0x40021800
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_PWREx_EnableOverDrive+0x90>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <HAL_PWREx_EnableOverDrive+0x90>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_PWREx_EnableOverDrive+0x90>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_PWREx_EnableOverDrive+0x94>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b4:	f7ff fd4c 	bl	8001c50 <HAL_GetTick>
 80021b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021ba:	e009      	b.n	80021d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021bc:	f7ff fd48 	bl	8001c50 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ca:	d901      	bls.n	80021d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e01f      	b.n	8002210 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_PWREx_EnableOverDrive+0x98>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d1ee      	bne.n	80021bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e4:	f7ff fd34 	bl	8001c50 <HAL_GetTick>
 80021e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021ea:	e009      	b.n	8002200 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021ec:	f7ff fd30 	bl	8001c50 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021fa:	d901      	bls.n	8002200 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e007      	b.n	8002210 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_PWREx_EnableOverDrive+0x98>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800220c:	d1ee      	bne.n	80021ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	420e0040 	.word	0x420e0040
 8002220:	40007000 	.word	0x40007000
 8002224:	420e0044 	.word	0x420e0044

08002228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0cc      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d90c      	bls.n	8002264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800229e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	494d      	ldr	r1, [pc, #308]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d044      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d119      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e067      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4934      	ldr	r1, [pc, #208]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7ff fc9a 	bl	8001c50 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff fc96 	bl	8001c50 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e04f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d20c      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e032      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4916      	ldr	r1, [pc, #88]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490e      	ldr	r1, [pc, #56]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ae:	f000 fbb1 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490a      	ldr	r1, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe feec 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00
 80023e4:	40023800 	.word	0x40023800
 80023e8:	0800a180 	.word	0x0800a180
 80023ec:	20000010 	.word	0x20000010
 80023f0:	20000018 	.word	0x20000018

080023f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_GetHCLKFreq+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000010 	.word	0x20000010

0800240c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002410:	f7ff fff0 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0a9b      	lsrs	r3, r3, #10
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4903      	ldr	r1, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	0800a190 	.word	0x0800a190

08002434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002438:	f7ff ffdc 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0b5b      	lsrs	r3, r3, #13
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	0800a190 	.word	0x0800a190

0800245c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	220f      	movs	r2, #15
 800246a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_RCC_GetClockConfig+0x5c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_RCC_GetClockConfig+0x5c>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <HAL_RCC_GetClockConfig+0x60>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 020f 	and.w	r2, r3, #15
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	601a      	str	r2, [r3, #0]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40023c00 	.word	0x40023c00

080024c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80024f8:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024fe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	496c      	ldr	r1, [pc, #432]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002516:	2301      	movs	r3, #1
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002526:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002534:	4960      	ldr	r1, [pc, #384]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d017      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002554:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800255a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4955      	ldr	r1, [pc, #340]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002572:	d101      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002574:	2301      	movs	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002580:	2301      	movs	r3, #1
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d017      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002590:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002596:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	4946      	ldr	r1, [pc, #280]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ae:	d101      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80025b0:	2301      	movs	r3, #1
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80025bc:	2301      	movs	r3, #1
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 808a 	beq.w	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025f6:	f7ff fb2b 	bl	8001c50 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7ff fb27 	bl	8001c50 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e278      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800261c:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002624:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d02f      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002634:	6a3a      	ldr	r2, [r7, #32]
 8002636:	429a      	cmp	r2, r3
 8002638:	d028      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800263a:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002642:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002646:	2201      	movs	r2, #1
 8002648:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d114      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff faf5 	bl	8001c50 <HAL_GetTick>
 8002666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7ff faf1 	bl	8001c50 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e240      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ee      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002698:	d114      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80026aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ae:	4902      	ldr	r1, [pc, #8]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]
 80026b4:	e00c      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40007000 	.word	0x40007000
 80026c0:	42470e40 	.word	0x42470e40
 80026c4:	4b4a      	ldr	r3, [pc, #296]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a49      	ldr	r2, [pc, #292]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026ce:	6093      	str	r3, [r2, #8]
 80026d0:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	4944      	ldr	r1, [pc, #272]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80026f4:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80026f6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002704:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	4937      	ldr	r1, [pc, #220]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002734:	492e      	ldr	r1, [pc, #184]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d011      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800274a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	4926      	ldr	r1, [pc, #152]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002766:	d101      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002768:	2301      	movs	r3, #1
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800277a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	491a      	ldr	r1, [pc, #104]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d011      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800279c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	4911      	ldr	r1, [pc, #68]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b8:	d101      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80027ba:	2301      	movs	r3, #1
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d005      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027cc:	f040 80ff 	bne.w	80029ce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027d6:	f7ff fa3b 	bl	8001c50 <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027dc:	e00e      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027de:	f7ff fa37 	bl	8001c50 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d907      	bls.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e188      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80027f0:	40023800 	.word	0x40023800
 80027f4:	424711e0 	.word	0x424711e0
 80027f8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027fc:	4b7e      	ldr	r3, [pc, #504]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ea      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002824:	2b00      	cmp	r3, #0
 8002826:	d028      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d124      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002830:	4b71      	ldr	r3, [pc, #452]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002836:	0c1b      	lsrs	r3, r3, #16
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	3301      	adds	r3, #1
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	019b      	lsls	r3, r3, #6
 800285a:	431a      	orrs	r2, r3
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	085b      	lsrs	r3, r3, #1
 8002860:	3b01      	subs	r3, #1
 8002862:	041b      	lsls	r3, r3, #16
 8002864:	431a      	orrs	r2, r3
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	071b      	lsls	r3, r3, #28
 8002872:	4961      	ldr	r1, [pc, #388]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002898:	2b00      	cmp	r3, #0
 800289a:	d035      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a4:	d130      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028a6:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	3301      	adds	r3, #1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028b8:	4b4f      	ldr	r3, [pc, #316]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	0f1b      	lsrs	r3, r3, #28
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	431a      	orrs	r2, r3
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	431a      	orrs	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	071b      	lsls	r3, r3, #28
 80028e8:	4943      	ldr	r1, [pc, #268]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028f0:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f6:	f023 021f 	bic.w	r2, r3, #31
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	493d      	ldr	r1, [pc, #244]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d029      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291c:	d124      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	3301      	adds	r3, #1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002936:	0f1b      	lsrs	r3, r3, #28
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	019b      	lsls	r3, r3, #6
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	3b01      	subs	r3, #1
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	431a      	orrs	r2, r3
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	431a      	orrs	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	071b      	lsls	r3, r3, #28
 8002960:	4925      	ldr	r1, [pc, #148]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	4917      	ldr	r1, [pc, #92]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a8:	f7ff f952 	bl	8001c50 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029b0:	f7ff f94e 	bl	8001c50 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e09f      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 8095 	bne.w	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029dc:	f7ff f938 	bl	8001c50 <HAL_GetTick>
 80029e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029e2:	e00f      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80029e4:	f7ff f934 	bl	8001c50 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d908      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e085      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470068 	.word	0x42470068
 8002a00:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a10:	d0e8      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d02b      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d127      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a3a:	4b34      	ldr	r3, [pc, #208]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	3301      	adds	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	431a      	orrs	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	061b      	lsls	r3, r3, #24
 8002a68:	4928      	ldr	r1, [pc, #160]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a70:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	4922      	ldr	r1, [pc, #136]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01d      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a9e:	d118      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	0e1b      	lsrs	r3, r3, #24
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	019b      	lsls	r3, r3, #6
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	4910      	ldr	r1, [pc, #64]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ad8:	f7ff f8ba 	bl	8001c50 <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ae0:	f7ff f8b6 	bl	8001c50 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e007      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afe:	d1ef      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3730      	adds	r7, #48	; 0x30
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	42470070 	.word	0x42470070

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b18:	b088      	sub	sp, #32
 8002b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b30:	4bce      	ldr	r3, [pc, #824]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	f200 818d 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x344>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_RCC_GetSysClockFreq+0x30>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002e59 	.word	0x08002e59
 8002b4c:	08002e59 	.word	0x08002e59
 8002b50:	08002e59 	.word	0x08002e59
 8002b54:	08002b7f 	.word	0x08002b7f
 8002b58:	08002e59 	.word	0x08002e59
 8002b5c:	08002e59 	.word	0x08002e59
 8002b60:	08002e59 	.word	0x08002e59
 8002b64:	08002b85 	.word	0x08002b85
 8002b68:	08002e59 	.word	0x08002e59
 8002b6c:	08002e59 	.word	0x08002e59
 8002b70:	08002e59 	.word	0x08002e59
 8002b74:	08002cf9 	.word	0x08002cf9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4bbd      	ldr	r3, [pc, #756]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b7a:	61bb      	str	r3, [r7, #24]
       break;
 8002b7c:	e16f      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7e:	4bbd      	ldr	r3, [pc, #756]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x360>)
 8002b80:	61bb      	str	r3, [r7, #24]
      break;
 8002b82:	e16c      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b84:	4bb9      	ldr	r3, [pc, #740]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b8c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8e:	4bb7      	ldr	r3, [pc, #732]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d053      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9a:	4bb4      	ldr	r3, [pc, #720]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	ea02 0400 	and.w	r4, r2, r0
 8002bb2:	603c      	str	r4, [r7, #0]
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	014b      	lsls	r3, r1, #5
 8002bca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bce:	0142      	lsls	r2, r0, #5
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	1ac0      	subs	r0, r0, r3
 8002bd8:	462b      	mov	r3, r5
 8002bda:	eb61 0103 	sbc.w	r1, r1, r3
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	018b      	lsls	r3, r1, #6
 8002be8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bec:	0182      	lsls	r2, r0, #6
 8002bee:	1a12      	subs	r2, r2, r0
 8002bf0:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf4:	f04f 0000 	mov.w	r0, #0
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	00d9      	lsls	r1, r3, #3
 8002bfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c02:	00d0      	lsls	r0, r2, #3
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4621      	mov	r1, r4
 8002c0a:	1852      	adds	r2, r2, r1
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	eb43 0101 	adc.w	r1, r3, r1
 8002c12:	460b      	mov	r3, r1
 8002c14:	f04f 0000 	mov.w	r0, #0
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	0259      	lsls	r1, r3, #9
 8002c1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c22:	0250      	lsls	r0, r2, #9
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	f7fd fb9c 	bl	8000370 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	e04c      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b8a      	ldr	r3, [pc, #552]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	ea02 0a00 	and.w	sl, r2, r0
 8002c5a:	ea03 0b01 	and.w	fp, r3, r1
 8002c5e:	4650      	mov	r0, sl
 8002c60:	4659      	mov	r1, fp
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	014b      	lsls	r3, r1, #5
 8002c6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c70:	0142      	lsls	r2, r0, #5
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	ebb0 000a 	subs.w	r0, r0, sl
 8002c7a:	eb61 010b 	sbc.w	r1, r1, fp
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	018b      	lsls	r3, r1, #6
 8002c88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c8c:	0182      	lsls	r2, r0, #6
 8002c8e:	1a12      	subs	r2, r2, r0
 8002c90:	eb63 0301 	sbc.w	r3, r3, r1
 8002c94:	f04f 0000 	mov.w	r0, #0
 8002c98:	f04f 0100 	mov.w	r1, #0
 8002c9c:	00d9      	lsls	r1, r3, #3
 8002c9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ca2:	00d0      	lsls	r0, r2, #3
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	eb12 020a 	adds.w	r2, r2, sl
 8002cac:	eb43 030b 	adc.w	r3, r3, fp
 8002cb0:	f04f 0000 	mov.w	r0, #0
 8002cb4:	f04f 0100 	mov.w	r1, #0
 8002cb8:	0299      	lsls	r1, r3, #10
 8002cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cbe:	0290      	lsls	r0, r2, #10
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	f7fd fb4e 	bl	8000370 <__aeabi_uldivmod>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cdc:	4b63      	ldr	r3, [pc, #396]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	61bb      	str	r3, [r7, #24]
      break;
 8002cf6:	e0b2      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d00:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d04d      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0e:	4b57      	ldr	r3, [pc, #348]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	461a      	mov	r2, r3
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	ea02 0800 	and.w	r8, r2, r0
 8002d26:	ea03 0901 	and.w	r9, r3, r1
 8002d2a:	4640      	mov	r0, r8
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	014b      	lsls	r3, r1, #5
 8002d38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d3c:	0142      	lsls	r2, r0, #5
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	ebb0 0008 	subs.w	r0, r0, r8
 8002d46:	eb61 0109 	sbc.w	r1, r1, r9
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	018b      	lsls	r3, r1, #6
 8002d54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d58:	0182      	lsls	r2, r0, #6
 8002d5a:	1a12      	subs	r2, r2, r0
 8002d5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	00d9      	lsls	r1, r3, #3
 8002d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d6e:	00d0      	lsls	r0, r2, #3
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	eb12 0208 	adds.w	r2, r2, r8
 8002d78:	eb43 0309 	adc.w	r3, r3, r9
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	0259      	lsls	r1, r3, #9
 8002d86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d8a:	0250      	lsls	r0, r2, #9
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	f7fd fae8 	bl	8000370 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e04a      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002daa:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	461a      	mov	r2, r3
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	ea02 0400 	and.w	r4, r2, r0
 8002dc2:	ea03 0501 	and.w	r5, r3, r1
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	4629      	mov	r1, r5
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	014b      	lsls	r3, r1, #5
 8002dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dd8:	0142      	lsls	r2, r0, #5
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	1b00      	subs	r0, r0, r4
 8002de0:	eb61 0105 	sbc.w	r1, r1, r5
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	018b      	lsls	r3, r1, #6
 8002dee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002df2:	0182      	lsls	r2, r0, #6
 8002df4:	1a12      	subs	r2, r2, r0
 8002df6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	00d9      	lsls	r1, r3, #3
 8002e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e08:	00d0      	lsls	r0, r2, #3
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	1912      	adds	r2, r2, r4
 8002e10:	eb45 0303 	adc.w	r3, r5, r3
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0299      	lsls	r1, r3, #10
 8002e1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e22:	0290      	lsls	r0, r2, #10
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	f7fd fa9c 	bl	8000370 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0f1b      	lsrs	r3, r3, #28
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	61bb      	str	r3, [r7, #24]
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e5a:	61bb      	str	r3, [r7, #24]
      break;
 8002e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e28d      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8083 	beq.w	8002f9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e98:	4b94      	ldr	r3, [pc, #592]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ea4:	4b91      	ldr	r3, [pc, #580]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eb0:	4b8e      	ldr	r3, [pc, #568]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebe:	4b8b      	ldr	r3, [pc, #556]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d112      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eca:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4b84      	ldr	r3, [pc, #528]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d05b      	beq.n	8002f9c <HAL_RCC_OscConfig+0x124>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d157      	bne.n	8002f9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e25a      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x90>
 8002efa:	4b7c      	ldr	r3, [pc, #496]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7b      	ldr	r2, [pc, #492]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xcc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0xb4>
 8002f12:	4b76      	ldr	r3, [pc, #472]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b73      	ldr	r3, [pc, #460]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a72      	ldr	r2, [pc, #456]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xcc>
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6e      	ldr	r2, [pc, #440]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6b      	ldr	r2, [pc, #428]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fe80 	bl	8001c50 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fe7c 	bl	8001c50 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e21f      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xdc>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fe6c 	bl	8001c50 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fe68 	bl	8001c50 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e20b      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b57      	ldr	r3, [pc, #348]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x104>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d06f      	beq.n	800308a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002faa:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d017      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fb6:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d105      	bne.n	8002fce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x186>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1d3      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4937      	ldr	r1, [pc, #220]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x278>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fe fe15 	bl	8001c50 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302a:	f7fe fe11 	bl	8001c50 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1b4      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b2b      	ldr	r3, [pc, #172]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4925      	ldr	r1, [pc, #148]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_OscConfig+0x278>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fdf4 	bl	8001c50 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306c:	f7fe fdf0 	bl	8001c50 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e193      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d036      	beq.n	8003104 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_RCC_OscConfig+0x27c>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe fdd4 	bl	8001c50 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe fdd0 	bl	8001c50 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e173      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x234>
 80030ca:	e01b      	b.n	8003104 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7fe fdbd 	bl	8001c50 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	e00e      	b.n	80030f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030da:	f7fe fdb9 	bl	8001c50 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d907      	bls.n	80030f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e15c      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	42470000 	.word	0x42470000
 80030f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	4b8a      	ldr	r3, [pc, #552]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ea      	bne.n	80030da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8097 	beq.w	8003240 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b83      	ldr	r3, [pc, #524]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b7f      	ldr	r3, [pc, #508]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a7e      	ldr	r2, [pc, #504]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b7c      	ldr	r3, [pc, #496]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b79      	ldr	r3, [pc, #484]	; (8003328 <HAL_RCC_OscConfig+0x4b0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d118      	bne.n	8003180 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314e:	4b76      	ldr	r3, [pc, #472]	; (8003328 <HAL_RCC_OscConfig+0x4b0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a75      	ldr	r2, [pc, #468]	; (8003328 <HAL_RCC_OscConfig+0x4b0>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315a:	f7fe fd79 	bl	8001c50 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003162:	f7fe fd75 	bl	8001c50 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e118      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <HAL_RCC_OscConfig+0x4b0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x31e>
 8003188:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a65      	ldr	r2, [pc, #404]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	e01c      	b.n	80031d0 <HAL_RCC_OscConfig+0x358>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b05      	cmp	r3, #5
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x340>
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a60      	ldr	r2, [pc, #384]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a5d      	ldr	r2, [pc, #372]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0x358>
 80031b8:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a59      	ldr	r2, [pc, #356]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a56      	ldr	r2, [pc, #344]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe fd3a 	bl	8001c50 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe fd36 	bl	8001c50 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0d7      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f6:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ee      	beq.n	80031e0 <HAL_RCC_OscConfig+0x368>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe fd24 	bl	8001c50 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe fd20 	bl	8001c50 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0c1      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1ee      	bne.n	800320c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	4a3a      	ldr	r2, [pc, #232]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80ad 	beq.w	80033a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b08      	cmp	r3, #8
 8003254:	d060      	beq.n	8003318 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d145      	bne.n	80032ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b33      	ldr	r3, [pc, #204]	; (800332c <HAL_RCC_OscConfig+0x4b4>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fcf4 	bl	8001c50 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe fcf0 	bl	8001c50 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e093      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	071b      	lsls	r3, r3, #28
 80032b6:	491b      	ldr	r1, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4b4>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fe fcc5 	bl	8001c50 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe fcc1 	bl	8001c50 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e064      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x452>
 80032e8:	e05c      	b.n	80033a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x4b4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fcae 	bl	8001c50 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe fcaa 	bl	8001c50 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e04d      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x480>
 8003316:	e045      	b.n	80033a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e040      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_RCC_OscConfig+0x538>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d030      	beq.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d129      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d122      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	4293      	cmp	r3, r2
 800336a:	d119      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d10f      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800

080033b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e083      	b.n	80034ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7f5b      	ldrb	r3, [r3, #29]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd fe82 	bl	80010e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	22ca      	movs	r2, #202	; 0xca
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2253      	movs	r2, #83	; 0x53
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 faa8 	bl	8003948 <RTC_EnterInitMode>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	22ff      	movs	r2, #255	; 0xff
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e05e      	b.n	80034ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800341e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003422:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68d2      	ldr	r2, [r2, #12]
 800344a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6919      	ldr	r1, [r3, #16]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	041a      	lsls	r2, r3, #16
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800346e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fa3a 	bl	80038f8 <HAL_RTC_WaitForSynchro>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	22ff      	movs	r2, #255	; 0xff
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2204      	movs	r2, #4
 8003496:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e018      	b.n	80034ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	22ff      	movs	r2, #255	; 0xff
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034d6:	b590      	push	{r4, r7, lr}
 80034d8:	b087      	sub	sp, #28
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	7f1b      	ldrb	r3, [r3, #28]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_RTC_SetTime+0x1c>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e0aa      	b.n	8003648 <HAL_RTC_SetTime+0x172>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2202      	movs	r2, #2
 80034fc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d126      	bne.n	8003552 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2200      	movs	r2, #0
 8003516:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fa3f 	bl	80039a0 <RTC_ByteToBcd2>
 8003522:	4603      	mov	r3, r0
 8003524:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	785b      	ldrb	r3, [r3, #1]
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fa38 	bl	80039a0 <RTC_ByteToBcd2>
 8003530:	4603      	mov	r3, r0
 8003532:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003534:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	789b      	ldrb	r3, [r3, #2]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fa30 	bl	80039a0 <RTC_ByteToBcd2>
 8003540:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003542:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	78db      	ldrb	r3, [r3, #3]
 800354a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e018      	b.n	8003584 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2200      	movs	r2, #0
 8003564:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003572:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003578:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	78db      	ldrb	r3, [r3, #3]
 800357e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	22ca      	movs	r2, #202	; 0xca
 800358a:	625a      	str	r2, [r3, #36]	; 0x24
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2253      	movs	r2, #83	; 0x53
 8003592:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f9d7 	bl	8003948 <RTC_EnterInitMode>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2204      	movs	r2, #4
 80035ac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e047      	b.n	8003648 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80035c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80035c6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035d6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d111      	bne.n	8003632 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f972 	bl	80038f8 <HAL_RTC_WaitForSynchro>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	22ff      	movs	r2, #255	; 0xff
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2204      	movs	r2, #4
 8003626:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e00a      	b.n	8003648 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	22ff      	movs	r2, #255	; 0xff
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003646:	2300      	movs	r3, #0
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd90      	pop	{r4, r7, pc}

08003650 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003682:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003686:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11a      	bne.n	8003702 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f983 	bl	80039dc <RTC_Bcd2ToByte>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	785b      	ldrb	r3, [r3, #1]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f97a 	bl	80039dc <RTC_Bcd2ToByte>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	789b      	ldrb	r3, [r3, #2]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f971 	bl	80039dc <RTC_Bcd2ToByte>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	7f1b      	ldrb	r3, [r3, #28]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_RTC_SetDate+0x1c>
 8003724:	2302      	movs	r3, #2
 8003726:	e094      	b.n	8003852 <HAL_RTC_SetDate+0x146>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2202      	movs	r2, #2
 8003732:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10e      	bne.n	8003758 <HAL_RTC_SetDate+0x4c>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	785b      	ldrb	r3, [r3, #1]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	f023 0310 	bic.w	r3, r3, #16
 800374e:	b2db      	uxtb	r3, r3
 8003750:	330a      	adds	r3, #10
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d11c      	bne.n	8003798 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	78db      	ldrb	r3, [r3, #3]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f91c 	bl	80039a0 <RTC_ByteToBcd2>
 8003768:	4603      	mov	r3, r0
 800376a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f915 	bl	80039a0 <RTC_ByteToBcd2>
 8003776:	4603      	mov	r3, r0
 8003778:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800377a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	789b      	ldrb	r3, [r3, #2]
 8003780:	4618      	mov	r0, r3
 8003782:	f000 f90d 	bl	80039a0 <RTC_ByteToBcd2>
 8003786:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003788:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e00e      	b.n	80037b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	78db      	ldrb	r3, [r3, #3]
 800379c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	785b      	ldrb	r3, [r3, #1]
 80037a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037a4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80037aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	22ca      	movs	r2, #202	; 0xca
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2253      	movs	r2, #83	; 0x53
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f8be 	bl	8003948 <RTC_EnterInitMode>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	22ff      	movs	r2, #255	; 0xff
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2204      	movs	r2, #4
 80037de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e033      	b.n	8003852 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003808:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d111      	bne.n	800383c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f86d 	bl	80038f8 <HAL_RTC_WaitForSynchro>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	22ff      	movs	r2, #255	; 0xff
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2204      	movs	r2, #4
 8003830:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e00a      	b.n	8003852 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003850:	2300      	movs	r3, #0
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}

0800385a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003874:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003878:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	b2da      	uxtb	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	0b5b      	lsrs	r3, r3, #13
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11a      	bne.n	80038ee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	78db      	ldrb	r3, [r3, #3]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f88d 	bl	80039dc <RTC_Bcd2ToByte>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f884 	bl	80039dc <RTC_Bcd2ToByte>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	789b      	ldrb	r3, [r3, #2]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 f87b 	bl	80039dc <RTC_Bcd2ToByte>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003912:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003914:	f7fe f99c 	bl	8001c50 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800391a:	e009      	b.n	8003930 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800391c:	f7fe f998 	bl	8001c50 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800392a:	d901      	bls.n	8003930 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e007      	b.n	8003940 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ee      	beq.n	800391c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d119      	bne.n	8003996 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f04f 32ff 	mov.w	r2, #4294967295
 800396a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe f970 	bl	8001c50 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003972:	e009      	b.n	8003988 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003974:	f7fe f96c 	bl	8001c50 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003982:	d901      	bls.n	8003988 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e007      	b.n	8003998 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ee      	beq.n	8003974 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80039ae:	e005      	b.n	80039bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3301      	adds	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	3b0a      	subs	r3, #10
 80039ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	2b09      	cmp	r3, #9
 80039c0:	d8f6      	bhi.n	80039b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	b2db      	uxtb	r3, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	b2db      	uxtb	r3, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e041      	b.n	8003aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f839 	bl	8003ab6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f000 f9d8 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d001      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e04e      	b.n	8003b82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a23      	ldr	r2, [pc, #140]	; (8003b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x80>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0e:	d01d      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x80>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x80>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x80>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x80>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x80>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x80>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d111      	bne.n	8003b70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d010      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6e:	e007      	b.n	8003b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40010400 	.word	0x40010400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40001800 	.word	0x40001800

08003bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d122      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d11b      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0202 	mvn.w	r2, #2
 8003bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8ee 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 8003bf4:	e005      	b.n	8003c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8e0 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f8f1 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0204 	mvn.w	r2, #4
 8003c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2202      	movs	r2, #2
 8003c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8c4 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8b6 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f8c7 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d122      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d11b      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0208 	mvn.w	r2, #8
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2204      	movs	r2, #4
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f89a 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f88c 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f89d 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d122      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d11b      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0210 	mvn.w	r2, #16
 8003cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f870 	bl	8003dd0 <HAL_TIM_IC_CaptureCallback>
 8003cf0:	e005      	b.n	8003cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f862 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f873 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d10e      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0201 	mvn.w	r2, #1
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd f88a 	bl	8000e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3a:	2b80      	cmp	r3, #128	; 0x80
 8003d3c:	d10e      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	2b80      	cmp	r3, #128	; 0x80
 8003d4a:	d107      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f902 	bl	8003f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d10e      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d107      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f838 	bl	8003df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d10e      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d107      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0220 	mvn.w	r2, #32
 8003dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8cc 	bl	8003f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a40      	ldr	r2, [pc, #256]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d013      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2a:	d00f      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3d      	ldr	r2, [pc, #244]	; (8003f24 <TIM_Base_SetConfig+0x118>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00b      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <TIM_Base_SetConfig+0x11c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3b      	ldr	r2, [pc, #236]	; (8003f2c <TIM_Base_SetConfig+0x120>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3a      	ldr	r2, [pc, #232]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d108      	bne.n	8003e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d02b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d027      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2c      	ldr	r2, [pc, #176]	; (8003f24 <TIM_Base_SetConfig+0x118>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d023      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <TIM_Base_SetConfig+0x11c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <TIM_Base_SetConfig+0x120>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d017      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a28      	ldr	r2, [pc, #160]	; (8003f34 <TIM_Base_SetConfig+0x128>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <TIM_Base_SetConfig+0x12c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00f      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <TIM_Base_SetConfig+0x130>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <TIM_Base_SetConfig+0x134>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <TIM_Base_SetConfig+0x138>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <TIM_Base_SetConfig+0x13c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d108      	bne.n	8003ed0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0xf8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d103      	bne.n	8003f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	615a      	str	r2, [r3, #20]
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800
 8003f40:	40001800 	.word	0x40001800
 8003f44:	40001c00 	.word	0x40001c00
 8003f48:	40002000 	.word	0x40002000

08003f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e03f      	b.n	8004006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fd f8b6 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f96f 	bl	800429c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b08a      	sub	sp, #40	; 0x28
 8004012:	af02      	add	r7, sp, #8
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b20      	cmp	r3, #32
 800402c:	d17c      	bne.n	8004128 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_UART_Transmit+0x2c>
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e075      	b.n	800412a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_UART_Transmit+0x3e>
 8004048:	2302      	movs	r3, #2
 800404a:	e06e      	b.n	800412a <HAL_UART_Transmit+0x11c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2221      	movs	r2, #33	; 0x21
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004062:	f7fd fdf5 	bl	8001c50 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d108      	bne.n	8004090 <HAL_UART_Transmit+0x82>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e003      	b.n	8004098 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040a0:	e02a      	b.n	80040f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2180      	movs	r1, #128	; 0x80
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f870 	bl	8004192 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e036      	b.n	800412a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3302      	adds	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e007      	b.n	80040ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	3301      	adds	r3, #1
 80040e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1cf      	bne.n	80040a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	2140      	movs	r1, #64	; 0x40
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f840 	bl	8004192 <UART_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e006      	b.n	800412a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	60b9      	str	r1, [r7, #8]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b20      	cmp	r3, #32
 800414a:	d11d      	bne.n	8004188 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_UART_Receive_IT+0x26>
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e016      	b.n	800418a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_UART_Receive_IT+0x38>
 8004166:	2302      	movs	r3, #2
 8004168:	e00f      	b.n	800418a <HAL_UART_Receive_IT+0x58>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	461a      	mov	r2, r3
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f851 	bl	8004226 <UART_Start_Receive_IT>
 8004184:	4603      	mov	r3, r0
 8004186:	e000      	b.n	800418a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a2:	e02c      	b.n	80041fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d028      	beq.n	80041fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041b2:	f7fd fd4d 	bl	8001c50 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d21d      	bcs.n	80041fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e00f      	b.n	800421e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4013      	ands	r3, r2
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	429a      	cmp	r2, r3
 800420c:	bf0c      	ite	eq
 800420e:	2301      	moveq	r3, #1
 8004210:	2300      	movne	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	429a      	cmp	r2, r3
 800421a:	d0c3      	beq.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004226:	b480      	push	{r7}
 8004228:	b085      	sub	sp, #20
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	4613      	mov	r3, r2
 8004232:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	88fa      	ldrh	r2, [r7, #6]
 800423e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2222      	movs	r2, #34	; 0x22
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0220 	orr.w	r2, r2, #32
 800428a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	b09f      	sub	sp, #124	; 0x7c
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	68d9      	ldr	r1, [r3, #12]
 80042b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	ea40 0301 	orr.w	r3, r0, r1
 80042bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80042d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042e0:	f021 010c 	bic.w	r1, r1, #12
 80042e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ea:	430b      	orrs	r3, r1
 80042ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	6999      	ldr	r1, [r3, #24]
 80042fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	ea40 0301 	orr.w	r3, r0, r1
 8004304:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4bc5      	ldr	r3, [pc, #788]	; (8004620 <UART_SetConfig+0x384>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d004      	beq.n	800431a <UART_SetConfig+0x7e>
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4bc3      	ldr	r3, [pc, #780]	; (8004624 <UART_SetConfig+0x388>)
 8004316:	429a      	cmp	r2, r3
 8004318:	d103      	bne.n	8004322 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800431a:	f7fe f88b 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 800431e:	6778      	str	r0, [r7, #116]	; 0x74
 8004320:	e002      	b.n	8004328 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004322:	f7fe f873 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8004326:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004330:	f040 80b6 	bne.w	80044a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004336:	461c      	mov	r4, r3
 8004338:	f04f 0500 	mov.w	r5, #0
 800433c:	4622      	mov	r2, r4
 800433e:	462b      	mov	r3, r5
 8004340:	1891      	adds	r1, r2, r2
 8004342:	6439      	str	r1, [r7, #64]	; 0x40
 8004344:	415b      	adcs	r3, r3
 8004346:	647b      	str	r3, [r7, #68]	; 0x44
 8004348:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800434c:	1912      	adds	r2, r2, r4
 800434e:	eb45 0303 	adc.w	r3, r5, r3
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	00d9      	lsls	r1, r3, #3
 800435c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004360:	00d0      	lsls	r0, r2, #3
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	1911      	adds	r1, r2, r4
 8004368:	6639      	str	r1, [r7, #96]	; 0x60
 800436a:	416b      	adcs	r3, r5
 800436c:	667b      	str	r3, [r7, #100]	; 0x64
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	461a      	mov	r2, r3
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	1891      	adds	r1, r2, r2
 800437a:	63b9      	str	r1, [r7, #56]	; 0x38
 800437c:	415b      	adcs	r3, r3
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004384:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004388:	f7fb fff2 	bl	8000370 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4ba5      	ldr	r3, [pc, #660]	; (8004628 <UART_SetConfig+0x38c>)
 8004392:	fba3 2302 	umull	r2, r3, r3, r2
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	011e      	lsls	r6, r3, #4
 800439a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800439c:	461c      	mov	r4, r3
 800439e:	f04f 0500 	mov.w	r5, #0
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	1891      	adds	r1, r2, r2
 80043a8:	6339      	str	r1, [r7, #48]	; 0x30
 80043aa:	415b      	adcs	r3, r3
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
 80043ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043b2:	1912      	adds	r2, r2, r4
 80043b4:	eb45 0303 	adc.w	r3, r5, r3
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	00d9      	lsls	r1, r3, #3
 80043c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c6:	00d0      	lsls	r0, r2, #3
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	1911      	adds	r1, r2, r4
 80043ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80043d0:	416b      	adcs	r3, r5
 80043d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	461a      	mov	r2, r3
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	1891      	adds	r1, r2, r2
 80043e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80043e2:	415b      	adcs	r3, r3
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043ee:	f7fb ffbf 	bl	8000370 <__aeabi_uldivmod>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4b8c      	ldr	r3, [pc, #560]	; (8004628 <UART_SetConfig+0x38c>)
 80043f8:	fba3 1302 	umull	r1, r3, r3, r2
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	2164      	movs	r1, #100	; 0x64
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	3332      	adds	r3, #50	; 0x32
 800440a:	4a87      	ldr	r2, [pc, #540]	; (8004628 <UART_SetConfig+0x38c>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004418:	441e      	add	r6, r3
 800441a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800441c:	4618      	mov	r0, r3
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	1894      	adds	r4, r2, r2
 8004428:	623c      	str	r4, [r7, #32]
 800442a:	415b      	adcs	r3, r3
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004432:	1812      	adds	r2, r2, r0
 8004434:	eb41 0303 	adc.w	r3, r1, r3
 8004438:	f04f 0400 	mov.w	r4, #0
 800443c:	f04f 0500 	mov.w	r5, #0
 8004440:	00dd      	lsls	r5, r3, #3
 8004442:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004446:	00d4      	lsls	r4, r2, #3
 8004448:	4622      	mov	r2, r4
 800444a:	462b      	mov	r3, r5
 800444c:	1814      	adds	r4, r2, r0
 800444e:	653c      	str	r4, [r7, #80]	; 0x50
 8004450:	414b      	adcs	r3, r1
 8004452:	657b      	str	r3, [r7, #84]	; 0x54
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	461a      	mov	r2, r3
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	1891      	adds	r1, r2, r2
 8004460:	61b9      	str	r1, [r7, #24]
 8004462:	415b      	adcs	r3, r3
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800446e:	f7fb ff7f 	bl	8000370 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <UART_SetConfig+0x38c>)
 8004478:	fba3 1302 	umull	r1, r3, r3, r2
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	2164      	movs	r1, #100	; 0x64
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	3332      	adds	r3, #50	; 0x32
 800448a:	4a67      	ldr	r2, [pc, #412]	; (8004628 <UART_SetConfig+0x38c>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	f003 0207 	and.w	r2, r3, #7
 8004496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4432      	add	r2, r6
 800449c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800449e:	e0b9      	b.n	8004614 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a2:	461c      	mov	r4, r3
 80044a4:	f04f 0500 	mov.w	r5, #0
 80044a8:	4622      	mov	r2, r4
 80044aa:	462b      	mov	r3, r5
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	6139      	str	r1, [r7, #16]
 80044b0:	415b      	adcs	r3, r3
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044b8:	1912      	adds	r2, r2, r4
 80044ba:	eb45 0303 	adc.w	r3, r5, r3
 80044be:	f04f 0000 	mov.w	r0, #0
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	00d9      	lsls	r1, r3, #3
 80044c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044cc:	00d0      	lsls	r0, r2, #3
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	eb12 0804 	adds.w	r8, r2, r4
 80044d6:	eb43 0905 	adc.w	r9, r3, r5
 80044da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	008b      	lsls	r3, r1, #2
 80044ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044f2:	0082      	lsls	r2, r0, #2
 80044f4:	4640      	mov	r0, r8
 80044f6:	4649      	mov	r1, r9
 80044f8:	f7fb ff3a 	bl	8000370 <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4b49      	ldr	r3, [pc, #292]	; (8004628 <UART_SetConfig+0x38c>)
 8004502:	fba3 2302 	umull	r2, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	011e      	lsls	r6, r3, #4
 800450a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800450c:	4618      	mov	r0, r3
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	1894      	adds	r4, r2, r2
 8004518:	60bc      	str	r4, [r7, #8]
 800451a:	415b      	adcs	r3, r3
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004522:	1812      	adds	r2, r2, r0
 8004524:	eb41 0303 	adc.w	r3, r1, r3
 8004528:	f04f 0400 	mov.w	r4, #0
 800452c:	f04f 0500 	mov.w	r5, #0
 8004530:	00dd      	lsls	r5, r3, #3
 8004532:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004536:	00d4      	lsls	r4, r2, #3
 8004538:	4622      	mov	r2, r4
 800453a:	462b      	mov	r3, r5
 800453c:	1814      	adds	r4, r2, r0
 800453e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004540:	414b      	adcs	r3, r1
 8004542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4618      	mov	r0, r3
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	008b      	lsls	r3, r1, #2
 8004558:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800455c:	0082      	lsls	r2, r0, #2
 800455e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004562:	f7fb ff05 	bl	8000370 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <UART_SetConfig+0x38c>)
 800456c:	fba3 1302 	umull	r1, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2164      	movs	r1, #100	; 0x64
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3332      	adds	r3, #50	; 0x32
 800457e:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <UART_SetConfig+0x38c>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458a:	441e      	add	r6, r3
 800458c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800458e:	4618      	mov	r0, r3
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	1894      	adds	r4, r2, r2
 800459a:	603c      	str	r4, [r7, #0]
 800459c:	415b      	adcs	r3, r3
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045a4:	1812      	adds	r2, r2, r0
 80045a6:	eb41 0303 	adc.w	r3, r1, r3
 80045aa:	f04f 0400 	mov.w	r4, #0
 80045ae:	f04f 0500 	mov.w	r5, #0
 80045b2:	00dd      	lsls	r5, r3, #3
 80045b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045b8:	00d4      	lsls	r4, r2, #3
 80045ba:	4622      	mov	r2, r4
 80045bc:	462b      	mov	r3, r5
 80045be:	eb12 0a00 	adds.w	sl, r2, r0
 80045c2:	eb43 0b01 	adc.w	fp, r3, r1
 80045c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	008b      	lsls	r3, r1, #2
 80045da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045de:	0082      	lsls	r2, r0, #2
 80045e0:	4650      	mov	r0, sl
 80045e2:	4659      	mov	r1, fp
 80045e4:	f7fb fec4 	bl	8000370 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <UART_SetConfig+0x38c>)
 80045ee:	fba3 1302 	umull	r1, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2164      	movs	r1, #100	; 0x64
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	3332      	adds	r3, #50	; 0x32
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <UART_SetConfig+0x38c>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4432      	add	r2, r6
 8004612:	609a      	str	r2, [r3, #8]
}
 8004614:	bf00      	nop
 8004616:	377c      	adds	r7, #124	; 0x7c
 8004618:	46bd      	mov	sp, r7
 800461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461e:	bf00      	nop
 8004620:	40011000 	.word	0x40011000
 8004624:	40011400 	.word	0x40011400
 8004628:	51eb851f 	.word	0x51eb851f

0800462c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f103 0208 	add.w	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f103 0208 	add.w	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f103 0208 	add.w	r2, r3, #8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d103      	bne.n	80046ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	e00c      	b.n	8004708 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3308      	adds	r3, #8
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e002      	b.n	80046fc <vListInsert+0x2e>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	d2f6      	bcs.n	80046f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6892      	ldr	r2, [r2, #8]
 8004756:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6852      	ldr	r2, [r2, #4]
 8004760:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d103      	bne.n	8004774 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xQueueGenericReset+0x2a>
        __asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	60bb      	str	r3, [r7, #8]
    }
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80047be:	f002 fa73 	bl	8006ca8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	441a      	add	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	3b01      	subs	r3, #1
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	441a      	add	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	22ff      	movs	r2, #255	; 0xff
 8004802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	22ff      	movs	r2, #255	; 0xff
 800480a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d114      	bne.n	800483e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01a      	beq.n	8004852 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3310      	adds	r3, #16
 8004820:	4618      	mov	r0, r3
 8004822:	f001 f92b 	bl	8005a7c <xTaskRemoveFromEventList>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d012      	beq.n	8004852 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <xQueueGenericReset+0xcc>)
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	e009      	b.n	8004852 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3310      	adds	r3, #16
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fef2 	bl	800462c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	3324      	adds	r3, #36	; 0x24
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff feed 	bl	800462c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004852:	f002 fa59 	bl	8006d08 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004856:	2301      	movs	r3, #1
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004864:	b580      	push	{r7, lr}
 8004866:	b08c      	sub	sp, #48	; 0x30
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xQueueGenericCreate+0x2a>
        __asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	61bb      	str	r3, [r7, #24]
    }
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d006      	beq.n	80048ac <xQueueGenericCreate+0x48>
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d101      	bne.n	80048b0 <xQueueGenericCreate+0x4c>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <xQueueGenericCreate+0x4e>
 80048b0:	2300      	movs	r3, #0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <xQueueGenericCreate+0x68>
        __asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	617b      	str	r3, [r7, #20]
    }
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80048d2:	d90a      	bls.n	80048ea <xQueueGenericCreate+0x86>
        __asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	613b      	str	r3, [r7, #16]
    }
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	3350      	adds	r3, #80	; 0x50
 80048ee:	4618      	mov	r0, r3
 80048f0:	f002 fb04 	bl	8006efc <pvPortMalloc>
 80048f4:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3350      	adds	r3, #80	; 0x50
 8004904:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004906:	79fa      	ldrb	r2, [r7, #7]
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f805 	bl	8004922 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004918:	6a3b      	ldr	r3, [r7, #32]
    }
 800491a:	4618      	mov	r0, r3
 800491c:	3728      	adds	r7, #40	; 0x28
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e002      	b.n	8004944 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004950:	2101      	movs	r1, #1
 8004952:	69b8      	ldr	r0, [r7, #24]
 8004954:	f7ff ff1e 	bl	8004794 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	2073      	movs	r0, #115	; 0x73
 8004968:	f003 f9b8 	bl	8007cdc <SEGGER_SYSVIEW_RecordU32x3>
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b090      	sub	sp, #64	; 0x40
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004982:	2300      	movs	r3, #0
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueGenericSend+0x32>
        __asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d103      	bne.n	80049b4 <xQueueGenericSend+0x40>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <xQueueGenericSend+0x44>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <xQueueGenericSend+0x46>
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <xQueueGenericSend+0x60>
        __asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d103      	bne.n	80049e2 <xQueueGenericSend+0x6e>
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <xQueueGenericSend+0x72>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <xQueueGenericSend+0x74>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xQueueGenericSend+0x8e>
        __asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	623b      	str	r3, [r7, #32]
    }
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a02:	f001 f9db 	bl	8005dbc <xTaskGetSchedulerState>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <xQueueGenericSend+0x9e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <xQueueGenericSend+0xa2>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <xQueueGenericSend+0xa4>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueGenericSend+0xbe>
        __asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	61fb      	str	r3, [r7, #28]
    }
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004a32:	f002 f939 	bl	8006ca8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d302      	bcc.n	8004a48 <xQueueGenericSend+0xd4>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d136      	bne.n	8004ab6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 feb0 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	205a      	movs	r0, #90	; 0x5a
 8004a5e:	f003 f9b3 	bl	8007dc8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a68:	f000 fa96 	bl	8004f98 <prvCopyDataToQueue>
 8004a6c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	3324      	adds	r3, #36	; 0x24
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fffe 	bl	8005a7c <xTaskRemoveFromEventList>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d013      	beq.n	8004aae <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004a86:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <xQueueGenericSend+0x248>)
 8004a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	e00a      	b.n	8004aae <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004a9e:	4b47      	ldr	r3, [pc, #284]	; (8004bbc <xQueueGenericSend+0x248>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004aae:	f002 f92b 	bl	8006d08 <vPortExitCritical>
                return pdPASS;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e07d      	b.n	8004bb2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d110      	bne.n	8004ade <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004abc:	f002 f924 	bl	8006d08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f003 fe74 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	205a      	movs	r0, #90	; 0x5a
 8004ad6:	f003 f977 	bl	8007dc8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e069      	b.n	8004bb2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004ae4:	f107 0314 	add.w	r3, r7, #20
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f82d 	bl	8005b48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004aee:	2301      	movs	r3, #1
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004af2:	f002 f909 	bl	8006d08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004af6:	f000 fd8b 	bl	8005610 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004afa:	f002 f8d5 	bl	8006ca8 <vPortEnterCritical>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b04:	b25b      	sxtb	r3, r3
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d103      	bne.n	8004b14 <xQueueGenericSend+0x1a0>
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b1a:	b25b      	sxtb	r3, r3
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d103      	bne.n	8004b2a <xQueueGenericSend+0x1b6>
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b2a:	f002 f8ed 	bl	8006d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b2e:	1d3a      	adds	r2, r7, #4
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 f81c 	bl	8005b74 <xTaskCheckForTimeOut>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d124      	bne.n	8004b8c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b44:	f000 fb20 	bl	8005188 <prvIsQueueFull>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d018      	beq.n	8004b80 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	3310      	adds	r3, #16
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 ff3e 	bl	80059d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b5e:	f000 faab 	bl	80050b8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004b62:	f000 fd63 	bl	800562c <xTaskResumeAll>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f47f af62 	bne.w	8004a32 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <xQueueGenericSend+0x248>)
 8004b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	e758      	b.n	8004a32 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b82:	f000 fa99 	bl	80050b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004b86:	f000 fd51 	bl	800562c <xTaskResumeAll>
 8004b8a:	e752      	b.n	8004a32 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8e:	f000 fa93 	bl	80050b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004b92:	f000 fd4b 	bl	800562c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f003 fe09 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4601      	mov	r1, r0
 8004baa:	205a      	movs	r0, #90	; 0x5a
 8004bac:	f003 f90c 	bl	8007dc8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8004bb0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3738      	adds	r7, #56	; 0x38
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b090      	sub	sp, #64	; 0x40
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <xQueueGenericSendFromISR+0x3c>
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <xQueueGenericSendFromISR+0x40>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <xQueueGenericSendFromISR+0x42>
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d103      	bne.n	8004c2a <xQueueGenericSendFromISR+0x6a>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <xQueueGenericSendFromISR+0x6e>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <xQueueGenericSendFromISR+0x70>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	623b      	str	r3, [r7, #32]
    }
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c4a:	f002 f917 	bl	8006e7c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	61fa      	str	r2, [r7, #28]
 8004c64:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004c66:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d302      	bcc.n	8004c7c <xQueueGenericSendFromISR+0xbc>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d148      	bne.n	8004d0e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f003 fd8e 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004c94:	4601      	mov	r1, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2060      	movs	r0, #96	; 0x60
 8004c9c:	f002 ffc4 	bl	8007c28 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ca6:	f000 f977 	bl	8004f98 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004caa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d112      	bne.n	8004cda <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d025      	beq.n	8004d08 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fedb 	bl	8005a7c <xTaskRemoveFromEventList>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01d      	beq.n	8004d08 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01a      	beq.n	8004d08 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e016      	b.n	8004d08 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004cda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004cde:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce0:	d10a      	bne.n	8004cf8 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	617b      	str	r3, [r7, #20]
    }
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	b25a      	sxtb	r2, r3
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004d0c:	e00b      	b.n	8004d26 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 fd4d 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004d16:	4601      	mov	r1, r0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2060      	movs	r0, #96	; 0x60
 8004d1e:	f002 ff83 	bl	8007c28 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004d30:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3740      	adds	r7, #64	; 0x40
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004d3c:	b590      	push	{r4, r7, lr}
 8004d3e:	b08f      	sub	sp, #60	; 0x3c
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <xQueueReceive+0x30>
        __asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	623b      	str	r3, [r7, #32]
    }
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <xQueueReceive+0x3e>
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <xQueueReceive+0x42>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <xQueueReceive+0x44>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xQueueReceive+0x5e>
        __asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	61fb      	str	r3, [r7, #28]
    }
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d9a:	f001 f80f 	bl	8005dbc <xTaskGetSchedulerState>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <xQueueReceive+0x6e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <xQueueReceive+0x72>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <xQueueReceive+0x74>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <xQueueReceive+0x8e>
        __asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	61bb      	str	r3, [r7, #24]
    }
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004dca:	f001 ff6d 	bl	8006ca8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02f      	beq.n	8004e3a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dde:	f000 f945 	bl	800506c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	4618      	mov	r0, r3
 8004de6:	f003 fce3 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004dea:	4604      	mov	r4, r0
 8004dec:	2000      	movs	r0, #0
 8004dee:	f003 fcdf 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004df2:	4602      	mov	r2, r0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2101      	movs	r1, #1
 8004df8:	9100      	str	r1, [sp, #0]
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	205c      	movs	r0, #92	; 0x5c
 8004dfe:	f002 ffe3 	bl	8007dc8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	1e5a      	subs	r2, r3, #1
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00f      	beq.n	8004e32 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	3310      	adds	r3, #16
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fe30 	bl	8005a7c <xTaskRemoveFromEventList>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004e22:	4b4d      	ldr	r3, [pc, #308]	; (8004f58 <xQueueReceive+0x21c>)
 8004e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004e32:	f001 ff69 	bl	8006d08 <vPortExitCritical>
                return pdPASS;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e08a      	b.n	8004f50 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d113      	bne.n	8004e68 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004e40:	f001 ff62 	bl	8006d08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	4618      	mov	r0, r3
 8004e48:	f003 fcb2 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f003 fcae 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004e54:	4602      	mov	r2, r0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	9100      	str	r1, [sp, #0]
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	205c      	movs	r0, #92	; 0x5c
 8004e60:	f002 ffb2 	bl	8007dc8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e073      	b.n	8004f50 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004e6e:	f107 0310 	add.w	r3, r7, #16
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fe68 	bl	8005b48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004e7c:	f001 ff44 	bl	8006d08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004e80:	f000 fbc6 	bl	8005610 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004e84:	f001 ff10 	bl	8006ca8 <vPortEnterCritical>
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8e:	b25b      	sxtb	r3, r3
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d103      	bne.n	8004e9e <xQueueReceive+0x162>
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d103      	bne.n	8004eb4 <xQueueReceive+0x178>
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb4:	f001 ff28 	bl	8006d08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eb8:	1d3a      	adds	r2, r7, #4
 8004eba:	f107 0310 	add.w	r3, r7, #16
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fe57 	bl	8005b74 <xTaskCheckForTimeOut>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d124      	bne.n	8004f16 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ece:	f000 f945 	bl	800515c <prvIsQueueEmpty>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d018      	beq.n	8004f0a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	3324      	adds	r3, #36	; 0x24
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fd79 	bl	80059d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee8:	f000 f8e6 	bl	80050b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004eec:	f000 fb9e 	bl	800562c <xTaskResumeAll>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f47f af69 	bne.w	8004dca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <xQueueReceive+0x21c>)
 8004efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	e75f      	b.n	8004dca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0c:	f000 f8d4 	bl	80050b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004f10:	f000 fb8c 	bl	800562c <xTaskResumeAll>
 8004f14:	e759      	b.n	8004dca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f18:	f000 f8ce 	bl	80050b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004f1c:	f000 fb86 	bl	800562c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f22:	f000 f91b 	bl	800515c <prvIsQueueEmpty>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f43f af4e 	beq.w	8004dca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	4618      	mov	r0, r3
 8004f32:	f003 fc3d 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004f36:	4604      	mov	r4, r0
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f003 fc39 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2101      	movs	r1, #1
 8004f44:	9100      	str	r1, [sp, #0]
 8004f46:	4621      	mov	r1, r4
 8004f48:	205c      	movs	r0, #92	; 0x5c
 8004f4a:	f002 ff3d 	bl	8007dc8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8004f4e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3734      	adds	r7, #52	; 0x34
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd90      	pop	{r4, r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	60bb      	str	r3, [r7, #8]
    }
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004f80:	f001 fe92 	bl	8006ca8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004f8a:	f001 febd 	bl	8006d08 <vPortExitCritical>

    return uxReturn;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10d      	bne.n	8004fd2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d14d      	bne.n	800505a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 ff18 	bl	8005df8 <xTaskPriorityDisinherit>
 8004fc8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	e043      	b.n	800505a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d119      	bne.n	800500c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6858      	ldr	r0, [r3, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	f003 fd70 	bl	8008ac8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d32b      	bcc.n	800505a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	e026      	b.n	800505a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68d8      	ldr	r0, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	461a      	mov	r2, r3
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	f003 fd56 	bl	8008ac8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	425b      	negs	r3, r3
 8005026:	441a      	add	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d207      	bcs.n	8005048 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	425b      	negs	r3, r3
 8005042:	441a      	add	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d105      	bne.n	800505a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	3b01      	subs	r3, #1
 8005058:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005062:	697b      	ldr	r3, [r7, #20]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	441a      	add	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	d303      	bcc.n	80050a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68d9      	ldr	r1, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	461a      	mov	r2, r3
 80050aa:	6838      	ldr	r0, [r7, #0]
 80050ac:	f003 fd0c 	bl	8008ac8 <memcpy>
    }
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80050c0:	f001 fdf2 	bl	8006ca8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80050cc:	e011      	b.n	80050f2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fcce 	bl	8005a7c <xTaskRemoveFromEventList>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80050e6:	f000 fdab 	bl	8005c40 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dce9      	bgt.n	80050ce <prvUnlockQueue+0x16>
 80050fa:	e000      	b.n	80050fe <prvUnlockQueue+0x46>
                        break;
 80050fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	22ff      	movs	r2, #255	; 0xff
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005106:	f001 fdff 	bl	8006d08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800510a:	f001 fdcd 	bl	8006ca8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005114:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005116:	e011      	b.n	800513c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3310      	adds	r3, #16
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fca9 	bl	8005a7c <xTaskRemoveFromEventList>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005130:	f000 fd86 	bl	8005c40 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	3b01      	subs	r3, #1
 8005138:	b2db      	uxtb	r3, r3
 800513a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800513c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005140:	2b00      	cmp	r3, #0
 8005142:	dce9      	bgt.n	8005118 <prvUnlockQueue+0x60>
 8005144:	e000      	b.n	8005148 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005146:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	22ff      	movs	r2, #255	; 0xff
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005150:	f001 fdda 	bl	8006d08 <vPortExitCritical>
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005164:	f001 fda0 	bl	8006ca8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e001      	b.n	800517a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800517a:	f001 fdc5 	bl	8006d08 <vPortExitCritical>

    return xReturn;
 800517e:	68fb      	ldr	r3, [r7, #12]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005190:	f001 fd8a 	bl	8006ca8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	429a      	cmp	r2, r3
 800519e:	d102      	bne.n	80051a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e001      	b.n	80051aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80051aa:	f001 fdad 	bl	8006d08 <vPortExitCritical>

    return xReturn;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e01e      	b.n	8005206 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <vQueueAddToRegistry+0x60>)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d115      	bne.n	8005200 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051d4:	4910      	ldr	r1, [pc, #64]	; (8005218 <vQueueAddToRegistry+0x60>)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80051de:	4a0e      	ldr	r2, [pc, #56]	; (8005218 <vQueueAddToRegistry+0x60>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f003 fadf 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 80051f2:	4601      	mov	r1, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	2071      	movs	r0, #113	; 0x71
 80051fa:	f002 fd15 	bl	8007c28 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80051fe:	e006      	b.n	800520e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b07      	cmp	r3, #7
 800520a:	d9dd      	bls.n	80051c8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20013528 	.word	0x20013528

0800521c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800522c:	f001 fd3c 	bl	8006ca8 <vPortEnterCritical>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005236:	b25b      	sxtb	r3, r3
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d103      	bne.n	8005246 <vQueueWaitForMessageRestricted+0x2a>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800524c:	b25b      	sxtb	r3, r3
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d103      	bne.n	800525c <vQueueWaitForMessageRestricted+0x40>
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800525c:	f001 fd54 	bl	8006d08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fbd5 	bl	8005a20 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	f7ff ff1e 	bl	80050b8 <prvUnlockQueue>
    }
 800527c:	bf00      	nop
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	; 0x30
 8005288:	af04      	add	r7, sp, #16
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4618      	mov	r0, r3
 800529a:	f001 fe2f 	bl	8006efc <pvPortMalloc>
 800529e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00e      	beq.n	80052c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052a6:	2058      	movs	r0, #88	; 0x58
 80052a8:	f001 fe28 	bl	8006efc <pvPortMalloc>
 80052ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
 80052ba:	e005      	b.n	80052c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80052bc:	6978      	ldr	r0, [r7, #20]
 80052be:	f001 fecb 	bl	8007058 <vPortFree>
 80052c2:	e001      	b.n	80052c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d013      	beq.n	80052f6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	2300      	movs	r3, #0
 80052d2:	9303      	str	r3, [sp, #12]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	9302      	str	r3, [sp, #8]
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f80e 	bl	8005306 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80052ea:	69f8      	ldr	r0, [r7, #28]
 80052ec:	f000 f8a2 	bl	8005434 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80052f0:	2301      	movs	r3, #1
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e002      	b.n	80052fc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80052fc:	69bb      	ldr	r3, [r7, #24]
    }
 80052fe:	4618      	mov	r0, r3
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b088      	sub	sp, #32
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	607a      	str	r2, [r7, #4]
 8005312:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	461a      	mov	r2, r3
 800531e:	21a5      	movs	r1, #165	; 0xa5
 8005320:	f003 fbe0 	bl	8008ae4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800532e:	3b01      	subs	r3, #1
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f023 0307 	bic.w	r3, r3, #7
 800533c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <prvInitialiseNewTask+0x58>
        __asm volatile
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	617b      	str	r3, [r7, #20]
    }
 800535a:	bf00      	nop
 800535c:	e7fe      	b.n	800535c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01f      	beq.n	80053a4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	e012      	b.n	8005390 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	7819      	ldrb	r1, [r3, #0]
 8005372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	3334      	adds	r3, #52	; 0x34
 800537a:	460a      	mov	r2, r1
 800537c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d006      	beq.n	8005398 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3301      	adds	r3, #1
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2b09      	cmp	r3, #9
 8005394:	d9e9      	bls.n	800536a <prvInitialiseNewTask+0x64>
 8005396:	e000      	b.n	800539a <prvInitialiseNewTask+0x94>
            {
                break;
 8005398:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053a2:	e003      	b.n	80053ac <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d901      	bls.n	80053b6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053b2:	2304      	movs	r3, #4
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2200      	movs	r2, #0
 80053c6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	3304      	adds	r3, #4
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff f94d 	bl	800466c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	3318      	adds	r3, #24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff f948 	bl	800466c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	f1c3 0205 	rsb	r2, r3, #5
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	3350      	adds	r3, #80	; 0x50
 80053f6:	2204      	movs	r2, #4
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f003 fb72 	bl	8008ae4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	3354      	adds	r3, #84	; 0x54
 8005404:	2201      	movs	r2, #1
 8005406:	2100      	movs	r1, #0
 8005408:	4618      	mov	r0, r3
 800540a:	f003 fb6b 	bl	8008ae4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	68f9      	ldr	r1, [r7, #12]
 8005412:	69b8      	ldr	r0, [r7, #24]
 8005414:	f001 fb1a 	bl	8006a4c <pxPortInitialiseStack>
 8005418:	4602      	mov	r2, r0
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005428:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800542a:	bf00      	nop
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005434:	b5b0      	push	{r4, r5, r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af02      	add	r7, sp, #8
 800543a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800543c:	f001 fc34 	bl	8006ca8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005440:	4b3b      	ldr	r3, [pc, #236]	; (8005530 <prvAddNewTaskToReadyList+0xfc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <prvAddNewTaskToReadyList+0xfc>)
 8005448:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <prvAddNewTaskToReadyList+0x100>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005452:	4a38      	ldr	r2, [pc, #224]	; (8005534 <prvAddNewTaskToReadyList+0x100>)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005458:	4b35      	ldr	r3, [pc, #212]	; (8005530 <prvAddNewTaskToReadyList+0xfc>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d110      	bne.n	8005482 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005460:	f000 fc12 	bl	8005c88 <prvInitialiseTaskLists>
 8005464:	e00d      	b.n	8005482 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005466:	4b34      	ldr	r3, [pc, #208]	; (8005538 <prvAddNewTaskToReadyList+0x104>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800546e:	4b31      	ldr	r3, [pc, #196]	; (8005534 <prvAddNewTaskToReadyList+0x100>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	429a      	cmp	r2, r3
 800547a:	d802      	bhi.n	8005482 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800547c:	4a2d      	ldr	r2, [pc, #180]	; (8005534 <prvAddNewTaskToReadyList+0x100>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005482:	4b2e      	ldr	r3, [pc, #184]	; (800553c <prvAddNewTaskToReadyList+0x108>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3301      	adds	r3, #1
 8005488:	4a2c      	ldr	r2, [pc, #176]	; (800553c <prvAddNewTaskToReadyList+0x108>)
 800548a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800548c:	4b2b      	ldr	r3, [pc, #172]	; (800553c <prvAddNewTaskToReadyList+0x108>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <prvAddNewTaskToReadyList+0x94>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4618      	mov	r0, r3
 800549e:	f003 f861 	bl	8008564 <SEGGER_SYSVIEW_OnTaskCreate>
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	461d      	mov	r5, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461c      	mov	r4, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	1ae3      	subs	r3, r4, r3
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	462b      	mov	r3, r5
 80054c4:	f001 fe2c 	bl	8007120 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f003 f8ce 	bl	800866c <SEGGER_SYSVIEW_OnTaskStartReady>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	2201      	movs	r2, #1
 80054d6:	409a      	lsls	r2, r3
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <prvAddNewTaskToReadyList+0x10c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4313      	orrs	r3, r2
 80054de:	4a18      	ldr	r2, [pc, #96]	; (8005540 <prvAddNewTaskToReadyList+0x10c>)
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <prvAddNewTaskToReadyList+0x110>)
 80054f0:	441a      	add	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7ff f8c4 	bl	8004686 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80054fe:	f001 fc03 	bl	8006d08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <prvAddNewTaskToReadyList+0x104>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00e      	beq.n	8005528 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800550a:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <prvAddNewTaskToReadyList+0x100>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	429a      	cmp	r2, r3
 8005516:	d207      	bcs.n	8005528 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <prvAddNewTaskToReadyList+0x114>)
 800551a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005528:	bf00      	nop
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bdb0      	pop	{r4, r5, r7, pc}
 8005530:	200001e4 	.word	0x200001e4
 8005534:	2000010c 	.word	0x2000010c
 8005538:	200001f0 	.word	0x200001f0
 800553c:	20000200 	.word	0x20000200
 8005540:	200001ec 	.word	0x200001ec
 8005544:	20000110 	.word	0x20000110
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005552:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <vTaskStartScheduler+0xa4>)
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	2300      	movs	r3, #0
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	2300      	movs	r3, #0
 800555c:	2282      	movs	r2, #130	; 0x82
 800555e:	4925      	ldr	r1, [pc, #148]	; (80055f4 <vTaskStartScheduler+0xa8>)
 8005560:	4825      	ldr	r0, [pc, #148]	; (80055f8 <vTaskStartScheduler+0xac>)
 8005562:	f7ff fe8f 	bl	8005284 <xTaskCreate>
 8005566:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d102      	bne.n	8005574 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800556e:	f000 feb5 	bl	80062dc <xTimerCreateTimerTask>
 8005572:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d124      	bne.n	80055c4 <vTaskStartScheduler+0x78>
        __asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	60bb      	str	r3, [r7, #8]
    }
 800558c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800558e:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <vTaskStartScheduler+0xb0>)
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005596:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <vTaskStartScheduler+0xb4>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <vTaskStartScheduler+0xb8>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80055a2:	4b19      	ldr	r3, [pc, #100]	; (8005608 <vTaskStartScheduler+0xbc>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <vTaskStartScheduler+0xa4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d102      	bne.n	80055b4 <vTaskStartScheduler+0x68>
 80055ae:	f002 ffbd 	bl	800852c <SEGGER_SYSVIEW_OnIdle>
 80055b2:	e004      	b.n	80055be <vTaskStartScheduler+0x72>
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <vTaskStartScheduler+0xbc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f003 f815 	bl	80085e8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80055be:	f001 fad1 	bl	8006b64 <xPortStartScheduler>
 80055c2:	e00e      	b.n	80055e2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d10a      	bne.n	80055e2 <vTaskStartScheduler+0x96>
        __asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	607b      	str	r3, [r7, #4]
    }
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <vTaskStartScheduler+0xc0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000208 	.word	0x20000208
 80055f4:	0800a0f8 	.word	0x0800a0f8
 80055f8:	08005c59 	.word	0x08005c59
 80055fc:	20000204 	.word	0x20000204
 8005600:	200001f0 	.word	0x200001f0
 8005604:	200001e8 	.word	0x200001e8
 8005608:	2000010c 	.word	0x2000010c
 800560c:	20000020 	.word	0x20000020

08005610 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <vTaskSuspendAll+0x18>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	4a03      	ldr	r2, [pc, #12]	; (8005628 <vTaskSuspendAll+0x18>)
 800561c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	2000020c 	.word	0x2000020c

0800562c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800563a:	4b43      	ldr	r3, [pc, #268]	; (8005748 <xTaskResumeAll+0x11c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <xTaskResumeAll+0x2c>
        __asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	603b      	str	r3, [r7, #0]
    }
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005658:	f001 fb26 	bl	8006ca8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800565c:	4b3a      	ldr	r3, [pc, #232]	; (8005748 <xTaskResumeAll+0x11c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3b01      	subs	r3, #1
 8005662:	4a39      	ldr	r2, [pc, #228]	; (8005748 <xTaskResumeAll+0x11c>)
 8005664:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005666:	4b38      	ldr	r3, [pc, #224]	; (8005748 <xTaskResumeAll+0x11c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d165      	bne.n	800573a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <xTaskResumeAll+0x120>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d061      	beq.n	800573a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005676:	e032      	b.n	80056de <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005678:	4b35      	ldr	r3, [pc, #212]	; (8005750 <xTaskResumeAll+0x124>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3318      	adds	r3, #24
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff f85b 	bl	8004740 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3304      	adds	r3, #4
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff f856 	bl	8004740 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4618      	mov	r0, r3
 8005698:	f002 ffe8 	bl	800866c <SEGGER_SYSVIEW_OnTaskStartReady>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	2201      	movs	r2, #1
 80056a2:	409a      	lsls	r2, r3
 80056a4:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <xTaskResumeAll+0x128>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	4a2a      	ldr	r2, [pc, #168]	; (8005754 <xTaskResumeAll+0x128>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4a27      	ldr	r2, [pc, #156]	; (8005758 <xTaskResumeAll+0x12c>)
 80056bc:	441a      	add	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7fe ffde 	bl	8004686 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ce:	4b23      	ldr	r3, [pc, #140]	; (800575c <xTaskResumeAll+0x130>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80056d8:	4b21      	ldr	r3, [pc, #132]	; (8005760 <xTaskResumeAll+0x134>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056de:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <xTaskResumeAll+0x124>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1c8      	bne.n	8005678 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80056ec:	f000 fb4a 	bl	8005d84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056f0:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <xTaskResumeAll+0x138>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d010      	beq.n	800571e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80056fc:	f000 f846 	bl	800578c <xTaskIncrementTick>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8005706:	4b16      	ldr	r3, [pc, #88]	; (8005760 <xTaskResumeAll+0x134>)
 8005708:	2201      	movs	r2, #1
 800570a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3b01      	subs	r3, #1
 8005710:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f1      	bne.n	80056fc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8005718:	4b12      	ldr	r3, [pc, #72]	; (8005764 <xTaskResumeAll+0x138>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <xTaskResumeAll+0x134>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800572a:	4b0f      	ldr	r3, [pc, #60]	; (8005768 <xTaskResumeAll+0x13c>)
 800572c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800573a:	f001 fae5 	bl	8006d08 <vPortExitCritical>

    return xAlreadyYielded;
 800573e:	68bb      	ldr	r3, [r7, #8]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	2000020c 	.word	0x2000020c
 800574c:	200001e4 	.word	0x200001e4
 8005750:	200001a4 	.word	0x200001a4
 8005754:	200001ec 	.word	0x200001ec
 8005758:	20000110 	.word	0x20000110
 800575c:	2000010c 	.word	0x2000010c
 8005760:	200001f8 	.word	0x200001f8
 8005764:	200001f4 	.word	0x200001f4
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <xTaskGetTickCount+0x1c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005778:	687b      	ldr	r3, [r7, #4]
}
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	200001e8 	.word	0x200001e8

0800578c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005796:	4b50      	ldr	r3, [pc, #320]	; (80058d8 <xTaskIncrementTick+0x14c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 8092 	bne.w	80058c4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057a0:	4b4e      	ldr	r3, [pc, #312]	; (80058dc <xTaskIncrementTick+0x150>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80057a8:	4a4c      	ldr	r2, [pc, #304]	; (80058dc <xTaskIncrementTick+0x150>)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d120      	bne.n	80057f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80057b4:	4b4a      	ldr	r3, [pc, #296]	; (80058e0 <xTaskIncrementTick+0x154>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	603b      	str	r3, [r7, #0]
    }
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <xTaskIncrementTick+0x46>
 80057d4:	4b42      	ldr	r3, [pc, #264]	; (80058e0 <xTaskIncrementTick+0x154>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <xTaskIncrementTick+0x158>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a40      	ldr	r2, [pc, #256]	; (80058e0 <xTaskIncrementTick+0x154>)
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	4a40      	ldr	r2, [pc, #256]	; (80058e4 <xTaskIncrementTick+0x158>)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	4b3f      	ldr	r3, [pc, #252]	; (80058e8 <xTaskIncrementTick+0x15c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3301      	adds	r3, #1
 80057ee:	4a3e      	ldr	r2, [pc, #248]	; (80058e8 <xTaskIncrementTick+0x15c>)
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	f000 fac7 	bl	8005d84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80057f6:	4b3d      	ldr	r3, [pc, #244]	; (80058ec <xTaskIncrementTick+0x160>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d34c      	bcc.n	800589a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005800:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <xTaskIncrementTick+0x154>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580a:	4b38      	ldr	r3, [pc, #224]	; (80058ec <xTaskIncrementTick+0x160>)
 800580c:	f04f 32ff 	mov.w	r2, #4294967295
 8005810:	601a      	str	r2, [r3, #0]
                    break;
 8005812:	e042      	b.n	800589a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005814:	4b32      	ldr	r3, [pc, #200]	; (80058e0 <xTaskIncrementTick+0x154>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d203      	bcs.n	8005834 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800582c:	4a2f      	ldr	r2, [pc, #188]	; (80058ec <xTaskIncrementTick+0x160>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005832:	e032      	b.n	800589a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3304      	adds	r3, #4
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe ff81 	bl	8004740 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	3318      	adds	r3, #24
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe ff78 	bl	8004740 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f002 ff0a 	bl	800866c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	2201      	movs	r2, #1
 800585e:	409a      	lsls	r2, r3
 8005860:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <xTaskIncrementTick+0x164>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <xTaskIncrementTick+0x164>)
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <xTaskIncrementTick+0x168>)
 8005878:	441a      	add	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	3304      	adds	r3, #4
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f7fe ff00 	bl	8004686 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <xTaskIncrementTick+0x16c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	429a      	cmp	r2, r3
 8005892:	d3b5      	bcc.n	8005800 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005898:	e7b2      	b.n	8005800 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800589a:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <xTaskIncrementTick+0x16c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4914      	ldr	r1, [pc, #80]	; (80058f4 <xTaskIncrementTick+0x168>)
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d901      	bls.n	80058b6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80058b6:	4b11      	ldr	r3, [pc, #68]	; (80058fc <xTaskIncrementTick+0x170>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80058be:	2301      	movs	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e004      	b.n	80058ce <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <xTaskIncrementTick+0x174>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	4a0d      	ldr	r2, [pc, #52]	; (8005900 <xTaskIncrementTick+0x174>)
 80058cc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80058ce:	697b      	ldr	r3, [r7, #20]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	2000020c 	.word	0x2000020c
 80058dc:	200001e8 	.word	0x200001e8
 80058e0:	2000019c 	.word	0x2000019c
 80058e4:	200001a0 	.word	0x200001a0
 80058e8:	200001fc 	.word	0x200001fc
 80058ec:	20000204 	.word	0x20000204
 80058f0:	200001ec 	.word	0x200001ec
 80058f4:	20000110 	.word	0x20000110
 80058f8:	2000010c 	.word	0x2000010c
 80058fc:	200001f8 	.word	0x200001f8
 8005900:	200001f4 	.word	0x200001f4

08005904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800590a:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <vTaskSwitchContext+0xbc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005912:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <vTaskSwitchContext+0xc0>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005918:	e04d      	b.n	80059b6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800591a:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <vTaskSwitchContext+0xc0>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005920:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <vTaskSwitchContext+0xc4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	fab3 f383 	clz	r3, r3
 800592c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800592e:	7afb      	ldrb	r3, [r7, #11]
 8005930:	f1c3 031f 	rsb	r3, r3, #31
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	4925      	ldr	r1, [pc, #148]	; (80059cc <vTaskSwitchContext+0xc8>)
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <vTaskSwitchContext+0x5c>
        __asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	607b      	str	r3, [r7, #4]
    }
 800595c:	bf00      	nop
 800595e:	e7fe      	b.n	800595e <vTaskSwitchContext+0x5a>
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4a18      	ldr	r2, [pc, #96]	; (80059cc <vTaskSwitchContext+0xc8>)
 800596c:	4413      	add	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3308      	adds	r3, #8
 8005982:	429a      	cmp	r2, r3
 8005984:	d104      	bne.n	8005990 <vTaskSwitchContext+0x8c>
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	4a0e      	ldr	r2, [pc, #56]	; (80059d0 <vTaskSwitchContext+0xcc>)
 8005998:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800599a:	4b0d      	ldr	r3, [pc, #52]	; (80059d0 <vTaskSwitchContext+0xcc>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <vTaskSwitchContext+0xd0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d102      	bne.n	80059ac <vTaskSwitchContext+0xa8>
 80059a6:	f002 fdc1 	bl	800852c <SEGGER_SYSVIEW_OnIdle>
}
 80059aa:	e004      	b.n	80059b6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <vTaskSwitchContext+0xcc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f002 fe19 	bl	80085e8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	2000020c 	.word	0x2000020c
 80059c4:	200001f8 	.word	0x200001f8
 80059c8:	200001ec 	.word	0x200001ec
 80059cc:	20000110 	.word	0x20000110
 80059d0:	2000010c 	.word	0x2000010c
 80059d4:	20000208 	.word	0x20000208

080059d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	60fb      	str	r3, [r7, #12]
    }
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <vTaskPlaceOnEventList+0x44>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3318      	adds	r3, #24
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fe fe61 	bl	80046ce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	6838      	ldr	r0, [r7, #0]
 8005a10:	f000 fbec 	bl	80061ec <prvAddCurrentTaskToDelayedList>
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	2000010c 	.word	0x2000010c

08005a20 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	617b      	str	r3, [r7, #20]
    }
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <vTaskPlaceOnEventListRestricted+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3318      	adds	r3, #24
 8005a4e:	4619      	mov	r1, r3
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7fe fe18 	bl	8004686 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a60:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005a62:	2024      	movs	r0, #36	; 0x24
 8005a64:	f002 f886 	bl	8007b74 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	68b8      	ldr	r0, [r7, #8]
 8005a6c:	f000 fbbe 	bl	80061ec <prvAddCurrentTaskToDelayedList>
    }
 8005a70:	bf00      	nop
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	2000010c 	.word	0x2000010c

08005a7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
    }
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3318      	adds	r3, #24
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fe47 	bl	8004740 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <xTaskRemoveFromEventList+0xb4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d120      	bne.n	8005afc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe fe3e 	bl	8004740 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f002 fdd0 	bl	800866c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	4b17      	ldr	r3, [pc, #92]	; (8005b34 <xTaskRemoveFromEventList+0xb8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	4a16      	ldr	r2, [pc, #88]	; (8005b34 <xTaskRemoveFromEventList+0xb8>)
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <xTaskRemoveFromEventList+0xbc>)
 8005aec:	441a      	add	r2, r3
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f7fe fdc6 	bl	8004686 <vListInsertEnd>
 8005afa:	e005      	b.n	8005b08 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	3318      	adds	r3, #24
 8005b00:	4619      	mov	r1, r3
 8005b02:	480e      	ldr	r0, [pc, #56]	; (8005b3c <xTaskRemoveFromEventList+0xc0>)
 8005b04:	f7fe fdbf 	bl	8004686 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	; (8005b40 <xTaskRemoveFromEventList+0xc4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d905      	bls.n	8005b22 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005b16:	2301      	movs	r3, #1
 8005b18:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <xTaskRemoveFromEventList+0xc8>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e001      	b.n	8005b26 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005b26:	697b      	ldr	r3, [r7, #20]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	2000020c 	.word	0x2000020c
 8005b34:	200001ec 	.word	0x200001ec
 8005b38:	20000110 	.word	0x20000110
 8005b3c:	200001a4 	.word	0x200001a4
 8005b40:	2000010c 	.word	0x2000010c
 8005b44:	200001f8 	.word	0x200001f8

08005b48 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <vTaskInternalSetTimeOutState+0x24>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <vTaskInternalSetTimeOutState+0x28>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	605a      	str	r2, [r3, #4]
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	200001fc 	.word	0x200001fc
 8005b70:	200001e8 	.word	0x200001e8

08005b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	613b      	str	r3, [r7, #16]
    }
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
    }
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005bb6:	f001 f877 	bl	8006ca8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005bba:	4b1f      	ldr	r3, [pc, #124]	; (8005c38 <xTaskCheckForTimeOut+0xc4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d102      	bne.n	8005bda <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e026      	b.n	8005c28 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b17      	ldr	r3, [pc, #92]	; (8005c3c <xTaskCheckForTimeOut+0xc8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d00a      	beq.n	8005bfc <xTaskCheckForTimeOut+0x88>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d305      	bcc.n	8005bfc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e015      	b.n	8005c28 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d20b      	bcs.n	8005c1e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	1ad2      	subs	r2, r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff ff98 	bl	8005b48 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61fb      	str	r3, [r7, #28]
 8005c1c:	e004      	b.n	8005c28 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005c24:	2301      	movs	r3, #1
 8005c26:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005c28:	f001 f86e 	bl	8006d08 <vPortExitCritical>

    return xReturn;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	200001e8 	.word	0x200001e8
 8005c3c:	200001fc 	.word	0x200001fc

08005c40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005c44:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <vTaskMissedYield+0x14>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	200001f8 	.word	0x200001f8

08005c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005c60:	f000 f852 	bl	8005d08 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <prvIdleTask+0x28>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d9f9      	bls.n	8005c60 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <prvIdleTask+0x2c>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005c7c:	e7f0      	b.n	8005c60 <prvIdleTask+0x8>
 8005c7e:	bf00      	nop
 8005c80:	20000110 	.word	0x20000110
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	e00c      	b.n	8005cae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <prvInitialiseTaskLists+0x60>)
 8005ca0:	4413      	add	r3, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe fcc2 	bl	800462c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3301      	adds	r3, #1
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d9ef      	bls.n	8005c94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005cb4:	480d      	ldr	r0, [pc, #52]	; (8005cec <prvInitialiseTaskLists+0x64>)
 8005cb6:	f7fe fcb9 	bl	800462c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005cba:	480d      	ldr	r0, [pc, #52]	; (8005cf0 <prvInitialiseTaskLists+0x68>)
 8005cbc:	f7fe fcb6 	bl	800462c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005cc0:	480c      	ldr	r0, [pc, #48]	; (8005cf4 <prvInitialiseTaskLists+0x6c>)
 8005cc2:	f7fe fcb3 	bl	800462c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005cc6:	480c      	ldr	r0, [pc, #48]	; (8005cf8 <prvInitialiseTaskLists+0x70>)
 8005cc8:	f7fe fcb0 	bl	800462c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005ccc:	480b      	ldr	r0, [pc, #44]	; (8005cfc <prvInitialiseTaskLists+0x74>)
 8005cce:	f7fe fcad 	bl	800462c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <prvInitialiseTaskLists+0x78>)
 8005cd4:	4a05      	ldr	r2, [pc, #20]	; (8005cec <prvInitialiseTaskLists+0x64>)
 8005cd6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <prvInitialiseTaskLists+0x7c>)
 8005cda:	4a05      	ldr	r2, [pc, #20]	; (8005cf0 <prvInitialiseTaskLists+0x68>)
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000110 	.word	0x20000110
 8005cec:	20000174 	.word	0x20000174
 8005cf0:	20000188 	.word	0x20000188
 8005cf4:	200001a4 	.word	0x200001a4
 8005cf8:	200001b8 	.word	0x200001b8
 8005cfc:	200001d0 	.word	0x200001d0
 8005d00:	2000019c 	.word	0x2000019c
 8005d04:	200001a0 	.word	0x200001a0

08005d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d0e:	e019      	b.n	8005d44 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005d10:	f000 ffca 	bl	8006ca8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <prvCheckTasksWaitingTermination+0x50>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fe fd0d 	bl	8004740 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <prvCheckTasksWaitingTermination+0x54>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	4a0b      	ldr	r2, [pc, #44]	; (8005d5c <prvCheckTasksWaitingTermination+0x54>)
 8005d2e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d38:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005d3a:	f000 ffe5 	bl	8006d08 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f810 	bl	8005d64 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e1      	bne.n	8005d10 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	200001b8 	.word	0x200001b8
 8005d5c:	200001e4 	.word	0x200001e4
 8005d60:	200001cc 	.word	0x200001cc

08005d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f971 	bl	8007058 <vPortFree>
                vPortFree( pxTCB );
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 f96e 	bl	8007058 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005d7c:	bf00      	nop
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <prvResetNextTaskUnblockTime+0x30>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <prvResetNextTaskUnblockTime+0x34>)
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005d9a:	e005      	b.n	8005da8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <prvResetNextTaskUnblockTime+0x30>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a04      	ldr	r2, [pc, #16]	; (8005db8 <prvResetNextTaskUnblockTime+0x34>)
 8005da6:	6013      	str	r3, [r2, #0]
}
 8005da8:	bf00      	nop
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	2000019c 	.word	0x2000019c
 8005db8:	20000204 	.word	0x20000204

08005dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <xTaskGetSchedulerState+0x34>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	e008      	b.n	8005de2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd0:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <xTaskGetSchedulerState+0x38>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e001      	b.n	8005de2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005de2:	687b      	ldr	r3, [r7, #4]
    }
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	200001f0 	.word	0x200001f0
 8005df4:	2000020c 	.word	0x2000020c

08005df8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d068      	beq.n	8005ee0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005e0e:	4b37      	ldr	r3, [pc, #220]	; (8005eec <xTaskPriorityDisinherit+0xf4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d00a      	beq.n	8005e2e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	60fb      	str	r3, [r7, #12]
    }
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
    }
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e50:	1e5a      	subs	r2, r3, #1
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d03e      	beq.n	8005ee0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d13a      	bne.n	8005ee0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe fc66 	bl	8004740 <uxListRemove>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	2201      	movs	r2, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	43da      	mvns	r2, r3
 8005e86:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <xTaskPriorityDisinherit+0xf8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <xTaskPriorityDisinherit+0xf8>)
 8005e8e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4619      	mov	r1, r3
 8005e94:	204a      	movs	r0, #74	; 0x4a
 8005e96:	f001 fe8b 	bl	8007bb0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	f1c3 0205 	rsb	r2, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	409a      	lsls	r2, r3
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <xTaskPriorityDisinherit+0xf8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	4a0c      	ldr	r2, [pc, #48]	; (8005ef0 <xTaskPriorityDisinherit+0xf8>)
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <xTaskPriorityDisinherit+0xfc>)
 8005ece:	441a      	add	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f7fe fbd5 	bl	8004686 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005ee0:	697b      	ldr	r3, [r7, #20]
    }
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	2000010c 	.word	0x2000010c
 8005ef0:	200001ec 	.word	0x200001ec
 8005ef4:	20000110 	.word	0x20000110

08005ef8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	613b      	str	r3, [r7, #16]
    }
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005f22:	f000 fec1 	bl	8006ca8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005f26:	4b36      	ldr	r3, [pc, #216]	; (8006000 <xTaskGenericNotifyWait+0x108>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3354      	adds	r3, #84	; 0x54
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d022      	beq.n	8005f7e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005f38:	4b31      	ldr	r3, [pc, #196]	; (8006000 <xTaskGenericNotifyWait+0x108>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	3214      	adds	r2, #20
 8005f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	43d2      	mvns	r2, r2
 8005f48:	4011      	ands	r1, r2
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	3214      	adds	r2, #20
 8005f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005f52:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <xTaskGenericNotifyWait+0x108>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	3354      	adds	r3, #84	; 0x54
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f66:	2101      	movs	r1, #1
 8005f68:	6a38      	ldr	r0, [r7, #32]
 8005f6a:	f000 f93f 	bl	80061ec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005f6e:	4b25      	ldr	r3, [pc, #148]	; (8006004 <xTaskGenericNotifyWait+0x10c>)
 8005f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005f7e:	f000 fec3 	bl	8006d08 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005f82:	f000 fe91 	bl	8006ca8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	2040      	movs	r0, #64	; 0x40
 8005f94:	f001 ff18 	bl	8007dc8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005f9e:	4b18      	ldr	r3, [pc, #96]	; (8006000 <xTaskGenericNotifyWait+0x108>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	3214      	adds	r2, #20
 8005fa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <xTaskGenericNotifyWait+0x108>)
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3354      	adds	r3, #84	; 0x54
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d002      	beq.n	8005fc6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	e00e      	b.n	8005fe4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005fc6:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <xTaskGenericNotifyWait+0x108>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	3214      	adds	r2, #20
 8005fce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	43d2      	mvns	r2, r2
 8005fd6:	4011      	ands	r1, r2
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	3214      	adds	r2, #20
 8005fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <xTaskGenericNotifyWait+0x108>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	3354      	adds	r3, #84	; 0x54
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005ff2:	f000 fe89 	bl	8006d08 <vPortExitCritical>

        return xReturn;
 8005ff6:	697b      	ldr	r3, [r7, #20]
    }
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	2000010c 	.word	0x2000010c
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006016:	2301      	movs	r3, #1
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	623b      	str	r3, [r7, #32]
    }
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <xTaskGenericNotify+0x4a>
        __asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	61fb      	str	r3, [r7, #28]
    }
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006056:	f000 fe27 	bl	8006ca8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	d006      	beq.n	800606e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	3214      	adds	r2, #20
 8006066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800606e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4413      	add	r3, r2
 8006074:	3354      	adds	r3, #84	; 0x54
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800607c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	3354      	adds	r3, #84	; 0x54
 8006084:	2202      	movs	r2, #2
 8006086:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	2b04      	cmp	r3, #4
 800608c:	d83b      	bhi.n	8006106 <xTaskGenericNotify+0xfe>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <xTaskGenericNotify+0x8c>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	08006125 	.word	0x08006125
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060dd 	.word	0x080060dd
 80060a4:	080060eb 	.word	0x080060eb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	3214      	adds	r2, #20
 80060ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	ea42 0103 	orr.w	r1, r2, r3
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	3214      	adds	r2, #20
 80060be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060c2:	e032      	b.n	800612a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	3214      	adds	r2, #20
 80060ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	3214      	adds	r2, #20
 80060d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060da:	e026      	b.n	800612a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	3214      	adds	r2, #20
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060e8:	e01f      	b.n	800612a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80060ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d006      	beq.n	8006100 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	3214      	adds	r2, #20
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80060fe:	e014      	b.n	800612a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006100:	2300      	movs	r3, #0
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006104:	e011      	b.n	800612a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006106:	4b34      	ldr	r3, [pc, #208]	; (80061d8 <xTaskGenericNotify+0x1d0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00c      	beq.n	8006128 <xTaskGenericNotify+0x120>
        __asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	61bb      	str	r3, [r7, #24]
    }
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <xTaskGenericNotify+0x11a>
                    break;
 8006124:	bf00      	nop
 8006126:	e000      	b.n	800612a <xTaskGenericNotify+0x122>

                    break;
 8006128:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	4618      	mov	r0, r3
 800612e:	f002 fb3f 	bl	80087b0 <SEGGER_SYSVIEW_ShrinkId>
 8006132:	4601      	mov	r1, r0
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	203e      	movs	r0, #62	; 0x3e
 8006140:	f001 fe42 	bl	8007dc8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006148:	2b01      	cmp	r3, #1
 800614a:	d13d      	bne.n	80061c8 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	3304      	adds	r3, #4
 8006150:	4618      	mov	r0, r3
 8006152:	f7fe faf5 	bl	8004740 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	4618      	mov	r0, r3
 800615a:	f002 fa87 	bl	800866c <SEGGER_SYSVIEW_OnTaskStartReady>
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	2201      	movs	r2, #1
 8006164:	409a      	lsls	r2, r3
 8006166:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <xTaskGenericNotify+0x1d4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4313      	orrs	r3, r2
 800616c:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <xTaskGenericNotify+0x1d4>)
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <xTaskGenericNotify+0x1d8>)
 800617e:	441a      	add	r2, r3
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe fa7d 	bl	8004686 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <xTaskGenericNotify+0x1a2>
        __asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	617b      	str	r3, [r7, #20]
    }
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <xTaskGenericNotify+0x1dc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d907      	bls.n	80061c8 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <xTaskGenericNotify+0x1e0>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80061c8:	f000 fd9e 	bl	8006d08 <vPortExitCritical>

        return xReturn;
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80061ce:	4618      	mov	r0, r3
 80061d0:	3730      	adds	r7, #48	; 0x30
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200001e8 	.word	0x200001e8
 80061dc:	200001ec 	.word	0x200001ec
 80061e0:	20000110 	.word	0x20000110
 80061e4:	2000010c 	.word	0x2000010c
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80061f6:	4b32      	ldr	r3, [pc, #200]	; (80062c0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061fc:	4b31      	ldr	r3, [pc, #196]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3304      	adds	r3, #4
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fa9c 	bl	8004740 <uxListRemove>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800620e:	4b2d      	ldr	r3, [pc, #180]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	2201      	movs	r2, #1
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	43da      	mvns	r2, r3
 800621c:	4b2a      	ldr	r3, [pc, #168]	; (80062c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4013      	ands	r3, r2
 8006222:	4a29      	ldr	r2, [pc, #164]	; (80062c8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006224:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d110      	bne.n	8006250 <prvAddCurrentTaskToDelayedList+0x64>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00d      	beq.n	8006250 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8006234:	4b23      	ldr	r3, [pc, #140]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	211b      	movs	r1, #27
 800623a:	4618      	mov	r0, r3
 800623c:	f002 fa58 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006240:	4b20      	ldr	r3, [pc, #128]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4820      	ldr	r0, [pc, #128]	; (80062cc <prvAddCurrentTaskToDelayedList+0xe0>)
 800624a:	f7fe fa1c 	bl	8004686 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800624e:	e032      	b.n	80062b6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4413      	add	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	429a      	cmp	r2, r3
 8006266:	d20f      	bcs.n	8006288 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006268:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2104      	movs	r1, #4
 800626e:	4618      	mov	r0, r3
 8006270:	f002 fa3e 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006274:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3304      	adds	r3, #4
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f7fe fa24 	bl	80046ce <vListInsert>
}
 8006286:	e016      	b.n	80062b6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2104      	movs	r1, #4
 800628e:	4618      	mov	r0, r3
 8006290:	f002 fa2e 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3304      	adds	r3, #4
 800629e:	4619      	mov	r1, r3
 80062a0:	4610      	mov	r0, r2
 80062a2:	f7fe fa14 	bl	80046ce <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d202      	bcs.n	80062b6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80062b0:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <prvAddCurrentTaskToDelayedList+0xec>)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6013      	str	r3, [r2, #0]
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	200001e8 	.word	0x200001e8
 80062c4:	2000010c 	.word	0x2000010c
 80062c8:	200001ec 	.word	0x200001ec
 80062cc:	200001d0 	.word	0x200001d0
 80062d0:	200001a0 	.word	0x200001a0
 80062d4:	2000019c 	.word	0x2000019c
 80062d8:	20000204 	.word	0x20000204

080062dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80062e6:	f000 fb31 	bl	800694c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80062ea:	4b11      	ldr	r3, [pc, #68]	; (8006330 <xTimerCreateTimerTask+0x54>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <xTimerCreateTimerTask+0x58>)
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	2302      	movs	r3, #2
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	2300      	movs	r3, #0
 80062fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006300:	490d      	ldr	r1, [pc, #52]	; (8006338 <xTimerCreateTimerTask+0x5c>)
 8006302:	480e      	ldr	r0, [pc, #56]	; (800633c <xTimerCreateTimerTask+0x60>)
 8006304:	f7fe ffbe 	bl	8005284 <xTaskCreate>
 8006308:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	603b      	str	r3, [r7, #0]
    }
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006326:	687b      	ldr	r3, [r7, #4]
    }
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20000240 	.word	0x20000240
 8006334:	20000244 	.word	0x20000244
 8006338:	0800a100 	.word	0x0800a100
 800633c:	0800652d 	.word	0x0800652d

08006340 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800634e:	202c      	movs	r0, #44	; 0x2c
 8006350:	f000 fdd4 	bl	8006efc <pvPortMalloc>
 8006354:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f805 	bl	8006382 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006378:	697b      	ldr	r3, [r7, #20]
        }
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006382:	b580      	push	{r7, lr}
 8006384:	b086      	sub	sp, #24
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	617b      	str	r3, [r7, #20]
    }
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01e      	beq.n	80063f0 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80063b2:	f000 facb 	bl	800694c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	6a3a      	ldr	r2, [r7, #32]
 80063cc:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	3304      	adds	r3, #4
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe f94a 	bl	800466c <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e4:	f043 0304 	orr.w	r3, r3, #4
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80063f0:	bf00      	nop
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	; 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006406:	2300      	movs	r3, #0
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	623b      	str	r3, [r7, #32]
    }
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006426:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <xTimerGenericCommand+0x98>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d02a      	beq.n	8006484 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b05      	cmp	r3, #5
 800643e:	dc18      	bgt.n	8006472 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006440:	f7ff fcbc 	bl	8005dbc <xTaskGetSchedulerState>
 8006444:	4603      	mov	r3, r0
 8006446:	2b02      	cmp	r3, #2
 8006448:	d109      	bne.n	800645e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800644a:	4b11      	ldr	r3, [pc, #68]	; (8006490 <xTimerGenericCommand+0x98>)
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	f107 0114 	add.w	r1, r7, #20
 8006452:	2300      	movs	r3, #0
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	f7fe fa8d 	bl	8004974 <xQueueGenericSend>
 800645a:	6278      	str	r0, [r7, #36]	; 0x24
 800645c:	e012      	b.n	8006484 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <xTimerGenericCommand+0x98>)
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f107 0114 	add.w	r1, r7, #20
 8006466:	2300      	movs	r3, #0
 8006468:	2200      	movs	r2, #0
 800646a:	f7fe fa83 	bl	8004974 <xQueueGenericSend>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24
 8006470:	e008      	b.n	8006484 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <xTimerGenericCommand+0x98>)
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	f107 0114 	add.w	r1, r7, #20
 800647a:	2300      	movs	r3, #0
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	f7fe fb9f 	bl	8004bc0 <xQueueGenericSendFromISR>
 8006482:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006486:	4618      	mov	r0, r3
 8006488:	3728      	adds	r7, #40	; 0x28
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000240 	.word	0x20000240

08006494 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649e:	4b22      	ldr	r3, [pc, #136]	; (8006528 <prvProcessExpiredTimer+0x94>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe f947 	bl	8004740 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d022      	beq.n	8006506 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	18d1      	adds	r1, r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	6978      	ldr	r0, [r7, #20]
 80064ce:	f000 f8d1 	bl	8006674 <prvInsertTimerInActiveList>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01f      	beq.n	8006518 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2300      	movs	r3, #0
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	2100      	movs	r1, #0
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f7ff ff88 	bl	80063f8 <xTimerGenericCommand>
 80064e8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d113      	bne.n	8006518 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
    }
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	b2da      	uxtb	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	6978      	ldr	r0, [r7, #20]
 800651e:	4798      	blx	r3
    }
 8006520:	bf00      	nop
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000238 	.word	0x20000238

0800652c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006534:	f107 0308 	add.w	r3, r7, #8
 8006538:	4618      	mov	r0, r3
 800653a:	f000 f857 	bl	80065ec <prvGetNextExpireTime>
 800653e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4619      	mov	r1, r3
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f803 	bl	8006550 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800654a:	f000 f8d5 	bl	80066f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800654e:	e7f1      	b.n	8006534 <prvTimerTask+0x8>

08006550 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800655a:	f7ff f859 	bl	8005610 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f866 	bl	8006634 <prvSampleTimeNow>
 8006568:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d130      	bne.n	80065d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <prvProcessTimerOrBlockTask+0x3c>
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	429a      	cmp	r2, r3
 800657c:	d806      	bhi.n	800658c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800657e:	f7ff f855 	bl	800562c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006582:	68f9      	ldr	r1, [r7, #12]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff ff85 	bl	8006494 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800658a:	e024      	b.n	80065d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006592:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <prvProcessTimerOrBlockTask+0x90>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <prvProcessTimerOrBlockTask+0x50>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <prvProcessTimerOrBlockTask+0x52>
 80065a0:	2300      	movs	r3, #0
 80065a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065a4:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <prvProcessTimerOrBlockTask+0x94>)
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	f7fe fe33 	bl	800521c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80065b6:	f7ff f839 	bl	800562c <xTaskResumeAll>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <prvProcessTimerOrBlockTask+0x98>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
    }
 80065d0:	e001      	b.n	80065d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80065d2:	f7ff f82b 	bl	800562c <xTaskResumeAll>
    }
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	2000023c 	.word	0x2000023c
 80065e4:	20000240 	.word	0x20000240
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <prvGetNextExpireTime+0x44>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <prvGetNextExpireTime+0x16>
 80065fe:	2201      	movs	r2, #1
 8006600:	e000      	b.n	8006604 <prvGetNextExpireTime+0x18>
 8006602:	2200      	movs	r2, #0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <prvGetNextExpireTime+0x44>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e001      	b.n	8006620 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006620:	68fb      	ldr	r3, [r7, #12]
    }
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	20000238 	.word	0x20000238

08006634 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800663c:	f7ff f896 	bl	800576c <xTaskGetTickCount>
 8006640:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <prvSampleTimeNow+0x3c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	429a      	cmp	r2, r3
 800664a:	d205      	bcs.n	8006658 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800664c:	f000 f91a 	bl	8006884 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e002      	b.n	800665e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800665e:	4a04      	ldr	r2, [pc, #16]	; (8006670 <prvSampleTimeNow+0x3c>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006664:	68fb      	ldr	r3, [r7, #12]
    }
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000248 	.word	0x20000248

08006674 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d812      	bhi.n	80066c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d302      	bcc.n	80066ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e01b      	b.n	80066e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066ae:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <prvInsertTimerInActiveList+0x7c>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7fe f808 	bl	80046ce <vListInsert>
 80066be:	e012      	b.n	80066e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d206      	bcs.n	80066d6 <prvInsertTimerInActiveList+0x62>
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d302      	bcc.n	80066d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	e007      	b.n	80066e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <prvInsertTimerInActiveList+0x80>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7fd fff4 	bl	80046ce <vListInsert>
            }
        }

        return xProcessTimerNow;
 80066e6:	697b      	ldr	r3, [r7, #20]
    }
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	2000023c 	.word	0x2000023c
 80066f4:	20000238 	.word	0x20000238

080066f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08c      	sub	sp, #48	; 0x30
 80066fc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066fe:	e0ae      	b.n	800685e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f2c0 80aa 	blt.w	800685c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	3304      	adds	r3, #4
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe f811 	bl	8004740 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff ff87 	bl	8006634 <prvSampleTimeNow>
 8006726:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b09      	cmp	r3, #9
 800672c:	f200 8097 	bhi.w	800685e <prvProcessReceivedCommands+0x166>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <prvProcessReceivedCommands+0x40>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006761 	.word	0x08006761
 800673c:	08006761 	.word	0x08006761
 8006740:	08006761 	.word	0x08006761
 8006744:	080067d5 	.word	0x080067d5
 8006748:	080067e9 	.word	0x080067e9
 800674c:	08006833 	.word	0x08006833
 8006750:	08006761 	.word	0x08006761
 8006754:	08006761 	.word	0x08006761
 8006758:	080067d5 	.word	0x080067d5
 800675c:	080067e9 	.word	0x080067e9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	18d1      	adds	r1, r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006780:	f7ff ff78 	bl	8006674 <prvInsertTimerInActiveList>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d069      	beq.n	800685e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006790:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d05e      	beq.n	800685e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	441a      	add	r2, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	2300      	movs	r3, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067b2:	f7ff fe21 	bl	80063f8 <xTimerGenericCommand>
 80067b6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d14f      	bne.n	800685e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	61bb      	str	r3, [r7, #24]
    }
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80067e6:	e03a      	b.n	800685e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	617b      	str	r3, [r7, #20]
    }
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	18d1      	adds	r1, r2, r3
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	6a3a      	ldr	r2, [r7, #32]
 800682a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800682c:	f7ff ff22 	bl	8006674 <prvInsertTimerInActiveList>
                        break;
 8006830:	e015      	b.n	800685e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006842:	f000 fc09 	bl	8007058 <vPortFree>
 8006846:	e00a      	b.n	800685e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	b2da      	uxtb	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800685a:	e000      	b.n	800685e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800685c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800685e:	4b08      	ldr	r3, [pc, #32]	; (8006880 <prvProcessReceivedCommands+0x188>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f107 0108 	add.w	r1, r7, #8
 8006866:	2200      	movs	r2, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe fa67 	bl	8004d3c <xQueueReceive>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	f47f af45 	bne.w	8006700 <prvProcessReceivedCommands+0x8>
        }
    }
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	3728      	adds	r7, #40	; 0x28
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20000240 	.word	0x20000240

08006884 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800688a:	e048      	b.n	800691e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800688c:	4b2d      	ldr	r3, [pc, #180]	; (8006944 <prvSwitchTimerLists+0xc0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006896:	4b2b      	ldr	r3, [pc, #172]	; (8006944 <prvSwitchTimerLists+0xc0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fd ff4b 	bl	8004740 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d02e      	beq.n	800691e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4413      	add	r3, r2
 80068c8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d90e      	bls.n	80068f0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068de:	4b19      	ldr	r3, [pc, #100]	; (8006944 <prvSwitchTimerLists+0xc0>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fd fef0 	bl	80046ce <vListInsert>
 80068ee:	e016      	b.n	800691e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068f0:	2300      	movs	r3, #0
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	2100      	movs	r1, #0
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fd7c 	bl	80063f8 <xTimerGenericCommand>
 8006900:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	603b      	str	r3, [r7, #0]
    }
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <prvSwitchTimerLists+0xc0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1b1      	bne.n	800688c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <prvSwitchTimerLists+0xc0>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <prvSwitchTimerLists+0xc4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a04      	ldr	r2, [pc, #16]	; (8006944 <prvSwitchTimerLists+0xc0>)
 8006934:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006936:	4a04      	ldr	r2, [pc, #16]	; (8006948 <prvSwitchTimerLists+0xc4>)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6013      	str	r3, [r2, #0]
    }
 800693c:	bf00      	nop
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000238 	.word	0x20000238
 8006948:	2000023c 	.word	0x2000023c

0800694c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006950:	f000 f9aa 	bl	8006ca8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006954:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <prvCheckForValidListAndQueue+0x54>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d11d      	bne.n	8006998 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800695c:	4811      	ldr	r0, [pc, #68]	; (80069a4 <prvCheckForValidListAndQueue+0x58>)
 800695e:	f7fd fe65 	bl	800462c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006962:	4811      	ldr	r0, [pc, #68]	; (80069a8 <prvCheckForValidListAndQueue+0x5c>)
 8006964:	f7fd fe62 	bl	800462c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006968:	4b10      	ldr	r3, [pc, #64]	; (80069ac <prvCheckForValidListAndQueue+0x60>)
 800696a:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <prvCheckForValidListAndQueue+0x58>)
 800696c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800696e:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <prvCheckForValidListAndQueue+0x64>)
 8006970:	4a0d      	ldr	r2, [pc, #52]	; (80069a8 <prvCheckForValidListAndQueue+0x5c>)
 8006972:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006974:	2200      	movs	r2, #0
 8006976:	210c      	movs	r1, #12
 8006978:	200a      	movs	r0, #10
 800697a:	f7fd ff73 	bl	8004864 <xQueueGenericCreate>
 800697e:	4603      	mov	r3, r0
 8006980:	4a07      	ldr	r2, [pc, #28]	; (80069a0 <prvCheckForValidListAndQueue+0x54>)
 8006982:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <prvCheckForValidListAndQueue+0x54>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800698c:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <prvCheckForValidListAndQueue+0x54>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4908      	ldr	r1, [pc, #32]	; (80069b4 <prvCheckForValidListAndQueue+0x68>)
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fc10 	bl	80051b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006998:	f000 f9b6 	bl	8006d08 <vPortExitCritical>
    }
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000240 	.word	0x20000240
 80069a4:	20000210 	.word	0x20000210
 80069a8:	20000224 	.word	0x20000224
 80069ac:	20000238 	.word	0x20000238
 80069b0:	2000023c 	.word	0x2000023c
 80069b4:	0800a108 	.word	0x0800a108

080069b8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <xTimerIsTimerActive+0x28>
        __asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	60fb      	str	r3, [r7, #12]
    }
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 80069e0:	f000 f962 	bl	8006ca8 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80069f2:	2300      	movs	r3, #0
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e001      	b.n	80069fc <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80069fc:	f000 f984 	bl	8006d08 <vPortExitCritical>

        return xReturn;
 8006a00:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <pvTimerGetTimerID+0x28>
        __asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60fb      	str	r3, [r7, #12]
    }
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006a32:	f000 f939 	bl	8006ca8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006a3c:	f000 f964 	bl	8006d08 <vPortExitCritical>

        return pvReturn;
 8006a40:	693b      	ldr	r3, [r7, #16]
    }
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3b04      	subs	r3, #4
 8006a5c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3b04      	subs	r3, #4
 8006a6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f023 0201 	bic.w	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3b04      	subs	r3, #4
 8006a7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006a7c:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <pxPortInitialiseStack+0x64>)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b14      	subs	r3, #20
 8006a86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3b04      	subs	r3, #4
 8006a92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f06f 0202 	mvn.w	r2, #2
 8006a9a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3b20      	subs	r3, #32
 8006aa0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	08006ab5 	.word	0x08006ab5

08006ab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <prvTaskExitError+0x54>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d00a      	beq.n	8006ade <prvTaskExitError+0x2a>
        __asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	60fb      	str	r3, [r7, #12]
    }
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <prvTaskExitError+0x28>
        __asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60bb      	str	r3, [r7, #8]
    }
 8006af0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006af2:	bf00      	nop
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0fc      	beq.n	8006af4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006afa:	bf00      	nop
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	20000024 	.word	0x20000024
 8006b0c:	00000000 	.word	0x00000000

08006b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <pxCurrentTCBConst2>)
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6808      	ldr	r0, [r1, #0]
 8006b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1a:	f380 8809 	msr	PSP, r0
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	4770      	bx	lr
 8006b2c:	f3af 8000 	nop.w

08006b30 <pxCurrentTCBConst2>:
 8006b30:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop

08006b38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006b38:	4808      	ldr	r0, [pc, #32]	; (8006b5c <prvPortStartFirstTask+0x24>)
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	6800      	ldr	r0, [r0, #0]
 8006b3e:	f380 8808 	msr	MSP, r0
 8006b42:	f04f 0000 	mov.w	r0, #0
 8006b46:	f380 8814 	msr	CONTROL, r0
 8006b4a:	b662      	cpsie	i
 8006b4c:	b661      	cpsie	f
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	df00      	svc	0
 8006b58:	bf00      	nop
 8006b5a:	0000      	.short	0x0000
 8006b5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop

08006b64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b6a:	4b46      	ldr	r3, [pc, #280]	; (8006c84 <xPortStartScheduler+0x120>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a46      	ldr	r2, [pc, #280]	; (8006c88 <xPortStartScheduler+0x124>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d10a      	bne.n	8006b8a <xPortStartScheduler+0x26>
        __asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	613b      	str	r3, [r7, #16]
    }
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b8a:	4b3e      	ldr	r3, [pc, #248]	; (8006c84 <xPortStartScheduler+0x120>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a3f      	ldr	r2, [pc, #252]	; (8006c8c <xPortStartScheduler+0x128>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d10a      	bne.n	8006baa <xPortStartScheduler+0x46>
        __asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
    }
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006baa:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <xPortStartScheduler+0x12c>)
 8006bac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	22ff      	movs	r2, #255	; 0xff
 8006bba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	4b31      	ldr	r3, [pc, #196]	; (8006c94 <xPortStartScheduler+0x130>)
 8006bd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bd2:	4b31      	ldr	r3, [pc, #196]	; (8006c98 <xPortStartScheduler+0x134>)
 8006bd4:	2207      	movs	r2, #7
 8006bd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bd8:	e009      	b.n	8006bee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006bda:	4b2f      	ldr	r3, [pc, #188]	; (8006c98 <xPortStartScheduler+0x134>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	4a2d      	ldr	r2, [pc, #180]	; (8006c98 <xPortStartScheduler+0x134>)
 8006be2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf6:	2b80      	cmp	r3, #128	; 0x80
 8006bf8:	d0ef      	beq.n	8006bda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bfa:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <xPortStartScheduler+0x134>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1c3 0307 	rsb	r3, r3, #7
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d00a      	beq.n	8006c1c <xPortStartScheduler+0xb8>
        __asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60bb      	str	r3, [r7, #8]
    }
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c1c:	4b1e      	ldr	r3, [pc, #120]	; (8006c98 <xPortStartScheduler+0x134>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	4a1d      	ldr	r2, [pc, #116]	; (8006c98 <xPortStartScheduler+0x134>)
 8006c24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c26:	4b1c      	ldr	r3, [pc, #112]	; (8006c98 <xPortStartScheduler+0x134>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c2e:	4a1a      	ldr	r2, [pc, #104]	; (8006c98 <xPortStartScheduler+0x134>)
 8006c30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006c3a:	4b18      	ldr	r3, [pc, #96]	; (8006c9c <xPortStartScheduler+0x138>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <xPortStartScheduler+0x138>)
 8006c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <xPortStartScheduler+0x138>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a14      	ldr	r2, [pc, #80]	; (8006c9c <xPortStartScheduler+0x138>)
 8006c4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006c52:	f000 f8e3 	bl	8006e1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006c56:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <xPortStartScheduler+0x13c>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006c5c:	f000 f902 	bl	8006e64 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c60:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <xPortStartScheduler+0x140>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a0f      	ldr	r2, [pc, #60]	; (8006ca4 <xPortStartScheduler+0x140>)
 8006c66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006c6c:	f7ff ff64 	bl	8006b38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006c70:	f7fe fe48 	bl	8005904 <vTaskSwitchContext>
    prvTaskExitError();
 8006c74:	f7ff ff1e 	bl	8006ab4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	e000ed00 	.word	0xe000ed00
 8006c88:	410fc271 	.word	0x410fc271
 8006c8c:	410fc270 	.word	0x410fc270
 8006c90:	e000e400 	.word	0xe000e400
 8006c94:	2000024c 	.word	0x2000024c
 8006c98:	20000250 	.word	0x20000250
 8006c9c:	e000ed20 	.word	0xe000ed20
 8006ca0:	20000024 	.word	0x20000024
 8006ca4:	e000ef34 	.word	0xe000ef34

08006ca8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
        __asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
    }
 8006cc0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <vPortEnterCritical+0x58>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	4a0d      	ldr	r2, [pc, #52]	; (8006d00 <vPortEnterCritical+0x58>)
 8006cca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006ccc:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <vPortEnterCritical+0x58>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10f      	bne.n	8006cf4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <vPortEnterCritical+0x5c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <vPortEnterCritical+0x4c>
        __asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	603b      	str	r3, [r7, #0]
    }
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <vPortEnterCritical+0x4a>
    }
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	20000024 	.word	0x20000024
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <vPortExitCritical+0x50>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <vPortExitCritical+0x24>
        __asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	607b      	str	r3, [r7, #4]
    }
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <vPortExitCritical+0x50>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <vPortExitCritical+0x50>)
 8006d34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006d36:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <vPortExitCritical+0x50>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d105      	bne.n	8006d4a <vPortExitCritical+0x42>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	f383 8811 	msr	BASEPRI, r3
    }
 8006d48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000024 	.word	0x20000024
 8006d5c:	00000000 	.word	0x00000000

08006d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006d60:	f3ef 8009 	mrs	r0, PSP
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <pxCurrentTCBConst>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f01e 0f10 	tst.w	lr, #16
 8006d70:	bf08      	it	eq
 8006d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	6010      	str	r0, [r2, #0]
 8006d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d84:	f380 8811 	msr	BASEPRI, r0
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f7fe fdb8 	bl	8005904 <vTaskSwitchContext>
 8006d94:	f04f 0000 	mov.w	r0, #0
 8006d98:	f380 8811 	msr	BASEPRI, r0
 8006d9c:	bc09      	pop	{r0, r3}
 8006d9e:	6819      	ldr	r1, [r3, #0]
 8006da0:	6808      	ldr	r0, [r1, #0]
 8006da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da6:	f01e 0f10 	tst.w	lr, #16
 8006daa:	bf08      	it	eq
 8006dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006db0:	f380 8809 	msr	PSP, r0
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst>:
 8006dc0:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
        __asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
    }
 8006de0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006de2:	f001 fb29 	bl	8008438 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006de6:	f7fe fcd1 	bl	800578c <xTaskIncrementTick>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d006      	beq.n	8006dfe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006df0:	f001 fb80 	bl	80084f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <SysTick_Handler+0x50>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e001      	b.n	8006e02 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006dfe:	f001 fb5d 	bl	80084bc <SEGGER_SYSVIEW_RecordExitISR>
 8006e02:	2300      	movs	r3, #0
 8006e04:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	f383 8811 	msr	BASEPRI, r3
    }
 8006e0c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	e000ed04 	.word	0xe000ed04

08006e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <vPortSetupTimerInterrupt+0x38>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <vPortSetupTimerInterrupt+0x3c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <vPortSetupTimerInterrupt+0x40>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <vPortSetupTimerInterrupt+0x44>)
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <vPortSetupTimerInterrupt+0x34>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e010 	.word	0xe000e010
 8006e54:	e000e018 	.word	0xe000e018
 8006e58:	20000010 	.word	0x20000010
 8006e5c:	10624dd3 	.word	0x10624dd3
 8006e60:	e000e014 	.word	0xe000e014

08006e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e74 <vPortEnableVFP+0x10>
 8006e68:	6801      	ldr	r1, [r0, #0]
 8006e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e6e:	6001      	str	r1, [r0, #0]
 8006e70:	4770      	bx	lr
 8006e72:	0000      	.short	0x0000
 8006e74:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop

08006e7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006e82:	f3ef 8305 	mrs	r3, IPSR
 8006e86:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b0f      	cmp	r3, #15
 8006e8c:	d914      	bls.n	8006eb8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e8e:	4a17      	ldr	r2, [pc, #92]	; (8006eec <vPortValidateInterruptPriority+0x70>)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e98:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <vPortValidateInterruptPriority+0x74>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	7afa      	ldrb	r2, [r7, #11]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d20a      	bcs.n	8006eb8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	607b      	str	r3, [r7, #4]
    }
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <vPortValidateInterruptPriority+0x78>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ec0:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <vPortValidateInterruptPriority+0x7c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d90a      	bls.n	8006ede <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	603b      	str	r3, [r7, #0]
    }
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <vPortValidateInterruptPriority+0x60>
    }
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	e000e3f0 	.word	0xe000e3f0
 8006ef0:	2000024c 	.word	0x2000024c
 8006ef4:	e000ed0c 	.word	0xe000ed0c
 8006ef8:	20000250 	.word	0x20000250

08006efc <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	; 0x28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006f08:	f7fe fb82 	bl	8005610 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 8006f0c:	4b4e      	ldr	r3, [pc, #312]	; (8007048 <pvPortMalloc+0x14c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <pvPortMalloc+0x22>
        {
            prvHeapInit();
 8006f14:	f000 f8da 	bl	80070cc <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 8006f18:	4b4b      	ldr	r3, [pc, #300]	; (8007048 <pvPortMalloc+0x14c>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) && 
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d02a      	beq.n	8006f7a <pvPortMalloc+0x7e>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 8006f24:	2308      	movs	r3, #8
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && 
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d223      	bcs.n	8006f7a <pvPortMalloc+0x7e>
        {
            xWantedSize += heapSTRUCT_SIZE;
 8006f32:	2308      	movs	r3, #8
 8006f34:	461a      	mov	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	607b      	str	r3, [r7, #4]

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f023 0307 	bic.w	r3, r3, #7
 8006f42:	3308      	adds	r3, #8
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d214      	bcs.n	8006f74 <pvPortMalloc+0x78>
                    > xWantedSize )
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f023 0307 	bic.w	r3, r3, #7
 8006f50:	3308      	adds	r3, #8
 8006f52:	607b      	str	r3, [r7, #4]
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d010      	beq.n	8006f80 <pvPortMalloc+0x84>
        __asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
    }
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <pvPortMalloc+0x76>
            }
            else
            {
                xWantedSize = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	607b      	str	r3, [r7, #4]
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006f78:	e002      	b.n	8006f80 <pvPortMalloc+0x84>
            }       
        }
        else 
        {
            xWantedSize = 0; 
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	607b      	str	r3, [r7, #4]
 8006f7e:	e000      	b.n	8006f82 <pvPortMalloc+0x86>
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006f80:	bf00      	nop
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d057      	beq.n	8007038 <pvPortMalloc+0x13c>
 8006f88:	4b30      	ldr	r3, [pc, #192]	; (800704c <pvPortMalloc+0x150>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d852      	bhi.n	8007038 <pvPortMalloc+0x13c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 8006f92:	4b2f      	ldr	r3, [pc, #188]	; (8007050 <pvPortMalloc+0x154>)
 8006f94:	623b      	str	r3, [r7, #32]
            pxBlock = xStart.pxNextFreeBlock;
 8006f96:	4b2e      	ldr	r3, [pc, #184]	; (8007050 <pvPortMalloc+0x154>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f9c:	e004      	b.n	8006fa8 <pvPortMalloc+0xac>
            {
                pxPreviousBlock = pxBlock;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	623b      	str	r3, [r7, #32]
                pxBlock = pxBlock->pxNextFreeBlock;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d903      	bls.n	8006fba <pvPortMalloc+0xbe>
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f1      	bne.n	8006f9e <pvPortMalloc+0xa2>
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	4a25      	ldr	r2, [pc, #148]	; (8007054 <pvPortMalloc+0x158>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d03a      	beq.n	8007038 <pvPortMalloc+0x13c>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2208      	movs	r2, #8
 8006fc8:	4413      	add	r3, r2
 8006fca:	61fb      	str	r3, [r7, #28]

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	601a      	str	r2, [r3, #0]

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2208      	movs	r2, #8
 8006fde:	0052      	lsls	r2, r2, #1
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d922      	bls.n	800702a <pvPortMalloc+0x12e>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4413      	add	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	1ad2      	subs	r2, r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	605a      	str	r2, [r3, #4]
                    pxBlock->xBlockSize = xWantedSize;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	605a      	str	r2, [r3, #4]

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	4b12      	ldr	r3, [pc, #72]	; (8007050 <pvPortMalloc+0x154>)
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	e002      	b.n	8007010 <pvPortMalloc+0x114>
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	429a      	cmp	r2, r3
 800701a:	d8f6      	bhi.n	800700a <pvPortMalloc+0x10e>
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	601a      	str	r2, [r3, #0]
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 800702a:	4b08      	ldr	r3, [pc, #32]	; (800704c <pvPortMalloc+0x150>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	4a05      	ldr	r2, [pc, #20]	; (800704c <pvPortMalloc+0x150>)
 8007036:	6013      	str	r3, [r2, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007038:	f7fe faf8 	bl	800562c <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800703c:	69fb      	ldr	r3, [r7, #28]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3728      	adds	r7, #40	; 0x28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20012e64 	.word	0x20012e64
 800704c:	20000028 	.word	0x20000028
 8007050:	20012e54 	.word	0x20012e54
 8007054:	20012e5c 	.word	0x20012e5c

08007058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d027      	beq.n	80070ba <vPortFree+0x62>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 800706a:	2308      	movs	r3, #8
 800706c:	425b      	negs	r3, r3
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4413      	add	r3, r2
 8007072:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	60fb      	str	r3, [r7, #12]

        vTaskSuspendAll();
 8007078:	f7fe faca 	bl	8005610 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <vPortFree+0x6c>)
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e002      	b.n	800708e <vPortFree+0x36>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	d8f6      	bhi.n	8007088 <vPortFree+0x30>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <vPortFree+0x70>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4413      	add	r3, r2
 80070b2:	4a05      	ldr	r2, [pc, #20]	; (80070c8 <vPortFree+0x70>)
 80070b4:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 80070b6:	f7fe fab9 	bl	800562c <xTaskResumeAll>
    }
}
 80070ba:	bf00      	nop
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20012e54 	.word	0x20012e54
 80070c8:	20000028 	.word	0x20000028

080070cc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80070d2:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <prvHeapInit+0x44>)
 80070d4:	f023 0307 	bic.w	r3, r3, #7
 80070d8:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070da:	4a0e      	ldr	r2, [pc, #56]	; (8007114 <prvHeapInit+0x48>)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <prvHeapInit+0x48>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <prvHeapInit+0x4c>)
 80070e8:	4a0c      	ldr	r2, [pc, #48]	; (800711c <prvHeapInit+0x50>)
 80070ea:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 80070ec:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <prvHeapInit+0x4c>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	4a08      	ldr	r2, [pc, #32]	; (800711c <prvHeapInit+0x50>)
 80070fa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	4a06      	ldr	r2, [pc, #24]	; (8007118 <prvHeapInit+0x4c>)
 8007100:	601a      	str	r2, [r3, #0]
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	2000025c 	.word	0x2000025c
 8007114:	20012e54 	.word	0x20012e54
 8007118:	20012e5c 	.word	0x20012e5c
 800711c:	00012bf8 	.word	0x00012bf8

08007120 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af02      	add	r7, sp, #8
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800712e:	2205      	movs	r2, #5
 8007130:	492b      	ldr	r1, [pc, #172]	; (80071e0 <SYSVIEW_AddTask+0xc0>)
 8007132:	68b8      	ldr	r0, [r7, #8]
 8007134:	f001 fcba 	bl	8008aac <memcmp>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d04b      	beq.n	80071d6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800713e:	4b29      	ldr	r3, [pc, #164]	; (80071e4 <SYSVIEW_AddTask+0xc4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b07      	cmp	r3, #7
 8007144:	d903      	bls.n	800714e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8007146:	4828      	ldr	r0, [pc, #160]	; (80071e8 <SYSVIEW_AddTask+0xc8>)
 8007148:	f001 fc1e 	bl	8008988 <SEGGER_SYSVIEW_Warn>
    return;
 800714c:	e044      	b.n	80071d8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800714e:	4b25      	ldr	r3, [pc, #148]	; (80071e4 <SYSVIEW_AddTask+0xc4>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4926      	ldr	r1, [pc, #152]	; (80071ec <SYSVIEW_AddTask+0xcc>)
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8007162:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <SYSVIEW_AddTask+0xc4>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4921      	ldr	r1, [pc, #132]	; (80071ec <SYSVIEW_AddTask+0xcc>)
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	3304      	adds	r3, #4
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007178:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <SYSVIEW_AddTask+0xc4>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	491b      	ldr	r1, [pc, #108]	; (80071ec <SYSVIEW_AddTask+0xcc>)
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	3308      	adds	r3, #8
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800718e:	4b15      	ldr	r3, [pc, #84]	; (80071e4 <SYSVIEW_AddTask+0xc4>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4916      	ldr	r1, [pc, #88]	; (80071ec <SYSVIEW_AddTask+0xcc>)
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	330c      	adds	r3, #12
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80071a4:	4b0f      	ldr	r3, [pc, #60]	; (80071e4 <SYSVIEW_AddTask+0xc4>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	4910      	ldr	r1, [pc, #64]	; (80071ec <SYSVIEW_AddTask+0xcc>)
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3310      	adds	r3, #16
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <SYSVIEW_AddTask+0xc4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	4a08      	ldr	r2, [pc, #32]	; (80071e4 <SYSVIEW_AddTask+0xc4>)
 80071c2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f80e 	bl	80071f0 <SYSVIEW_SendTaskInfo>
 80071d4:	e000      	b.n	80071d8 <SYSVIEW_AddTask+0xb8>
    return;
 80071d6:	bf00      	nop

}
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	0800a110 	.word	0x0800a110
 80071e4:	20012f08 	.word	0x20012f08
 80071e8:	0800a118 	.word	0x0800a118
 80071ec:	20012e68 	.word	0x20012e68

080071f0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80071fe:	f107 0314 	add.w	r3, r7, #20
 8007202:	2214      	movs	r2, #20
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f001 fc6c 	bl	8008ae4 <memset>
  TaskInfo.TaskID     = TaskID;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	4618      	mov	r0, r3
 8007226:	f000 ffdd 	bl	80081e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800722a:	bf00      	nop
 800722c:	3728      	adds	r7, #40	; 0x28
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800723a:	4b1e      	ldr	r3, [pc, #120]	; (80072b4 <USART2_IRQHandler+0x80>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d011      	beq.n	800726e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <USART2_IRQHandler+0x84>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f003 030b 	and.w	r3, r3, #11
 8007258:	2b00      	cmp	r3, #0
 800725a:	d108      	bne.n	800726e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800725c:	4b17      	ldr	r3, [pc, #92]	; (80072bc <USART2_IRQHandler+0x88>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8007264:	4b15      	ldr	r3, [pc, #84]	; (80072bc <USART2_IRQHandler+0x88>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	79fa      	ldrb	r2, [r7, #7]
 800726a:	4610      	mov	r0, r2
 800726c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01a      	beq.n	80072ae <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8007278:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <USART2_IRQHandler+0x8c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d015      	beq.n	80072ac <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8007280:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <USART2_IRQHandler+0x8c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	1dfa      	adds	r2, r7, #7
 8007286:	4610      	mov	r0, r2
 8007288:	4798      	blx	r3
 800728a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <USART2_IRQHandler+0x90>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a0b      	ldr	r2, [pc, #44]	; (80072c4 <USART2_IRQHandler+0x90>)
 8007298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e006      	b.n	80072ae <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80072a0:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <USART2_IRQHandler+0x80>)
 80072a2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80072a4:	79fa      	ldrb	r2, [r7, #7]
 80072a6:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <USART2_IRQHandler+0x84>)
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e000      	b.n	80072ae <USART2_IRQHandler+0x7a>
      return;
 80072ac:	bf00      	nop
    }
  }
}
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40004400 	.word	0x40004400
 80072b8:	40004404 	.word	0x40004404
 80072bc:	20012f0c 	.word	0x20012f0c
 80072c0:	20012f10 	.word	0x20012f10
 80072c4:	4000440c 	.word	0x4000440c

080072c8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80072d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d6:	6013      	str	r3, [r2, #0]
}
 80072d8:	bf00      	nop
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	4000440c 	.word	0x4000440c

080072e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80072ee:	4b24      	ldr	r3, [pc, #144]	; (8007380 <_DoInit+0x98>)
 80072f0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2203      	movs	r2, #3
 80072f6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2203      	movs	r2, #3
 80072fc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a20      	ldr	r2, [pc, #128]	; (8007384 <_DoInit+0x9c>)
 8007302:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a20      	ldr	r2, [pc, #128]	; (8007388 <_DoInit+0xa0>)
 8007308:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007310:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a17      	ldr	r2, [pc, #92]	; (8007384 <_DoInit+0x9c>)
 8007328:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a17      	ldr	r2, [pc, #92]	; (800738c <_DoInit+0xa4>)
 800732e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2210      	movs	r2, #16
 8007334:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3307      	adds	r3, #7
 800734c:	4a10      	ldr	r2, [pc, #64]	; (8007390 <_DoInit+0xa8>)
 800734e:	6810      	ldr	r0, [r2, #0]
 8007350:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007352:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <_DoInit+0xac>)
 800735a:	6810      	ldr	r0, [r2, #0]
 800735c:	6018      	str	r0, [r3, #0]
 800735e:	8891      	ldrh	r1, [r2, #4]
 8007360:	7992      	ldrb	r2, [r2, #6]
 8007362:	8099      	strh	r1, [r3, #4]
 8007364:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007366:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007370:	f3bf 8f5f 	dmb	sy
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20013568 	.word	0x20013568
 8007384:	0800a168 	.word	0x0800a168
 8007388:	20012f14 	.word	0x20012f14
 800738c:	20013314 	.word	0x20013314
 8007390:	0800a174 	.word	0x0800a174
 8007394:	0800a178 	.word	0x0800a178

08007398 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80073a4:	2300      	movs	r3, #0
 80073a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d905      	bls.n	80073c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
 80073c6:	e007      	b.n	80073d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	69b9      	ldr	r1, [r7, #24]
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	1acb      	subs	r3, r1, r3
 80073d2:	4413      	add	r3, r2
 80073d4:	3b01      	subs	r3, #1
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e2:	4293      	cmp	r3, r2
 80073e4:	bf28      	it	cs
 80073e6:	4613      	movcs	r3, r2
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80073ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4293      	cmp	r3, r2
 80073f0:	bf28      	it	cs
 80073f2:	4613      	movcs	r3, r2
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	6978      	ldr	r0, [r7, #20]
 8007406:	f001 fb5f 	bl	8008ac8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800740a:	6a3a      	ldr	r2, [r7, #32]
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	4413      	add	r3, r2
 8007410:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	4413      	add	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	4413      	add	r3, r2
 8007428:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	429a      	cmp	r2, r3
 8007432:	d101      	bne.n	8007438 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007438:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1b2      	bne.n	80073ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8007448:	6a3b      	ldr	r3, [r7, #32]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3728      	adds	r7, #40	; 0x28
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8007452:	b580      	push	{r7, lr}
 8007454:	b088      	sub	sp, #32
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d911      	bls.n	800749a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	6938      	ldr	r0, [r7, #16]
 8007486:	f001 fb1f 	bl	8008ac8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800748a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	441a      	add	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8007498:	e01f      	b.n	80074da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	4413      	add	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	6938      	ldr	r0, [r7, #16]
 80074ae:	f001 fb0b 	bl	8008ac8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	4413      	add	r3, r2
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	4619      	mov	r1, r3
 80074ca:	6938      	ldr	r0, [r7, #16]
 80074cc:	f001 fafc 	bl	8008ac8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80074d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	60da      	str	r2, [r3, #12]
}
 80074da:	bf00      	nop
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80074e2:	b480      	push	{r7}
 80074e4:	b087      	sub	sp, #28
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d808      	bhi.n	8007510 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	4413      	add	r3, r2
 800750a:	3b01      	subs	r3, #1
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	e004      	b.n	800751a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	617b      	str	r3, [r7, #20]
  }
  return r;
 800751a:	697b      	ldr	r3, [r7, #20]
}
 800751c:	4618      	mov	r0, r3
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8007528:	b580      	push	{r7, lr}
 800752a:	b08c      	sub	sp, #48	; 0x30
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007534:	4b3e      	ldr	r3, [pc, #248]	; (8007630 <SEGGER_RTT_ReadNoLock+0x108>)
 8007536:	623b      	str	r3, [r7, #32]
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <SEGGER_RTT_ReadNoLock+0x1e>
 8007542:	f7ff fed1 	bl	80072e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4613      	mov	r3, r2
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	4413      	add	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	3360      	adds	r3, #96	; 0x60
 8007552:	4a37      	ldr	r2, [pc, #220]	; (8007630 <SEGGER_RTT_ReadNoLock+0x108>)
 8007554:	4413      	add	r3, r2
 8007556:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007568:	2300      	movs	r3, #0
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800756c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	429a      	cmp	r2, r3
 8007572:	d92b      	bls.n	80075cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4293      	cmp	r3, r2
 8007584:	bf28      	it	cs
 8007586:	4613      	movcs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	4413      	add	r3, r2
 8007592:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	6939      	ldr	r1, [r7, #16]
 8007598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800759a:	f001 fa95 	bl	8008ac8 <memcpy>
    NumBytesRead += NumBytesRem;
 800759e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	4413      	add	r3, r2
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80075a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	4413      	add	r3, r2
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80075b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	4413      	add	r3, r2
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d101      	bne.n	80075cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80075c8:	2300      	movs	r3, #0
 80075ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4293      	cmp	r3, r2
 80075da:	bf28      	it	cs
 80075dc:	4613      	movcs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d019      	beq.n	800761a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	4413      	add	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	6939      	ldr	r1, [r7, #16]
 80075f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075f6:	f001 fa67 	bl	8008ac8 <memcpy>
    NumBytesRead += NumBytesRem;
 80075fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	4413      	add	r3, r2
 8007600:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4413      	add	r3, r2
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	4413      	add	r3, r2
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007624:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007628:	4618      	mov	r0, r3
 800762a:	3730      	adds	r7, #48	; 0x30
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20013568 	.word	0x20013568

08007634 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	4613      	mov	r3, r2
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	4413      	add	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8007652:	4413      	add	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d029      	beq.n	80076b2 <SEGGER_RTT_WriteNoLock+0x7e>
 800765e:	2b02      	cmp	r3, #2
 8007660:	d82e      	bhi.n	80076c0 <SEGGER_RTT_WriteNoLock+0x8c>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <SEGGER_RTT_WriteNoLock+0x38>
 8007666:	2b01      	cmp	r3, #1
 8007668:	d013      	beq.n	8007692 <SEGGER_RTT_WriteNoLock+0x5e>
 800766a:	e029      	b.n	80076c0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800766c:	6978      	ldr	r0, [r7, #20]
 800766e:	f7ff ff38 	bl	80074e2 <_GetAvailWriteSpace>
 8007672:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d202      	bcs.n	8007682 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8007680:	e021      	b.n	80076c6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	69b9      	ldr	r1, [r7, #24]
 800768a:	6978      	ldr	r0, [r7, #20]
 800768c:	f7ff fee1 	bl	8007452 <_WriteNoCheck>
    break;
 8007690:	e019      	b.n	80076c6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007692:	6978      	ldr	r0, [r7, #20]
 8007694:	f7ff ff25 	bl	80074e2 <_GetAvailWriteSpace>
 8007698:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	4293      	cmp	r3, r2
 80076a0:	bf28      	it	cs
 80076a2:	4613      	movcs	r3, r2
 80076a4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	69b9      	ldr	r1, [r7, #24]
 80076aa:	6978      	ldr	r0, [r7, #20]
 80076ac:	f7ff fed1 	bl	8007452 <_WriteNoCheck>
    break;
 80076b0:	e009      	b.n	80076c6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	69b9      	ldr	r1, [r7, #24]
 80076b6:	6978      	ldr	r0, [r7, #20]
 80076b8:	f7ff fe6e 	bl	8007398 <_WriteBlocking>
 80076bc:	61f8      	str	r0, [r7, #28]
    break;
 80076be:	e002      	b.n	80076c6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]
    break;
 80076c4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80076c6:	69fb      	ldr	r3, [r7, #28]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3720      	adds	r7, #32
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20013568 	.word	0x20013568

080076d4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80076e0:	4b0e      	ldr	r3, [pc, #56]	; (800771c <SEGGER_RTT_Write+0x48>)
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <SEGGER_RTT_Write+0x1e>
 80076ee:	f7ff fdfb 	bl	80072e8 <_DoInit>
  SEGGER_RTT_LOCK();
 80076f2:	f3ef 8311 	mrs	r3, BASEPRI
 80076f6:	f04f 0120 	mov.w	r1, #32
 80076fa:	f381 8811 	msr	BASEPRI, r1
 80076fe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f7ff ff95 	bl	8007634 <SEGGER_RTT_WriteNoLock>
 800770a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8007712:	697b      	ldr	r3, [r7, #20]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20013568 	.word	0x20013568

08007720 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00f      	beq.n	8007756 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8007736:	e002      	b.n	800773e <_EncodeStr+0x1e>
      Len++;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	3301      	adds	r3, #1
 800773c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f6      	bne.n	8007738 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	429a      	cmp	r2, r3
 8007750:	d901      	bls.n	8007756 <_EncodeStr+0x36>
      Len = Limit;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2bfe      	cmp	r3, #254	; 0xfe
 800775a:	d806      	bhi.n	800776a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	60fa      	str	r2, [r7, #12]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	e011      	b.n	800778e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	60fa      	str	r2, [r7, #12]
 8007770:	22ff      	movs	r2, #255	; 0xff
 8007772:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	60fa      	str	r2, [r7, #12]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	0a19      	lsrs	r1, r3, #8
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	60fa      	str	r2, [r7, #12]
 800778a:	b2ca      	uxtb	r2, r1
 800778c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007792:	e00a      	b.n	80077aa <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	1c53      	adds	r3, r2, #1
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1c59      	adds	r1, r3, #1
 800779e:	60f9      	str	r1, [r7, #12]
 80077a0:	7812      	ldrb	r2, [r2, #0]
 80077a2:	701a      	strb	r2, [r3, #0]
    n++;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	3301      	adds	r3, #1
 80077a8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d3f0      	bcc.n	8007794 <_EncodeStr+0x74>
  }
  return pPayload;
 80077b2:	68fb      	ldr	r3, [r7, #12]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3304      	adds	r3, #4
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80077de:	4b36      	ldr	r3, [pc, #216]	; (80078b8 <_HandleIncomingPacket+0xe0>)
 80077e0:	7e1b      	ldrb	r3, [r3, #24]
 80077e2:	4618      	mov	r0, r3
 80077e4:	1cfb      	adds	r3, r7, #3
 80077e6:	2201      	movs	r2, #1
 80077e8:	4619      	mov	r1, r3
 80077ea:	f7ff fe9d 	bl	8007528 <SEGGER_RTT_ReadNoLock>
 80077ee:	4603      	mov	r3, r0
 80077f0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dd54      	ble.n	80078a2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	2b80      	cmp	r3, #128	; 0x80
 80077fc:	d032      	beq.n	8007864 <_HandleIncomingPacket+0x8c>
 80077fe:	2b80      	cmp	r3, #128	; 0x80
 8007800:	dc42      	bgt.n	8007888 <_HandleIncomingPacket+0xb0>
 8007802:	2b07      	cmp	r3, #7
 8007804:	dc16      	bgt.n	8007834 <_HandleIncomingPacket+0x5c>
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd3e      	ble.n	8007888 <_HandleIncomingPacket+0xb0>
 800780a:	3b01      	subs	r3, #1
 800780c:	2b06      	cmp	r3, #6
 800780e:	d83b      	bhi.n	8007888 <_HandleIncomingPacket+0xb0>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <_HandleIncomingPacket+0x40>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	0800783b 	.word	0x0800783b
 800781c:	08007841 	.word	0x08007841
 8007820:	08007847 	.word	0x08007847
 8007824:	0800784d 	.word	0x0800784d
 8007828:	08007853 	.word	0x08007853
 800782c:	08007859 	.word	0x08007859
 8007830:	0800785f 	.word	0x0800785f
 8007834:	2b7f      	cmp	r3, #127	; 0x7f
 8007836:	d036      	beq.n	80078a6 <_HandleIncomingPacket+0xce>
 8007838:	e026      	b.n	8007888 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800783a:	f000 fb57 	bl	8007eec <SEGGER_SYSVIEW_Start>
      break;
 800783e:	e037      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007840:	f000 fc10 	bl	8008064 <SEGGER_SYSVIEW_Stop>
      break;
 8007844:	e034      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007846:	f000 fdc5 	bl	80083d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800784a:	e031      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800784c:	f000 fdae 	bl	80083ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007850:	e02e      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007852:	f000 fc2d 	bl	80080b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007856:	e02b      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007858:	f001 f858 	bl	800890c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800785c:	e028      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800785e:	f001 f837 	bl	80088d0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007862:	e025      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007864:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <_HandleIncomingPacket+0xe0>)
 8007866:	7e1b      	ldrb	r3, [r3, #24]
 8007868:	4618      	mov	r0, r3
 800786a:	1cfb      	adds	r3, r7, #3
 800786c:	2201      	movs	r2, #1
 800786e:	4619      	mov	r1, r3
 8007870:	f7ff fe5a 	bl	8007528 <SEGGER_RTT_ReadNoLock>
 8007874:	4603      	mov	r3, r0
 8007876:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	dd15      	ble.n	80078aa <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 ffa5 	bl	80087d0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007886:	e010      	b.n	80078aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	b25b      	sxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	da0e      	bge.n	80078ae <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <_HandleIncomingPacket+0xe0>)
 8007892:	7e1b      	ldrb	r3, [r3, #24]
 8007894:	4618      	mov	r0, r3
 8007896:	1cfb      	adds	r3, r7, #3
 8007898:	2201      	movs	r2, #1
 800789a:	4619      	mov	r1, r3
 800789c:	f7ff fe44 	bl	8007528 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80078a0:	e005      	b.n	80078ae <_HandleIncomingPacket+0xd6>
    }
  }
 80078a2:	bf00      	nop
 80078a4:	e004      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
      break;
 80078a6:	bf00      	nop
 80078a8:	e002      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
      break;
 80078aa:	bf00      	nop
 80078ac:	e000      	b.n	80078b0 <_HandleIncomingPacket+0xd8>
      break;
 80078ae:	bf00      	nop
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20013324 	.word	0x20013324

080078bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	; 0x30
 80078c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80078c2:	2301      	movs	r3, #1
 80078c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	3301      	adds	r3, #1
 80078ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d0:	4b32      	ldr	r3, [pc, #200]	; (800799c <_TrySendOverflowPacket+0xe0>)
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80078d6:	e00b      	b.n	80078f0 <_TrySendOverflowPacket+0x34>
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	1c59      	adds	r1, r3, #1
 80078e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	09db      	lsrs	r3, r3, #7
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	2b7f      	cmp	r3, #127	; 0x7f
 80078f4:	d8f0      	bhi.n	80078d8 <_TrySendOverflowPacket+0x1c>
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007906:	4b26      	ldr	r3, [pc, #152]	; (80079a0 <_TrySendOverflowPacket+0xe4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800790c:	4b23      	ldr	r3, [pc, #140]	; (800799c <_TrySendOverflowPacket+0xe0>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	e00b      	b.n	8007938 <_TrySendOverflowPacket+0x7c>
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	b2da      	uxtb	r2, r3
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	1c59      	adds	r1, r3, #1
 8007928:	6279      	str	r1, [r7, #36]	; 0x24
 800792a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	701a      	strb	r2, [r3, #0]
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	09db      	lsrs	r3, r3, #7
 8007936:	623b      	str	r3, [r7, #32]
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	2b7f      	cmp	r3, #127	; 0x7f
 800793c:	d8f0      	bhi.n	8007920 <_TrySendOverflowPacket+0x64>
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	627a      	str	r2, [r7, #36]	; 0x24
 8007944:	6a3a      	ldr	r2, [r7, #32]
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <_TrySendOverflowPacket+0xe0>)
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	4618      	mov	r0, r3
 8007954:	1d3b      	adds	r3, r7, #4
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	461a      	mov	r2, r3
 800795c:	1d3b      	adds	r3, r7, #4
 800795e:	4619      	mov	r1, r3
 8007960:	f7f8 fc56 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007964:	4603      	mov	r3, r0
 8007966:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8007968:	f7ff fcae 	bl	80072c8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007972:	4a0a      	ldr	r2, [pc, #40]	; (800799c <_TrySendOverflowPacket+0xe0>)
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <_TrySendOverflowPacket+0xe0>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	3b01      	subs	r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	4b06      	ldr	r3, [pc, #24]	; (800799c <_TrySendOverflowPacket+0xe0>)
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	e004      	b.n	8007990 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <_TrySendOverflowPacket+0xe0>)
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	3301      	adds	r3, #1
 800798c:	4a03      	ldr	r2, [pc, #12]	; (800799c <_TrySendOverflowPacket+0xe0>)
 800798e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007990:	693b      	ldr	r3, [r7, #16]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3730      	adds	r7, #48	; 0x30
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20013324 	.word	0x20013324
 80079a0:	e0001004 	.word	0xe0001004

080079a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	; 0x28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80079b0:	4b6d      	ldr	r3, [pc, #436]	; (8007b68 <_SendPacket+0x1c4>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d010      	beq.n	80079da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80079b8:	4b6b      	ldr	r3, [pc, #428]	; (8007b68 <_SendPacket+0x1c4>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80a5 	beq.w	8007b0c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80079c2:	4b69      	ldr	r3, [pc, #420]	; (8007b68 <_SendPacket+0x1c4>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d109      	bne.n	80079de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80079ca:	f7ff ff77 	bl	80078bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80079ce:	4b66      	ldr	r3, [pc, #408]	; (8007b68 <_SendPacket+0x1c4>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	f040 809c 	bne.w	8007b10 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80079d8:	e001      	b.n	80079de <_SendPacket+0x3a>
    goto Send;
 80079da:	bf00      	nop
 80079dc:	e000      	b.n	80079e0 <_SendPacket+0x3c>
Send:
 80079de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b1f      	cmp	r3, #31
 80079e4:	d809      	bhi.n	80079fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80079e6:	4b60      	ldr	r3, [pc, #384]	; (8007b68 <_SendPacket+0x1c4>)
 80079e8:	69da      	ldr	r2, [r3, #28]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f040 808d 	bne.w	8007b14 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b17      	cmp	r3, #23
 80079fe:	d807      	bhi.n	8007a10 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e03d      	b.n	8007a8c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a1c:	d912      	bls.n	8007a44 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	09da      	lsrs	r2, r3, #7
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	3a01      	subs	r2, #1
 8007a36:	60fa      	str	r2, [r7, #12]
 8007a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e006      	b.n	8007a52 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b7f      	cmp	r3, #127	; 0x7f
 8007a56:	d912      	bls.n	8007a7e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	09da      	lsrs	r2, r3, #7
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	3a01      	subs	r2, #1
 8007a70:	60fa      	str	r2, [r7, #12]
 8007a72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e006      	b.n	8007a8c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007a8c:	4b37      	ldr	r3, [pc, #220]	; (8007b6c <_SendPacket+0x1c8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007a92:	4b35      	ldr	r3, [pc, #212]	; (8007b68 <_SendPacket+0x1c4>)
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	623b      	str	r3, [r7, #32]
 8007aa4:	e00b      	b.n	8007abe <_SendPacket+0x11a>
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	1c59      	adds	r1, r3, #1
 8007aae:	6279      	str	r1, [r7, #36]	; 0x24
 8007ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	09db      	lsrs	r3, r3, #7
 8007abc:	623b      	str	r3, [r7, #32]
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac2:	d8f0      	bhi.n	8007aa6 <_SendPacket+0x102>
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8007aca:	6a3a      	ldr	r2, [r7, #32]
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007ad4:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <_SendPacket+0x1c4>)
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	68f9      	ldr	r1, [r7, #12]
 8007ae4:	f7f8 fb94 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007aec:	f7ff fbec 	bl	80072c8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007af6:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <_SendPacket+0x1c4>)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	60d3      	str	r3, [r2, #12]
 8007afc:	e00b      	b.n	8007b16 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007afe:	4b1a      	ldr	r3, [pc, #104]	; (8007b68 <_SendPacket+0x1c4>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	4b18      	ldr	r3, [pc, #96]	; (8007b68 <_SendPacket+0x1c4>)
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	e004      	b.n	8007b16 <_SendPacket+0x172>
    goto SendDone;
 8007b0c:	bf00      	nop
 8007b0e:	e002      	b.n	8007b16 <_SendPacket+0x172>
      goto SendDone;
 8007b10:	bf00      	nop
 8007b12:	e000      	b.n	8007b16 <_SendPacket+0x172>
      goto SendDone;
 8007b14:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007b16:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <_SendPacket+0x1c4>)
 8007b18:	7e1b      	ldrb	r3, [r3, #24]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4a14      	ldr	r2, [pc, #80]	; (8007b70 <_SendPacket+0x1cc>)
 8007b1e:	460b      	mov	r3, r1
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	440b      	add	r3, r1
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	4413      	add	r3, r2
 8007b28:	336c      	adds	r3, #108	; 0x6c
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <_SendPacket+0x1c4>)
 8007b2e:	7e1b      	ldrb	r3, [r3, #24]
 8007b30:	4618      	mov	r0, r3
 8007b32:	490f      	ldr	r1, [pc, #60]	; (8007b70 <_SendPacket+0x1cc>)
 8007b34:	4603      	mov	r3, r0
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	4403      	add	r3, r0
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	440b      	add	r3, r1
 8007b3e:	3370      	adds	r3, #112	; 0x70
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d00b      	beq.n	8007b5e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007b46:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <_SendPacket+0x1c4>)
 8007b48:	789b      	ldrb	r3, [r3, #2]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d107      	bne.n	8007b5e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <_SendPacket+0x1c4>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007b54:	f7ff fe40 	bl	80077d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007b58:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <_SendPacket+0x1c4>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007b5e:	bf00      	nop
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20013324 	.word	0x20013324
 8007b6c:	e0001004 	.word	0xe0001004
 8007b70:	20013568 	.word	0x20013568

08007b74 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8007b80:	f04f 0120 	mov.w	r1, #32
 8007b84:	f381 8811 	msr	BASEPRI, r1
 8007b88:	60fb      	str	r3, [r7, #12]
 8007b8a:	4808      	ldr	r0, [pc, #32]	; (8007bac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007b8c:	f7ff fe18 	bl	80077c0 <_PreparePacket>
 8007b90:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	68b9      	ldr	r1, [r7, #8]
 8007b96:	68b8      	ldr	r0, [r7, #8]
 8007b98:	f7ff ff04 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f383 8811 	msr	BASEPRI, r3
}
 8007ba2:	bf00      	nop
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20013354 	.word	0x20013354

08007bb0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007bba:	f3ef 8311 	mrs	r3, BASEPRI
 8007bbe:	f04f 0120 	mov.w	r1, #32
 8007bc2:	f381 8811 	msr	BASEPRI, r1
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	4816      	ldr	r0, [pc, #88]	; (8007c24 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007bca:	f7ff fdf9 	bl	80077c0 <_PreparePacket>
 8007bce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	61fb      	str	r3, [r7, #28]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	61bb      	str	r3, [r7, #24]
 8007bdc:	e00b      	b.n	8007bf6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	1c59      	adds	r1, r3, #1
 8007be6:	61f9      	str	r1, [r7, #28]
 8007be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	09db      	lsrs	r3, r3, #7
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8007bfa:	d8f0      	bhi.n	8007bde <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	61fa      	str	r2, [r7, #28]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	701a      	strb	r2, [r3, #0]
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	6938      	ldr	r0, [r7, #16]
 8007c12:	f7ff fec7 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f383 8811 	msr	BASEPRI, r3
}
 8007c1c:	bf00      	nop
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20013354 	.word	0x20013354

08007c28 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08c      	sub	sp, #48	; 0x30
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c34:	f3ef 8311 	mrs	r3, BASEPRI
 8007c38:	f04f 0120 	mov.w	r1, #32
 8007c3c:	f381 8811 	msr	BASEPRI, r1
 8007c40:	61fb      	str	r3, [r7, #28]
 8007c42:	4825      	ldr	r0, [pc, #148]	; (8007cd8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007c44:	f7ff fdbc 	bl	80077c0 <_PreparePacket>
 8007c48:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c56:	e00b      	b.n	8007c70 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	1c59      	adds	r1, r3, #1
 8007c60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	09db      	lsrs	r3, r3, #7
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	2b7f      	cmp	r3, #127	; 0x7f
 8007c74:	d8f0      	bhi.n	8007c58 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	623b      	str	r3, [r7, #32]
 8007c8e:	e00b      	b.n	8007ca8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	1c59      	adds	r1, r3, #1
 8007c98:	6279      	str	r1, [r7, #36]	; 0x24
 8007c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	09db      	lsrs	r3, r3, #7
 8007ca6:	623b      	str	r3, [r7, #32]
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	2b7f      	cmp	r3, #127	; 0x7f
 8007cac:	d8f0      	bhi.n	8007c90 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	627a      	str	r2, [r7, #36]	; 0x24
 8007cb4:	6a3a      	ldr	r2, [r7, #32]
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	6979      	ldr	r1, [r7, #20]
 8007cc2:	69b8      	ldr	r0, [r7, #24]
 8007cc4:	f7ff fe6e 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	f383 8811 	msr	BASEPRI, r3
}
 8007cce:	bf00      	nop
 8007cd0:	3730      	adds	r7, #48	; 0x30
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20013354 	.word	0x20013354

08007cdc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08e      	sub	sp, #56	; 0x38
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007cea:	f3ef 8311 	mrs	r3, BASEPRI
 8007cee:	f04f 0120 	mov.w	r1, #32
 8007cf2:	f381 8811 	msr	BASEPRI, r1
 8007cf6:	61fb      	str	r3, [r7, #28]
 8007cf8:	4832      	ldr	r0, [pc, #200]	; (8007dc4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007cfa:	f7ff fd61 	bl	80077c0 <_PreparePacket>
 8007cfe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d0c:	e00b      	b.n	8007d26 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d14:	1c59      	adds	r1, r3, #1
 8007d16:	6379      	str	r1, [r7, #52]	; 0x34
 8007d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	09db      	lsrs	r3, r3, #7
 8007d24:	633b      	str	r3, [r7, #48]	; 0x30
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	2b7f      	cmp	r3, #127	; 0x7f
 8007d2a:	d8f0      	bhi.n	8007d0e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	637a      	str	r2, [r7, #52]	; 0x34
 8007d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d34:	b2d2      	uxtb	r2, r2
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d44:	e00b      	b.n	8007d5e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	1c59      	adds	r1, r3, #1
 8007d4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	09db      	lsrs	r3, r3, #7
 8007d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	2b7f      	cmp	r3, #127	; 0x7f
 8007d62:	d8f0      	bhi.n	8007d46 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	623b      	str	r3, [r7, #32]
 8007d7c:	e00b      	b.n	8007d96 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	1c59      	adds	r1, r3, #1
 8007d86:	6279      	str	r1, [r7, #36]	; 0x24
 8007d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d8c:	b2d2      	uxtb	r2, r2
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	09db      	lsrs	r3, r3, #7
 8007d94:	623b      	str	r3, [r7, #32]
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	2b7f      	cmp	r3, #127	; 0x7f
 8007d9a:	d8f0      	bhi.n	8007d7e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	627a      	str	r2, [r7, #36]	; 0x24
 8007da2:	6a3a      	ldr	r2, [r7, #32]
 8007da4:	b2d2      	uxtb	r2, r2
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	6979      	ldr	r1, [r7, #20]
 8007db0:	69b8      	ldr	r0, [r7, #24]
 8007db2:	f7ff fdf7 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	f383 8811 	msr	BASEPRI, r3
}
 8007dbc:	bf00      	nop
 8007dbe:	3738      	adds	r7, #56	; 0x38
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20013354 	.word	0x20013354

08007dc8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b090      	sub	sp, #64	; 0x40
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8007dda:	f04f 0120 	mov.w	r1, #32
 8007dde:	f381 8811 	msr	BASEPRI, r1
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	4840      	ldr	r0, [pc, #256]	; (8007ee8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007de6:	f7ff fceb 	bl	80077c0 <_PreparePacket>
 8007dea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007df8:	e00b      	b.n	8007e12 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	1c59      	adds	r1, r3, #1
 8007e02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e08:	b2d2      	uxtb	r2, r2
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	09db      	lsrs	r3, r3, #7
 8007e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	2b7f      	cmp	r3, #127	; 0x7f
 8007e16:	d8f0      	bhi.n	8007dfa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e30:	e00b      	b.n	8007e4a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e38:	1c59      	adds	r1, r3, #1
 8007e3a:	6379      	str	r1, [r7, #52]	; 0x34
 8007e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e40:	b2d2      	uxtb	r2, r2
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	09db      	lsrs	r3, r3, #7
 8007e48:	633b      	str	r3, [r7, #48]	; 0x30
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e4e:	d8f0      	bhi.n	8007e32 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	637a      	str	r2, [r7, #52]	; 0x34
 8007e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e68:	e00b      	b.n	8007e82 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	1c59      	adds	r1, r3, #1
 8007e72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	701a      	strb	r2, [r3, #0]
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	09db      	lsrs	r3, r3, #7
 8007e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	2b7f      	cmp	r3, #127	; 0x7f
 8007e86:	d8f0      	bhi.n	8007e6a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e9e:	623b      	str	r3, [r7, #32]
 8007ea0:	e00b      	b.n	8007eba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	1c59      	adds	r1, r3, #1
 8007eaa:	6279      	str	r1, [r7, #36]	; 0x24
 8007eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	09db      	lsrs	r3, r3, #7
 8007eb8:	623b      	str	r3, [r7, #32]
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ebe:	d8f0      	bhi.n	8007ea2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ec6:	6a3a      	ldr	r2, [r7, #32]
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	6979      	ldr	r1, [r7, #20]
 8007ed4:	69b8      	ldr	r0, [r7, #24]
 8007ed6:	f7ff fd65 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	f383 8811 	msr	BASEPRI, r3
}
 8007ee0:	bf00      	nop
 8007ee2:	3740      	adds	r7, #64	; 0x40
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20013354 	.word	0x20013354

08007eec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	; 0x30
 8007ef0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007ef2:	4b59      	ldr	r3, [pc, #356]	; (8008058 <SEGGER_SYSVIEW_Start+0x16c>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8007efc:	f04f 0120 	mov.w	r1, #32
 8007f00:	f381 8811 	msr	BASEPRI, r1
 8007f04:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007f06:	4b54      	ldr	r3, [pc, #336]	; (8008058 <SEGGER_SYSVIEW_Start+0x16c>)
 8007f08:	785b      	ldrb	r3, [r3, #1]
 8007f0a:	220a      	movs	r2, #10
 8007f0c:	4953      	ldr	r1, [pc, #332]	; (800805c <SEGGER_SYSVIEW_Start+0x170>)
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7f8 f97e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007f1a:	f7ff f9d5 	bl	80072c8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007f1e:	200a      	movs	r0, #10
 8007f20:	f7ff fe28 	bl	8007b74 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007f24:	f3ef 8311 	mrs	r3, BASEPRI
 8007f28:	f04f 0120 	mov.w	r1, #32
 8007f2c:	f381 8811 	msr	BASEPRI, r1
 8007f30:	60bb      	str	r3, [r7, #8]
 8007f32:	484b      	ldr	r0, [pc, #300]	; (8008060 <SEGGER_SYSVIEW_Start+0x174>)
 8007f34:	f7ff fc44 	bl	80077c0 <_PreparePacket>
 8007f38:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f42:	4b45      	ldr	r3, [pc, #276]	; (8008058 <SEGGER_SYSVIEW_Start+0x16c>)
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f48:	e00b      	b.n	8007f62 <SEGGER_SYSVIEW_Start+0x76>
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	1c59      	adds	r1, r3, #1
 8007f52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5e:	09db      	lsrs	r3, r3, #7
 8007f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	2b7f      	cmp	r3, #127	; 0x7f
 8007f66:	d8f0      	bhi.n	8007f4a <SEGGER_SYSVIEW_Start+0x5e>
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f7c:	4b36      	ldr	r3, [pc, #216]	; (8008058 <SEGGER_SYSVIEW_Start+0x16c>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	623b      	str	r3, [r7, #32]
 8007f82:	e00b      	b.n	8007f9c <SEGGER_SYSVIEW_Start+0xb0>
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	1c59      	adds	r1, r3, #1
 8007f8c:	6279      	str	r1, [r7, #36]	; 0x24
 8007f8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f92:	b2d2      	uxtb	r2, r2
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	09db      	lsrs	r3, r3, #7
 8007f9a:	623b      	str	r3, [r7, #32]
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007fa0:	d8f0      	bhi.n	8007f84 <SEGGER_SYSVIEW_Start+0x98>
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	627a      	str	r2, [r7, #36]	; 0x24
 8007fa8:	6a3a      	ldr	r2, [r7, #32]
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	4b28      	ldr	r3, [pc, #160]	; (8008058 <SEGGER_SYSVIEW_Start+0x16c>)
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	61bb      	str	r3, [r7, #24]
 8007fbc:	e00b      	b.n	8007fd6 <SEGGER_SYSVIEW_Start+0xea>
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	1c59      	adds	r1, r3, #1
 8007fc6:	61f9      	str	r1, [r7, #28]
 8007fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	701a      	strb	r2, [r3, #0]
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	09db      	lsrs	r3, r3, #7
 8007fd4:	61bb      	str	r3, [r7, #24]
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007fda:	d8f0      	bhi.n	8007fbe <SEGGER_SYSVIEW_Start+0xd2>
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	61fa      	str	r2, [r7, #28]
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	e00b      	b.n	800800e <SEGGER_SYSVIEW_Start+0x122>
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	1c59      	adds	r1, r3, #1
 8007ffe:	6179      	str	r1, [r7, #20]
 8008000:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008004:	b2d2      	uxtb	r2, r2
 8008006:	701a      	strb	r2, [r3, #0]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	09db      	lsrs	r3, r3, #7
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	2b7f      	cmp	r3, #127	; 0x7f
 8008012:	d8f0      	bhi.n	8007ff6 <SEGGER_SYSVIEW_Start+0x10a>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	1c5a      	adds	r2, r3, #1
 8008018:	617a      	str	r2, [r7, #20]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008024:	2218      	movs	r2, #24
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fcbb 	bl	80079a4 <_SendPacket>
      RECORD_END();
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008034:	4b08      	ldr	r3, [pc, #32]	; (8008058 <SEGGER_SYSVIEW_Start+0x16c>)
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800803c:	4b06      	ldr	r3, [pc, #24]	; (8008058 <SEGGER_SYSVIEW_Start+0x16c>)
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8008042:	f000 f9c7 	bl	80083d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008046:	f000 f9b1 	bl	80083ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800804a:	f000 fc5f 	bl	800890c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800804e:	bf00      	nop
 8008050:	3730      	adds	r7, #48	; 0x30
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20013324 	.word	0x20013324
 800805c:	0800a198 	.word	0x0800a198
 8008060:	20013354 	.word	0x20013354

08008064 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800806a:	f3ef 8311 	mrs	r3, BASEPRI
 800806e:	f04f 0120 	mov.w	r1, #32
 8008072:	f381 8811 	msr	BASEPRI, r1
 8008076:	607b      	str	r3, [r7, #4]
 8008078:	480b      	ldr	r0, [pc, #44]	; (80080a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800807a:	f7ff fba1 	bl	80077c0 <_PreparePacket>
 800807e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <SEGGER_SYSVIEW_Stop+0x48>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d007      	beq.n	8008098 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008088:	220b      	movs	r2, #11
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6838      	ldr	r0, [r7, #0]
 800808e:	f7ff fc89 	bl	80079a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008092:	4b06      	ldr	r3, [pc, #24]	; (80080ac <SEGGER_SYSVIEW_Stop+0x48>)
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f383 8811 	msr	BASEPRI, r3
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20013354 	.word	0x20013354
 80080ac:	20013324 	.word	0x20013324

080080b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08c      	sub	sp, #48	; 0x30
 80080b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80080b6:	f3ef 8311 	mrs	r3, BASEPRI
 80080ba:	f04f 0120 	mov.w	r1, #32
 80080be:	f381 8811 	msr	BASEPRI, r1
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	4845      	ldr	r0, [pc, #276]	; (80081dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80080c6:	f7ff fb7b 	bl	80077c0 <_PreparePacket>
 80080ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080d4:	4b42      	ldr	r3, [pc, #264]	; (80081e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080da:	e00b      	b.n	80080f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	1c59      	adds	r1, r3, #1
 80080e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80080e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080ea:	b2d2      	uxtb	r2, r2
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	09db      	lsrs	r3, r3, #7
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b7f      	cmp	r3, #127	; 0x7f
 80080f8:	d8f0      	bhi.n	80080dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
 800810e:	4b34      	ldr	r3, [pc, #208]	; (80081e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	623b      	str	r3, [r7, #32]
 8008114:	e00b      	b.n	800812e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	b2da      	uxtb	r2, r3
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	1c59      	adds	r1, r3, #1
 800811e:	6279      	str	r1, [r7, #36]	; 0x24
 8008120:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008124:	b2d2      	uxtb	r2, r2
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	09db      	lsrs	r3, r3, #7
 800812c:	623b      	str	r3, [r7, #32]
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	2b7f      	cmp	r3, #127	; 0x7f
 8008132:	d8f0      	bhi.n	8008116 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	627a      	str	r2, [r7, #36]	; 0x24
 800813a:	6a3a      	ldr	r2, [r7, #32]
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	4b25      	ldr	r3, [pc, #148]	; (80081e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	e00b      	b.n	8008168 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	b2da      	uxtb	r2, r3
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	1c59      	adds	r1, r3, #1
 8008158:	61f9      	str	r1, [r7, #28]
 800815a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800815e:	b2d2      	uxtb	r2, r2
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	09db      	lsrs	r3, r3, #7
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b7f      	cmp	r3, #127	; 0x7f
 800816c:	d8f0      	bhi.n	8008150 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	61fa      	str	r2, [r7, #28]
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	2300      	movs	r3, #0
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	e00b      	b.n	80081a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	b2da      	uxtb	r2, r3
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	1c59      	adds	r1, r3, #1
 8008190:	6179      	str	r1, [r7, #20]
 8008192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008196:	b2d2      	uxtb	r2, r2
 8008198:	701a      	strb	r2, [r3, #0]
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	09db      	lsrs	r3, r3, #7
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b7f      	cmp	r3, #127	; 0x7f
 80081a4:	d8f0      	bhi.n	8008188 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	617a      	str	r2, [r7, #20]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80081b6:	2218      	movs	r2, #24
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	68b8      	ldr	r0, [r7, #8]
 80081bc:	f7ff fbf2 	bl	80079a4 <_SendPacket>
  RECORD_END();
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80081c6:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80081ce:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	4798      	blx	r3
  }
}
 80081d4:	bf00      	nop
 80081d6:	3730      	adds	r7, #48	; 0x30
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20013354 	.word	0x20013354
 80081e0:	20013324 	.word	0x20013324

080081e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b092      	sub	sp, #72	; 0x48
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80081ec:	f3ef 8311 	mrs	r3, BASEPRI
 80081f0:	f04f 0120 	mov.w	r1, #32
 80081f4:	f381 8811 	msr	BASEPRI, r1
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	486a      	ldr	r0, [pc, #424]	; (80083a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80081fc:	f7ff fae0 	bl	80077c0 <_PreparePacket>
 8008200:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	647b      	str	r3, [r7, #68]	; 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4b66      	ldr	r3, [pc, #408]	; (80083a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	643b      	str	r3, [r7, #64]	; 0x40
 8008216:	e00b      	b.n	8008230 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821a:	b2da      	uxtb	r2, r3
 800821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821e:	1c59      	adds	r1, r3, #1
 8008220:	6479      	str	r1, [r7, #68]	; 0x44
 8008222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]
 800822a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822c:	09db      	lsrs	r3, r3, #7
 800822e:	643b      	str	r3, [r7, #64]	; 0x40
 8008230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008232:	2b7f      	cmp	r3, #127	; 0x7f
 8008234:	d8f0      	bhi.n	8008218 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	647a      	str	r2, [r7, #68]	; 0x44
 800823c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008244:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008250:	e00b      	b.n	800826a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	b2da      	uxtb	r2, r3
 8008256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008258:	1c59      	adds	r1, r3, #1
 800825a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800825c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008260:	b2d2      	uxtb	r2, r2
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	09db      	lsrs	r3, r3, #7
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	2b7f      	cmp	r3, #127	; 0x7f
 800826e:	d8f0      	bhi.n	8008252 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	4619      	mov	r1, r3
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff fa49 	bl	8007720 <_EncodeStr>
 800828e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008290:	2209      	movs	r2, #9
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	6938      	ldr	r0, [r7, #16]
 8008296:	f7ff fb85 	bl	80079a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b40      	ldr	r3, [pc, #256]	; (80083a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	633b      	str	r3, [r7, #48]	; 0x30
 80082ae:	e00b      	b.n	80082c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b6:	1c59      	adds	r1, r3, #1
 80082b8:	6379      	str	r1, [r7, #52]	; 0x34
 80082ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	09db      	lsrs	r3, r3, #7
 80082c6:	633b      	str	r3, [r7, #48]	; 0x30
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	2b7f      	cmp	r3, #127	; 0x7f
 80082cc:	d8f0      	bhi.n	80082b0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	637a      	str	r2, [r7, #52]	; 0x34
 80082d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80082e8:	e00b      	b.n	8008302 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	1c59      	adds	r1, r3, #1
 80082f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	09db      	lsrs	r3, r3, #7
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	2b7f      	cmp	r3, #127	; 0x7f
 8008306:	d8f0      	bhi.n	80082ea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800830e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008310:	b2d2      	uxtb	r2, r2
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008316:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	627b      	str	r3, [r7, #36]	; 0x24
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	623b      	str	r3, [r7, #32]
 8008322:	e00b      	b.n	800833c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	b2da      	uxtb	r2, r3
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	6279      	str	r1, [r7, #36]	; 0x24
 800832e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	09db      	lsrs	r3, r3, #7
 800833a:	623b      	str	r3, [r7, #32]
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	2b7f      	cmp	r3, #127	; 0x7f
 8008340:	d8f0      	bhi.n	8008324 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	627a      	str	r2, [r7, #36]	; 0x24
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	61fb      	str	r3, [r7, #28]
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	e00b      	b.n	8008374 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	1c59      	adds	r1, r3, #1
 8008364:	61f9      	str	r1, [r7, #28]
 8008366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	09db      	lsrs	r3, r3, #7
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	2b7f      	cmp	r3, #127	; 0x7f
 8008378:	d8f0      	bhi.n	800835c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	61fa      	str	r2, [r7, #28]
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800838a:	2215      	movs	r2, #21
 800838c:	68f9      	ldr	r1, [r7, #12]
 800838e:	6938      	ldr	r0, [r7, #16]
 8008390:	f7ff fb08 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f383 8811 	msr	BASEPRI, r3
}
 800839a:	bf00      	nop
 800839c:	3748      	adds	r7, #72	; 0x48
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20013354 	.word	0x20013354
 80083a8:	20013324 	.word	0x20013324

080083ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d008      	beq.n	80083ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80083b8:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80083c2:	4b03      	ldr	r3, [pc, #12]	; (80083d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4798      	blx	r3
  }
}
 80083ca:	bf00      	nop
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20013324 	.word	0x20013324

080083d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80083d4:	b590      	push	{r4, r7, lr}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80083da:	4b15      	ldr	r3, [pc, #84]	; (8008430 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01a      	beq.n	8008418 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80083e2:	4b13      	ldr	r3, [pc, #76]	; (8008430 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d015      	beq.n	8008418 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80083ec:	4b10      	ldr	r3, [pc, #64]	; (8008430 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4798      	blx	r3
 80083f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80083f8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80083fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	000a      	movs	r2, r1
 8008408:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800840a:	4613      	mov	r3, r2
 800840c:	461a      	mov	r2, r3
 800840e:	4621      	mov	r1, r4
 8008410:	200d      	movs	r0, #13
 8008412:	f7ff fc09 	bl	8007c28 <SEGGER_SYSVIEW_RecordU32x2>
 8008416:	e006      	b.n	8008426 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4619      	mov	r1, r3
 800841e:	200c      	movs	r0, #12
 8008420:	f7ff fbc6 	bl	8007bb0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	bd90      	pop	{r4, r7, pc}
 800842e:	bf00      	nop
 8008430:	20013324 	.word	0x20013324
 8008434:	e0001004 	.word	0xe0001004

08008438 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800843e:	f3ef 8311 	mrs	r3, BASEPRI
 8008442:	f04f 0120 	mov.w	r1, #32
 8008446:	f381 8811 	msr	BASEPRI, r1
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	4819      	ldr	r0, [pc, #100]	; (80084b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800844e:	f7ff f9b7 	bl	80077c0 <_PreparePacket>
 8008452:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008458:	4b17      	ldr	r3, [pc, #92]	; (80084b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008460:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	e00b      	b.n	8008484 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	b2da      	uxtb	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	1c59      	adds	r1, r3, #1
 8008474:	6179      	str	r1, [r7, #20]
 8008476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800847a:	b2d2      	uxtb	r2, r2
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	09db      	lsrs	r3, r3, #7
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	2b7f      	cmp	r3, #127	; 0x7f
 8008488:	d8f0      	bhi.n	800846c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	617a      	str	r2, [r7, #20]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800849a:	2202      	movs	r2, #2
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	68b8      	ldr	r0, [r7, #8]
 80084a0:	f7ff fa80 	bl	80079a4 <_SendPacket>
  RECORD_END();
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f383 8811 	msr	BASEPRI, r3
}
 80084aa:	bf00      	nop
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	20013354 	.word	0x20013354
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084c2:	f3ef 8311 	mrs	r3, BASEPRI
 80084c6:	f04f 0120 	mov.w	r1, #32
 80084ca:	f381 8811 	msr	BASEPRI, r1
 80084ce:	607b      	str	r3, [r7, #4]
 80084d0:	4807      	ldr	r0, [pc, #28]	; (80084f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80084d2:	f7ff f975 	bl	80077c0 <_PreparePacket>
 80084d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80084d8:	2203      	movs	r2, #3
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6838      	ldr	r0, [r7, #0]
 80084de:	f7ff fa61 	bl	80079a4 <_SendPacket>
  RECORD_END();
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f383 8811 	msr	BASEPRI, r3
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20013354 	.word	0x20013354

080084f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084fa:	f3ef 8311 	mrs	r3, BASEPRI
 80084fe:	f04f 0120 	mov.w	r1, #32
 8008502:	f381 8811 	msr	BASEPRI, r1
 8008506:	607b      	str	r3, [r7, #4]
 8008508:	4807      	ldr	r0, [pc, #28]	; (8008528 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800850a:	f7ff f959 	bl	80077c0 <_PreparePacket>
 800850e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008510:	2212      	movs	r2, #18
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6838      	ldr	r0, [r7, #0]
 8008516:	f7ff fa45 	bl	80079a4 <_SendPacket>
  RECORD_END();
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f383 8811 	msr	BASEPRI, r3
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20013354 	.word	0x20013354

0800852c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008532:	f3ef 8311 	mrs	r3, BASEPRI
 8008536:	f04f 0120 	mov.w	r1, #32
 800853a:	f381 8811 	msr	BASEPRI, r1
 800853e:	607b      	str	r3, [r7, #4]
 8008540:	4807      	ldr	r0, [pc, #28]	; (8008560 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008542:	f7ff f93d 	bl	80077c0 <_PreparePacket>
 8008546:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008548:	2211      	movs	r2, #17
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6838      	ldr	r0, [r7, #0]
 800854e:	f7ff fa29 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f383 8811 	msr	BASEPRI, r3
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20013354 	.word	0x20013354

08008564 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800856c:	f3ef 8311 	mrs	r3, BASEPRI
 8008570:	f04f 0120 	mov.w	r1, #32
 8008574:	f381 8811 	msr	BASEPRI, r1
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	4819      	ldr	r0, [pc, #100]	; (80085e0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800857c:	f7ff f920 	bl	80077c0 <_PreparePacket>
 8008580:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008586:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	61bb      	str	r3, [r7, #24]
 8008598:	e00b      	b.n	80085b2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	b2da      	uxtb	r2, r3
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	1c59      	adds	r1, r3, #1
 80085a2:	61f9      	str	r1, [r7, #28]
 80085a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	701a      	strb	r2, [r3, #0]
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	09db      	lsrs	r3, r3, #7
 80085b0:	61bb      	str	r3, [r7, #24]
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b7f      	cmp	r3, #127	; 0x7f
 80085b6:	d8f0      	bhi.n	800859a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	61fa      	str	r2, [r7, #28]
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	b2d2      	uxtb	r2, r2
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80085c8:	2208      	movs	r2, #8
 80085ca:	68f9      	ldr	r1, [r7, #12]
 80085cc:	6938      	ldr	r0, [r7, #16]
 80085ce:	f7ff f9e9 	bl	80079a4 <_SendPacket>
  RECORD_END();
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f383 8811 	msr	BASEPRI, r3
}
 80085d8:	bf00      	nop
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20013354 	.word	0x20013354
 80085e4:	20013324 	.word	0x20013324

080085e8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80085f0:	f3ef 8311 	mrs	r3, BASEPRI
 80085f4:	f04f 0120 	mov.w	r1, #32
 80085f8:	f381 8811 	msr	BASEPRI, r1
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	4819      	ldr	r0, [pc, #100]	; (8008664 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008600:	f7ff f8de 	bl	80077c0 <_PreparePacket>
 8008604:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800860a:	4b17      	ldr	r3, [pc, #92]	; (8008668 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	e00b      	b.n	8008636 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	b2da      	uxtb	r2, r3
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	1c59      	adds	r1, r3, #1
 8008626:	61f9      	str	r1, [r7, #28]
 8008628:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	09db      	lsrs	r3, r3, #7
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b7f      	cmp	r3, #127	; 0x7f
 800863a:	d8f0      	bhi.n	800861e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	61fa      	str	r2, [r7, #28]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	701a      	strb	r2, [r3, #0]
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800864c:	2204      	movs	r2, #4
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	6938      	ldr	r0, [r7, #16]
 8008652:	f7ff f9a7 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f383 8811 	msr	BASEPRI, r3
}
 800865c:	bf00      	nop
 800865e:	3720      	adds	r7, #32
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20013354 	.word	0x20013354
 8008668:	20013324 	.word	0x20013324

0800866c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008674:	f3ef 8311 	mrs	r3, BASEPRI
 8008678:	f04f 0120 	mov.w	r1, #32
 800867c:	f381 8811 	msr	BASEPRI, r1
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	4819      	ldr	r0, [pc, #100]	; (80086e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008684:	f7ff f89c 	bl	80077c0 <_PreparePacket>
 8008688:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800868e:	4b17      	ldr	r3, [pc, #92]	; (80086ec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	e00b      	b.n	80086ba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	1c59      	adds	r1, r3, #1
 80086aa:	61f9      	str	r1, [r7, #28]
 80086ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	09db      	lsrs	r3, r3, #7
 80086b8:	61bb      	str	r3, [r7, #24]
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b7f      	cmp	r3, #127	; 0x7f
 80086be:	d8f0      	bhi.n	80086a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	61fa      	str	r2, [r7, #28]
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80086d0:	2206      	movs	r2, #6
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	6938      	ldr	r0, [r7, #16]
 80086d6:	f7ff f965 	bl	80079a4 <_SendPacket>
  RECORD_END();
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f383 8811 	msr	BASEPRI, r3
}
 80086e0:	bf00      	nop
 80086e2:	3720      	adds	r7, #32
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20013354 	.word	0x20013354
 80086ec:	20013324 	.word	0x20013324

080086f0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08a      	sub	sp, #40	; 0x28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80086fa:	f3ef 8311 	mrs	r3, BASEPRI
 80086fe:	f04f 0120 	mov.w	r1, #32
 8008702:	f381 8811 	msr	BASEPRI, r1
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	4827      	ldr	r0, [pc, #156]	; (80087a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800870a:	f7ff f859 	bl	80077c0 <_PreparePacket>
 800870e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008714:	4b25      	ldr	r3, [pc, #148]	; (80087ac <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	e00b      	b.n	8008740 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	b2da      	uxtb	r2, r3
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	1c59      	adds	r1, r3, #1
 8008730:	6279      	str	r1, [r7, #36]	; 0x24
 8008732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	09db      	lsrs	r3, r3, #7
 800873e:	623b      	str	r3, [r7, #32]
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b7f      	cmp	r3, #127	; 0x7f
 8008744:	d8f0      	bhi.n	8008728 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	627a      	str	r2, [r7, #36]	; 0x24
 800874c:	6a3a      	ldr	r2, [r7, #32]
 800874e:	b2d2      	uxtb	r2, r2
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	61fb      	str	r3, [r7, #28]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	e00b      	b.n	8008778 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	1c59      	adds	r1, r3, #1
 8008768:	61f9      	str	r1, [r7, #28]
 800876a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800876e:	b2d2      	uxtb	r2, r2
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	09db      	lsrs	r3, r3, #7
 8008776:	61bb      	str	r3, [r7, #24]
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b7f      	cmp	r3, #127	; 0x7f
 800877c:	d8f0      	bhi.n	8008760 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	61fa      	str	r2, [r7, #28]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	b2d2      	uxtb	r2, r2
 8008788:	701a      	strb	r2, [r3, #0]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800878e:	2207      	movs	r2, #7
 8008790:	68f9      	ldr	r1, [r7, #12]
 8008792:	6938      	ldr	r0, [r7, #16]
 8008794:	f7ff f906 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f383 8811 	msr	BASEPRI, r3
}
 800879e:	bf00      	nop
 80087a0:	3728      	adds	r7, #40	; 0x28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20013354 	.word	0x20013354
 80087ac:	20013324 	.word	0x20013324

080087b0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	1ad3      	subs	r3, r2, r3
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	20013324 	.word	0x20013324

080087d0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08c      	sub	sp, #48	; 0x30
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80087da:	4b3b      	ldr	r3, [pc, #236]	; (80088c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d06d      	beq.n	80088be <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80087e2:	4b39      	ldr	r3, [pc, #228]	; (80088c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80087e8:	2300      	movs	r3, #0
 80087ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ec:	e008      	b.n	8008800 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	3301      	adds	r3, #1
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008804:	429a      	cmp	r2, r3
 8008806:	d3f2      	bcc.n	80087ee <SEGGER_SYSVIEW_SendModule+0x1e>
 8008808:	e000      	b.n	800880c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800880a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	2b00      	cmp	r3, #0
 8008810:	d055      	beq.n	80088be <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008812:	f3ef 8311 	mrs	r3, BASEPRI
 8008816:	f04f 0120 	mov.w	r1, #32
 800881a:	f381 8811 	msr	BASEPRI, r1
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	482a      	ldr	r0, [pc, #168]	; (80088cc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008822:	f7fe ffcd 	bl	80077c0 <_PreparePacket>
 8008826:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	623b      	str	r3, [r7, #32]
 8008834:	e00b      	b.n	800884e <SEGGER_SYSVIEW_SendModule+0x7e>
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	b2da      	uxtb	r2, r3
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	1c59      	adds	r1, r3, #1
 800883e:	6279      	str	r1, [r7, #36]	; 0x24
 8008840:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	701a      	strb	r2, [r3, #0]
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	09db      	lsrs	r3, r3, #7
 800884c:	623b      	str	r3, [r7, #32]
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	2b7f      	cmp	r3, #127	; 0x7f
 8008852:	d8f0      	bhi.n	8008836 <SEGGER_SYSVIEW_SendModule+0x66>
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	627a      	str	r2, [r7, #36]	; 0x24
 800885a:	6a3a      	ldr	r2, [r7, #32]
 800885c:	b2d2      	uxtb	r2, r2
 800885e:	701a      	strb	r2, [r3, #0]
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	61fb      	str	r3, [r7, #28]
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	61bb      	str	r3, [r7, #24]
 800886e:	e00b      	b.n	8008888 <SEGGER_SYSVIEW_SendModule+0xb8>
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	b2da      	uxtb	r2, r3
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	1c59      	adds	r1, r3, #1
 8008878:	61f9      	str	r1, [r7, #28]
 800887a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	09db      	lsrs	r3, r3, #7
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	2b7f      	cmp	r3, #127	; 0x7f
 800888c:	d8f0      	bhi.n	8008870 <SEGGER_SYSVIEW_SendModule+0xa0>
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	61fa      	str	r2, [r7, #28]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	b2d2      	uxtb	r2, r2
 8008898:	701a      	strb	r2, [r3, #0]
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2280      	movs	r2, #128	; 0x80
 80088a4:	4619      	mov	r1, r3
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f7fe ff3a 	bl	8007720 <_EncodeStr>
 80088ac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80088ae:	2216      	movs	r2, #22
 80088b0:	68f9      	ldr	r1, [r7, #12]
 80088b2:	6938      	ldr	r0, [r7, #16]
 80088b4:	f7ff f876 	bl	80079a4 <_SendPacket>
      RECORD_END();
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80088be:	bf00      	nop
 80088c0:	3730      	adds	r7, #48	; 0x30
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	2001334c 	.word	0x2001334c
 80088cc:	20013354 	.word	0x20013354

080088d0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00f      	beq.n	80088fe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80088de:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1f2      	bne.n	80088e4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	2001334c 	.word	0x2001334c

0800890c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008912:	f3ef 8311 	mrs	r3, BASEPRI
 8008916:	f04f 0120 	mov.w	r1, #32
 800891a:	f381 8811 	msr	BASEPRI, r1
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	4817      	ldr	r0, [pc, #92]	; (8008980 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008922:	f7fe ff4d 	bl	80077c0 <_PreparePacket>
 8008926:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	4b14      	ldr	r3, [pc, #80]	; (8008984 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	e00b      	b.n	8008950 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	b2da      	uxtb	r2, r3
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	1c59      	adds	r1, r3, #1
 8008940:	6179      	str	r1, [r7, #20]
 8008942:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	09db      	lsrs	r3, r3, #7
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b7f      	cmp	r3, #127	; 0x7f
 8008954:	d8f0      	bhi.n	8008938 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	617a      	str	r2, [r7, #20]
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	b2d2      	uxtb	r2, r2
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008966:	221b      	movs	r2, #27
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	68b8      	ldr	r0, [r7, #8]
 800896c:	f7ff f81a 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f383 8811 	msr	BASEPRI, r3
}
 8008976:	bf00      	nop
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20013354 	.word	0x20013354
 8008984:	20013350 	.word	0x20013350

08008988 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008990:	f3ef 8311 	mrs	r3, BASEPRI
 8008994:	f04f 0120 	mov.w	r1, #32
 8008998:	f381 8811 	msr	BASEPRI, r1
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	4827      	ldr	r0, [pc, #156]	; (8008a3c <SEGGER_SYSVIEW_Warn+0xb4>)
 80089a0:	f7fe ff0e 	bl	80077c0 <_PreparePacket>
 80089a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80089a6:	2280      	movs	r2, #128	; 0x80
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	6938      	ldr	r0, [r7, #16]
 80089ac:	f7fe feb8 	bl	8007720 <_EncodeStr>
 80089b0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
 80089b6:	2301      	movs	r3, #1
 80089b8:	623b      	str	r3, [r7, #32]
 80089ba:	e00b      	b.n	80089d4 <SEGGER_SYSVIEW_Warn+0x4c>
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	1c59      	adds	r1, r3, #1
 80089c4:	6279      	str	r1, [r7, #36]	; 0x24
 80089c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	09db      	lsrs	r3, r3, #7
 80089d2:	623b      	str	r3, [r7, #32]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	2b7f      	cmp	r3, #127	; 0x7f
 80089d8:	d8f0      	bhi.n	80089bc <SEGGER_SYSVIEW_Warn+0x34>
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	627a      	str	r2, [r7, #36]	; 0x24
 80089e0:	6a3a      	ldr	r2, [r7, #32]
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	61fb      	str	r3, [r7, #28]
 80089ee:	2300      	movs	r3, #0
 80089f0:	61bb      	str	r3, [r7, #24]
 80089f2:	e00b      	b.n	8008a0c <SEGGER_SYSVIEW_Warn+0x84>
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	1c59      	adds	r1, r3, #1
 80089fc:	61f9      	str	r1, [r7, #28]
 80089fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	09db      	lsrs	r3, r3, #7
 8008a0a:	61bb      	str	r3, [r7, #24]
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a10:	d8f0      	bhi.n	80089f4 <SEGGER_SYSVIEW_Warn+0x6c>
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	61fa      	str	r2, [r7, #28]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008a22:	221a      	movs	r2, #26
 8008a24:	68f9      	ldr	r1, [r7, #12]
 8008a26:	6938      	ldr	r0, [r7, #16]
 8008a28:	f7fe ffbc 	bl	80079a4 <_SendPacket>
  RECORD_END();
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f383 8811 	msr	BASEPRI, r3
}
 8008a32:	bf00      	nop
 8008a34:	3728      	adds	r7, #40	; 0x28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20013354 	.word	0x20013354

08008a40 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	2000      	movs	r0, #0
 8008a54:	f7fe fe3e 	bl	80076d4 <SEGGER_RTT_Write>
  return len;
 8008a58:	683b      	ldr	r3, [r7, #0]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <__libc_init_array>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	4d0d      	ldr	r5, [pc, #52]	; (8008a9c <__libc_init_array+0x38>)
 8008a68:	4c0d      	ldr	r4, [pc, #52]	; (8008aa0 <__libc_init_array+0x3c>)
 8008a6a:	1b64      	subs	r4, r4, r5
 8008a6c:	10a4      	asrs	r4, r4, #2
 8008a6e:	2600      	movs	r6, #0
 8008a70:	42a6      	cmp	r6, r4
 8008a72:	d109      	bne.n	8008a88 <__libc_init_array+0x24>
 8008a74:	4d0b      	ldr	r5, [pc, #44]	; (8008aa4 <__libc_init_array+0x40>)
 8008a76:	4c0c      	ldr	r4, [pc, #48]	; (8008aa8 <__libc_init_array+0x44>)
 8008a78:	f001 f952 	bl	8009d20 <_init>
 8008a7c:	1b64      	subs	r4, r4, r5
 8008a7e:	10a4      	asrs	r4, r4, #2
 8008a80:	2600      	movs	r6, #0
 8008a82:	42a6      	cmp	r6, r4
 8008a84:	d105      	bne.n	8008a92 <__libc_init_array+0x2e>
 8008a86:	bd70      	pop	{r4, r5, r6, pc}
 8008a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a8c:	4798      	blx	r3
 8008a8e:	3601      	adds	r6, #1
 8008a90:	e7ee      	b.n	8008a70 <__libc_init_array+0xc>
 8008a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a96:	4798      	blx	r3
 8008a98:	3601      	adds	r6, #1
 8008a9a:	e7f2      	b.n	8008a82 <__libc_init_array+0x1e>
 8008a9c:	0800a244 	.word	0x0800a244
 8008aa0:	0800a244 	.word	0x0800a244
 8008aa4:	0800a244 	.word	0x0800a244
 8008aa8:	0800a248 	.word	0x0800a248

08008aac <memcmp>:
 8008aac:	b530      	push	{r4, r5, lr}
 8008aae:	3901      	subs	r1, #1
 8008ab0:	2400      	movs	r4, #0
 8008ab2:	42a2      	cmp	r2, r4
 8008ab4:	d101      	bne.n	8008aba <memcmp+0xe>
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	e005      	b.n	8008ac6 <memcmp+0x1a>
 8008aba:	5d03      	ldrb	r3, [r0, r4]
 8008abc:	3401      	adds	r4, #1
 8008abe:	5d0d      	ldrb	r5, [r1, r4]
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	d0f6      	beq.n	8008ab2 <memcmp+0x6>
 8008ac4:	1b58      	subs	r0, r3, r5
 8008ac6:	bd30      	pop	{r4, r5, pc}

08008ac8 <memcpy>:
 8008ac8:	440a      	add	r2, r1
 8008aca:	4291      	cmp	r1, r2
 8008acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ad0:	d100      	bne.n	8008ad4 <memcpy+0xc>
 8008ad2:	4770      	bx	lr
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	d1f9      	bne.n	8008ad6 <memcpy+0xe>
 8008ae2:	bd10      	pop	{r4, pc}

08008ae4 <memset>:
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d100      	bne.n	8008aee <memset+0xa>
 8008aec:	4770      	bx	lr
 8008aee:	f803 1b01 	strb.w	r1, [r3], #1
 8008af2:	e7f9      	b.n	8008ae8 <memset+0x4>

08008af4 <iprintf>:
 8008af4:	b40f      	push	{r0, r1, r2, r3}
 8008af6:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <iprintf+0x2c>)
 8008af8:	b513      	push	{r0, r1, r4, lr}
 8008afa:	681c      	ldr	r4, [r3, #0]
 8008afc:	b124      	cbz	r4, 8008b08 <iprintf+0x14>
 8008afe:	69a3      	ldr	r3, [r4, #24]
 8008b00:	b913      	cbnz	r3, 8008b08 <iprintf+0x14>
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 f886 	bl	8008c14 <__sinit>
 8008b08:	ab05      	add	r3, sp, #20
 8008b0a:	9a04      	ldr	r2, [sp, #16]
 8008b0c:	68a1      	ldr	r1, [r4, #8]
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 faff 	bl	8009114 <_vfiprintf_r>
 8008b16:	b002      	add	sp, #8
 8008b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b1c:	b004      	add	sp, #16
 8008b1e:	4770      	bx	lr
 8008b20:	2000002c 	.word	0x2000002c

08008b24 <siprintf>:
 8008b24:	b40e      	push	{r1, r2, r3}
 8008b26:	b500      	push	{lr}
 8008b28:	b09c      	sub	sp, #112	; 0x70
 8008b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b2c:	9002      	str	r0, [sp, #8]
 8008b2e:	9006      	str	r0, [sp, #24]
 8008b30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b34:	4809      	ldr	r0, [pc, #36]	; (8008b5c <siprintf+0x38>)
 8008b36:	9107      	str	r1, [sp, #28]
 8008b38:	9104      	str	r1, [sp, #16]
 8008b3a:	4909      	ldr	r1, [pc, #36]	; (8008b60 <siprintf+0x3c>)
 8008b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b40:	9105      	str	r1, [sp, #20]
 8008b42:	6800      	ldr	r0, [r0, #0]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	a902      	add	r1, sp, #8
 8008b48:	f000 f9ba 	bl	8008ec0 <_svfiprintf_r>
 8008b4c:	9b02      	ldr	r3, [sp, #8]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
 8008b52:	b01c      	add	sp, #112	; 0x70
 8008b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b58:	b003      	add	sp, #12
 8008b5a:	4770      	bx	lr
 8008b5c:	2000002c 	.word	0x2000002c
 8008b60:	ffff0208 	.word	0xffff0208

08008b64 <std>:
 8008b64:	2300      	movs	r3, #0
 8008b66:	b510      	push	{r4, lr}
 8008b68:	4604      	mov	r4, r0
 8008b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8008b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b72:	6083      	str	r3, [r0, #8]
 8008b74:	8181      	strh	r1, [r0, #12]
 8008b76:	6643      	str	r3, [r0, #100]	; 0x64
 8008b78:	81c2      	strh	r2, [r0, #14]
 8008b7a:	6183      	str	r3, [r0, #24]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	2208      	movs	r2, #8
 8008b80:	305c      	adds	r0, #92	; 0x5c
 8008b82:	f7ff ffaf 	bl	8008ae4 <memset>
 8008b86:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <std+0x38>)
 8008b88:	6263      	str	r3, [r4, #36]	; 0x24
 8008b8a:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <std+0x3c>)
 8008b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b8e:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <std+0x40>)
 8008b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <std+0x44>)
 8008b94:	6224      	str	r4, [r4, #32]
 8008b96:	6323      	str	r3, [r4, #48]	; 0x30
 8008b98:	bd10      	pop	{r4, pc}
 8008b9a:	bf00      	nop
 8008b9c:	080096bd 	.word	0x080096bd
 8008ba0:	080096df 	.word	0x080096df
 8008ba4:	08009717 	.word	0x08009717
 8008ba8:	0800973b 	.word	0x0800973b

08008bac <_cleanup_r>:
 8008bac:	4901      	ldr	r1, [pc, #4]	; (8008bb4 <_cleanup_r+0x8>)
 8008bae:	f000 b8af 	b.w	8008d10 <_fwalk_reent>
 8008bb2:	bf00      	nop
 8008bb4:	080099f1 	.word	0x080099f1

08008bb8 <__sfmoreglue>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	1e4a      	subs	r2, r1, #1
 8008bbc:	2568      	movs	r5, #104	; 0x68
 8008bbe:	4355      	muls	r5, r2
 8008bc0:	460e      	mov	r6, r1
 8008bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bc6:	f000 f8c5 	bl	8008d54 <_malloc_r>
 8008bca:	4604      	mov	r4, r0
 8008bcc:	b140      	cbz	r0, 8008be0 <__sfmoreglue+0x28>
 8008bce:	2100      	movs	r1, #0
 8008bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8008bd4:	300c      	adds	r0, #12
 8008bd6:	60a0      	str	r0, [r4, #8]
 8008bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bdc:	f7ff ff82 	bl	8008ae4 <memset>
 8008be0:	4620      	mov	r0, r4
 8008be2:	bd70      	pop	{r4, r5, r6, pc}

08008be4 <__sfp_lock_acquire>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__sfp_lock_acquire+0x8>)
 8008be6:	f000 b8b3 	b.w	8008d50 <__retarget_lock_acquire_recursive>
 8008bea:	bf00      	nop
 8008bec:	20013618 	.word	0x20013618

08008bf0 <__sfp_lock_release>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__sfp_lock_release+0x8>)
 8008bf2:	f000 b8ae 	b.w	8008d52 <__retarget_lock_release_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20013618 	.word	0x20013618

08008bfc <__sinit_lock_acquire>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__sinit_lock_acquire+0x8>)
 8008bfe:	f000 b8a7 	b.w	8008d50 <__retarget_lock_acquire_recursive>
 8008c02:	bf00      	nop
 8008c04:	20013613 	.word	0x20013613

08008c08 <__sinit_lock_release>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__sinit_lock_release+0x8>)
 8008c0a:	f000 b8a2 	b.w	8008d52 <__retarget_lock_release_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20013613 	.word	0x20013613

08008c14 <__sinit>:
 8008c14:	b510      	push	{r4, lr}
 8008c16:	4604      	mov	r4, r0
 8008c18:	f7ff fff0 	bl	8008bfc <__sinit_lock_acquire>
 8008c1c:	69a3      	ldr	r3, [r4, #24]
 8008c1e:	b11b      	cbz	r3, 8008c28 <__sinit+0x14>
 8008c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c24:	f7ff bff0 	b.w	8008c08 <__sinit_lock_release>
 8008c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <__sinit+0x68>)
 8008c30:	4a13      	ldr	r2, [pc, #76]	; (8008c80 <__sinit+0x6c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c36:	42a3      	cmp	r3, r4
 8008c38:	bf04      	itt	eq
 8008c3a:	2301      	moveq	r3, #1
 8008c3c:	61a3      	streq	r3, [r4, #24]
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 f820 	bl	8008c84 <__sfp>
 8008c44:	6060      	str	r0, [r4, #4]
 8008c46:	4620      	mov	r0, r4
 8008c48:	f000 f81c 	bl	8008c84 <__sfp>
 8008c4c:	60a0      	str	r0, [r4, #8]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 f818 	bl	8008c84 <__sfp>
 8008c54:	2200      	movs	r2, #0
 8008c56:	60e0      	str	r0, [r4, #12]
 8008c58:	2104      	movs	r1, #4
 8008c5a:	6860      	ldr	r0, [r4, #4]
 8008c5c:	f7ff ff82 	bl	8008b64 <std>
 8008c60:	68a0      	ldr	r0, [r4, #8]
 8008c62:	2201      	movs	r2, #1
 8008c64:	2109      	movs	r1, #9
 8008c66:	f7ff ff7d 	bl	8008b64 <std>
 8008c6a:	68e0      	ldr	r0, [r4, #12]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	2112      	movs	r1, #18
 8008c70:	f7ff ff78 	bl	8008b64 <std>
 8008c74:	2301      	movs	r3, #1
 8008c76:	61a3      	str	r3, [r4, #24]
 8008c78:	e7d2      	b.n	8008c20 <__sinit+0xc>
 8008c7a:	bf00      	nop
 8008c7c:	0800a1a4 	.word	0x0800a1a4
 8008c80:	08008bad 	.word	0x08008bad

08008c84 <__sfp>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	4607      	mov	r7, r0
 8008c88:	f7ff ffac 	bl	8008be4 <__sfp_lock_acquire>
 8008c8c:	4b1e      	ldr	r3, [pc, #120]	; (8008d08 <__sfp+0x84>)
 8008c8e:	681e      	ldr	r6, [r3, #0]
 8008c90:	69b3      	ldr	r3, [r6, #24]
 8008c92:	b913      	cbnz	r3, 8008c9a <__sfp+0x16>
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff ffbd 	bl	8008c14 <__sinit>
 8008c9a:	3648      	adds	r6, #72	; 0x48
 8008c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	d503      	bpl.n	8008cac <__sfp+0x28>
 8008ca4:	6833      	ldr	r3, [r6, #0]
 8008ca6:	b30b      	cbz	r3, 8008cec <__sfp+0x68>
 8008ca8:	6836      	ldr	r6, [r6, #0]
 8008caa:	e7f7      	b.n	8008c9c <__sfp+0x18>
 8008cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cb0:	b9d5      	cbnz	r5, 8008ce8 <__sfp+0x64>
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <__sfp+0x88>)
 8008cb4:	60e3      	str	r3, [r4, #12]
 8008cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cba:	6665      	str	r5, [r4, #100]	; 0x64
 8008cbc:	f000 f847 	bl	8008d4e <__retarget_lock_init_recursive>
 8008cc0:	f7ff ff96 	bl	8008bf0 <__sfp_lock_release>
 8008cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ccc:	6025      	str	r5, [r4, #0]
 8008cce:	61a5      	str	r5, [r4, #24]
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cd8:	f7ff ff04 	bl	8008ae4 <memset>
 8008cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce8:	3468      	adds	r4, #104	; 0x68
 8008cea:	e7d9      	b.n	8008ca0 <__sfp+0x1c>
 8008cec:	2104      	movs	r1, #4
 8008cee:	4638      	mov	r0, r7
 8008cf0:	f7ff ff62 	bl	8008bb8 <__sfmoreglue>
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	6030      	str	r0, [r6, #0]
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d1d5      	bne.n	8008ca8 <__sfp+0x24>
 8008cfc:	f7ff ff78 	bl	8008bf0 <__sfp_lock_release>
 8008d00:	230c      	movs	r3, #12
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	e7ee      	b.n	8008ce4 <__sfp+0x60>
 8008d06:	bf00      	nop
 8008d08:	0800a1a4 	.word	0x0800a1a4
 8008d0c:	ffff0001 	.word	0xffff0001

08008d10 <_fwalk_reent>:
 8008d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d14:	4606      	mov	r6, r0
 8008d16:	4688      	mov	r8, r1
 8008d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d1c:	2700      	movs	r7, #0
 8008d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d22:	f1b9 0901 	subs.w	r9, r9, #1
 8008d26:	d505      	bpl.n	8008d34 <_fwalk_reent+0x24>
 8008d28:	6824      	ldr	r4, [r4, #0]
 8008d2a:	2c00      	cmp	r4, #0
 8008d2c:	d1f7      	bne.n	8008d1e <_fwalk_reent+0xe>
 8008d2e:	4638      	mov	r0, r7
 8008d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d34:	89ab      	ldrh	r3, [r5, #12]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d907      	bls.n	8008d4a <_fwalk_reent+0x3a>
 8008d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	d003      	beq.n	8008d4a <_fwalk_reent+0x3a>
 8008d42:	4629      	mov	r1, r5
 8008d44:	4630      	mov	r0, r6
 8008d46:	47c0      	blx	r8
 8008d48:	4307      	orrs	r7, r0
 8008d4a:	3568      	adds	r5, #104	; 0x68
 8008d4c:	e7e9      	b.n	8008d22 <_fwalk_reent+0x12>

08008d4e <__retarget_lock_init_recursive>:
 8008d4e:	4770      	bx	lr

08008d50 <__retarget_lock_acquire_recursive>:
 8008d50:	4770      	bx	lr

08008d52 <__retarget_lock_release_recursive>:
 8008d52:	4770      	bx	lr

08008d54 <_malloc_r>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	1ccd      	adds	r5, r1, #3
 8008d58:	f025 0503 	bic.w	r5, r5, #3
 8008d5c:	3508      	adds	r5, #8
 8008d5e:	2d0c      	cmp	r5, #12
 8008d60:	bf38      	it	cc
 8008d62:	250c      	movcc	r5, #12
 8008d64:	2d00      	cmp	r5, #0
 8008d66:	4606      	mov	r6, r0
 8008d68:	db01      	blt.n	8008d6e <_malloc_r+0x1a>
 8008d6a:	42a9      	cmp	r1, r5
 8008d6c:	d903      	bls.n	8008d76 <_malloc_r+0x22>
 8008d6e:	230c      	movs	r3, #12
 8008d70:	6033      	str	r3, [r6, #0]
 8008d72:	2000      	movs	r0, #0
 8008d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d76:	f000 ff07 	bl	8009b88 <__malloc_lock>
 8008d7a:	4921      	ldr	r1, [pc, #132]	; (8008e00 <_malloc_r+0xac>)
 8008d7c:	680a      	ldr	r2, [r1, #0]
 8008d7e:	4614      	mov	r4, r2
 8008d80:	b99c      	cbnz	r4, 8008daa <_malloc_r+0x56>
 8008d82:	4f20      	ldr	r7, [pc, #128]	; (8008e04 <_malloc_r+0xb0>)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	b923      	cbnz	r3, 8008d92 <_malloc_r+0x3e>
 8008d88:	4621      	mov	r1, r4
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f000 fc86 	bl	800969c <_sbrk_r>
 8008d90:	6038      	str	r0, [r7, #0]
 8008d92:	4629      	mov	r1, r5
 8008d94:	4630      	mov	r0, r6
 8008d96:	f000 fc81 	bl	800969c <_sbrk_r>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	d123      	bne.n	8008de6 <_malloc_r+0x92>
 8008d9e:	230c      	movs	r3, #12
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	4630      	mov	r0, r6
 8008da4:	f000 fef6 	bl	8009b94 <__malloc_unlock>
 8008da8:	e7e3      	b.n	8008d72 <_malloc_r+0x1e>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	1b5b      	subs	r3, r3, r5
 8008dae:	d417      	bmi.n	8008de0 <_malloc_r+0x8c>
 8008db0:	2b0b      	cmp	r3, #11
 8008db2:	d903      	bls.n	8008dbc <_malloc_r+0x68>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	441c      	add	r4, r3
 8008db8:	6025      	str	r5, [r4, #0]
 8008dba:	e004      	b.n	8008dc6 <_malloc_r+0x72>
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	42a2      	cmp	r2, r4
 8008dc0:	bf0c      	ite	eq
 8008dc2:	600b      	streq	r3, [r1, #0]
 8008dc4:	6053      	strne	r3, [r2, #4]
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f000 fee4 	bl	8009b94 <__malloc_unlock>
 8008dcc:	f104 000b 	add.w	r0, r4, #11
 8008dd0:	1d23      	adds	r3, r4, #4
 8008dd2:	f020 0007 	bic.w	r0, r0, #7
 8008dd6:	1ac2      	subs	r2, r0, r3
 8008dd8:	d0cc      	beq.n	8008d74 <_malloc_r+0x20>
 8008dda:	1a1b      	subs	r3, r3, r0
 8008ddc:	50a3      	str	r3, [r4, r2]
 8008dde:	e7c9      	b.n	8008d74 <_malloc_r+0x20>
 8008de0:	4622      	mov	r2, r4
 8008de2:	6864      	ldr	r4, [r4, #4]
 8008de4:	e7cc      	b.n	8008d80 <_malloc_r+0x2c>
 8008de6:	1cc4      	adds	r4, r0, #3
 8008de8:	f024 0403 	bic.w	r4, r4, #3
 8008dec:	42a0      	cmp	r0, r4
 8008dee:	d0e3      	beq.n	8008db8 <_malloc_r+0x64>
 8008df0:	1a21      	subs	r1, r4, r0
 8008df2:	4630      	mov	r0, r6
 8008df4:	f000 fc52 	bl	800969c <_sbrk_r>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d1dd      	bne.n	8008db8 <_malloc_r+0x64>
 8008dfc:	e7cf      	b.n	8008d9e <_malloc_r+0x4a>
 8008dfe:	bf00      	nop
 8008e00:	20013438 	.word	0x20013438
 8008e04:	2001343c 	.word	0x2001343c

08008e08 <__ssputs_r>:
 8008e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e0c:	688e      	ldr	r6, [r1, #8]
 8008e0e:	429e      	cmp	r6, r3
 8008e10:	4682      	mov	sl, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	4690      	mov	r8, r2
 8008e16:	461f      	mov	r7, r3
 8008e18:	d838      	bhi.n	8008e8c <__ssputs_r+0x84>
 8008e1a:	898a      	ldrh	r2, [r1, #12]
 8008e1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e20:	d032      	beq.n	8008e88 <__ssputs_r+0x80>
 8008e22:	6825      	ldr	r5, [r4, #0]
 8008e24:	6909      	ldr	r1, [r1, #16]
 8008e26:	eba5 0901 	sub.w	r9, r5, r1
 8008e2a:	6965      	ldr	r5, [r4, #20]
 8008e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e34:	3301      	adds	r3, #1
 8008e36:	444b      	add	r3, r9
 8008e38:	106d      	asrs	r5, r5, #1
 8008e3a:	429d      	cmp	r5, r3
 8008e3c:	bf38      	it	cc
 8008e3e:	461d      	movcc	r5, r3
 8008e40:	0553      	lsls	r3, r2, #21
 8008e42:	d531      	bpl.n	8008ea8 <__ssputs_r+0xa0>
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7ff ff85 	bl	8008d54 <_malloc_r>
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	b950      	cbnz	r0, 8008e64 <__ssputs_r+0x5c>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	f8ca 3000 	str.w	r3, [sl]
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e64:	6921      	ldr	r1, [r4, #16]
 8008e66:	464a      	mov	r2, r9
 8008e68:	f7ff fe2e 	bl	8008ac8 <memcpy>
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	6126      	str	r6, [r4, #16]
 8008e7a:	6165      	str	r5, [r4, #20]
 8008e7c:	444e      	add	r6, r9
 8008e7e:	eba5 0509 	sub.w	r5, r5, r9
 8008e82:	6026      	str	r6, [r4, #0]
 8008e84:	60a5      	str	r5, [r4, #8]
 8008e86:	463e      	mov	r6, r7
 8008e88:	42be      	cmp	r6, r7
 8008e8a:	d900      	bls.n	8008e8e <__ssputs_r+0x86>
 8008e8c:	463e      	mov	r6, r7
 8008e8e:	4632      	mov	r2, r6
 8008e90:	6820      	ldr	r0, [r4, #0]
 8008e92:	4641      	mov	r1, r8
 8008e94:	f000 fe5e 	bl	8009b54 <memmove>
 8008e98:	68a3      	ldr	r3, [r4, #8]
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	1b9b      	subs	r3, r3, r6
 8008e9e:	4432      	add	r2, r6
 8008ea0:	60a3      	str	r3, [r4, #8]
 8008ea2:	6022      	str	r2, [r4, #0]
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e7db      	b.n	8008e60 <__ssputs_r+0x58>
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	f000 fec9 	bl	8009c40 <_realloc_r>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d1e1      	bne.n	8008e78 <__ssputs_r+0x70>
 8008eb4:	6921      	ldr	r1, [r4, #16]
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	f000 fe72 	bl	8009ba0 <_free_r>
 8008ebc:	e7c7      	b.n	8008e4e <__ssputs_r+0x46>
	...

08008ec0 <_svfiprintf_r>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	4698      	mov	r8, r3
 8008ec6:	898b      	ldrh	r3, [r1, #12]
 8008ec8:	061b      	lsls	r3, r3, #24
 8008eca:	b09d      	sub	sp, #116	; 0x74
 8008ecc:	4607      	mov	r7, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	d50e      	bpl.n	8008ef2 <_svfiprintf_r+0x32>
 8008ed4:	690b      	ldr	r3, [r1, #16]
 8008ed6:	b963      	cbnz	r3, 8008ef2 <_svfiprintf_r+0x32>
 8008ed8:	2140      	movs	r1, #64	; 0x40
 8008eda:	f7ff ff3b 	bl	8008d54 <_malloc_r>
 8008ede:	6028      	str	r0, [r5, #0]
 8008ee0:	6128      	str	r0, [r5, #16]
 8008ee2:	b920      	cbnz	r0, 8008eee <_svfiprintf_r+0x2e>
 8008ee4:	230c      	movs	r3, #12
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eec:	e0d1      	b.n	8009092 <_svfiprintf_r+0x1d2>
 8008eee:	2340      	movs	r3, #64	; 0x40
 8008ef0:	616b      	str	r3, [r5, #20]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef6:	2320      	movs	r3, #32
 8008ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f00:	2330      	movs	r3, #48	; 0x30
 8008f02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090ac <_svfiprintf_r+0x1ec>
 8008f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f0a:	f04f 0901 	mov.w	r9, #1
 8008f0e:	4623      	mov	r3, r4
 8008f10:	469a      	mov	sl, r3
 8008f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f16:	b10a      	cbz	r2, 8008f1c <_svfiprintf_r+0x5c>
 8008f18:	2a25      	cmp	r2, #37	; 0x25
 8008f1a:	d1f9      	bne.n	8008f10 <_svfiprintf_r+0x50>
 8008f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f20:	d00b      	beq.n	8008f3a <_svfiprintf_r+0x7a>
 8008f22:	465b      	mov	r3, fp
 8008f24:	4622      	mov	r2, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ff6d 	bl	8008e08 <__ssputs_r>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f000 80aa 	beq.w	8009088 <_svfiprintf_r+0x1c8>
 8008f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f36:	445a      	add	r2, fp
 8008f38:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 80a2 	beq.w	8009088 <_svfiprintf_r+0x1c8>
 8008f44:	2300      	movs	r3, #0
 8008f46:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f4e:	f10a 0a01 	add.w	sl, sl, #1
 8008f52:	9304      	str	r3, [sp, #16]
 8008f54:	9307      	str	r3, [sp, #28]
 8008f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f5c:	4654      	mov	r4, sl
 8008f5e:	2205      	movs	r2, #5
 8008f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f64:	4851      	ldr	r0, [pc, #324]	; (80090ac <_svfiprintf_r+0x1ec>)
 8008f66:	f7f7 f9b3 	bl	80002d0 <memchr>
 8008f6a:	9a04      	ldr	r2, [sp, #16]
 8008f6c:	b9d8      	cbnz	r0, 8008fa6 <_svfiprintf_r+0xe6>
 8008f6e:	06d0      	lsls	r0, r2, #27
 8008f70:	bf44      	itt	mi
 8008f72:	2320      	movmi	r3, #32
 8008f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f78:	0711      	lsls	r1, r2, #28
 8008f7a:	bf44      	itt	mi
 8008f7c:	232b      	movmi	r3, #43	; 0x2b
 8008f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f82:	f89a 3000 	ldrb.w	r3, [sl]
 8008f86:	2b2a      	cmp	r3, #42	; 0x2a
 8008f88:	d015      	beq.n	8008fb6 <_svfiprintf_r+0xf6>
 8008f8a:	9a07      	ldr	r2, [sp, #28]
 8008f8c:	4654      	mov	r4, sl
 8008f8e:	2000      	movs	r0, #0
 8008f90:	f04f 0c0a 	mov.w	ip, #10
 8008f94:	4621      	mov	r1, r4
 8008f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f9a:	3b30      	subs	r3, #48	; 0x30
 8008f9c:	2b09      	cmp	r3, #9
 8008f9e:	d94e      	bls.n	800903e <_svfiprintf_r+0x17e>
 8008fa0:	b1b0      	cbz	r0, 8008fd0 <_svfiprintf_r+0x110>
 8008fa2:	9207      	str	r2, [sp, #28]
 8008fa4:	e014      	b.n	8008fd0 <_svfiprintf_r+0x110>
 8008fa6:	eba0 0308 	sub.w	r3, r0, r8
 8008faa:	fa09 f303 	lsl.w	r3, r9, r3
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	46a2      	mov	sl, r4
 8008fb4:	e7d2      	b.n	8008f5c <_svfiprintf_r+0x9c>
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	1d19      	adds	r1, r3, #4
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	9103      	str	r1, [sp, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfbb      	ittet	lt
 8008fc2:	425b      	neglt	r3, r3
 8008fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fc8:	9307      	strge	r3, [sp, #28]
 8008fca:	9307      	strlt	r3, [sp, #28]
 8008fcc:	bfb8      	it	lt
 8008fce:	9204      	strlt	r2, [sp, #16]
 8008fd0:	7823      	ldrb	r3, [r4, #0]
 8008fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fd4:	d10c      	bne.n	8008ff0 <_svfiprintf_r+0x130>
 8008fd6:	7863      	ldrb	r3, [r4, #1]
 8008fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fda:	d135      	bne.n	8009048 <_svfiprintf_r+0x188>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	1d1a      	adds	r2, r3, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	9203      	str	r2, [sp, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfb8      	it	lt
 8008fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fec:	3402      	adds	r4, #2
 8008fee:	9305      	str	r3, [sp, #20]
 8008ff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090bc <_svfiprintf_r+0x1fc>
 8008ff4:	7821      	ldrb	r1, [r4, #0]
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	f7f7 f969 	bl	80002d0 <memchr>
 8008ffe:	b140      	cbz	r0, 8009012 <_svfiprintf_r+0x152>
 8009000:	2340      	movs	r3, #64	; 0x40
 8009002:	eba0 000a 	sub.w	r0, r0, sl
 8009006:	fa03 f000 	lsl.w	r0, r3, r0
 800900a:	9b04      	ldr	r3, [sp, #16]
 800900c:	4303      	orrs	r3, r0
 800900e:	3401      	adds	r4, #1
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009016:	4826      	ldr	r0, [pc, #152]	; (80090b0 <_svfiprintf_r+0x1f0>)
 8009018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800901c:	2206      	movs	r2, #6
 800901e:	f7f7 f957 	bl	80002d0 <memchr>
 8009022:	2800      	cmp	r0, #0
 8009024:	d038      	beq.n	8009098 <_svfiprintf_r+0x1d8>
 8009026:	4b23      	ldr	r3, [pc, #140]	; (80090b4 <_svfiprintf_r+0x1f4>)
 8009028:	bb1b      	cbnz	r3, 8009072 <_svfiprintf_r+0x1b2>
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	3307      	adds	r3, #7
 800902e:	f023 0307 	bic.w	r3, r3, #7
 8009032:	3308      	adds	r3, #8
 8009034:	9303      	str	r3, [sp, #12]
 8009036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009038:	4433      	add	r3, r6
 800903a:	9309      	str	r3, [sp, #36]	; 0x24
 800903c:	e767      	b.n	8008f0e <_svfiprintf_r+0x4e>
 800903e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009042:	460c      	mov	r4, r1
 8009044:	2001      	movs	r0, #1
 8009046:	e7a5      	b.n	8008f94 <_svfiprintf_r+0xd4>
 8009048:	2300      	movs	r3, #0
 800904a:	3401      	adds	r4, #1
 800904c:	9305      	str	r3, [sp, #20]
 800904e:	4619      	mov	r1, r3
 8009050:	f04f 0c0a 	mov.w	ip, #10
 8009054:	4620      	mov	r0, r4
 8009056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800905a:	3a30      	subs	r2, #48	; 0x30
 800905c:	2a09      	cmp	r2, #9
 800905e:	d903      	bls.n	8009068 <_svfiprintf_r+0x1a8>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0c5      	beq.n	8008ff0 <_svfiprintf_r+0x130>
 8009064:	9105      	str	r1, [sp, #20]
 8009066:	e7c3      	b.n	8008ff0 <_svfiprintf_r+0x130>
 8009068:	fb0c 2101 	mla	r1, ip, r1, r2
 800906c:	4604      	mov	r4, r0
 800906e:	2301      	movs	r3, #1
 8009070:	e7f0      	b.n	8009054 <_svfiprintf_r+0x194>
 8009072:	ab03      	add	r3, sp, #12
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	462a      	mov	r2, r5
 8009078:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <_svfiprintf_r+0x1f8>)
 800907a:	a904      	add	r1, sp, #16
 800907c:	4638      	mov	r0, r7
 800907e:	f3af 8000 	nop.w
 8009082:	1c42      	adds	r2, r0, #1
 8009084:	4606      	mov	r6, r0
 8009086:	d1d6      	bne.n	8009036 <_svfiprintf_r+0x176>
 8009088:	89ab      	ldrh	r3, [r5, #12]
 800908a:	065b      	lsls	r3, r3, #25
 800908c:	f53f af2c 	bmi.w	8008ee8 <_svfiprintf_r+0x28>
 8009090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009092:	b01d      	add	sp, #116	; 0x74
 8009094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009098:	ab03      	add	r3, sp, #12
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	462a      	mov	r2, r5
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <_svfiprintf_r+0x1f8>)
 80090a0:	a904      	add	r1, sp, #16
 80090a2:	4638      	mov	r0, r7
 80090a4:	f000 f9d4 	bl	8009450 <_printf_i>
 80090a8:	e7eb      	b.n	8009082 <_svfiprintf_r+0x1c2>
 80090aa:	bf00      	nop
 80090ac:	0800a208 	.word	0x0800a208
 80090b0:	0800a212 	.word	0x0800a212
 80090b4:	00000000 	.word	0x00000000
 80090b8:	08008e09 	.word	0x08008e09
 80090bc:	0800a20e 	.word	0x0800a20e

080090c0 <__sfputc_r>:
 80090c0:	6893      	ldr	r3, [r2, #8]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	b410      	push	{r4}
 80090c8:	6093      	str	r3, [r2, #8]
 80090ca:	da08      	bge.n	80090de <__sfputc_r+0x1e>
 80090cc:	6994      	ldr	r4, [r2, #24]
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	db01      	blt.n	80090d6 <__sfputc_r+0x16>
 80090d2:	290a      	cmp	r1, #10
 80090d4:	d103      	bne.n	80090de <__sfputc_r+0x1e>
 80090d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090da:	f000 bb33 	b.w	8009744 <__swbuf_r>
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	1c58      	adds	r0, r3, #1
 80090e2:	6010      	str	r0, [r2, #0]
 80090e4:	7019      	strb	r1, [r3, #0]
 80090e6:	4608      	mov	r0, r1
 80090e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <__sfputs_r>:
 80090ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f0:	4606      	mov	r6, r0
 80090f2:	460f      	mov	r7, r1
 80090f4:	4614      	mov	r4, r2
 80090f6:	18d5      	adds	r5, r2, r3
 80090f8:	42ac      	cmp	r4, r5
 80090fa:	d101      	bne.n	8009100 <__sfputs_r+0x12>
 80090fc:	2000      	movs	r0, #0
 80090fe:	e007      	b.n	8009110 <__sfputs_r+0x22>
 8009100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009104:	463a      	mov	r2, r7
 8009106:	4630      	mov	r0, r6
 8009108:	f7ff ffda 	bl	80090c0 <__sfputc_r>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d1f3      	bne.n	80090f8 <__sfputs_r+0xa>
 8009110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009114 <_vfiprintf_r>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	460d      	mov	r5, r1
 800911a:	b09d      	sub	sp, #116	; 0x74
 800911c:	4614      	mov	r4, r2
 800911e:	4698      	mov	r8, r3
 8009120:	4606      	mov	r6, r0
 8009122:	b118      	cbz	r0, 800912c <_vfiprintf_r+0x18>
 8009124:	6983      	ldr	r3, [r0, #24]
 8009126:	b90b      	cbnz	r3, 800912c <_vfiprintf_r+0x18>
 8009128:	f7ff fd74 	bl	8008c14 <__sinit>
 800912c:	4b89      	ldr	r3, [pc, #548]	; (8009354 <_vfiprintf_r+0x240>)
 800912e:	429d      	cmp	r5, r3
 8009130:	d11b      	bne.n	800916a <_vfiprintf_r+0x56>
 8009132:	6875      	ldr	r5, [r6, #4]
 8009134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009136:	07d9      	lsls	r1, r3, #31
 8009138:	d405      	bmi.n	8009146 <_vfiprintf_r+0x32>
 800913a:	89ab      	ldrh	r3, [r5, #12]
 800913c:	059a      	lsls	r2, r3, #22
 800913e:	d402      	bmi.n	8009146 <_vfiprintf_r+0x32>
 8009140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009142:	f7ff fe05 	bl	8008d50 <__retarget_lock_acquire_recursive>
 8009146:	89ab      	ldrh	r3, [r5, #12]
 8009148:	071b      	lsls	r3, r3, #28
 800914a:	d501      	bpl.n	8009150 <_vfiprintf_r+0x3c>
 800914c:	692b      	ldr	r3, [r5, #16]
 800914e:	b9eb      	cbnz	r3, 800918c <_vfiprintf_r+0x78>
 8009150:	4629      	mov	r1, r5
 8009152:	4630      	mov	r0, r6
 8009154:	f000 fb48 	bl	80097e8 <__swsetup_r>
 8009158:	b1c0      	cbz	r0, 800918c <_vfiprintf_r+0x78>
 800915a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915c:	07dc      	lsls	r4, r3, #31
 800915e:	d50e      	bpl.n	800917e <_vfiprintf_r+0x6a>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	b01d      	add	sp, #116	; 0x74
 8009166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916a:	4b7b      	ldr	r3, [pc, #492]	; (8009358 <_vfiprintf_r+0x244>)
 800916c:	429d      	cmp	r5, r3
 800916e:	d101      	bne.n	8009174 <_vfiprintf_r+0x60>
 8009170:	68b5      	ldr	r5, [r6, #8]
 8009172:	e7df      	b.n	8009134 <_vfiprintf_r+0x20>
 8009174:	4b79      	ldr	r3, [pc, #484]	; (800935c <_vfiprintf_r+0x248>)
 8009176:	429d      	cmp	r5, r3
 8009178:	bf08      	it	eq
 800917a:	68f5      	ldreq	r5, [r6, #12]
 800917c:	e7da      	b.n	8009134 <_vfiprintf_r+0x20>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	0598      	lsls	r0, r3, #22
 8009182:	d4ed      	bmi.n	8009160 <_vfiprintf_r+0x4c>
 8009184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009186:	f7ff fde4 	bl	8008d52 <__retarget_lock_release_recursive>
 800918a:	e7e9      	b.n	8009160 <_vfiprintf_r+0x4c>
 800918c:	2300      	movs	r3, #0
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	2320      	movs	r3, #32
 8009192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009196:	f8cd 800c 	str.w	r8, [sp, #12]
 800919a:	2330      	movs	r3, #48	; 0x30
 800919c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009360 <_vfiprintf_r+0x24c>
 80091a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a4:	f04f 0901 	mov.w	r9, #1
 80091a8:	4623      	mov	r3, r4
 80091aa:	469a      	mov	sl, r3
 80091ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b0:	b10a      	cbz	r2, 80091b6 <_vfiprintf_r+0xa2>
 80091b2:	2a25      	cmp	r2, #37	; 0x25
 80091b4:	d1f9      	bne.n	80091aa <_vfiprintf_r+0x96>
 80091b6:	ebba 0b04 	subs.w	fp, sl, r4
 80091ba:	d00b      	beq.n	80091d4 <_vfiprintf_r+0xc0>
 80091bc:	465b      	mov	r3, fp
 80091be:	4622      	mov	r2, r4
 80091c0:	4629      	mov	r1, r5
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ff93 	bl	80090ee <__sfputs_r>
 80091c8:	3001      	adds	r0, #1
 80091ca:	f000 80aa 	beq.w	8009322 <_vfiprintf_r+0x20e>
 80091ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d0:	445a      	add	r2, fp
 80091d2:	9209      	str	r2, [sp, #36]	; 0x24
 80091d4:	f89a 3000 	ldrb.w	r3, [sl]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 80a2 	beq.w	8009322 <_vfiprintf_r+0x20e>
 80091de:	2300      	movs	r3, #0
 80091e0:	f04f 32ff 	mov.w	r2, #4294967295
 80091e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091e8:	f10a 0a01 	add.w	sl, sl, #1
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	9307      	str	r3, [sp, #28]
 80091f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f4:	931a      	str	r3, [sp, #104]	; 0x68
 80091f6:	4654      	mov	r4, sl
 80091f8:	2205      	movs	r2, #5
 80091fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fe:	4858      	ldr	r0, [pc, #352]	; (8009360 <_vfiprintf_r+0x24c>)
 8009200:	f7f7 f866 	bl	80002d0 <memchr>
 8009204:	9a04      	ldr	r2, [sp, #16]
 8009206:	b9d8      	cbnz	r0, 8009240 <_vfiprintf_r+0x12c>
 8009208:	06d1      	lsls	r1, r2, #27
 800920a:	bf44      	itt	mi
 800920c:	2320      	movmi	r3, #32
 800920e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009212:	0713      	lsls	r3, r2, #28
 8009214:	bf44      	itt	mi
 8009216:	232b      	movmi	r3, #43	; 0x2b
 8009218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921c:	f89a 3000 	ldrb.w	r3, [sl]
 8009220:	2b2a      	cmp	r3, #42	; 0x2a
 8009222:	d015      	beq.n	8009250 <_vfiprintf_r+0x13c>
 8009224:	9a07      	ldr	r2, [sp, #28]
 8009226:	4654      	mov	r4, sl
 8009228:	2000      	movs	r0, #0
 800922a:	f04f 0c0a 	mov.w	ip, #10
 800922e:	4621      	mov	r1, r4
 8009230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009234:	3b30      	subs	r3, #48	; 0x30
 8009236:	2b09      	cmp	r3, #9
 8009238:	d94e      	bls.n	80092d8 <_vfiprintf_r+0x1c4>
 800923a:	b1b0      	cbz	r0, 800926a <_vfiprintf_r+0x156>
 800923c:	9207      	str	r2, [sp, #28]
 800923e:	e014      	b.n	800926a <_vfiprintf_r+0x156>
 8009240:	eba0 0308 	sub.w	r3, r0, r8
 8009244:	fa09 f303 	lsl.w	r3, r9, r3
 8009248:	4313      	orrs	r3, r2
 800924a:	9304      	str	r3, [sp, #16]
 800924c:	46a2      	mov	sl, r4
 800924e:	e7d2      	b.n	80091f6 <_vfiprintf_r+0xe2>
 8009250:	9b03      	ldr	r3, [sp, #12]
 8009252:	1d19      	adds	r1, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	9103      	str	r1, [sp, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	bfbb      	ittet	lt
 800925c:	425b      	neglt	r3, r3
 800925e:	f042 0202 	orrlt.w	r2, r2, #2
 8009262:	9307      	strge	r3, [sp, #28]
 8009264:	9307      	strlt	r3, [sp, #28]
 8009266:	bfb8      	it	lt
 8009268:	9204      	strlt	r2, [sp, #16]
 800926a:	7823      	ldrb	r3, [r4, #0]
 800926c:	2b2e      	cmp	r3, #46	; 0x2e
 800926e:	d10c      	bne.n	800928a <_vfiprintf_r+0x176>
 8009270:	7863      	ldrb	r3, [r4, #1]
 8009272:	2b2a      	cmp	r3, #42	; 0x2a
 8009274:	d135      	bne.n	80092e2 <_vfiprintf_r+0x1ce>
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	1d1a      	adds	r2, r3, #4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	9203      	str	r2, [sp, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfb8      	it	lt
 8009282:	f04f 33ff 	movlt.w	r3, #4294967295
 8009286:	3402      	adds	r4, #2
 8009288:	9305      	str	r3, [sp, #20]
 800928a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009370 <_vfiprintf_r+0x25c>
 800928e:	7821      	ldrb	r1, [r4, #0]
 8009290:	2203      	movs	r2, #3
 8009292:	4650      	mov	r0, sl
 8009294:	f7f7 f81c 	bl	80002d0 <memchr>
 8009298:	b140      	cbz	r0, 80092ac <_vfiprintf_r+0x198>
 800929a:	2340      	movs	r3, #64	; 0x40
 800929c:	eba0 000a 	sub.w	r0, r0, sl
 80092a0:	fa03 f000 	lsl.w	r0, r3, r0
 80092a4:	9b04      	ldr	r3, [sp, #16]
 80092a6:	4303      	orrs	r3, r0
 80092a8:	3401      	adds	r4, #1
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b0:	482c      	ldr	r0, [pc, #176]	; (8009364 <_vfiprintf_r+0x250>)
 80092b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092b6:	2206      	movs	r2, #6
 80092b8:	f7f7 f80a 	bl	80002d0 <memchr>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d03f      	beq.n	8009340 <_vfiprintf_r+0x22c>
 80092c0:	4b29      	ldr	r3, [pc, #164]	; (8009368 <_vfiprintf_r+0x254>)
 80092c2:	bb1b      	cbnz	r3, 800930c <_vfiprintf_r+0x1f8>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	3307      	adds	r3, #7
 80092c8:	f023 0307 	bic.w	r3, r3, #7
 80092cc:	3308      	adds	r3, #8
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d2:	443b      	add	r3, r7
 80092d4:	9309      	str	r3, [sp, #36]	; 0x24
 80092d6:	e767      	b.n	80091a8 <_vfiprintf_r+0x94>
 80092d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092dc:	460c      	mov	r4, r1
 80092de:	2001      	movs	r0, #1
 80092e0:	e7a5      	b.n	800922e <_vfiprintf_r+0x11a>
 80092e2:	2300      	movs	r3, #0
 80092e4:	3401      	adds	r4, #1
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f04f 0c0a 	mov.w	ip, #10
 80092ee:	4620      	mov	r0, r4
 80092f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f4:	3a30      	subs	r2, #48	; 0x30
 80092f6:	2a09      	cmp	r2, #9
 80092f8:	d903      	bls.n	8009302 <_vfiprintf_r+0x1ee>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0c5      	beq.n	800928a <_vfiprintf_r+0x176>
 80092fe:	9105      	str	r1, [sp, #20]
 8009300:	e7c3      	b.n	800928a <_vfiprintf_r+0x176>
 8009302:	fb0c 2101 	mla	r1, ip, r1, r2
 8009306:	4604      	mov	r4, r0
 8009308:	2301      	movs	r3, #1
 800930a:	e7f0      	b.n	80092ee <_vfiprintf_r+0x1da>
 800930c:	ab03      	add	r3, sp, #12
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	462a      	mov	r2, r5
 8009312:	4b16      	ldr	r3, [pc, #88]	; (800936c <_vfiprintf_r+0x258>)
 8009314:	a904      	add	r1, sp, #16
 8009316:	4630      	mov	r0, r6
 8009318:	f3af 8000 	nop.w
 800931c:	4607      	mov	r7, r0
 800931e:	1c78      	adds	r0, r7, #1
 8009320:	d1d6      	bne.n	80092d0 <_vfiprintf_r+0x1bc>
 8009322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009324:	07d9      	lsls	r1, r3, #31
 8009326:	d405      	bmi.n	8009334 <_vfiprintf_r+0x220>
 8009328:	89ab      	ldrh	r3, [r5, #12]
 800932a:	059a      	lsls	r2, r3, #22
 800932c:	d402      	bmi.n	8009334 <_vfiprintf_r+0x220>
 800932e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009330:	f7ff fd0f 	bl	8008d52 <__retarget_lock_release_recursive>
 8009334:	89ab      	ldrh	r3, [r5, #12]
 8009336:	065b      	lsls	r3, r3, #25
 8009338:	f53f af12 	bmi.w	8009160 <_vfiprintf_r+0x4c>
 800933c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800933e:	e711      	b.n	8009164 <_vfiprintf_r+0x50>
 8009340:	ab03      	add	r3, sp, #12
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	462a      	mov	r2, r5
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <_vfiprintf_r+0x258>)
 8009348:	a904      	add	r1, sp, #16
 800934a:	4630      	mov	r0, r6
 800934c:	f000 f880 	bl	8009450 <_printf_i>
 8009350:	e7e4      	b.n	800931c <_vfiprintf_r+0x208>
 8009352:	bf00      	nop
 8009354:	0800a1c8 	.word	0x0800a1c8
 8009358:	0800a1e8 	.word	0x0800a1e8
 800935c:	0800a1a8 	.word	0x0800a1a8
 8009360:	0800a208 	.word	0x0800a208
 8009364:	0800a212 	.word	0x0800a212
 8009368:	00000000 	.word	0x00000000
 800936c:	080090ef 	.word	0x080090ef
 8009370:	0800a20e 	.word	0x0800a20e

08009374 <_printf_common>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	4616      	mov	r6, r2
 800937a:	4699      	mov	r9, r3
 800937c:	688a      	ldr	r2, [r1, #8]
 800937e:	690b      	ldr	r3, [r1, #16]
 8009380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009384:	4293      	cmp	r3, r2
 8009386:	bfb8      	it	lt
 8009388:	4613      	movlt	r3, r2
 800938a:	6033      	str	r3, [r6, #0]
 800938c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009390:	4607      	mov	r7, r0
 8009392:	460c      	mov	r4, r1
 8009394:	b10a      	cbz	r2, 800939a <_printf_common+0x26>
 8009396:	3301      	adds	r3, #1
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	0699      	lsls	r1, r3, #26
 800939e:	bf42      	ittt	mi
 80093a0:	6833      	ldrmi	r3, [r6, #0]
 80093a2:	3302      	addmi	r3, #2
 80093a4:	6033      	strmi	r3, [r6, #0]
 80093a6:	6825      	ldr	r5, [r4, #0]
 80093a8:	f015 0506 	ands.w	r5, r5, #6
 80093ac:	d106      	bne.n	80093bc <_printf_common+0x48>
 80093ae:	f104 0a19 	add.w	sl, r4, #25
 80093b2:	68e3      	ldr	r3, [r4, #12]
 80093b4:	6832      	ldr	r2, [r6, #0]
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	42ab      	cmp	r3, r5
 80093ba:	dc26      	bgt.n	800940a <_printf_common+0x96>
 80093bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093c0:	1e13      	subs	r3, r2, #0
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	bf18      	it	ne
 80093c6:	2301      	movne	r3, #1
 80093c8:	0692      	lsls	r2, r2, #26
 80093ca:	d42b      	bmi.n	8009424 <_printf_common+0xb0>
 80093cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093d0:	4649      	mov	r1, r9
 80093d2:	4638      	mov	r0, r7
 80093d4:	47c0      	blx	r8
 80093d6:	3001      	adds	r0, #1
 80093d8:	d01e      	beq.n	8009418 <_printf_common+0xa4>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	68e5      	ldr	r5, [r4, #12]
 80093de:	6832      	ldr	r2, [r6, #0]
 80093e0:	f003 0306 	and.w	r3, r3, #6
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	bf08      	it	eq
 80093e8:	1aad      	subeq	r5, r5, r2
 80093ea:	68a3      	ldr	r3, [r4, #8]
 80093ec:	6922      	ldr	r2, [r4, #16]
 80093ee:	bf0c      	ite	eq
 80093f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093f4:	2500      	movne	r5, #0
 80093f6:	4293      	cmp	r3, r2
 80093f8:	bfc4      	itt	gt
 80093fa:	1a9b      	subgt	r3, r3, r2
 80093fc:	18ed      	addgt	r5, r5, r3
 80093fe:	2600      	movs	r6, #0
 8009400:	341a      	adds	r4, #26
 8009402:	42b5      	cmp	r5, r6
 8009404:	d11a      	bne.n	800943c <_printf_common+0xc8>
 8009406:	2000      	movs	r0, #0
 8009408:	e008      	b.n	800941c <_printf_common+0xa8>
 800940a:	2301      	movs	r3, #1
 800940c:	4652      	mov	r2, sl
 800940e:	4649      	mov	r1, r9
 8009410:	4638      	mov	r0, r7
 8009412:	47c0      	blx	r8
 8009414:	3001      	adds	r0, #1
 8009416:	d103      	bne.n	8009420 <_printf_common+0xac>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009420:	3501      	adds	r5, #1
 8009422:	e7c6      	b.n	80093b2 <_printf_common+0x3e>
 8009424:	18e1      	adds	r1, r4, r3
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	2030      	movs	r0, #48	; 0x30
 800942a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800942e:	4422      	add	r2, r4
 8009430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009438:	3302      	adds	r3, #2
 800943a:	e7c7      	b.n	80093cc <_printf_common+0x58>
 800943c:	2301      	movs	r3, #1
 800943e:	4622      	mov	r2, r4
 8009440:	4649      	mov	r1, r9
 8009442:	4638      	mov	r0, r7
 8009444:	47c0      	blx	r8
 8009446:	3001      	adds	r0, #1
 8009448:	d0e6      	beq.n	8009418 <_printf_common+0xa4>
 800944a:	3601      	adds	r6, #1
 800944c:	e7d9      	b.n	8009402 <_printf_common+0x8e>
	...

08009450 <_printf_i>:
 8009450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009454:	460c      	mov	r4, r1
 8009456:	4691      	mov	r9, r2
 8009458:	7e27      	ldrb	r7, [r4, #24]
 800945a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800945c:	2f78      	cmp	r7, #120	; 0x78
 800945e:	4680      	mov	r8, r0
 8009460:	469a      	mov	sl, r3
 8009462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009466:	d807      	bhi.n	8009478 <_printf_i+0x28>
 8009468:	2f62      	cmp	r7, #98	; 0x62
 800946a:	d80a      	bhi.n	8009482 <_printf_i+0x32>
 800946c:	2f00      	cmp	r7, #0
 800946e:	f000 80d8 	beq.w	8009622 <_printf_i+0x1d2>
 8009472:	2f58      	cmp	r7, #88	; 0x58
 8009474:	f000 80a3 	beq.w	80095be <_printf_i+0x16e>
 8009478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800947c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009480:	e03a      	b.n	80094f8 <_printf_i+0xa8>
 8009482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009486:	2b15      	cmp	r3, #21
 8009488:	d8f6      	bhi.n	8009478 <_printf_i+0x28>
 800948a:	a001      	add	r0, pc, #4	; (adr r0, 8009490 <_printf_i+0x40>)
 800948c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094fd 	.word	0x080094fd
 8009498:	08009479 	.word	0x08009479
 800949c:	08009479 	.word	0x08009479
 80094a0:	08009479 	.word	0x08009479
 80094a4:	08009479 	.word	0x08009479
 80094a8:	080094fd 	.word	0x080094fd
 80094ac:	08009479 	.word	0x08009479
 80094b0:	08009479 	.word	0x08009479
 80094b4:	08009479 	.word	0x08009479
 80094b8:	08009479 	.word	0x08009479
 80094bc:	08009609 	.word	0x08009609
 80094c0:	0800952d 	.word	0x0800952d
 80094c4:	080095eb 	.word	0x080095eb
 80094c8:	08009479 	.word	0x08009479
 80094cc:	08009479 	.word	0x08009479
 80094d0:	0800962b 	.word	0x0800962b
 80094d4:	08009479 	.word	0x08009479
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	08009479 	.word	0x08009479
 80094e0:	08009479 	.word	0x08009479
 80094e4:	080095f3 	.word	0x080095f3
 80094e8:	680b      	ldr	r3, [r1, #0]
 80094ea:	1d1a      	adds	r2, r3, #4
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	600a      	str	r2, [r1, #0]
 80094f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0a3      	b.n	8009644 <_printf_i+0x1f4>
 80094fc:	6825      	ldr	r5, [r4, #0]
 80094fe:	6808      	ldr	r0, [r1, #0]
 8009500:	062e      	lsls	r6, r5, #24
 8009502:	f100 0304 	add.w	r3, r0, #4
 8009506:	d50a      	bpl.n	800951e <_printf_i+0xce>
 8009508:	6805      	ldr	r5, [r0, #0]
 800950a:	600b      	str	r3, [r1, #0]
 800950c:	2d00      	cmp	r5, #0
 800950e:	da03      	bge.n	8009518 <_printf_i+0xc8>
 8009510:	232d      	movs	r3, #45	; 0x2d
 8009512:	426d      	negs	r5, r5
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009518:	485e      	ldr	r0, [pc, #376]	; (8009694 <_printf_i+0x244>)
 800951a:	230a      	movs	r3, #10
 800951c:	e019      	b.n	8009552 <_printf_i+0x102>
 800951e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009522:	6805      	ldr	r5, [r0, #0]
 8009524:	600b      	str	r3, [r1, #0]
 8009526:	bf18      	it	ne
 8009528:	b22d      	sxthne	r5, r5
 800952a:	e7ef      	b.n	800950c <_printf_i+0xbc>
 800952c:	680b      	ldr	r3, [r1, #0]
 800952e:	6825      	ldr	r5, [r4, #0]
 8009530:	1d18      	adds	r0, r3, #4
 8009532:	6008      	str	r0, [r1, #0]
 8009534:	0628      	lsls	r0, r5, #24
 8009536:	d501      	bpl.n	800953c <_printf_i+0xec>
 8009538:	681d      	ldr	r5, [r3, #0]
 800953a:	e002      	b.n	8009542 <_printf_i+0xf2>
 800953c:	0669      	lsls	r1, r5, #25
 800953e:	d5fb      	bpl.n	8009538 <_printf_i+0xe8>
 8009540:	881d      	ldrh	r5, [r3, #0]
 8009542:	4854      	ldr	r0, [pc, #336]	; (8009694 <_printf_i+0x244>)
 8009544:	2f6f      	cmp	r7, #111	; 0x6f
 8009546:	bf0c      	ite	eq
 8009548:	2308      	moveq	r3, #8
 800954a:	230a      	movne	r3, #10
 800954c:	2100      	movs	r1, #0
 800954e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009552:	6866      	ldr	r6, [r4, #4]
 8009554:	60a6      	str	r6, [r4, #8]
 8009556:	2e00      	cmp	r6, #0
 8009558:	bfa2      	ittt	ge
 800955a:	6821      	ldrge	r1, [r4, #0]
 800955c:	f021 0104 	bicge.w	r1, r1, #4
 8009560:	6021      	strge	r1, [r4, #0]
 8009562:	b90d      	cbnz	r5, 8009568 <_printf_i+0x118>
 8009564:	2e00      	cmp	r6, #0
 8009566:	d04d      	beq.n	8009604 <_printf_i+0x1b4>
 8009568:	4616      	mov	r6, r2
 800956a:	fbb5 f1f3 	udiv	r1, r5, r3
 800956e:	fb03 5711 	mls	r7, r3, r1, r5
 8009572:	5dc7      	ldrb	r7, [r0, r7]
 8009574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009578:	462f      	mov	r7, r5
 800957a:	42bb      	cmp	r3, r7
 800957c:	460d      	mov	r5, r1
 800957e:	d9f4      	bls.n	800956a <_printf_i+0x11a>
 8009580:	2b08      	cmp	r3, #8
 8009582:	d10b      	bne.n	800959c <_printf_i+0x14c>
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	07df      	lsls	r7, r3, #31
 8009588:	d508      	bpl.n	800959c <_printf_i+0x14c>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	6861      	ldr	r1, [r4, #4]
 800958e:	4299      	cmp	r1, r3
 8009590:	bfde      	ittt	le
 8009592:	2330      	movle	r3, #48	; 0x30
 8009594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800959c:	1b92      	subs	r2, r2, r6
 800959e:	6122      	str	r2, [r4, #16]
 80095a0:	f8cd a000 	str.w	sl, [sp]
 80095a4:	464b      	mov	r3, r9
 80095a6:	aa03      	add	r2, sp, #12
 80095a8:	4621      	mov	r1, r4
 80095aa:	4640      	mov	r0, r8
 80095ac:	f7ff fee2 	bl	8009374 <_printf_common>
 80095b0:	3001      	adds	r0, #1
 80095b2:	d14c      	bne.n	800964e <_printf_i+0x1fe>
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	b004      	add	sp, #16
 80095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095be:	4835      	ldr	r0, [pc, #212]	; (8009694 <_printf_i+0x244>)
 80095c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	680e      	ldr	r6, [r1, #0]
 80095c8:	061f      	lsls	r7, r3, #24
 80095ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80095ce:	600e      	str	r6, [r1, #0]
 80095d0:	d514      	bpl.n	80095fc <_printf_i+0x1ac>
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	bf44      	itt	mi
 80095d6:	f043 0320 	orrmi.w	r3, r3, #32
 80095da:	6023      	strmi	r3, [r4, #0]
 80095dc:	b91d      	cbnz	r5, 80095e6 <_printf_i+0x196>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	f023 0320 	bic.w	r3, r3, #32
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	2310      	movs	r3, #16
 80095e8:	e7b0      	b.n	800954c <_printf_i+0xfc>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	f043 0320 	orr.w	r3, r3, #32
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	2378      	movs	r3, #120	; 0x78
 80095f4:	4828      	ldr	r0, [pc, #160]	; (8009698 <_printf_i+0x248>)
 80095f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095fa:	e7e3      	b.n	80095c4 <_printf_i+0x174>
 80095fc:	065e      	lsls	r6, r3, #25
 80095fe:	bf48      	it	mi
 8009600:	b2ad      	uxthmi	r5, r5
 8009602:	e7e6      	b.n	80095d2 <_printf_i+0x182>
 8009604:	4616      	mov	r6, r2
 8009606:	e7bb      	b.n	8009580 <_printf_i+0x130>
 8009608:	680b      	ldr	r3, [r1, #0]
 800960a:	6826      	ldr	r6, [r4, #0]
 800960c:	6960      	ldr	r0, [r4, #20]
 800960e:	1d1d      	adds	r5, r3, #4
 8009610:	600d      	str	r5, [r1, #0]
 8009612:	0635      	lsls	r5, r6, #24
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	d501      	bpl.n	800961c <_printf_i+0x1cc>
 8009618:	6018      	str	r0, [r3, #0]
 800961a:	e002      	b.n	8009622 <_printf_i+0x1d2>
 800961c:	0671      	lsls	r1, r6, #25
 800961e:	d5fb      	bpl.n	8009618 <_printf_i+0x1c8>
 8009620:	8018      	strh	r0, [r3, #0]
 8009622:	2300      	movs	r3, #0
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	4616      	mov	r6, r2
 8009628:	e7ba      	b.n	80095a0 <_printf_i+0x150>
 800962a:	680b      	ldr	r3, [r1, #0]
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	600a      	str	r2, [r1, #0]
 8009630:	681e      	ldr	r6, [r3, #0]
 8009632:	6862      	ldr	r2, [r4, #4]
 8009634:	2100      	movs	r1, #0
 8009636:	4630      	mov	r0, r6
 8009638:	f7f6 fe4a 	bl	80002d0 <memchr>
 800963c:	b108      	cbz	r0, 8009642 <_printf_i+0x1f2>
 800963e:	1b80      	subs	r0, r0, r6
 8009640:	6060      	str	r0, [r4, #4]
 8009642:	6863      	ldr	r3, [r4, #4]
 8009644:	6123      	str	r3, [r4, #16]
 8009646:	2300      	movs	r3, #0
 8009648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800964c:	e7a8      	b.n	80095a0 <_printf_i+0x150>
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	4632      	mov	r2, r6
 8009652:	4649      	mov	r1, r9
 8009654:	4640      	mov	r0, r8
 8009656:	47d0      	blx	sl
 8009658:	3001      	adds	r0, #1
 800965a:	d0ab      	beq.n	80095b4 <_printf_i+0x164>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	079b      	lsls	r3, r3, #30
 8009660:	d413      	bmi.n	800968a <_printf_i+0x23a>
 8009662:	68e0      	ldr	r0, [r4, #12]
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	4298      	cmp	r0, r3
 8009668:	bfb8      	it	lt
 800966a:	4618      	movlt	r0, r3
 800966c:	e7a4      	b.n	80095b8 <_printf_i+0x168>
 800966e:	2301      	movs	r3, #1
 8009670:	4632      	mov	r2, r6
 8009672:	4649      	mov	r1, r9
 8009674:	4640      	mov	r0, r8
 8009676:	47d0      	blx	sl
 8009678:	3001      	adds	r0, #1
 800967a:	d09b      	beq.n	80095b4 <_printf_i+0x164>
 800967c:	3501      	adds	r5, #1
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	9903      	ldr	r1, [sp, #12]
 8009682:	1a5b      	subs	r3, r3, r1
 8009684:	42ab      	cmp	r3, r5
 8009686:	dcf2      	bgt.n	800966e <_printf_i+0x21e>
 8009688:	e7eb      	b.n	8009662 <_printf_i+0x212>
 800968a:	2500      	movs	r5, #0
 800968c:	f104 0619 	add.w	r6, r4, #25
 8009690:	e7f5      	b.n	800967e <_printf_i+0x22e>
 8009692:	bf00      	nop
 8009694:	0800a219 	.word	0x0800a219
 8009698:	0800a22a 	.word	0x0800a22a

0800969c <_sbrk_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d06      	ldr	r5, [pc, #24]	; (80096b8 <_sbrk_r+0x1c>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	602b      	str	r3, [r5, #0]
 80096a8:	f000 fb2c 	bl	8009d04 <_sbrk>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_sbrk_r+0x1a>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_sbrk_r+0x1a>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	2001361c 	.word	0x2001361c

080096bc <__sread>:
 80096bc:	b510      	push	{r4, lr}
 80096be:	460c      	mov	r4, r1
 80096c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c4:	f000 fae2 	bl	8009c8c <_read_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	bfab      	itete	ge
 80096cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096ce:	89a3      	ldrhlt	r3, [r4, #12]
 80096d0:	181b      	addge	r3, r3, r0
 80096d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096d6:	bfac      	ite	ge
 80096d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80096da:	81a3      	strhlt	r3, [r4, #12]
 80096dc:	bd10      	pop	{r4, pc}

080096de <__swrite>:
 80096de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e2:	461f      	mov	r7, r3
 80096e4:	898b      	ldrh	r3, [r1, #12]
 80096e6:	05db      	lsls	r3, r3, #23
 80096e8:	4605      	mov	r5, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	4616      	mov	r6, r2
 80096ee:	d505      	bpl.n	80096fc <__swrite+0x1e>
 80096f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f4:	2302      	movs	r3, #2
 80096f6:	2200      	movs	r2, #0
 80096f8:	f000 f9b6 	bl	8009a68 <_lseek_r>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	4632      	mov	r2, r6
 800970a:	463b      	mov	r3, r7
 800970c:	4628      	mov	r0, r5
 800970e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009712:	f7ff b995 	b.w	8008a40 <_write_r>

08009716 <__sseek>:
 8009716:	b510      	push	{r4, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971e:	f000 f9a3 	bl	8009a68 <_lseek_r>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	bf15      	itete	ne
 8009728:	6560      	strne	r0, [r4, #84]	; 0x54
 800972a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800972e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009732:	81a3      	strheq	r3, [r4, #12]
 8009734:	bf18      	it	ne
 8009736:	81a3      	strhne	r3, [r4, #12]
 8009738:	bd10      	pop	{r4, pc}

0800973a <__sclose>:
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	f000 b8c1 	b.w	80098c4 <_close_r>
	...

08009744 <__swbuf_r>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	460e      	mov	r6, r1
 8009748:	4614      	mov	r4, r2
 800974a:	4605      	mov	r5, r0
 800974c:	b118      	cbz	r0, 8009756 <__swbuf_r+0x12>
 800974e:	6983      	ldr	r3, [r0, #24]
 8009750:	b90b      	cbnz	r3, 8009756 <__swbuf_r+0x12>
 8009752:	f7ff fa5f 	bl	8008c14 <__sinit>
 8009756:	4b21      	ldr	r3, [pc, #132]	; (80097dc <__swbuf_r+0x98>)
 8009758:	429c      	cmp	r4, r3
 800975a:	d12b      	bne.n	80097b4 <__swbuf_r+0x70>
 800975c:	686c      	ldr	r4, [r5, #4]
 800975e:	69a3      	ldr	r3, [r4, #24]
 8009760:	60a3      	str	r3, [r4, #8]
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	071a      	lsls	r2, r3, #28
 8009766:	d52f      	bpl.n	80097c8 <__swbuf_r+0x84>
 8009768:	6923      	ldr	r3, [r4, #16]
 800976a:	b36b      	cbz	r3, 80097c8 <__swbuf_r+0x84>
 800976c:	6923      	ldr	r3, [r4, #16]
 800976e:	6820      	ldr	r0, [r4, #0]
 8009770:	1ac0      	subs	r0, r0, r3
 8009772:	6963      	ldr	r3, [r4, #20]
 8009774:	b2f6      	uxtb	r6, r6
 8009776:	4283      	cmp	r3, r0
 8009778:	4637      	mov	r7, r6
 800977a:	dc04      	bgt.n	8009786 <__swbuf_r+0x42>
 800977c:	4621      	mov	r1, r4
 800977e:	4628      	mov	r0, r5
 8009780:	f000 f936 	bl	80099f0 <_fflush_r>
 8009784:	bb30      	cbnz	r0, 80097d4 <__swbuf_r+0x90>
 8009786:	68a3      	ldr	r3, [r4, #8]
 8009788:	3b01      	subs	r3, #1
 800978a:	60a3      	str	r3, [r4, #8]
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	6022      	str	r2, [r4, #0]
 8009792:	701e      	strb	r6, [r3, #0]
 8009794:	6963      	ldr	r3, [r4, #20]
 8009796:	3001      	adds	r0, #1
 8009798:	4283      	cmp	r3, r0
 800979a:	d004      	beq.n	80097a6 <__swbuf_r+0x62>
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	07db      	lsls	r3, r3, #31
 80097a0:	d506      	bpl.n	80097b0 <__swbuf_r+0x6c>
 80097a2:	2e0a      	cmp	r6, #10
 80097a4:	d104      	bne.n	80097b0 <__swbuf_r+0x6c>
 80097a6:	4621      	mov	r1, r4
 80097a8:	4628      	mov	r0, r5
 80097aa:	f000 f921 	bl	80099f0 <_fflush_r>
 80097ae:	b988      	cbnz	r0, 80097d4 <__swbuf_r+0x90>
 80097b0:	4638      	mov	r0, r7
 80097b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <__swbuf_r+0x9c>)
 80097b6:	429c      	cmp	r4, r3
 80097b8:	d101      	bne.n	80097be <__swbuf_r+0x7a>
 80097ba:	68ac      	ldr	r4, [r5, #8]
 80097bc:	e7cf      	b.n	800975e <__swbuf_r+0x1a>
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <__swbuf_r+0xa0>)
 80097c0:	429c      	cmp	r4, r3
 80097c2:	bf08      	it	eq
 80097c4:	68ec      	ldreq	r4, [r5, #12]
 80097c6:	e7ca      	b.n	800975e <__swbuf_r+0x1a>
 80097c8:	4621      	mov	r1, r4
 80097ca:	4628      	mov	r0, r5
 80097cc:	f000 f80c 	bl	80097e8 <__swsetup_r>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d0cb      	beq.n	800976c <__swbuf_r+0x28>
 80097d4:	f04f 37ff 	mov.w	r7, #4294967295
 80097d8:	e7ea      	b.n	80097b0 <__swbuf_r+0x6c>
 80097da:	bf00      	nop
 80097dc:	0800a1c8 	.word	0x0800a1c8
 80097e0:	0800a1e8 	.word	0x0800a1e8
 80097e4:	0800a1a8 	.word	0x0800a1a8

080097e8 <__swsetup_r>:
 80097e8:	4b32      	ldr	r3, [pc, #200]	; (80098b4 <__swsetup_r+0xcc>)
 80097ea:	b570      	push	{r4, r5, r6, lr}
 80097ec:	681d      	ldr	r5, [r3, #0]
 80097ee:	4606      	mov	r6, r0
 80097f0:	460c      	mov	r4, r1
 80097f2:	b125      	cbz	r5, 80097fe <__swsetup_r+0x16>
 80097f4:	69ab      	ldr	r3, [r5, #24]
 80097f6:	b913      	cbnz	r3, 80097fe <__swsetup_r+0x16>
 80097f8:	4628      	mov	r0, r5
 80097fa:	f7ff fa0b 	bl	8008c14 <__sinit>
 80097fe:	4b2e      	ldr	r3, [pc, #184]	; (80098b8 <__swsetup_r+0xd0>)
 8009800:	429c      	cmp	r4, r3
 8009802:	d10f      	bne.n	8009824 <__swsetup_r+0x3c>
 8009804:	686c      	ldr	r4, [r5, #4]
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800980c:	0719      	lsls	r1, r3, #28
 800980e:	d42c      	bmi.n	800986a <__swsetup_r+0x82>
 8009810:	06dd      	lsls	r5, r3, #27
 8009812:	d411      	bmi.n	8009838 <__swsetup_r+0x50>
 8009814:	2309      	movs	r3, #9
 8009816:	6033      	str	r3, [r6, #0]
 8009818:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	f04f 30ff 	mov.w	r0, #4294967295
 8009822:	e03e      	b.n	80098a2 <__swsetup_r+0xba>
 8009824:	4b25      	ldr	r3, [pc, #148]	; (80098bc <__swsetup_r+0xd4>)
 8009826:	429c      	cmp	r4, r3
 8009828:	d101      	bne.n	800982e <__swsetup_r+0x46>
 800982a:	68ac      	ldr	r4, [r5, #8]
 800982c:	e7eb      	b.n	8009806 <__swsetup_r+0x1e>
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <__swsetup_r+0xd8>)
 8009830:	429c      	cmp	r4, r3
 8009832:	bf08      	it	eq
 8009834:	68ec      	ldreq	r4, [r5, #12]
 8009836:	e7e6      	b.n	8009806 <__swsetup_r+0x1e>
 8009838:	0758      	lsls	r0, r3, #29
 800983a:	d512      	bpl.n	8009862 <__swsetup_r+0x7a>
 800983c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800983e:	b141      	cbz	r1, 8009852 <__swsetup_r+0x6a>
 8009840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009844:	4299      	cmp	r1, r3
 8009846:	d002      	beq.n	800984e <__swsetup_r+0x66>
 8009848:	4630      	mov	r0, r6
 800984a:	f000 f9a9 	bl	8009ba0 <_free_r>
 800984e:	2300      	movs	r3, #0
 8009850:	6363      	str	r3, [r4, #52]	; 0x34
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	2300      	movs	r3, #0
 800985c:	6063      	str	r3, [r4, #4]
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	f043 0308 	orr.w	r3, r3, #8
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	6923      	ldr	r3, [r4, #16]
 800986c:	b94b      	cbnz	r3, 8009882 <__swsetup_r+0x9a>
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009878:	d003      	beq.n	8009882 <__swsetup_r+0x9a>
 800987a:	4621      	mov	r1, r4
 800987c:	4630      	mov	r0, r6
 800987e:	f000 f929 	bl	8009ad4 <__smakebuf_r>
 8009882:	89a0      	ldrh	r0, [r4, #12]
 8009884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009888:	f010 0301 	ands.w	r3, r0, #1
 800988c:	d00a      	beq.n	80098a4 <__swsetup_r+0xbc>
 800988e:	2300      	movs	r3, #0
 8009890:	60a3      	str	r3, [r4, #8]
 8009892:	6963      	ldr	r3, [r4, #20]
 8009894:	425b      	negs	r3, r3
 8009896:	61a3      	str	r3, [r4, #24]
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	b943      	cbnz	r3, 80098ae <__swsetup_r+0xc6>
 800989c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098a0:	d1ba      	bne.n	8009818 <__swsetup_r+0x30>
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	0781      	lsls	r1, r0, #30
 80098a6:	bf58      	it	pl
 80098a8:	6963      	ldrpl	r3, [r4, #20]
 80098aa:	60a3      	str	r3, [r4, #8]
 80098ac:	e7f4      	b.n	8009898 <__swsetup_r+0xb0>
 80098ae:	2000      	movs	r0, #0
 80098b0:	e7f7      	b.n	80098a2 <__swsetup_r+0xba>
 80098b2:	bf00      	nop
 80098b4:	2000002c 	.word	0x2000002c
 80098b8:	0800a1c8 	.word	0x0800a1c8
 80098bc:	0800a1e8 	.word	0x0800a1e8
 80098c0:	0800a1a8 	.word	0x0800a1a8

080098c4 <_close_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4d06      	ldr	r5, [pc, #24]	; (80098e0 <_close_r+0x1c>)
 80098c8:	2300      	movs	r3, #0
 80098ca:	4604      	mov	r4, r0
 80098cc:	4608      	mov	r0, r1
 80098ce:	602b      	str	r3, [r5, #0]
 80098d0:	f7f7 fd03 	bl	80012da <_close>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_close_r+0x1a>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	b103      	cbz	r3, 80098de <_close_r+0x1a>
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	2001361c 	.word	0x2001361c

080098e4 <__sflush_r>:
 80098e4:	898a      	ldrh	r2, [r1, #12]
 80098e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ea:	4605      	mov	r5, r0
 80098ec:	0710      	lsls	r0, r2, #28
 80098ee:	460c      	mov	r4, r1
 80098f0:	d458      	bmi.n	80099a4 <__sflush_r+0xc0>
 80098f2:	684b      	ldr	r3, [r1, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dc05      	bgt.n	8009904 <__sflush_r+0x20>
 80098f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	dc02      	bgt.n	8009904 <__sflush_r+0x20>
 80098fe:	2000      	movs	r0, #0
 8009900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009906:	2e00      	cmp	r6, #0
 8009908:	d0f9      	beq.n	80098fe <__sflush_r+0x1a>
 800990a:	2300      	movs	r3, #0
 800990c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009910:	682f      	ldr	r7, [r5, #0]
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	d032      	beq.n	800997c <__sflush_r+0x98>
 8009916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	075a      	lsls	r2, r3, #29
 800991c:	d505      	bpl.n	800992a <__sflush_r+0x46>
 800991e:	6863      	ldr	r3, [r4, #4]
 8009920:	1ac0      	subs	r0, r0, r3
 8009922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009924:	b10b      	cbz	r3, 800992a <__sflush_r+0x46>
 8009926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009928:	1ac0      	subs	r0, r0, r3
 800992a:	2300      	movs	r3, #0
 800992c:	4602      	mov	r2, r0
 800992e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009930:	6a21      	ldr	r1, [r4, #32]
 8009932:	4628      	mov	r0, r5
 8009934:	47b0      	blx	r6
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	d106      	bne.n	800994a <__sflush_r+0x66>
 800993c:	6829      	ldr	r1, [r5, #0]
 800993e:	291d      	cmp	r1, #29
 8009940:	d82c      	bhi.n	800999c <__sflush_r+0xb8>
 8009942:	4a2a      	ldr	r2, [pc, #168]	; (80099ec <__sflush_r+0x108>)
 8009944:	40ca      	lsrs	r2, r1
 8009946:	07d6      	lsls	r6, r2, #31
 8009948:	d528      	bpl.n	800999c <__sflush_r+0xb8>
 800994a:	2200      	movs	r2, #0
 800994c:	6062      	str	r2, [r4, #4]
 800994e:	04d9      	lsls	r1, r3, #19
 8009950:	6922      	ldr	r2, [r4, #16]
 8009952:	6022      	str	r2, [r4, #0]
 8009954:	d504      	bpl.n	8009960 <__sflush_r+0x7c>
 8009956:	1c42      	adds	r2, r0, #1
 8009958:	d101      	bne.n	800995e <__sflush_r+0x7a>
 800995a:	682b      	ldr	r3, [r5, #0]
 800995c:	b903      	cbnz	r3, 8009960 <__sflush_r+0x7c>
 800995e:	6560      	str	r0, [r4, #84]	; 0x54
 8009960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009962:	602f      	str	r7, [r5, #0]
 8009964:	2900      	cmp	r1, #0
 8009966:	d0ca      	beq.n	80098fe <__sflush_r+0x1a>
 8009968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800996c:	4299      	cmp	r1, r3
 800996e:	d002      	beq.n	8009976 <__sflush_r+0x92>
 8009970:	4628      	mov	r0, r5
 8009972:	f000 f915 	bl	8009ba0 <_free_r>
 8009976:	2000      	movs	r0, #0
 8009978:	6360      	str	r0, [r4, #52]	; 0x34
 800997a:	e7c1      	b.n	8009900 <__sflush_r+0x1c>
 800997c:	6a21      	ldr	r1, [r4, #32]
 800997e:	2301      	movs	r3, #1
 8009980:	4628      	mov	r0, r5
 8009982:	47b0      	blx	r6
 8009984:	1c41      	adds	r1, r0, #1
 8009986:	d1c7      	bne.n	8009918 <__sflush_r+0x34>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0c4      	beq.n	8009918 <__sflush_r+0x34>
 800998e:	2b1d      	cmp	r3, #29
 8009990:	d001      	beq.n	8009996 <__sflush_r+0xb2>
 8009992:	2b16      	cmp	r3, #22
 8009994:	d101      	bne.n	800999a <__sflush_r+0xb6>
 8009996:	602f      	str	r7, [r5, #0]
 8009998:	e7b1      	b.n	80098fe <__sflush_r+0x1a>
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	e7ad      	b.n	8009900 <__sflush_r+0x1c>
 80099a4:	690f      	ldr	r7, [r1, #16]
 80099a6:	2f00      	cmp	r7, #0
 80099a8:	d0a9      	beq.n	80098fe <__sflush_r+0x1a>
 80099aa:	0793      	lsls	r3, r2, #30
 80099ac:	680e      	ldr	r6, [r1, #0]
 80099ae:	bf08      	it	eq
 80099b0:	694b      	ldreq	r3, [r1, #20]
 80099b2:	600f      	str	r7, [r1, #0]
 80099b4:	bf18      	it	ne
 80099b6:	2300      	movne	r3, #0
 80099b8:	eba6 0807 	sub.w	r8, r6, r7
 80099bc:	608b      	str	r3, [r1, #8]
 80099be:	f1b8 0f00 	cmp.w	r8, #0
 80099c2:	dd9c      	ble.n	80098fe <__sflush_r+0x1a>
 80099c4:	6a21      	ldr	r1, [r4, #32]
 80099c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099c8:	4643      	mov	r3, r8
 80099ca:	463a      	mov	r2, r7
 80099cc:	4628      	mov	r0, r5
 80099ce:	47b0      	blx	r6
 80099d0:	2800      	cmp	r0, #0
 80099d2:	dc06      	bgt.n	80099e2 <__sflush_r+0xfe>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099da:	81a3      	strh	r3, [r4, #12]
 80099dc:	f04f 30ff 	mov.w	r0, #4294967295
 80099e0:	e78e      	b.n	8009900 <__sflush_r+0x1c>
 80099e2:	4407      	add	r7, r0
 80099e4:	eba8 0800 	sub.w	r8, r8, r0
 80099e8:	e7e9      	b.n	80099be <__sflush_r+0xda>
 80099ea:	bf00      	nop
 80099ec:	20400001 	.word	0x20400001

080099f0 <_fflush_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	690b      	ldr	r3, [r1, #16]
 80099f4:	4605      	mov	r5, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	b913      	cbnz	r3, 8009a00 <_fflush_r+0x10>
 80099fa:	2500      	movs	r5, #0
 80099fc:	4628      	mov	r0, r5
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	b118      	cbz	r0, 8009a0a <_fflush_r+0x1a>
 8009a02:	6983      	ldr	r3, [r0, #24]
 8009a04:	b90b      	cbnz	r3, 8009a0a <_fflush_r+0x1a>
 8009a06:	f7ff f905 	bl	8008c14 <__sinit>
 8009a0a:	4b14      	ldr	r3, [pc, #80]	; (8009a5c <_fflush_r+0x6c>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	d11b      	bne.n	8009a48 <_fflush_r+0x58>
 8009a10:	686c      	ldr	r4, [r5, #4]
 8009a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0ef      	beq.n	80099fa <_fflush_r+0xa>
 8009a1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a1c:	07d0      	lsls	r0, r2, #31
 8009a1e:	d404      	bmi.n	8009a2a <_fflush_r+0x3a>
 8009a20:	0599      	lsls	r1, r3, #22
 8009a22:	d402      	bmi.n	8009a2a <_fflush_r+0x3a>
 8009a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a26:	f7ff f993 	bl	8008d50 <__retarget_lock_acquire_recursive>
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	f7ff ff59 	bl	80098e4 <__sflush_r>
 8009a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a34:	07da      	lsls	r2, r3, #31
 8009a36:	4605      	mov	r5, r0
 8009a38:	d4e0      	bmi.n	80099fc <_fflush_r+0xc>
 8009a3a:	89a3      	ldrh	r3, [r4, #12]
 8009a3c:	059b      	lsls	r3, r3, #22
 8009a3e:	d4dd      	bmi.n	80099fc <_fflush_r+0xc>
 8009a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a42:	f7ff f986 	bl	8008d52 <__retarget_lock_release_recursive>
 8009a46:	e7d9      	b.n	80099fc <_fflush_r+0xc>
 8009a48:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <_fflush_r+0x70>)
 8009a4a:	429c      	cmp	r4, r3
 8009a4c:	d101      	bne.n	8009a52 <_fflush_r+0x62>
 8009a4e:	68ac      	ldr	r4, [r5, #8]
 8009a50:	e7df      	b.n	8009a12 <_fflush_r+0x22>
 8009a52:	4b04      	ldr	r3, [pc, #16]	; (8009a64 <_fflush_r+0x74>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	bf08      	it	eq
 8009a58:	68ec      	ldreq	r4, [r5, #12]
 8009a5a:	e7da      	b.n	8009a12 <_fflush_r+0x22>
 8009a5c:	0800a1c8 	.word	0x0800a1c8
 8009a60:	0800a1e8 	.word	0x0800a1e8
 8009a64:	0800a1a8 	.word	0x0800a1a8

08009a68 <_lseek_r>:
 8009a68:	b538      	push	{r3, r4, r5, lr}
 8009a6a:	4d07      	ldr	r5, [pc, #28]	; (8009a88 <_lseek_r+0x20>)
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	4608      	mov	r0, r1
 8009a70:	4611      	mov	r1, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	602a      	str	r2, [r5, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f7f7 fc56 	bl	8001328 <_lseek>
 8009a7c:	1c43      	adds	r3, r0, #1
 8009a7e:	d102      	bne.n	8009a86 <_lseek_r+0x1e>
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	b103      	cbz	r3, 8009a86 <_lseek_r+0x1e>
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	bd38      	pop	{r3, r4, r5, pc}
 8009a88:	2001361c 	.word	0x2001361c

08009a8c <__swhatbuf_r>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	460e      	mov	r6, r1
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	2900      	cmp	r1, #0
 8009a96:	b096      	sub	sp, #88	; 0x58
 8009a98:	4614      	mov	r4, r2
 8009a9a:	461d      	mov	r5, r3
 8009a9c:	da07      	bge.n	8009aae <__swhatbuf_r+0x22>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	89b3      	ldrh	r3, [r6, #12]
 8009aa4:	061a      	lsls	r2, r3, #24
 8009aa6:	d410      	bmi.n	8009aca <__swhatbuf_r+0x3e>
 8009aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aac:	e00e      	b.n	8009acc <__swhatbuf_r+0x40>
 8009aae:	466a      	mov	r2, sp
 8009ab0:	f000 f8fe 	bl	8009cb0 <_fstat_r>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	dbf2      	blt.n	8009a9e <__swhatbuf_r+0x12>
 8009ab8:	9a01      	ldr	r2, [sp, #4]
 8009aba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009abe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ac2:	425a      	negs	r2, r3
 8009ac4:	415a      	adcs	r2, r3
 8009ac6:	602a      	str	r2, [r5, #0]
 8009ac8:	e7ee      	b.n	8009aa8 <__swhatbuf_r+0x1c>
 8009aca:	2340      	movs	r3, #64	; 0x40
 8009acc:	2000      	movs	r0, #0
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	b016      	add	sp, #88	; 0x58
 8009ad2:	bd70      	pop	{r4, r5, r6, pc}

08009ad4 <__smakebuf_r>:
 8009ad4:	898b      	ldrh	r3, [r1, #12]
 8009ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ad8:	079d      	lsls	r5, r3, #30
 8009ada:	4606      	mov	r6, r0
 8009adc:	460c      	mov	r4, r1
 8009ade:	d507      	bpl.n	8009af0 <__smakebuf_r+0x1c>
 8009ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	6123      	str	r3, [r4, #16]
 8009ae8:	2301      	movs	r3, #1
 8009aea:	6163      	str	r3, [r4, #20]
 8009aec:	b002      	add	sp, #8
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	ab01      	add	r3, sp, #4
 8009af2:	466a      	mov	r2, sp
 8009af4:	f7ff ffca 	bl	8009a8c <__swhatbuf_r>
 8009af8:	9900      	ldr	r1, [sp, #0]
 8009afa:	4605      	mov	r5, r0
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff f929 	bl	8008d54 <_malloc_r>
 8009b02:	b948      	cbnz	r0, 8009b18 <__smakebuf_r+0x44>
 8009b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b08:	059a      	lsls	r2, r3, #22
 8009b0a:	d4ef      	bmi.n	8009aec <__smakebuf_r+0x18>
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	f043 0302 	orr.w	r3, r3, #2
 8009b14:	81a3      	strh	r3, [r4, #12]
 8009b16:	e7e3      	b.n	8009ae0 <__smakebuf_r+0xc>
 8009b18:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <__smakebuf_r+0x7c>)
 8009b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	6020      	str	r0, [r4, #0]
 8009b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	6163      	str	r3, [r4, #20]
 8009b2a:	9b01      	ldr	r3, [sp, #4]
 8009b2c:	6120      	str	r0, [r4, #16]
 8009b2e:	b15b      	cbz	r3, 8009b48 <__smakebuf_r+0x74>
 8009b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 f8cd 	bl	8009cd4 <_isatty_r>
 8009b3a:	b128      	cbz	r0, 8009b48 <__smakebuf_r+0x74>
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	f023 0303 	bic.w	r3, r3, #3
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	89a0      	ldrh	r0, [r4, #12]
 8009b4a:	4305      	orrs	r5, r0
 8009b4c:	81a5      	strh	r5, [r4, #12]
 8009b4e:	e7cd      	b.n	8009aec <__smakebuf_r+0x18>
 8009b50:	08008bad 	.word	0x08008bad

08009b54 <memmove>:
 8009b54:	4288      	cmp	r0, r1
 8009b56:	b510      	push	{r4, lr}
 8009b58:	eb01 0402 	add.w	r4, r1, r2
 8009b5c:	d902      	bls.n	8009b64 <memmove+0x10>
 8009b5e:	4284      	cmp	r4, r0
 8009b60:	4623      	mov	r3, r4
 8009b62:	d807      	bhi.n	8009b74 <memmove+0x20>
 8009b64:	1e43      	subs	r3, r0, #1
 8009b66:	42a1      	cmp	r1, r4
 8009b68:	d008      	beq.n	8009b7c <memmove+0x28>
 8009b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b72:	e7f8      	b.n	8009b66 <memmove+0x12>
 8009b74:	4402      	add	r2, r0
 8009b76:	4601      	mov	r1, r0
 8009b78:	428a      	cmp	r2, r1
 8009b7a:	d100      	bne.n	8009b7e <memmove+0x2a>
 8009b7c:	bd10      	pop	{r4, pc}
 8009b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b86:	e7f7      	b.n	8009b78 <memmove+0x24>

08009b88 <__malloc_lock>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__malloc_lock+0x8>)
 8009b8a:	f7ff b8e1 	b.w	8008d50 <__retarget_lock_acquire_recursive>
 8009b8e:	bf00      	nop
 8009b90:	20013614 	.word	0x20013614

08009b94 <__malloc_unlock>:
 8009b94:	4801      	ldr	r0, [pc, #4]	; (8009b9c <__malloc_unlock+0x8>)
 8009b96:	f7ff b8dc 	b.w	8008d52 <__retarget_lock_release_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	20013614 	.word	0x20013614

08009ba0 <_free_r>:
 8009ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ba2:	2900      	cmp	r1, #0
 8009ba4:	d048      	beq.n	8009c38 <_free_r+0x98>
 8009ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009baa:	9001      	str	r0, [sp, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f1a1 0404 	sub.w	r4, r1, #4
 8009bb2:	bfb8      	it	lt
 8009bb4:	18e4      	addlt	r4, r4, r3
 8009bb6:	f7ff ffe7 	bl	8009b88 <__malloc_lock>
 8009bba:	4a20      	ldr	r2, [pc, #128]	; (8009c3c <_free_r+0x9c>)
 8009bbc:	9801      	ldr	r0, [sp, #4]
 8009bbe:	6813      	ldr	r3, [r2, #0]
 8009bc0:	4615      	mov	r5, r2
 8009bc2:	b933      	cbnz	r3, 8009bd2 <_free_r+0x32>
 8009bc4:	6063      	str	r3, [r4, #4]
 8009bc6:	6014      	str	r4, [r2, #0]
 8009bc8:	b003      	add	sp, #12
 8009bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bce:	f7ff bfe1 	b.w	8009b94 <__malloc_unlock>
 8009bd2:	42a3      	cmp	r3, r4
 8009bd4:	d90b      	bls.n	8009bee <_free_r+0x4e>
 8009bd6:	6821      	ldr	r1, [r4, #0]
 8009bd8:	1862      	adds	r2, r4, r1
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	bf04      	itt	eq
 8009bde:	681a      	ldreq	r2, [r3, #0]
 8009be0:	685b      	ldreq	r3, [r3, #4]
 8009be2:	6063      	str	r3, [r4, #4]
 8009be4:	bf04      	itt	eq
 8009be6:	1852      	addeq	r2, r2, r1
 8009be8:	6022      	streq	r2, [r4, #0]
 8009bea:	602c      	str	r4, [r5, #0]
 8009bec:	e7ec      	b.n	8009bc8 <_free_r+0x28>
 8009bee:	461a      	mov	r2, r3
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	b10b      	cbz	r3, 8009bf8 <_free_r+0x58>
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d9fa      	bls.n	8009bee <_free_r+0x4e>
 8009bf8:	6811      	ldr	r1, [r2, #0]
 8009bfa:	1855      	adds	r5, r2, r1
 8009bfc:	42a5      	cmp	r5, r4
 8009bfe:	d10b      	bne.n	8009c18 <_free_r+0x78>
 8009c00:	6824      	ldr	r4, [r4, #0]
 8009c02:	4421      	add	r1, r4
 8009c04:	1854      	adds	r4, r2, r1
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	6011      	str	r1, [r2, #0]
 8009c0a:	d1dd      	bne.n	8009bc8 <_free_r+0x28>
 8009c0c:	681c      	ldr	r4, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	6053      	str	r3, [r2, #4]
 8009c12:	4421      	add	r1, r4
 8009c14:	6011      	str	r1, [r2, #0]
 8009c16:	e7d7      	b.n	8009bc8 <_free_r+0x28>
 8009c18:	d902      	bls.n	8009c20 <_free_r+0x80>
 8009c1a:	230c      	movs	r3, #12
 8009c1c:	6003      	str	r3, [r0, #0]
 8009c1e:	e7d3      	b.n	8009bc8 <_free_r+0x28>
 8009c20:	6825      	ldr	r5, [r4, #0]
 8009c22:	1961      	adds	r1, r4, r5
 8009c24:	428b      	cmp	r3, r1
 8009c26:	bf04      	itt	eq
 8009c28:	6819      	ldreq	r1, [r3, #0]
 8009c2a:	685b      	ldreq	r3, [r3, #4]
 8009c2c:	6063      	str	r3, [r4, #4]
 8009c2e:	bf04      	itt	eq
 8009c30:	1949      	addeq	r1, r1, r5
 8009c32:	6021      	streq	r1, [r4, #0]
 8009c34:	6054      	str	r4, [r2, #4]
 8009c36:	e7c7      	b.n	8009bc8 <_free_r+0x28>
 8009c38:	b003      	add	sp, #12
 8009c3a:	bd30      	pop	{r4, r5, pc}
 8009c3c:	20013438 	.word	0x20013438

08009c40 <_realloc_r>:
 8009c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c42:	4607      	mov	r7, r0
 8009c44:	4614      	mov	r4, r2
 8009c46:	460e      	mov	r6, r1
 8009c48:	b921      	cbnz	r1, 8009c54 <_realloc_r+0x14>
 8009c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c4e:	4611      	mov	r1, r2
 8009c50:	f7ff b880 	b.w	8008d54 <_malloc_r>
 8009c54:	b922      	cbnz	r2, 8009c60 <_realloc_r+0x20>
 8009c56:	f7ff ffa3 	bl	8009ba0 <_free_r>
 8009c5a:	4625      	mov	r5, r4
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c60:	f000 f848 	bl	8009cf4 <_malloc_usable_size_r>
 8009c64:	42a0      	cmp	r0, r4
 8009c66:	d20f      	bcs.n	8009c88 <_realloc_r+0x48>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f7ff f872 	bl	8008d54 <_malloc_r>
 8009c70:	4605      	mov	r5, r0
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d0f2      	beq.n	8009c5c <_realloc_r+0x1c>
 8009c76:	4631      	mov	r1, r6
 8009c78:	4622      	mov	r2, r4
 8009c7a:	f7fe ff25 	bl	8008ac8 <memcpy>
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ff8d 	bl	8009ba0 <_free_r>
 8009c86:	e7e9      	b.n	8009c5c <_realloc_r+0x1c>
 8009c88:	4635      	mov	r5, r6
 8009c8a:	e7e7      	b.n	8009c5c <_realloc_r+0x1c>

08009c8c <_read_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d07      	ldr	r5, [pc, #28]	; (8009cac <_read_r+0x20>)
 8009c90:	4604      	mov	r4, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	2200      	movs	r2, #0
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7f7 fb00 	bl	80012a0 <_read>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_read_r+0x1e>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_read_r+0x1e>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	2001361c 	.word	0x2001361c

08009cb0 <_fstat_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4d07      	ldr	r5, [pc, #28]	; (8009cd0 <_fstat_r+0x20>)
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	4608      	mov	r0, r1
 8009cba:	4611      	mov	r1, r2
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	f7f7 fb18 	bl	80012f2 <_fstat>
 8009cc2:	1c43      	adds	r3, r0, #1
 8009cc4:	d102      	bne.n	8009ccc <_fstat_r+0x1c>
 8009cc6:	682b      	ldr	r3, [r5, #0]
 8009cc8:	b103      	cbz	r3, 8009ccc <_fstat_r+0x1c>
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	bd38      	pop	{r3, r4, r5, pc}
 8009cce:	bf00      	nop
 8009cd0:	2001361c 	.word	0x2001361c

08009cd4 <_isatty_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4d06      	ldr	r5, [pc, #24]	; (8009cf0 <_isatty_r+0x1c>)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	602b      	str	r3, [r5, #0]
 8009ce0:	f7f7 fb17 	bl	8001312 <_isatty>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d102      	bne.n	8009cee <_isatty_r+0x1a>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	b103      	cbz	r3, 8009cee <_isatty_r+0x1a>
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	bd38      	pop	{r3, r4, r5, pc}
 8009cf0:	2001361c 	.word	0x2001361c

08009cf4 <_malloc_usable_size_r>:
 8009cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf8:	1f18      	subs	r0, r3, #4
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bfbc      	itt	lt
 8009cfe:	580b      	ldrlt	r3, [r1, r0]
 8009d00:	18c0      	addlt	r0, r0, r3
 8009d02:	4770      	bx	lr

08009d04 <_sbrk>:
 8009d04:	4b04      	ldr	r3, [pc, #16]	; (8009d18 <_sbrk+0x14>)
 8009d06:	6819      	ldr	r1, [r3, #0]
 8009d08:	4602      	mov	r2, r0
 8009d0a:	b909      	cbnz	r1, 8009d10 <_sbrk+0xc>
 8009d0c:	4903      	ldr	r1, [pc, #12]	; (8009d1c <_sbrk+0x18>)
 8009d0e:	6019      	str	r1, [r3, #0]
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	4402      	add	r2, r0
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	4770      	bx	lr
 8009d18:	20013440 	.word	0x20013440
 8009d1c:	20013620 	.word	0x20013620

08009d20 <_init>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	bf00      	nop
 8009d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d26:	bc08      	pop	{r3}
 8009d28:	469e      	mov	lr, r3
 8009d2a:	4770      	bx	lr

08009d2c <_fini>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr
