
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006264  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006650  08006650  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006658  08006658  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014420  20000020  08006680  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014440  08006680  00024440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017202  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003140  00000000  00000000  00037252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  0003b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a3a  00000000  00000000  0003c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cb1  00000000  00000000  0006004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db7c8  00000000  00000000  00078cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001544c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a54  00000000  00000000  00154518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000020 	.word	0x20000020
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800641c 	.word	0x0800641c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000024 	.word	0x20000024
 800020c:	0800641c 	.word	0x0800641c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014398 	.word	0x20014398

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a2:	f000 fbc3 	bl	8000d2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a6:	f000 f8b5 	bl	8000714 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005aa:	f000 f925 	bl	80007f8 <MX_GPIO_Init>

	/* USER CODE BEGIN 2 */
	SEGGER_UART_init(500000);
 80005ae:	4847      	ldr	r0, [pc, #284]	; (80006cc <main+0x130>)
 80005b0:	f003 fd26 	bl	8004000 <SEGGER_UART_init>

	//CYCLCNT enable
	DWT_CTRL |= ( 1 << 0);
 80005b4:	4b46      	ldr	r3, [pc, #280]	; (80006d0 <main+0x134>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a45      	ldr	r2, [pc, #276]	; (80006d0 <main+0x134>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 80005c0:	f003 fa94 	bl	8003aec <SEGGER_SYSVIEW_Conf>
	//SEGGER_SYSVIEW_Start(); //comment out if using UART based continuous recording

	//Create Task 1: Red LED
	status = xTaskCreate(led_red_handler, "LED_RED_TASK", 200, NULL, 2, &ledr_task_handle);
 80005c4:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <main+0x138>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	22c8      	movs	r2, #200	; 0xc8
 80005d0:	4941      	ldr	r1, [pc, #260]	; (80006d8 <main+0x13c>)
 80005d2:	4842      	ldr	r0, [pc, #264]	; (80006dc <main+0x140>)
 80005d4:	f001 ffe8 	bl	80025a8 <xTaskCreate>
 80005d8:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d00a      	beq.n	80005f6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e4:	f383 8811 	msr	BASEPRI, r3
 80005e8:	f3bf 8f6f 	isb	sy
 80005ec:	f3bf 8f4f 	dsb	sy
 80005f0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f2:	bf00      	nop
 80005f4:	e7fe      	b.n	80005f4 <main+0x58>

	next_task_handle = ledy_task_handle;
 80005f6:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <main+0x144>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a3a      	ldr	r2, [pc, #232]	; (80006e4 <main+0x148>)
 80005fc:	6013      	str	r3, [r2, #0]

	//Create Task 2: Yellow LED
	status = xTaskCreate(led_yellow_handler, "LED_YELLOW_TASK", 200, NULL, 2, &ledy_task_handle);
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <main+0x144>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	22c8      	movs	r2, #200	; 0xc8
 800060a:	4937      	ldr	r1, [pc, #220]	; (80006e8 <main+0x14c>)
 800060c:	4837      	ldr	r0, [pc, #220]	; (80006ec <main+0x150>)
 800060e:	f001 ffcb 	bl	80025a8 <xTaskCreate>
 8000612:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d00a      	beq.n	8000630 <main+0x94>
        __asm volatile
 800061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	f3bf 8f6f 	isb	sy
 8000626:	f3bf 8f4f 	dsb	sy
 800062a:	60fb      	str	r3, [r7, #12]
    }
 800062c:	bf00      	nop
 800062e:	e7fe      	b.n	800062e <main+0x92>

	//Create Task 3: Blue LED
	status = xTaskCreate(led_blue_handler, "LED_BLUE_TASK", 200, NULL, 2, &ledb_task_handle);
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <main+0x154>)
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	492d      	ldr	r1, [pc, #180]	; (80006f4 <main+0x158>)
 800063e:	482e      	ldr	r0, [pc, #184]	; (80006f8 <main+0x15c>)
 8000640:	f001 ffb2 	bl	80025a8 <xTaskCreate>
 8000644:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0xc6>
        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	60bb      	str	r3, [r7, #8]
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0xc4>

	//Create Task 4: Green LED
	status = xTaskCreate(led_green_handler, "LED_GREEN_TASK", 200, NULL, 2, &ledg_task_handle);
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <main+0x160>)
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	4924      	ldr	r1, [pc, #144]	; (8000700 <main+0x164>)
 8000670:	4824      	ldr	r0, [pc, #144]	; (8000704 <main+0x168>)
 8000672:	f001 ff99 	bl	80025a8 <xTaskCreate>
 8000676:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0xf8>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	607b      	str	r3, [r7, #4]
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0xf6>

	//Create Task 5: Button
	status = xTaskCreate(button_handler, "BUTTON_TASK", 200, NULL, 4, &btn_task_handle);
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <main+0x16c>)
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	2304      	movs	r3, #4
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	22c8      	movs	r2, #200	; 0xc8
 80006a0:	491a      	ldr	r1, [pc, #104]	; (800070c <main+0x170>)
 80006a2:	481b      	ldr	r0, [pc, #108]	; (8000710 <main+0x174>)
 80006a4:	f001 ff80 	bl	80025a8 <xTaskCreate>
 80006a8:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d00a      	beq.n	80006c6 <main+0x12a>
        __asm volatile
 80006b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	603b      	str	r3, [r7, #0]
    }
 80006c2:	bf00      	nop
 80006c4:	e7fe      	b.n	80006c4 <main+0x128>

	//start the freeRTOS scheduler
	vTaskStartScheduler();
 80006c6:	f002 f9b5 	bl	8002a34 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80006ca:	e7fe      	b.n	80006ca <main+0x12e>
 80006cc:	0007a120 	.word	0x0007a120
 80006d0:	e0001000 	.word	0xe0001000
 80006d4:	20014344 	.word	0x20014344
 80006d8:	08006434 	.word	0x08006434
 80006dc:	08000921 	.word	0x08000921
 80006e0:	2001433c 	.word	0x2001433c
 80006e4:	2000003c 	.word	0x2000003c
 80006e8:	08006444 	.word	0x08006444
 80006ec:	0800098d 	.word	0x0800098d
 80006f0:	20014348 	.word	0x20014348
 80006f4:	08006454 	.word	0x08006454
 80006f8:	080009fd 	.word	0x080009fd
 80006fc:	20014338 	.word	0x20014338
 8000700:	08006464 	.word	0x08006464
 8000704:	08000a6d 	.word	0x08000a6d
 8000708:	20014340 	.word	0x20014340
 800070c:	08006474 	.word	0x08006474
 8000710:	08000af1 	.word	0x08000af1

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2234      	movs	r2, #52	; 0x34
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f005 fe72 	bl	800640c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <SystemClock_Config+0xdc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <SystemClock_Config+0xdc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <SystemClock_Config+0xdc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xe0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <SystemClock_Config+0xe0>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <SystemClock_Config+0xe0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000788:	23b4      	movs	r3, #180	; 0xb4
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4618      	mov	r0, r3
 800079e:	f001 f903 	bl	80019a8 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007a8:	f000 f9dc 	bl	8000b64 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ac:	f000 fdc2 	bl	8001334 <HAL_PWREx_EnableOverDrive>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007b6:	f000 f9d5 	bl	8000b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2105      	movs	r1, #5
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fdfb 	bl	80013d4 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007e4:	f000 f9be 	bl	8000b64 <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	3750      	adds	r7, #80	; 0x50
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <MX_GPIO_Init+0x118>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a3e      	ldr	r2, [pc, #248]	; (8000910 <MX_GPIO_Init+0x118>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <MX_GPIO_Init+0x118>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <MX_GPIO_Init+0x118>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a37      	ldr	r2, [pc, #220]	; (8000910 <MX_GPIO_Init+0x118>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MX_GPIO_Init+0x118>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <MX_GPIO_Init+0x118>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a30      	ldr	r2, [pc, #192]	; (8000910 <MX_GPIO_Init+0x118>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <MX_GPIO_Init+0x118>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <MX_GPIO_Init+0x118>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a29      	ldr	r2, [pc, #164]	; (8000910 <MX_GPIO_Init+0x118>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_GPIO_Init+0x118>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4824      	ldr	r0, [pc, #144]	; (8000914 <MX_GPIO_Init+0x11c>)
 8000884:	f000 fd22 	bl	80012cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800088e:	4822      	ldr	r0, [pc, #136]	; (8000918 <MX_GPIO_Init+0x120>)
 8000890:	f000 fd1c 	bl	80012cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Push_Button_Pin */
	GPIO_InitStruct.Pin = Push_Button_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	481c      	ldr	r0, [pc, #112]	; (800091c <MX_GPIO_Init+0x124>)
 80008aa:	f000 fb63 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
	GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ae:	230c      	movs	r3, #12
 80008b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008be:	2307      	movs	r3, #7
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_GPIO_Init+0x11c>)
 80008ca:	f000 fb53 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80008ce:	2320      	movs	r3, #32
 80008d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_GPIO_Init+0x11c>)
 80008e6:	f000 fb45 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_YELLOW_Pin LED_BLUE_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_BLUE_Pin;
 80008ea:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80008ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_GPIO_Init+0x120>)
 8000904:	f000 fb36 	bl	8000f74 <HAL_GPIO_Init>

}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800

08000920 <led_red_handler>:

/* USER CODE BEGIN 4 */
static void led_red_handler(void* parameters) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af02      	add	r7, sp, #8
 8000926:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <led_red_handler+0x58>)
 800092a:	f005 fc91 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <led_red_handler+0x5c>)
 8000932:	f000 fce4 	bl	80012fe <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f002 fb6a 	bl	800301c <xTaskGenericNotifyWait>
 8000948:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d1eb      	bne.n	8000928 <led_red_handler+0x8>
			vTaskSuspendAll();
 8000950:	f002 f8cc 	bl	8002aec <vTaskSuspendAll>
			next_task_handle = ledy_task_handle;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <led_red_handler+0x60>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <led_red_handler+0x64>)
 800095a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800095c:	f002 f8d4 	bl	8002b08 <xTaskResumeAll>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <led_red_handler+0x5c>)
 8000966:	f000 fcb1 	bl	80012cc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Red LED task");
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <led_red_handler+0x68>)
 800096c:	f005 fc70 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000970:	2000      	movs	r0, #0
 8000972:	f001 ff7d 	bl	8002870 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red LED");
 8000976:	e7d7      	b.n	8000928 <led_red_handler+0x8>
 8000978:	08006480 	.word	0x08006480
 800097c:	40020400 	.word	0x40020400
 8000980:	2001433c 	.word	0x2001433c
 8000984:	2000003c 	.word	0x2000003c
 8000988:	08006494 	.word	0x08006494

0800098c <led_yellow_handler>:
		}
	}
}


static void led_yellow_handler(void* parameters) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 8000994:	4814      	ldr	r0, [pc, #80]	; (80009e8 <led_yellow_handler+0x5c>)
 8000996:	f005 fc5b 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <led_yellow_handler+0x60>)
 80009a0:	f000 fcad 	bl	80012fe <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 80009a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2000      	movs	r0, #0
 80009b2:	f002 fb33 	bl	800301c <xTaskGenericNotifyWait>
 80009b6:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE) {
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d1ea      	bne.n	8000994 <led_yellow_handler+0x8>
			vTaskSuspendAll();
 80009be:	f002 f895 	bl	8002aec <vTaskSuspendAll>
			next_task_handle = ledb_task_handle;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <led_yellow_handler+0x64>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <led_yellow_handler+0x68>)
 80009c8:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80009ca:	f002 f89d 	bl	8002b08 <xTaskResumeAll>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <led_yellow_handler+0x60>)
 80009d6:	f000 fc79 	bl	80012cc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Yellow LED task");
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <led_yellow_handler+0x6c>)
 80009dc:	f005 fc38 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 ff45 	bl	8002870 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Yellow LED");
 80009e6:	e7d5      	b.n	8000994 <led_yellow_handler+0x8>
 80009e8:	080064a8 	.word	0x080064a8
 80009ec:	40020400 	.word	0x40020400
 80009f0:	20014348 	.word	0x20014348
 80009f4:	2000003c 	.word	0x2000003c
 80009f8:	080064bc 	.word	0x080064bc

080009fc <led_blue_handler>:
		}
	}
}

static void led_blue_handler(void* parameters) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	6078      	str	r0, [r7, #4]

	BaseType_t status;

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000a04:	4814      	ldr	r0, [pc, #80]	; (8000a58 <led_blue_handler+0x5c>)
 8000a06:	f005 fc23 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <led_blue_handler+0x60>)
 8000a10:	f000 fc75 	bl	80012fe <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(600));
 8000a14:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2000      	movs	r0, #0
 8000a22:	f002 fafb 	bl	800301c <xTaskGenericNotifyWait>
 8000a26:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE) {
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d1ea      	bne.n	8000a04 <led_blue_handler+0x8>
			vTaskSuspendAll();
 8000a2e:	f002 f85d 	bl	8002aec <vTaskSuspendAll>
			next_task_handle = ledg_task_handle;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <led_blue_handler+0x64>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <led_blue_handler+0x68>)
 8000a38:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a3a:	f002 f865 	bl	8002b08 <xTaskResumeAll>
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <led_blue_handler+0x60>)
 8000a46:	f000 fc41 	bl	80012cc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Blue LED task");
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <led_blue_handler+0x6c>)
 8000a4c:	f005 fc00 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f001 ff0d 	bl	8002870 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Blue LED");
 8000a56:	e7d5      	b.n	8000a04 <led_blue_handler+0x8>
 8000a58:	080064d4 	.word	0x080064d4
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	20014338 	.word	0x20014338
 8000a64:	2000003c 	.word	0x2000003c
 8000a68:	080064e8 	.word	0x080064e8

08000a6c <led_green_handler>:
		}
	}
}

static void led_green_handler(void* parameters) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1) {
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000a74:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <led_green_handler+0x6c>)
 8000a76:	f005 fbeb 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7e:	4817      	ldr	r0, [pc, #92]	; (8000adc <led_green_handler+0x70>)
 8000a80:	f000 fc3d 	bl	80012fe <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000a84:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f002 fac3 	bl	800301c <xTaskGenericNotifyWait>
 8000a96:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE){
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d1ea      	bne.n	8000a74 <led_green_handler+0x8>
			vTaskSuspendAll();
 8000a9e:	f002 f825 	bl	8002aec <vTaskSuspendAll>
			next_task_handle = NULL;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <led_green_handler+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000aa8:	f002 f82e 	bl	8002b08 <xTaskResumeAll>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	480a      	ldr	r0, [pc, #40]	; (8000adc <led_green_handler+0x70>)
 8000ab4:	f000 fc0a 	bl	80012cc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete Button task");
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <led_green_handler+0x78>)
 8000aba:	f005 fbc9 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <led_green_handler+0x7c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fed4 	bl	8002870 <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Delete Green LED task");
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <led_green_handler+0x80>)
 8000aca:	f005 fbc1 	bl	8006250 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f001 fece 	bl	8002870 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Green LED");
 8000ad4:	e7ce      	b.n	8000a74 <led_green_handler+0x8>
 8000ad6:	bf00      	nop
 8000ad8:	08006500 	.word	0x08006500
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	2000003c 	.word	0x2000003c
 8000ae4:	08006514 	.word	0x08006514
 8000ae8:	20014340 	.word	0x20014340
 8000aec:	08006528 	.word	0x08006528

08000af0 <button_handler>:
		}
	}
}

static void button_handler(void* parameters) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]

	uint8_t btn_read = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]

	while(1) {
		btn_read = HAL_GPIO_ReadPin(Push_Button_GPIO_Port, Push_Button_Pin);
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <button_handler+0x48>)
 8000b06:	f000 fbc9 	bl	800129c <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73bb      	strb	r3, [r7, #14]

		if(btn_read) {
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00b      	beq.n	8000b2c <button_handler+0x3c>
			if(! prev_read)
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d108      	bne.n	8000b2c <button_handler+0x3c>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <button_handler+0x4c>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	f002 fb00 	bl	800312c <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000b30:	200a      	movs	r0, #10
 8000b32:	f001 ff47 	bl	80029c4 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(Push_Button_GPIO_Port, Push_Button_Pin);
 8000b36:	e7e3      	b.n	8000b00 <button_handler+0x10>
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	2000003c 	.word	0x2000003c

08000b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d101      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b52:	f000 f90d 	bl	8000d70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40001000 	.word	0x40001000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	; 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	2036      	movs	r0, #54	; 0x36
 8000bd6:	f000 f9a3 	bl	8000f20 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bda:	2036      	movs	r0, #54	; 0x36
 8000bdc:	f000 f9bc 	bl	8000f58 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_InitTick+0xa4>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_InitTick+0xa4>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xa4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfc:	f107 0210 	add.w	r2, r7, #16
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fcea 	bl	80015e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c0c:	f000 fcd4 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 8000c10:	4603      	mov	r3, r0
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_InitTick+0xa8>)
 8000c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1e:	0c9b      	lsrs	r3, r3, #18
 8000c20:	3b01      	subs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_InitTick+0xac>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_InitTick+0xb0>)
 8000c28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_InitTick+0xac>)
 8000c2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_InitTick+0xac>)
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_InitTick+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_InitTick+0xac>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_InitTick+0xac>)
 8000c46:	f001 f94d 	bl	8001ee4 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d104      	bne.n	8000c5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <HAL_InitTick+0xac>)
 8000c52:	f001 f9a1 	bl	8001f98 <HAL_TIM_Base_Start_IT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3730      	adds	r7, #48	; 0x30
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	431bde83 	.word	0x431bde83
 8000c6c:	2001434c 	.word	0x2001434c
 8000c70:	40001000 	.word	0x40001000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <TIM6_DAC_IRQHandler+0x10>)
 8000ca6:	f001 f9e7 	bl	8002078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2001434c 	.word	0x2001434c

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d02:	f7ff ffd7 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f005 fb41 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fc47 	bl	800059c <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000d1c:	08006660 	.word	0x08006660
  ldr r2, =_sbss
 8000d20:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000d24:	20014440 	.word	0x20014440

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f8d8 	bl	8000f0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff ff30 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff ff06 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20014394 	.word	0x20014394

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20014394 	.word	0x20014394

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ff4c 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f32:	f7ff ff61 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f7ff ffb1 	bl	8000ea4 <NVIC_EncodePriority>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff80 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff54 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	e165      	b.n	800125c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f040 8154 	bne.w	8001256 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d005      	beq.n	8000fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d130      	bne.n	8001028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b03      	cmp	r3, #3
 8001032:	d017      	beq.n	8001064 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d123      	bne.n	80010b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	69b9      	ldr	r1, [r7, #24]
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80ae 	beq.w	8001256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_GPIO_Init+0x300>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a5c      	ldr	r2, [pc, #368]	; (8001274 <HAL_GPIO_Init+0x300>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b5a      	ldr	r3, [pc, #360]	; (8001274 <HAL_GPIO_Init+0x300>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001116:	4a58      	ldr	r2, [pc, #352]	; (8001278 <HAL_GPIO_Init+0x304>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_GPIO_Init+0x308>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x21a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_GPIO_Init+0x30c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x216>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <HAL_GPIO_Init+0x310>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x212>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4c      	ldr	r2, [pc, #304]	; (8001288 <HAL_GPIO_Init+0x314>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x20e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4b      	ldr	r2, [pc, #300]	; (800128c <HAL_GPIO_Init+0x318>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x20a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4a      	ldr	r2, [pc, #296]	; (8001290 <HAL_GPIO_Init+0x31c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x206>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a49      	ldr	r2, [pc, #292]	; (8001294 <HAL_GPIO_Init+0x320>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x202>
 8001172:	2306      	movs	r3, #6
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001176:	2307      	movs	r3, #7
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	; (8001278 <HAL_GPIO_Init+0x304>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_GPIO_Init+0x324>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d2:	4a31      	ldr	r2, [pc, #196]	; (8001298 <HAL_GPIO_Init+0x324>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_GPIO_Init+0x324>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fc:	4a26      	ldr	r2, [pc, #152]	; (8001298 <HAL_GPIO_Init+0x324>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_GPIO_Init+0x324>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f ae96 	bls.w	8000f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001310:	887a      	ldrh	r2, [r7, #2]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43d9      	mvns	r1, r3
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	400b      	ands	r3, r1
 8001320:	431a      	orrs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001360:	f7ff fd1a 	bl	8000d98 <HAL_GetTick>
 8001364:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001366:	e009      	b.n	800137c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001368:	f7ff fd16 	bl	8000d98 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001376:	d901      	bls.n	800137c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e01f      	b.n	80013bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_PWREx_EnableOverDrive+0x98>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d1ee      	bne.n	8001368 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001390:	f7ff fd02 	bl	8000d98 <HAL_GetTick>
 8001394:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001396:	e009      	b.n	80013ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001398:	f7ff fcfe 	bl	8000d98 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a6:	d901      	bls.n	80013ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e007      	b.n	80013bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <HAL_PWREx_EnableOverDrive+0x98>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013b8:	d1ee      	bne.n	8001398 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	420e0040 	.word	0x420e0040
 80013cc:	40007000 	.word	0x40007000
 80013d0:	420e0044 	.word	0x420e0044

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0cc      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d90c      	bls.n	8001410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b8      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001428:	4b59      	ldr	r3, [pc, #356]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	4a58      	ldr	r2, [pc, #352]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800142e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b50      	ldr	r3, [pc, #320]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	494d      	ldr	r1, [pc, #308]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d003      	beq.n	8001492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148e:	2b03      	cmp	r3, #3
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e06f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e067      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b2:	4b37      	ldr	r3, [pc, #220]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f023 0203 	bic.w	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4934      	ldr	r1, [pc, #208]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c4:	f7ff fc68 	bl	8000d98 <HAL_GetTick>
 80014c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f7ff fc64 	bl	8000d98 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e04f      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 020c 	and.w	r2, r3, #12
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1eb      	bne.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e032      	b.n	8001582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	490e      	ldr	r1, [pc, #56]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800155a:	f000 f873 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 800155e:	4602      	mov	r2, r0
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	490a      	ldr	r1, [pc, #40]	; (8001594 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	5ccb      	ldrb	r3, [r1, r3]
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1c8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fb20 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00
 8001590:	40023800 	.word	0x40023800
 8001594:	08006610 	.word	0x08006610
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000000 	.word	0x20000000

080015b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015bc:	f7ff fff0 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	0a9b      	lsrs	r3, r3, #10
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4903      	ldr	r1, [pc, #12]	; (80015dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	08006620 	.word	0x08006620

080015e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	220f      	movs	r2, #15
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 0203 	and.w	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_GetClockConfig+0x5c>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_RCC_GetClockConfig+0x60>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 020f 	and.w	r2, r3, #15
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001648:	b088      	sub	sp, #32
 800164a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001660:	4bce      	ldr	r3, [pc, #824]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b0c      	cmp	r3, #12
 800166a:	f200 818d 	bhi.w	8001988 <HAL_RCC_GetSysClockFreq+0x344>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <HAL_RCC_GetSysClockFreq+0x30>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016a9 	.word	0x080016a9
 8001678:	08001989 	.word	0x08001989
 800167c:	08001989 	.word	0x08001989
 8001680:	08001989 	.word	0x08001989
 8001684:	080016af 	.word	0x080016af
 8001688:	08001989 	.word	0x08001989
 800168c:	08001989 	.word	0x08001989
 8001690:	08001989 	.word	0x08001989
 8001694:	080016b5 	.word	0x080016b5
 8001698:	08001989 	.word	0x08001989
 800169c:	08001989 	.word	0x08001989
 80016a0:	08001989 	.word	0x08001989
 80016a4:	08001829 	.word	0x08001829
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016a8:	4bbd      	ldr	r3, [pc, #756]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016aa:	61bb      	str	r3, [r7, #24]
       break;
 80016ac:	e16f      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ae:	4bbd      	ldr	r3, [pc, #756]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x360>)
 80016b0:	61bb      	str	r3, [r7, #24]
      break;
 80016b2:	e16c      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b4:	4bb9      	ldr	r3, [pc, #740]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016bc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016be:	4bb7      	ldr	r3, [pc, #732]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d053      	beq.n	8001772 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ca:	4bb4      	ldr	r3, [pc, #720]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	099b      	lsrs	r3, r3, #6
 80016d0:	461a      	mov	r2, r3
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	ea02 0400 	and.w	r4, r2, r0
 80016e2:	603c      	str	r4, [r7, #0]
 80016e4:	400b      	ands	r3, r1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016ec:	4620      	mov	r0, r4
 80016ee:	4629      	mov	r1, r5
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	014b      	lsls	r3, r1, #5
 80016fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016fe:	0142      	lsls	r2, r0, #5
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	4623      	mov	r3, r4
 8001706:	1ac0      	subs	r0, r0, r3
 8001708:	462b      	mov	r3, r5
 800170a:	eb61 0103 	sbc.w	r1, r1, r3
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	018b      	lsls	r3, r1, #6
 8001718:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800171c:	0182      	lsls	r2, r0, #6
 800171e:	1a12      	subs	r2, r2, r0
 8001720:	eb63 0301 	sbc.w	r3, r3, r1
 8001724:	f04f 0000 	mov.w	r0, #0
 8001728:	f04f 0100 	mov.w	r1, #0
 800172c:	00d9      	lsls	r1, r3, #3
 800172e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001732:	00d0      	lsls	r0, r2, #3
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4621      	mov	r1, r4
 800173a:	1852      	adds	r2, r2, r1
 800173c:	4629      	mov	r1, r5
 800173e:	eb43 0101 	adc.w	r1, r3, r1
 8001742:	460b      	mov	r3, r1
 8001744:	f04f 0000 	mov.w	r0, #0
 8001748:	f04f 0100 	mov.w	r1, #0
 800174c:	0259      	lsls	r1, r3, #9
 800174e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001752:	0250      	lsls	r0, r2, #9
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	461a      	mov	r2, r3
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	f7fe fd9e 	bl	80002a4 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	e04c      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b8a      	ldr	r3, [pc, #552]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	461a      	mov	r2, r3
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001782:	f04f 0100 	mov.w	r1, #0
 8001786:	ea02 0a00 	and.w	sl, r2, r0
 800178a:	ea03 0b01 	and.w	fp, r3, r1
 800178e:	4650      	mov	r0, sl
 8001790:	4659      	mov	r1, fp
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	014b      	lsls	r3, r1, #5
 800179c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017a0:	0142      	lsls	r2, r0, #5
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	ebb0 000a 	subs.w	r0, r0, sl
 80017aa:	eb61 010b 	sbc.w	r1, r1, fp
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	018b      	lsls	r3, r1, #6
 80017b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017bc:	0182      	lsls	r2, r0, #6
 80017be:	1a12      	subs	r2, r2, r0
 80017c0:	eb63 0301 	sbc.w	r3, r3, r1
 80017c4:	f04f 0000 	mov.w	r0, #0
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	00d9      	lsls	r1, r3, #3
 80017ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017d2:	00d0      	lsls	r0, r2, #3
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	eb12 020a 	adds.w	r2, r2, sl
 80017dc:	eb43 030b 	adc.w	r3, r3, fp
 80017e0:	f04f 0000 	mov.w	r0, #0
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	0299      	lsls	r1, r3, #10
 80017ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ee:	0290      	lsls	r0, r2, #10
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	461a      	mov	r2, r3
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	f7fe fd50 	bl	80002a4 <__aeabi_uldivmod>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4613      	mov	r3, r2
 800180a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800180c:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	3301      	adds	r3, #1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	61bb      	str	r3, [r7, #24]
      break;
 8001826:	e0b2      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001828:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001830:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001832:	4b5a      	ldr	r3, [pc, #360]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d04d      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183e:	4b57      	ldr	r3, [pc, #348]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	099b      	lsrs	r3, r3, #6
 8001844:	461a      	mov	r2, r3
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	ea02 0800 	and.w	r8, r2, r0
 8001856:	ea03 0901 	and.w	r9, r3, r1
 800185a:	4640      	mov	r0, r8
 800185c:	4649      	mov	r1, r9
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	014b      	lsls	r3, r1, #5
 8001868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800186c:	0142      	lsls	r2, r0, #5
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	ebb0 0008 	subs.w	r0, r0, r8
 8001876:	eb61 0109 	sbc.w	r1, r1, r9
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	018b      	lsls	r3, r1, #6
 8001884:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001888:	0182      	lsls	r2, r0, #6
 800188a:	1a12      	subs	r2, r2, r0
 800188c:	eb63 0301 	sbc.w	r3, r3, r1
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	00d9      	lsls	r1, r3, #3
 800189a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800189e:	00d0      	lsls	r0, r2, #3
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	eb12 0208 	adds.w	r2, r2, r8
 80018a8:	eb43 0309 	adc.w	r3, r3, r9
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	0259      	lsls	r1, r3, #9
 80018b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018ba:	0250      	lsls	r0, r2, #9
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	f7fe fcea 	bl	80002a4 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	e04a      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	099b      	lsrs	r3, r3, #6
 80018e0:	461a      	mov	r2, r3
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	ea02 0400 	and.w	r4, r2, r0
 80018f2:	ea03 0501 	and.w	r5, r3, r1
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	014b      	lsls	r3, r1, #5
 8001904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001908:	0142      	lsls	r2, r0, #5
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	1b00      	subs	r0, r0, r4
 8001910:	eb61 0105 	sbc.w	r1, r1, r5
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	018b      	lsls	r3, r1, #6
 800191e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001922:	0182      	lsls	r2, r0, #6
 8001924:	1a12      	subs	r2, r2, r0
 8001926:	eb63 0301 	sbc.w	r3, r3, r1
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	00d9      	lsls	r1, r3, #3
 8001934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001938:	00d0      	lsls	r0, r2, #3
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	1912      	adds	r2, r2, r4
 8001940:	eb45 0303 	adc.w	r3, r5, r3
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	0299      	lsls	r1, r3, #10
 800194e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001952:	0290      	lsls	r0, r2, #10
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	461a      	mov	r2, r3
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f7fe fc9e 	bl	80002a4 <__aeabi_uldivmod>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4613      	mov	r3, r2
 800196e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_RCC_GetSysClockFreq+0x358>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	0f1b      	lsrs	r3, r3, #28
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3
 8001984:	61bb      	str	r3, [r7, #24]
      break;
 8001986:	e002      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800198a:	61bb      	str	r3, [r7, #24]
      break;
 800198c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198e:	69bb      	ldr	r3, [r7, #24]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	00f42400 	.word	0x00f42400
 80019a4:	007a1200 	.word	0x007a1200

080019a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e28d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8083 	beq.w	8001ace <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019c8:	4b94      	ldr	r3, [pc, #592]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d019      	beq.n	8001a08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019d4:	4b91      	ldr	r3, [pc, #580]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019e0:	4b8e      	ldr	r3, [pc, #568]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ec:	d00c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ee:	4b8b      	ldr	r3, [pc, #556]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d112      	bne.n	8001a20 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fa:	4b88      	ldr	r3, [pc, #544]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a06:	d10b      	bne.n	8001a20 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05b      	beq.n	8001acc <HAL_RCC_OscConfig+0x124>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d157      	bne.n	8001acc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e25a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d106      	bne.n	8001a38 <HAL_RCC_OscConfig+0x90>
 8001a2a:	4b7c      	ldr	r3, [pc, #496]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7b      	ldr	r2, [pc, #492]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xcc>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0xb4>
 8001a42:	4b76      	ldr	r3, [pc, #472]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a75      	ldr	r2, [pc, #468]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a72      	ldr	r2, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xcc>
 8001a5c:	4b6f      	ldr	r3, [pc, #444]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6e      	ldr	r2, [pc, #440]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6b      	ldr	r2, [pc, #428]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f98c 	bl	8000d98 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff f988 	bl	8000d98 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e21f      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b61      	ldr	r3, [pc, #388]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xdc>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f978 	bl	8000d98 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff f974 	bl	8000d98 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e20b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b57      	ldr	r3, [pc, #348]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x104>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06f      	beq.n	8001bba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ada:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d017      	beq.n	8001b16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ae6:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d105      	bne.n	8001afe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001af2:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d11c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_RCC_OscConfig+0x186>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e1d3      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	e03a      	b.n	8001bba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b4c:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_RCC_OscConfig+0x278>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff f921 	bl	8000d98 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f91d 	bl	8000d98 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1b4      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4925      	ldr	r1, [pc, #148]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
 8001b8c:	e015      	b.n	8001bba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x278>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f900 	bl	8000d98 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f8fc 	bl	8000d98 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e193      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d036      	beq.n	8001c34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d016      	beq.n	8001bfc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x27c>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff f8e0 	bl	8000d98 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7ff f8dc 	bl	8000d98 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e173      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x234>
 8001bfa:	e01b      	b.n	8001c34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff f8c9 	bl	8000d98 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	e00e      	b.n	8001c28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f8c5 	bl	8000d98 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d907      	bls.n	8001c28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e15c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	42470000 	.word	0x42470000
 8001c24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ea      	bne.n	8001c0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8097 	beq.w	8001d70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b83      	ldr	r3, [pc, #524]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b7f      	ldr	r3, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b7c      	ldr	r3, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_OscConfig+0x4b0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x4b0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_RCC_OscConfig+0x4b0>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f885 	bl	8000d98 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff f881 	bl	8000d98 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e118      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	4b6c      	ldr	r3, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x4b0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x31e>
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a65      	ldr	r2, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc4:	e01c      	b.n	8001d00 <HAL_RCC_OscConfig+0x358>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x340>
 8001cce:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0x358>
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a59      	ldr	r2, [pc, #356]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d015      	beq.n	8001d34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff f846 	bl	8000d98 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7ff f842 	bl	8000d98 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0d7      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ee      	beq.n	8001d10 <HAL_RCC_OscConfig+0x368>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f830 	bl	8000d98 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f82c 	bl	8000d98 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0c1      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ee      	bne.n	8001d3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80ad 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d060      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d145      	bne.n	8001e1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_RCC_OscConfig+0x4b4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f800 	bl	8000d98 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fffc 	bl	8000d98 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e093      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	071b      	lsls	r3, r3, #28
 8001de6:	491b      	ldr	r1, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x4b4>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7fe ffd1 	bl	8000d98 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe ffcd 	bl	8000d98 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e064      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x452>
 8001e18:	e05c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_RCC_OscConfig+0x4b4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe ffba 	bl	8000d98 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe ffb6 	bl	8000d98 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e04d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x480>
 8001e46:	e045      	b.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e040      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <HAL_RCC_OscConfig+0x538>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d030      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d129      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d122      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d119      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	085b      	lsrs	r3, r3, #1
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d10f      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e041      	b.n	8001f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f839 	bl	8001f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f000 f9d8 	bl	80022d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d001      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e04e      	b.n	800204e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a23      	ldr	r2, [pc, #140]	; (800205c <HAL_TIM_Base_Start_IT+0xc4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d022      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fda:	d01d      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d018      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00e      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_TIM_Base_Start_IT+0xd4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	; (8002070 <HAL_TIM_Base_Start_IT+0xd8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_TIM_Base_Start_IT+0xdc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b06      	cmp	r3, #6
 8002028:	d010      	beq.n	800204c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203a:	e007      	b.n	800204c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40010000 	.word	0x40010000
 8002060:	40000400 	.word	0x40000400
 8002064:	40000800 	.word	0x40000800
 8002068:	40000c00 	.word	0x40000c00
 800206c:	40010400 	.word	0x40010400
 8002070:	40014000 	.word	0x40014000
 8002074:	40001800 	.word	0x40001800

08002078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d122      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0202 	mvn.w	r2, #2
 80020a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8ee 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8e0 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f8f1 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d122      	bne.n	8002128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d11b      	bne.n	8002128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0204 	mvn.w	r2, #4
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8c4 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8b6 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8c7 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b08      	cmp	r3, #8
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b08      	cmp	r3, #8
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0208 	mvn.w	r2, #8
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2204      	movs	r2, #4
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f89a 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f88c 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f89d 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b10      	cmp	r3, #16
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	2b10      	cmp	r3, #16
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0210 	mvn.w	r2, #16
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2208      	movs	r2, #8
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f870 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f862 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f873 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10e      	bne.n	80021fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0201 	mvn.w	r2, #1
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fca2 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b80      	cmp	r3, #128	; 0x80
 8002208:	d10e      	bne.n	8002228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002214:	2b80      	cmp	r3, #128	; 0x80
 8002216:	d107      	bne.n	8002228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f902 	bl	800242c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	2b40      	cmp	r3, #64	; 0x40
 8002234:	d10e      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d107      	bne.n	8002254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f838 	bl	80022c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b20      	cmp	r3, #32
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b20      	cmp	r3, #32
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0220 	mvn.w	r2, #32
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f8cc 	bl	8002418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a40      	ldr	r2, [pc, #256]	; (80023ec <TIM_Base_SetConfig+0x114>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d00f      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3d      	ldr	r2, [pc, #244]	; (80023f0 <TIM_Base_SetConfig+0x118>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00b      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3c      	ldr	r2, [pc, #240]	; (80023f4 <TIM_Base_SetConfig+0x11c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3b      	ldr	r2, [pc, #236]	; (80023f8 <TIM_Base_SetConfig+0x120>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3a      	ldr	r2, [pc, #232]	; (80023fc <TIM_Base_SetConfig+0x124>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <TIM_Base_SetConfig+0x114>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d027      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <TIM_Base_SetConfig+0x118>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d023      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <TIM_Base_SetConfig+0x11c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <TIM_Base_SetConfig+0x120>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <TIM_Base_SetConfig+0x124>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d017      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a28      	ldr	r2, [pc, #160]	; (8002400 <TIM_Base_SetConfig+0x128>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a27      	ldr	r2, [pc, #156]	; (8002404 <TIM_Base_SetConfig+0x12c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00f      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a26      	ldr	r2, [pc, #152]	; (8002408 <TIM_Base_SetConfig+0x130>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a25      	ldr	r2, [pc, #148]	; (800240c <TIM_Base_SetConfig+0x134>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a24      	ldr	r2, [pc, #144]	; (8002410 <TIM_Base_SetConfig+0x138>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a23      	ldr	r2, [pc, #140]	; (8002414 <TIM_Base_SetConfig+0x13c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d108      	bne.n	800239c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <TIM_Base_SetConfig+0x114>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <TIM_Base_SetConfig+0xf8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <TIM_Base_SetConfig+0x124>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d103      	bne.n	80023d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	615a      	str	r2, [r3, #20]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40010400 	.word	0x40010400
 8002400:	40014000 	.word	0x40014000
 8002404:	40014400 	.word	0x40014400
 8002408:	40014800 	.word	0x40014800
 800240c:	40001800 	.word	0x40001800
 8002410:	40001c00 	.word	0x40001c00
 8002414:	40002000 	.word	0x40002000

08002418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 0208 	add.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f103 0208 	add.w	r2, r3, #8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 0208 	add.w	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d103      	bne.n	8002502 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e00c      	b.n	800251c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3308      	adds	r3, #8
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e002      	b.n	8002510 <vListInsert+0x2e>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	d2f6      	bcs.n	800250a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6892      	ldr	r2, [r2, #8]
 800256a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6852      	ldr	r2, [r2, #4]
 8002574:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	d103      	bne.n	8002588 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1e5a      	subs	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	; 0x30
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 f975 	bl	80038ac <pvPortMalloc>
 80025c2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00e      	beq.n	80025e8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025ca:	2058      	movs	r0, #88	; 0x58
 80025cc:	f001 f96e 	bl	80038ac <pvPortMalloc>
 80025d0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
 80025de:	e005      	b.n	80025ec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80025e0:	6978      	ldr	r0, [r7, #20]
 80025e2:	f001 fa11 	bl	8003a08 <vPortFree>
 80025e6:	e001      	b.n	80025ec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d013      	beq.n	800261a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	2300      	movs	r3, #0
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	9302      	str	r3, [sp, #8]
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f80e 	bl	800262a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800260e:	69f8      	ldr	r0, [r7, #28]
 8002610:	f000 f8a2 	bl	8002758 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002614:	2301      	movs	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	e002      	b.n	8002620 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002620:	69bb      	ldr	r3, [r7, #24]
    }
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b088      	sub	sp, #32
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	461a      	mov	r2, r3
 8002642:	21a5      	movs	r1, #165	; 0xa5
 8002644:	f003 fee2 	bl	800640c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002652:	3b01      	subs	r3, #1
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f023 0307 	bic.w	r3, r3, #7
 8002660:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <prvInitialiseNewTask+0x58>
        __asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	617b      	str	r3, [r7, #20]
    }
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01f      	beq.n	80026c8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	e012      	b.n	80026b4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	7819      	ldrb	r1, [r3, #0]
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	3334      	adds	r3, #52	; 0x34
 800269e:	460a      	mov	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b09      	cmp	r3, #9
 80026b8:	d9e9      	bls.n	800268e <prvInitialiseNewTask+0x64>
 80026ba:	e000      	b.n	80026be <prvInitialiseNewTask+0x94>
            {
                break;
 80026bc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80026c6:	e003      	b.n	80026d0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d901      	bls.n	80026da <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026d6:	2304      	movs	r3, #4
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	2200      	movs	r2, #0
 80026ea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	3304      	adds	r3, #4
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fec5 	bl	8002480 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	3318      	adds	r3, #24
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fec0 	bl	8002480 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002704:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	f1c3 0205 	rsb	r2, r3, #5
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	3350      	adds	r3, #80	; 0x50
 800271a:	2204      	movs	r2, #4
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fe74 	bl	800640c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	3354      	adds	r3, #84	; 0x54
 8002728:	2201      	movs	r2, #1
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f003 fe6d 	bl	800640c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	69b8      	ldr	r0, [r7, #24]
 8002738:	f000 fe62 	bl	8003400 <pxPortInitialiseStack>
 800273c:	4602      	mov	r2, r0
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af02      	add	r7, sp, #8
 800275e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002760:	f000 ff7a 	bl	8003658 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <prvAddNewTaskToReadyList+0xfc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	4a3a      	ldr	r2, [pc, #232]	; (8002854 <prvAddNewTaskToReadyList+0xfc>)
 800276c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800276e:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <prvAddNewTaskToReadyList+0x100>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002776:	4a38      	ldr	r2, [pc, #224]	; (8002858 <prvAddNewTaskToReadyList+0x100>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <prvAddNewTaskToReadyList+0xfc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d110      	bne.n	80027a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002784:	f000 fbb0 	bl	8002ee8 <prvInitialiseTaskLists>
 8002788:	e00d      	b.n	80027a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <prvAddNewTaskToReadyList+0x104>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <prvAddNewTaskToReadyList+0x100>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	429a      	cmp	r2, r3
 800279e:	d802      	bhi.n	80027a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80027a0:	4a2d      	ldr	r2, [pc, #180]	; (8002858 <prvAddNewTaskToReadyList+0x100>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80027a6:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <prvAddNewTaskToReadyList+0x108>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <prvAddNewTaskToReadyList+0x108>)
 80027ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <prvAddNewTaskToReadyList+0x108>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <prvAddNewTaskToReadyList+0x94>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 fb33 	bl	8005e2c <SEGGER_SYSVIEW_OnTaskCreate>
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	461d      	mov	r5, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461c      	mov	r4, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	1ae3      	subs	r3, r4, r3
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	462b      	mov	r3, r5
 80027e8:	f001 fa1a 	bl	8003c20 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fba0 	bl	8005f34 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	2201      	movs	r2, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <prvAddNewTaskToReadyList+0x10c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4313      	orrs	r3, r2
 8002802:	4a18      	ldr	r2, [pc, #96]	; (8002864 <prvAddNewTaskToReadyList+0x10c>)
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4a15      	ldr	r2, [pc, #84]	; (8002868 <prvAddNewTaskToReadyList+0x110>)
 8002814:	441a      	add	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7ff fe3c 	bl	800249a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002822:	f000 ff49 	bl	80036b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <prvAddNewTaskToReadyList+0x104>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <prvAddNewTaskToReadyList+0x100>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	429a      	cmp	r2, r3
 800283a:	d207      	bcs.n	800284c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <prvAddNewTaskToReadyList+0x114>)
 800283e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bdb0      	pop	{r4, r5, r7, pc}
 8002854:	20000118 	.word	0x20000118
 8002858:	20000040 	.word	0x20000040
 800285c:	20000124 	.word	0x20000124
 8002860:	20000134 	.word	0x20000134
 8002864:	20000120 	.word	0x20000120
 8002868:	20000044 	.word	0x20000044
 800286c:	e000ed04 	.word	0xe000ed04

08002870 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002878:	f000 feee 	bl	8003658 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <vTaskDelete+0x18>
 8002882:	4b46      	ldr	r3, [pc, #280]	; (800299c <vTaskDelete+0x12c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e000      	b.n	800288a <vTaskDelete+0x1a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3304      	adds	r3, #4
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fe5f 	bl	8002554 <uxListRemove>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d115      	bne.n	80028c8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a0:	493f      	ldr	r1, [pc, #252]	; (80029a0 <vTaskDelete+0x130>)
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <vTaskDelete+0x58>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	2201      	movs	r2, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43da      	mvns	r2, r3
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <vTaskDelete+0x134>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4013      	ands	r3, r2
 80028c4:	4a37      	ldr	r2, [pc, #220]	; (80029a4 <vTaskDelete+0x134>)
 80028c6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3318      	adds	r3, #24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fe3d 	bl	8002554 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80028da:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <vTaskDelete+0x138>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	4a31      	ldr	r2, [pc, #196]	; (80029a8 <vTaskDelete+0x138>)
 80028e2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <vTaskDelete+0x12c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d118      	bne.n	8002920 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3304      	adds	r3, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	482d      	ldr	r0, [pc, #180]	; (80029ac <vTaskDelete+0x13c>)
 80028f6:	f7ff fdd0 	bl	800249a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <vTaskDelete+0x140>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	4a2b      	ldr	r2, [pc, #172]	; (80029b0 <vTaskDelete+0x140>)
 8002902:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f003 fbb6 	bl	8006078 <SEGGER_SYSVIEW_ShrinkId>
 800290c:	4603      	mov	r3, r0
 800290e:	4619      	mov	r1, r3
 8002910:	2022      	movs	r0, #34	; 0x22
 8002912:	f002 fe03 	bl	800551c <SEGGER_SYSVIEW_RecordU32>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4618      	mov	r0, r3
 800291a:	f001 f9e9 	bl	8003cf0 <SYSVIEW_DeleteTask>
 800291e:	e016      	b.n	800294e <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <vTaskDelete+0x144>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	4a23      	ldr	r2, [pc, #140]	; (80029b4 <vTaskDelete+0x144>)
 8002928:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4618      	mov	r0, r3
 800292e:	f003 fba3 	bl	8006078 <SEGGER_SYSVIEW_ShrinkId>
 8002932:	4603      	mov	r3, r0
 8002934:	4619      	mov	r1, r3
 8002936:	2022      	movs	r0, #34	; 0x22
 8002938:	f002 fdf0 	bl	800551c <SEGGER_SYSVIEW_RecordU32>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4618      	mov	r0, r3
 8002940:	f001 f9d6 	bl	8003cf0 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fb3d 	bl	8002fc4 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800294a:	f000 fb4b 	bl	8002fe4 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800294e:	f000 feb3 	bl	80036b8 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <vTaskDelete+0x148>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01b      	beq.n	8002992 <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <vTaskDelete+0x12c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d116      	bne.n	8002992 <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <vTaskDelete+0x14c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <vTaskDelete+0x112>
        __asm volatile
 800296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002970:	f383 8811 	msr	BASEPRI, r3
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	60bb      	str	r3, [r7, #8]
    }
 800297e:	bf00      	nop
 8002980:	e7fe      	b.n	8002980 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <vTaskDelete+0x150>)
 8002984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000040 	.word	0x20000040
 80029a0:	20000044 	.word	0x20000044
 80029a4:	20000120 	.word	0x20000120
 80029a8:	20000134 	.word	0x20000134
 80029ac:	200000ec 	.word	0x200000ec
 80029b0:	20000100 	.word	0x20000100
 80029b4:	20000118 	.word	0x20000118
 80029b8:	20000124 	.word	0x20000124
 80029bc:	20000140 	.word	0x20000140
 80029c0:	e000ed04 	.word	0xe000ed04

080029c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01b      	beq.n	8002a0e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <vTaskDelay+0x68>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <vTaskDelay+0x30>
        __asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	60bb      	str	r3, [r7, #8]
    }
 80029f0:	bf00      	nop
 80029f2:	e7fe      	b.n	80029f2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80029f4:	f000 f87a 	bl	8002aec <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	2023      	movs	r0, #35	; 0x23
 80029fc:	f002 fd8e 	bl	800551c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a00:	2100      	movs	r1, #0
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fc84 	bl	8003310 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a08:	f000 f87e 	bl	8002b08 <xTaskResumeAll>
 8002a0c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <vTaskDelay+0x6c>)
 8002a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000140 	.word	0x20000140
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <vTaskStartScheduler+0x98>)
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2300      	movs	r3, #0
 8002a44:	2282      	movs	r2, #130	; 0x82
 8002a46:	4922      	ldr	r1, [pc, #136]	; (8002ad0 <vTaskStartScheduler+0x9c>)
 8002a48:	4822      	ldr	r0, [pc, #136]	; (8002ad4 <vTaskStartScheduler+0xa0>)
 8002a4a:	f7ff fdad 	bl	80025a8 <xTaskCreate>
 8002a4e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d124      	bne.n	8002aa0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	60bb      	str	r3, [r7, #8]
    }
 8002a68:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <vTaskStartScheduler+0xa4>)
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <vTaskStartScheduler+0xa8>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <vTaskStartScheduler+0xac>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a7e:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <vTaskStartScheduler+0xb0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <vTaskStartScheduler+0x98>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d102      	bne.n	8002a90 <vTaskStartScheduler+0x5c>
 8002a8a:	f003 f9b3 	bl	8005df4 <SEGGER_SYSVIEW_OnIdle>
 8002a8e:	e004      	b.n	8002a9a <vTaskStartScheduler+0x66>
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <vTaskStartScheduler+0xb0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fa0b 	bl	8005eb0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a9a:	f000 fd3b 	bl	8003514 <xPortStartScheduler>
 8002a9e:	e00e      	b.n	8002abe <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa6:	d10a      	bne.n	8002abe <vTaskStartScheduler+0x8a>
        __asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	607b      	str	r3, [r7, #4]
    }
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <vTaskStartScheduler+0xb4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	2000013c 	.word	0x2000013c
 8002ad0:	08006540 	.word	0x08006540
 8002ad4:	08002eb9 	.word	0x08002eb9
 8002ad8:	20000138 	.word	0x20000138
 8002adc:	20000124 	.word	0x20000124
 8002ae0:	2000011c 	.word	0x2000011c
 8002ae4:	20000040 	.word	0x20000040
 8002ae8:	2000000c 	.word	0x2000000c

08002aec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <vTaskSuspendAll+0x18>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <vTaskSuspendAll+0x18>)
 8002af8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	20000140 	.word	0x20000140

08002b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b16:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <xTaskResumeAll+0x11c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	603b      	str	r3, [r7, #0]
    }
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b34:	f000 fd90 	bl	8003658 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <xTaskResumeAll+0x11c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	4a39      	ldr	r2, [pc, #228]	; (8002c24 <xTaskResumeAll+0x11c>)
 8002b40:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <xTaskResumeAll+0x11c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d165      	bne.n	8002c16 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b4a:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <xTaskResumeAll+0x120>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d061      	beq.n	8002c16 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b52:	e032      	b.n	8002bba <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <xTaskResumeAll+0x124>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3318      	adds	r3, #24
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fcf7 	bl	8002554 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fcf2 	bl	8002554 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 f9de 	bl	8005f34 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <xTaskResumeAll+0x128>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <xTaskResumeAll+0x128>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <xTaskResumeAll+0x12c>)
 8002b98:	441a      	add	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f7ff fc7a 	bl	800249a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <xTaskResumeAll+0x130>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d302      	bcc.n	8002bba <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002bb4:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <xTaskResumeAll+0x134>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <xTaskResumeAll+0x124>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1c8      	bne.n	8002b54 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bc8:	f000 fa0c 	bl	8002fe4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <xTaskResumeAll+0x138>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bd8:	f000 f848 	bl	8002c6c <xTaskIncrementTick>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002be2:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <xTaskResumeAll+0x134>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f1      	bne.n	8002bd8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <xTaskResumeAll+0x138>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <xTaskResumeAll+0x134>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <xTaskResumeAll+0x13c>)
 8002c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c16:	f000 fd4f 	bl	80036b8 <vPortExitCritical>

    return xAlreadyYielded;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000140 	.word	0x20000140
 8002c28:	20000118 	.word	0x20000118
 8002c2c:	200000d8 	.word	0x200000d8
 8002c30:	20000120 	.word	0x20000120
 8002c34:	20000044 	.word	0x20000044
 8002c38:	20000040 	.word	0x20000040
 8002c3c:	2000012c 	.word	0x2000012c
 8002c40:	20000128 	.word	0x20000128
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c4e:	f000 fded 	bl	800382c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <xTaskGetTickCountFromISR+0x20>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c5c:	683b      	ldr	r3, [r7, #0]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2000011c 	.word	0x2000011c

08002c6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c76:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <xTaskIncrementTick+0x14c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 8092 	bne.w	8002da4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c80:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <xTaskIncrementTick+0x150>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c88:	4a4c      	ldr	r2, [pc, #304]	; (8002dbc <xTaskIncrementTick+0x150>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d120      	bne.n	8002cd6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <xTaskIncrementTick+0x154>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	603b      	str	r3, [r7, #0]
    }
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <xTaskIncrementTick+0x46>
 8002cb4:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <xTaskIncrementTick+0x154>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <xTaskIncrementTick+0x158>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <xTaskIncrementTick+0x154>)
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4a40      	ldr	r2, [pc, #256]	; (8002dc4 <xTaskIncrementTick+0x158>)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <xTaskIncrementTick+0x15c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <xTaskIncrementTick+0x15c>)
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	f000 f987 	bl	8002fe4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <xTaskIncrementTick+0x160>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d34c      	bcc.n	8002d7a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ce0:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <xTaskIncrementTick+0x154>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cea:	4b38      	ldr	r3, [pc, #224]	; (8002dcc <xTaskIncrementTick+0x160>)
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	601a      	str	r2, [r3, #0]
                    break;
 8002cf2:	e042      	b.n	8002d7a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf4:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <xTaskIncrementTick+0x154>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d203      	bcs.n	8002d14 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <xTaskIncrementTick+0x160>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d12:	e032      	b.n	8002d7a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fc1b 	bl	8002554 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3318      	adds	r3, #24
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fc12 	bl	8002554 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 f8fe 	bl	8005f34 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <xTaskIncrementTick+0x164>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <xTaskIncrementTick+0x164>)
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <xTaskIncrementTick+0x168>)
 8002d58:	441a      	add	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f7ff fb9a 	bl	800249a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <xTaskIncrementTick+0x16c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3b5      	bcc.n	8002ce0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d78:	e7b2      	b.n	8002ce0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d7a:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <xTaskIncrementTick+0x16c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	4914      	ldr	r1, [pc, #80]	; (8002dd4 <xTaskIncrementTick+0x168>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d901      	bls.n	8002d96 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002d92:	2301      	movs	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <xTaskIncrementTick+0x170>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e004      	b.n	8002dae <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <xTaskIncrementTick+0x174>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <xTaskIncrementTick+0x174>)
 8002dac:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002dae:	697b      	ldr	r3, [r7, #20]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000140 	.word	0x20000140
 8002dbc:	2000011c 	.word	0x2000011c
 8002dc0:	200000d0 	.word	0x200000d0
 8002dc4:	200000d4 	.word	0x200000d4
 8002dc8:	20000130 	.word	0x20000130
 8002dcc:	20000138 	.word	0x20000138
 8002dd0:	20000120 	.word	0x20000120
 8002dd4:	20000044 	.word	0x20000044
 8002dd8:	20000040 	.word	0x20000040
 8002ddc:	2000012c 	.word	0x2000012c
 8002de0:	20000128 	.word	0x20000128

08002de4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <vTaskSwitchContext+0xbc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002df2:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <vTaskSwitchContext+0xc0>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002df8:	e04d      	b.n	8002e96 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <vTaskSwitchContext+0xc0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <vTaskSwitchContext+0xc4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f1c3 031f 	rsb	r3, r3, #31
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	4925      	ldr	r1, [pc, #148]	; (8002eac <vTaskSwitchContext+0xc8>)
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	607b      	str	r3, [r7, #4]
    }
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <vTaskSwitchContext+0x5a>
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <vTaskSwitchContext+0xc8>)
 8002e4c:	4413      	add	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	3308      	adds	r3, #8
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d104      	bne.n	8002e70 <vTaskSwitchContext+0x8c>
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <vTaskSwitchContext+0xcc>)
 8002e78:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <vTaskSwitchContext+0xcc>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <vTaskSwitchContext+0xd0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d102      	bne.n	8002e8c <vTaskSwitchContext+0xa8>
 8002e86:	f002 ffb5 	bl	8005df4 <SEGGER_SYSVIEW_OnIdle>
}
 8002e8a:	e004      	b.n	8002e96 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <vTaskSwitchContext+0xcc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 f80d 	bl	8005eb0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000140 	.word	0x20000140
 8002ea4:	2000012c 	.word	0x2000012c
 8002ea8:	20000120 	.word	0x20000120
 8002eac:	20000044 	.word	0x20000044
 8002eb0:	20000040 	.word	0x20000040
 8002eb4:	2000013c 	.word	0x2000013c

08002eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ec0:	f000 f852 	bl	8002f68 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <prvIdleTask+0x28>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d9f9      	bls.n	8002ec0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <prvIdleTask+0x2c>)
 8002ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002edc:	e7f0      	b.n	8002ec0 <prvIdleTask+0x8>
 8002ede:	bf00      	nop
 8002ee0:	20000044 	.word	0x20000044
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	e00c      	b.n	8002f0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <prvInitialiseTaskLists+0x60>)
 8002f00:	4413      	add	r3, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fa9c 	bl	8002440 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d9ef      	bls.n	8002ef4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f14:	480d      	ldr	r0, [pc, #52]	; (8002f4c <prvInitialiseTaskLists+0x64>)
 8002f16:	f7ff fa93 	bl	8002440 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f1a:	480d      	ldr	r0, [pc, #52]	; (8002f50 <prvInitialiseTaskLists+0x68>)
 8002f1c:	f7ff fa90 	bl	8002440 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <prvInitialiseTaskLists+0x6c>)
 8002f22:	f7ff fa8d 	bl	8002440 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f26:	480c      	ldr	r0, [pc, #48]	; (8002f58 <prvInitialiseTaskLists+0x70>)
 8002f28:	f7ff fa8a 	bl	8002440 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f2c:	480b      	ldr	r0, [pc, #44]	; (8002f5c <prvInitialiseTaskLists+0x74>)
 8002f2e:	f7ff fa87 	bl	8002440 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <prvInitialiseTaskLists+0x78>)
 8002f34:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <prvInitialiseTaskLists+0x64>)
 8002f36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <prvInitialiseTaskLists+0x7c>)
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <prvInitialiseTaskLists+0x68>)
 8002f3c:	601a      	str	r2, [r3, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000044 	.word	0x20000044
 8002f4c:	200000a8 	.word	0x200000a8
 8002f50:	200000bc 	.word	0x200000bc
 8002f54:	200000d8 	.word	0x200000d8
 8002f58:	200000ec 	.word	0x200000ec
 8002f5c:	20000104 	.word	0x20000104
 8002f60:	200000d0 	.word	0x200000d0
 8002f64:	200000d4 	.word	0x200000d4

08002f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f6e:	e019      	b.n	8002fa4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f70:	f000 fb72 	bl	8003658 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <prvCheckTasksWaitingTermination+0x50>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fae7 	bl	8002554 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <prvCheckTasksWaitingTermination+0x54>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <prvCheckTasksWaitingTermination+0x54>)
 8002f8e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <prvCheckTasksWaitingTermination+0x58>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <prvCheckTasksWaitingTermination+0x58>)
 8002f98:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f9a:	f000 fb8d 	bl	80036b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f810 	bl	8002fc4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <prvCheckTasksWaitingTermination+0x58>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e1      	bne.n	8002f70 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200000ec 	.word	0x200000ec
 8002fbc:	20000118 	.word	0x20000118
 8002fc0:	20000100 	.word	0x20000100

08002fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fd19 	bl	8003a08 <vPortFree>
                vPortFree( pxTCB );
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fd16 	bl	8003a08 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <prvResetNextTaskUnblockTime+0x30>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <prvResetNextTaskUnblockTime+0x34>)
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ffa:	e005      	b.n	8003008 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <prvResetNextTaskUnblockTime+0x30>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <prvResetNextTaskUnblockTime+0x34>)
 8003006:	6013      	str	r3, [r2, #0]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	200000d0 	.word	0x200000d0
 8003018:	20000138 	.word	0x20000138

0800301c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	613b      	str	r3, [r7, #16]
    }
 8003042:	bf00      	nop
 8003044:	e7fe      	b.n	8003044 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003046:	f000 fb07 	bl	8003658 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <xTaskGenericNotifyWait+0x108>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	3354      	adds	r3, #84	; 0x54
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d022      	beq.n	80030a2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <xTaskGenericNotifyWait+0x108>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	3214      	adds	r2, #20
 8003064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	43d2      	mvns	r2, r2
 800306c:	4011      	ands	r1, r2
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	3214      	adds	r2, #20
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003076:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <xTaskGenericNotifyWait+0x108>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	3354      	adds	r3, #84	; 0x54
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800308a:	2101      	movs	r1, #1
 800308c:	6a38      	ldr	r0, [r7, #32]
 800308e:	f000 f93f 	bl	8003310 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003092:	4b25      	ldr	r3, [pc, #148]	; (8003128 <xTaskGenericNotifyWait+0x10c>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030a2:	f000 fb09 	bl	80036b8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80030a6:	f000 fad7 	bl	8003658 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	2040      	movs	r0, #64	; 0x40
 80030b8:	f002 fac6 	bl	8005648 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <xTaskGenericNotifyWait+0x108>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	3214      	adds	r2, #20
 80030ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <xTaskGenericNotifyWait+0x108>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	3354      	adds	r3, #84	; 0x54
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d002      	beq.n	80030ea <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	e00e      	b.n	8003108 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <xTaskGenericNotifyWait+0x108>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	3214      	adds	r2, #20
 80030f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	43d2      	mvns	r2, r2
 80030fa:	4011      	ands	r1, r2
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	3214      	adds	r2, #20
 8003100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <xTaskGenericNotifyWait+0x108>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	3354      	adds	r3, #84	; 0x54
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003116:	f000 facf 	bl	80036b8 <vPortExitCritical>

        return xReturn;
 800311a:	697b      	ldr	r3, [r7, #20]
    }
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000040 	.word	0x20000040
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	; 0x38
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800313a:	2301      	movs	r3, #1
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <xTaskGenericNotify+0x2e>
        __asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	623b      	str	r3, [r7, #32]
    }
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	61fb      	str	r3, [r7, #28]
    }
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800317a:	f000 fa6d 	bl	8003658 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	3214      	adds	r2, #20
 800318a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003190:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4413      	add	r3, r2
 8003198:	3354      	adds	r3, #84	; 0x54
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80031a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4413      	add	r3, r2
 80031a6:	3354      	adds	r3, #84	; 0x54
 80031a8:	2202      	movs	r2, #2
 80031aa:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d83b      	bhi.n	800322a <xTaskGenericNotify+0xfe>
 80031b2:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <xTaskGenericNotify+0x8c>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	08003249 	.word	0x08003249
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	08003201 	.word	0x08003201
 80031c8:	0800320f 	.word	0x0800320f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	3214      	adds	r2, #20
 80031d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	ea42 0103 	orr.w	r1, r2, r3
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	3214      	adds	r2, #20
 80031e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031e6:	e032      	b.n	800324e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	3214      	adds	r2, #20
 80031ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	3214      	adds	r2, #20
 80031fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031fe:	e026      	b.n	800324e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	3214      	adds	r2, #20
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800320c:	e01f      	b.n	800324e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800320e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003212:	2b02      	cmp	r3, #2
 8003214:	d006      	beq.n	8003224 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	3214      	adds	r2, #20
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003222:	e014      	b.n	800324e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8003228:	e011      	b.n	800324e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <xTaskGenericNotify+0x1d0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <xTaskGenericNotify+0x120>
        __asm volatile
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	61bb      	str	r3, [r7, #24]
    }
 8003244:	bf00      	nop
 8003246:	e7fe      	b.n	8003246 <xTaskGenericNotify+0x11a>
                    break;
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <xTaskGenericNotify+0x122>

                    break;
 800324c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	4618      	mov	r0, r3
 8003252:	f002 ff11 	bl	8006078 <SEGGER_SYSVIEW_ShrinkId>
 8003256:	4601      	mov	r1, r0
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	203e      	movs	r0, #62	; 0x3e
 8003264:	f002 f9f0 	bl	8005648 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800326c:	2b01      	cmp	r3, #1
 800326e:	d13d      	bne.n	80032ec <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	3304      	adds	r3, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff f96d 	bl	8002554 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	4618      	mov	r0, r3
 800327e:	f002 fe59 	bl	8005f34 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	2201      	movs	r2, #1
 8003288:	409a      	lsls	r2, r3
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <xTaskGenericNotify+0x1d4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <xTaskGenericNotify+0x1d4>)
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <xTaskGenericNotify+0x1d8>)
 80032a2:	441a      	add	r2, r3
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	3304      	adds	r3, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f7ff f8f5 	bl	800249a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <xTaskGenericNotify+0x1a2>
        __asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	617b      	str	r3, [r7, #20]
    }
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <xTaskGenericNotify+0x1dc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	429a      	cmp	r2, r3
 80032da:	d907      	bls.n	80032ec <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <xTaskGenericNotify+0x1e0>)
 80032de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80032ec:	f000 f9e4 	bl	80036b8 <vPortExitCritical>

        return xReturn;
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80032f2:	4618      	mov	r0, r3
 80032f4:	3730      	adds	r7, #48	; 0x30
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000011c 	.word	0x2000011c
 8003300:	20000120 	.word	0x20000120
 8003304:	20000044 	.word	0x20000044
 8003308:	20000040 	.word	0x20000040
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800331a:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003320:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3304      	adds	r3, #4
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff f914 	bl	8002554 <uxListRemove>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003332:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	2201      	movs	r2, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4013      	ands	r3, r2
 8003346:	4a29      	ldr	r2, [pc, #164]	; (80033ec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003348:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d110      	bne.n	8003374 <prvAddCurrentTaskToDelayedList+0x64>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	211b      	movs	r1, #27
 800335e:	4618      	mov	r0, r3
 8003360:	f002 fe2a 	bl	8005fb8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3304      	adds	r3, #4
 800336a:	4619      	mov	r1, r3
 800336c:	4820      	ldr	r0, [pc, #128]	; (80033f0 <prvAddCurrentTaskToDelayedList+0xe0>)
 800336e:	f7ff f894 	bl	800249a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003372:	e032      	b.n	80033da <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d20f      	bcs.n	80033ac <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800338c:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2104      	movs	r1, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f002 fe10 	bl	8005fb8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f7ff f89c 	bl	80024e2 <vListInsert>
}
 80033aa:	e016      	b.n	80033da <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2104      	movs	r1, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f002 fe00 	bl	8005fb8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f7ff f88c 	bl	80024e2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <prvAddCurrentTaskToDelayedList+0xec>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d202      	bcs.n	80033da <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80033d4:	4a09      	ldr	r2, [pc, #36]	; (80033fc <prvAddCurrentTaskToDelayedList+0xec>)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6013      	str	r3, [r2, #0]
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000011c 	.word	0x2000011c
 80033e8:	20000040 	.word	0x20000040
 80033ec:	20000120 	.word	0x20000120
 80033f0:	20000104 	.word	0x20000104
 80033f4:	200000d4 	.word	0x200000d4
 80033f8:	200000d0 	.word	0x200000d0
 80033fc:	20000138 	.word	0x20000138

08003400 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3b04      	subs	r3, #4
 8003410:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003418:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3b04      	subs	r3, #4
 800341e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f023 0201 	bic.w	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3b04      	subs	r3, #4
 800342e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003430:	4a0c      	ldr	r2, [pc, #48]	; (8003464 <pxPortInitialiseStack+0x64>)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3b14      	subs	r3, #20
 800343a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b04      	subs	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f06f 0202 	mvn.w	r2, #2
 800344e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3b20      	subs	r3, #32
 8003454:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003456:	68fb      	ldr	r3, [r7, #12]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	08003469 	.word	0x08003469

08003468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <prvTaskExitError+0x54>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d00a      	beq.n	8003492 <prvTaskExitError+0x2a>
        __asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	60fb      	str	r3, [r7, #12]
    }
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <prvTaskExitError+0x28>
        __asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60bb      	str	r3, [r7, #8]
    }
 80034a4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80034a6:	bf00      	nop
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0fc      	beq.n	80034a8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	20000010 	.word	0x20000010

080034c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <pxCurrentTCBConst2>)
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	6808      	ldr	r0, [r1, #0]
 80034c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ca:	f380 8809 	msr	PSP, r0
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f380 8811 	msr	BASEPRI, r0
 80034da:	4770      	bx	lr
 80034dc:	f3af 8000 	nop.w

080034e0 <pxCurrentTCBConst2>:
 80034e0:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop

080034e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80034e8:	4808      	ldr	r0, [pc, #32]	; (800350c <prvPortStartFirstTask+0x24>)
 80034ea:	6800      	ldr	r0, [r0, #0]
 80034ec:	6800      	ldr	r0, [r0, #0]
 80034ee:	f380 8808 	msr	MSP, r0
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8814 	msr	CONTROL, r0
 80034fa:	b662      	cpsie	i
 80034fc:	b661      	cpsie	f
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	df00      	svc	0
 8003508:	bf00      	nop
 800350a:	0000      	.short	0x0000
 800350c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop

08003514 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800351a:	4b46      	ldr	r3, [pc, #280]	; (8003634 <xPortStartScheduler+0x120>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a46      	ldr	r2, [pc, #280]	; (8003638 <xPortStartScheduler+0x124>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d10a      	bne.n	800353a <xPortStartScheduler+0x26>
        __asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	613b      	str	r3, [r7, #16]
    }
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800353a:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <xPortStartScheduler+0x120>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a3f      	ldr	r2, [pc, #252]	; (800363c <xPortStartScheduler+0x128>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10a      	bne.n	800355a <xPortStartScheduler+0x46>
        __asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	60fb      	str	r3, [r7, #12]
    }
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800355a:	4b39      	ldr	r3, [pc, #228]	; (8003640 <xPortStartScheduler+0x12c>)
 800355c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b31      	ldr	r3, [pc, #196]	; (8003644 <xPortStartScheduler+0x130>)
 8003580:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <xPortStartScheduler+0x134>)
 8003584:	2207      	movs	r2, #7
 8003586:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003588:	e009      	b.n	800359e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <xPortStartScheduler+0x134>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3b01      	subs	r3, #1
 8003590:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <xPortStartScheduler+0x134>)
 8003592:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	b2db      	uxtb	r3, r3
 800359c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b80      	cmp	r3, #128	; 0x80
 80035a8:	d0ef      	beq.n	800358a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035aa:	4b27      	ldr	r3, [pc, #156]	; (8003648 <xPortStartScheduler+0x134>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1c3 0307 	rsb	r3, r3, #7
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d00a      	beq.n	80035cc <xPortStartScheduler+0xb8>
        __asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	60bb      	str	r3, [r7, #8]
    }
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035cc:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <xPortStartScheduler+0x134>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	4a1d      	ldr	r2, [pc, #116]	; (8003648 <xPortStartScheduler+0x134>)
 80035d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035d6:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <xPortStartScheduler+0x134>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035de:	4a1a      	ldr	r2, [pc, #104]	; (8003648 <xPortStartScheduler+0x134>)
 80035e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <xPortStartScheduler+0x138>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <xPortStartScheduler+0x138>)
 80035f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <xPortStartScheduler+0x138>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a14      	ldr	r2, [pc, #80]	; (800364c <xPortStartScheduler+0x138>)
 80035fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003600:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003602:	f000 f8e3 	bl	80037cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <xPortStartScheduler+0x13c>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800360c:	f000 f902 	bl	8003814 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <xPortStartScheduler+0x140>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <xPortStartScheduler+0x140>)
 8003616:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800361a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800361c:	f7ff ff64 	bl	80034e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003620:	f7ff fbe0 	bl	8002de4 <vTaskSwitchContext>
    prvTaskExitError();
 8003624:	f7ff ff20 	bl	8003468 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00
 8003638:	410fc271 	.word	0x410fc271
 800363c:	410fc270 	.word	0x410fc270
 8003640:	e000e400 	.word	0xe000e400
 8003644:	20000144 	.word	0x20000144
 8003648:	20000148 	.word	0x20000148
 800364c:	e000ed20 	.word	0xe000ed20
 8003650:	20000010 	.word	0x20000010
 8003654:	e000ef34 	.word	0xe000ef34

08003658 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
        __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	607b      	str	r3, [r7, #4]
    }
 8003670:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <vPortEnterCritical+0x58>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	4a0d      	ldr	r2, [pc, #52]	; (80036b0 <vPortEnterCritical+0x58>)
 800367a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <vPortEnterCritical+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10f      	bne.n	80036a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <vPortEnterCritical+0x5c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	603b      	str	r3, [r7, #0]
    }
 80036a0:	bf00      	nop
 80036a2:	e7fe      	b.n	80036a2 <vPortEnterCritical+0x4a>
    }
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	20000010 	.word	0x20000010
 80036b4:	e000ed04 	.word	0xe000ed04

080036b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <vPortExitCritical+0x50>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <vPortExitCritical+0x24>
        __asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	607b      	str	r3, [r7, #4]
    }
 80036d8:	bf00      	nop
 80036da:	e7fe      	b.n	80036da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <vPortExitCritical+0x50>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	4a09      	ldr	r2, [pc, #36]	; (8003708 <vPortExitCritical+0x50>)
 80036e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <vPortExitCritical+0x50>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <vPortExitCritical+0x42>
 80036ee:	2300      	movs	r3, #0
 80036f0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80036f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000010 	.word	0x20000010
 800370c:	00000000 	.word	0x00000000

08003710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003710:	f3ef 8009 	mrs	r0, PSP
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <pxCurrentTCBConst>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f01e 0f10 	tst.w	lr, #16
 8003720:	bf08      	it	eq
 8003722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	6010      	str	r0, [r2, #0]
 800372c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003734:	f380 8811 	msr	BASEPRI, r0
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f7ff fb50 	bl	8002de4 <vTaskSwitchContext>
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	f380 8811 	msr	BASEPRI, r0
 800374c:	bc09      	pop	{r0, r3}
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	6808      	ldr	r0, [r1, #0]
 8003752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003756:	f01e 0f10 	tst.w	lr, #16
 800375a:	bf08      	it	eq
 800375c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003760:	f380 8809 	msr	PSP, r0
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	f3af 8000 	nop.w

08003770 <pxCurrentTCBConst>:
 8003770:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop

08003778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
        __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	607b      	str	r3, [r7, #4]
    }
 8003790:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003792:	f002 fab5 	bl	8005d00 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003796:	f7ff fa69 	bl	8002c6c <xTaskIncrementTick>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80037a0:	f002 fb0c 	bl	8005dbc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <SysTick_Handler+0x50>)
 80037a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e001      	b.n	80037b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80037ae:	f002 fae9 	bl	8005d84 <SEGGER_SYSVIEW_RecordExitISR>
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f383 8811 	msr	BASEPRI, r3
    }
 80037bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <vPortSetupTimerInterrupt+0x38>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <vPortSetupTimerInterrupt+0x3c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <vPortSetupTimerInterrupt+0x40>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	4a09      	ldr	r2, [pc, #36]	; (8003810 <vPortSetupTimerInterrupt+0x44>)
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010
 8003804:	e000e018 	.word	0xe000e018
 8003808:	20000000 	.word	0x20000000
 800380c:	10624dd3 	.word	0x10624dd3
 8003810:	e000e014 	.word	0xe000e014

08003814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003824 <vPortEnableVFP+0x10>
 8003818:	6801      	ldr	r1, [r0, #0]
 800381a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800381e:	6001      	str	r1, [r0, #0]
 8003820:	4770      	bx	lr
 8003822:	0000      	.short	0x0000
 8003824:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop

0800382c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003832:	f3ef 8305 	mrs	r3, IPSR
 8003836:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b0f      	cmp	r3, #15
 800383c:	d914      	bls.n	8003868 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800383e:	4a17      	ldr	r2, [pc, #92]	; (800389c <vPortValidateInterruptPriority+0x70>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <vPortValidateInterruptPriority+0x74>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	7afa      	ldrb	r2, [r7, #11]
 800384e:	429a      	cmp	r2, r3
 8003850:	d20a      	bcs.n	8003868 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	607b      	str	r3, [r7, #4]
    }
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <vPortValidateInterruptPriority+0x78>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <vPortValidateInterruptPriority+0x7c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d90a      	bls.n	800388e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	603b      	str	r3, [r7, #0]
    }
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <vPortValidateInterruptPriority+0x60>
    }
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	e000e3f0 	.word	0xe000e3f0
 80038a0:	20000144 	.word	0x20000144
 80038a4:	e000ed0c 	.word	0xe000ed0c
 80038a8:	20000148 	.word	0x20000148

080038ac <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80038b8:	f7ff f918 	bl	8002aec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
 80038bc:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <pvPortMalloc+0x14c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <pvPortMalloc+0x22>
        {
            prvHeapInit();
 80038c4:	f000 f8da 	bl	8003a7c <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
 80038c8:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <pvPortMalloc+0x14c>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
        }

        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( ( xWantedSize > 0 ) && 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02a      	beq.n	800392a <pvPortMalloc+0x7e>
            ( ( xWantedSize + heapSTRUCT_SIZE ) >  xWantedSize ) ) /* Overflow check */
 80038d4:	2308      	movs	r3, #8
 80038d6:	461a      	mov	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) && 
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d223      	bcs.n	800392a <pvPortMalloc+0x7e>
        {
            xWantedSize += heapSTRUCT_SIZE;
 80038e2:	2308      	movs	r3, #8
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	607b      	str	r3, [r7, #4]

            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f023 0307 	bic.w	r3, r3, #7
 80038f2:	3308      	adds	r3, #8
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d214      	bcs.n	8003924 <pvPortMalloc+0x78>
                    > xWantedSize )
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f023 0307 	bic.w	r3, r3, #7
 8003900:	3308      	adds	r3, #8
 8003902:	607b      	str	r3, [r7, #4]
                configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <pvPortMalloc+0x84>
        __asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	60fb      	str	r3, [r7, #12]
    }
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <pvPortMalloc+0x76>
            }
            else
            {
                xWantedSize = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	607b      	str	r3, [r7, #4]
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003928:	e002      	b.n	8003930 <pvPortMalloc+0x84>
            }       
        }
        else 
        {
            xWantedSize = 0; 
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	e000      	b.n	8003932 <pvPortMalloc+0x86>
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003930:	bf00      	nop
        }


        if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d057      	beq.n	80039e8 <pvPortMalloc+0x13c>
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <pvPortMalloc+0x150>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	d852      	bhi.n	80039e8 <pvPortMalloc+0x13c>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <pvPortMalloc+0x154>)
 8003944:	623b      	str	r3, [r7, #32]
            pxBlock = xStart.pxNextFreeBlock;
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <pvPortMalloc+0x154>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	627b      	str	r3, [r7, #36]	; 0x24

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800394c:	e004      	b.n	8003958 <pvPortMalloc+0xac>
            {
                pxPreviousBlock = pxBlock;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	623b      	str	r3, [r7, #32]
                pxBlock = pxBlock->pxNextFreeBlock;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	d903      	bls.n	800396a <pvPortMalloc+0xbe>
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f1      	bne.n	800394e <pvPortMalloc+0xa2>
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <pvPortMalloc+0x158>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d03a      	beq.n	80039e8 <pvPortMalloc+0x13c>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2208      	movs	r2, #8
 8003978:	4413      	add	r3, r2
 800397a:	61fb      	str	r3, [r7, #28]

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	601a      	str	r2, [r3, #0]

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2208      	movs	r2, #8
 800398e:	0052      	lsls	r2, r2, #1
 8003990:	4293      	cmp	r3, r2
 8003992:	d922      	bls.n	80039da <pvPortMalloc+0x12e>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	605a      	str	r2, [r3, #4]
                    pxBlock->xBlockSize = xWantedSize;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	605a      	str	r2, [r3, #4]

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <pvPortMalloc+0x154>)
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e002      	b.n	80039c0 <pvPortMalloc+0x114>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d8f6      	bhi.n	80039ba <pvPortMalloc+0x10e>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	601a      	str	r2, [r3, #0]
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <pvPortMalloc+0x150>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	4a05      	ldr	r2, [pc, #20]	; (80039fc <pvPortMalloc+0x150>)
 80039e6:	6013      	str	r3, [r2, #0]
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80039e8:	f7ff f88e 	bl	8002b08 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 80039ec:	69fb      	ldr	r3, [r7, #28]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3728      	adds	r7, #40	; 0x28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20012d5c 	.word	0x20012d5c
 80039fc:	20000014 	.word	0x20000014
 8003a00:	20012d4c 	.word	0x20012d4c
 8003a04:	20012d54 	.word	0x20012d54

08003a08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d027      	beq.n	8003a6a <vPortFree+0x62>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	425b      	negs	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4413      	add	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	60fb      	str	r3, [r7, #12]

        vTaskSuspendAll();
 8003a28:	f7ff f860 	bl	8002aec <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <vPortFree+0x6c>)
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e002      	b.n	8003a3e <vPortFree+0x36>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d8f6      	bhi.n	8003a38 <vPortFree+0x30>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]
            xFreeBytesRemaining += pxLink->xBlockSize;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <vPortFree+0x70>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4413      	add	r3, r2
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <vPortFree+0x70>)
 8003a64:	6013      	str	r3, [r2, #0]
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
 8003a66:	f7ff f84f 	bl	8002b08 <xTaskResumeAll>
    }
}
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20012d4c 	.word	0x20012d4c
 8003a78:	20000014 	.word	0x20000014

08003a7c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;

    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003a82:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <prvHeapInit+0x44>)
 8003a84:	f023 0307 	bic.w	r3, r3, #7
 8003a88:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <prvHeapInit+0x48>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <prvHeapInit+0x48>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	605a      	str	r2, [r3, #4]

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <prvHeapInit+0x4c>)
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <prvHeapInit+0x50>)
 8003a9a:	605a      	str	r2, [r3, #4]
    xEnd.pxNextFreeBlock = NULL;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <prvHeapInit+0x4c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	4a08      	ldr	r2, [pc, #32]	; (8003acc <prvHeapInit+0x50>)
 8003aaa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	4a06      	ldr	r2, [pc, #24]	; (8003ac8 <prvHeapInit+0x4c>)
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000154 	.word	0x20000154
 8003ac4:	20012d4c 	.word	0x20012d4c
 8003ac8:	20012d54 	.word	0x20012d54
 8003acc:	00012bf8 	.word	0x00012bf8

08003ad0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003ad4:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <_cbSendSystemDesc+0x14>)
 8003ad6:	f002 f8bd 	bl	8005c54 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003ada:	4803      	ldr	r0, [pc, #12]	; (8003ae8 <_cbSendSystemDesc+0x18>)
 8003adc:	f002 f8ba 	bl	8005c54 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003ae0:	bf00      	nop
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	08006548 	.word	0x08006548
 8003ae8:	08006588 	.word	0x08006588

08003aec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <SEGGER_SYSVIEW_Conf+0x20>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SEGGER_SYSVIEW_Conf+0x20>)
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <SEGGER_SYSVIEW_Conf+0x24>)
 8003afa:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <SEGGER_SYSVIEW_Conf+0x28>)
 8003afc:	f001 fc9c 	bl	8005438 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003b00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b04:	f001 fcdc 	bl	80054c0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	08003ad1 	.word	0x08003ad1
 8003b14:	08006628 	.word	0x08006628

08003b18 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	e033      	b.n	8003b8c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b24:	491e      	ldr	r1, [pc, #120]	; (8003ba0 <_cbSendTaskList+0x88>)
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <_cbSendTaskList+0x88>)
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3304      	adds	r3, #4
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	4c16      	ldr	r4, [pc, #88]	; (8003ba0 <_cbSendTaskList+0x88>)
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4423      	add	r3, r4
 8003b54:	3308      	adds	r3, #8
 8003b56:	681c      	ldr	r4, [r3, #0]
 8003b58:	4d11      	ldr	r5, [pc, #68]	; (8003ba0 <_cbSendTaskList+0x88>)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	442b      	add	r3, r5
 8003b66:	330c      	adds	r3, #12
 8003b68:	681d      	ldr	r5, [r3, #0]
 8003b6a:	4e0d      	ldr	r6, [pc, #52]	; (8003ba0 <_cbSendTaskList+0x88>)
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4433      	add	r3, r6
 8003b78:	3310      	adds	r3, #16
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	462b      	mov	r3, r5
 8003b80:	4622      	mov	r2, r4
 8003b82:	f000 f971 	bl	8003e68 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <_cbSendTaskList+0x8c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d3c6      	bcc.n	8003b24 <_cbSendTaskList+0xc>
  }
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba0:	20012d60 	.word	0x20012d60
 8003ba4:	20012e00 	.word	0x20012e00

08003ba8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ba8:	b5b0      	push	{r4, r5, r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003bae:	f7ff f84b 	bl	8002c48 <xTaskGetTickCountFromISR>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	f04f 0400 	mov.w	r4, #0
 8003bca:	f04f 0500 	mov.w	r5, #0
 8003bce:	015d      	lsls	r5, r3, #5
 8003bd0:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003bd4:	0154      	lsls	r4, r2, #5
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	1a12      	subs	r2, r2, r0
 8003bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8003be0:	f04f 0400 	mov.w	r4, #0
 8003be4:	f04f 0500 	mov.w	r5, #0
 8003be8:	009d      	lsls	r5, r3, #2
 8003bea:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003bee:	0094      	lsls	r4, r2, #2
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	1812      	adds	r2, r2, r0
 8003bf6:	eb41 0303 	adc.w	r3, r1, r3
 8003bfa:	f04f 0000 	mov.w	r0, #0
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	00d9      	lsls	r1, r3, #3
 8003c04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c08:	00d0      	lsls	r0, r2, #3
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003c12:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bdb0      	pop	{r4, r5, r7, pc}

08003c20 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003c2e:	2205      	movs	r2, #5
 8003c30:	492b      	ldr	r1, [pc, #172]	; (8003ce0 <SYSVIEW_AddTask+0xc0>)
 8003c32:	68b8      	ldr	r0, [r7, #8]
 8003c34:	f002 fbce 	bl	80063d4 <memcmp>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d04b      	beq.n	8003cd6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003c3e:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <SYSVIEW_AddTask+0xc4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b07      	cmp	r3, #7
 8003c44:	d903      	bls.n	8003c4e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003c46:	4828      	ldr	r0, [pc, #160]	; (8003ce8 <SYSVIEW_AddTask+0xc8>)
 8003c48:	f002 fb16 	bl	8006278 <SEGGER_SYSVIEW_Warn>
    return;
 8003c4c:	e044      	b.n	8003cd8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003c4e:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <SYSVIEW_AddTask+0xc4>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4926      	ldr	r1, [pc, #152]	; (8003cec <SYSVIEW_AddTask+0xcc>)
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <SYSVIEW_AddTask+0xc4>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4921      	ldr	r1, [pc, #132]	; (8003cec <SYSVIEW_AddTask+0xcc>)
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	3304      	adds	r3, #4
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <SYSVIEW_AddTask+0xc4>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	491b      	ldr	r1, [pc, #108]	; (8003cec <SYSVIEW_AddTask+0xcc>)
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	3308      	adds	r3, #8
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <SYSVIEW_AddTask+0xc4>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4916      	ldr	r1, [pc, #88]	; (8003cec <SYSVIEW_AddTask+0xcc>)
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <SYSVIEW_AddTask+0xc4>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4910      	ldr	r1, [pc, #64]	; (8003cec <SYSVIEW_AddTask+0xcc>)
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003cba:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <SYSVIEW_AddTask+0xc4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <SYSVIEW_AddTask+0xc4>)
 8003cc2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f8ca 	bl	8003e68 <SYSVIEW_SendTaskInfo>
 8003cd4:	e000      	b.n	8003cd8 <SYSVIEW_AddTask+0xb8>
    return;
 8003cd6:	bf00      	nop

}
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	08006598 	.word	0x08006598
 8003ce4:	20012e00 	.word	0x20012e00
 8003ce8:	080065a0 	.word	0x080065a0
 8003cec:	20012d60 	.word	0x20012d60

08003cf0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003cf8:	4b59      	ldr	r3, [pc, #356]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80ab 	beq.w	8003e58 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e00d      	b.n	8003d24 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003d08:	4956      	ldr	r1, [pc, #344]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d008      	beq.n	8003d30 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	4b4e      	ldr	r3, [pc, #312]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3ec      	bcc.n	8003d08 <SYSVIEW_DeleteTask+0x18>
 8003d2e:	e000      	b.n	8003d32 <SYSVIEW_DeleteTask+0x42>
      break;
 8003d30:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003d32:	4b4b      	ldr	r3, [pc, #300]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d111      	bne.n	8003d62 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4a46      	ldr	r2, [pc, #280]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	2214      	movs	r2, #20
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f002 fb5b 	bl	800640c <memset>
    _NumTasks--;
 8003d56:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	e07b      	b.n	8003e5a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d276      	bcs.n	8003e5a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003d6c:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	1e5a      	subs	r2, r3, #1
 8003d72:	493c      	ldr	r1, [pc, #240]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	4838      	ldr	r0, [pc, #224]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4403      	add	r3, r0
 8003d8e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	4933      	ldr	r1, [pc, #204]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	3304      	adds	r3, #4
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	482f      	ldr	r0, [pc, #188]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4403      	add	r3, r0
 8003db4:	3304      	adds	r3, #4
 8003db6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003db8:	4b29      	ldr	r3, [pc, #164]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	4929      	ldr	r1, [pc, #164]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3308      	adds	r3, #8
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	4825      	ldr	r0, [pc, #148]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4403      	add	r3, r0
 8003ddc:	3308      	adds	r3, #8
 8003dde:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003de0:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	491f      	ldr	r1, [pc, #124]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	330c      	adds	r3, #12
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	481b      	ldr	r0, [pc, #108]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4403      	add	r3, r0
 8003e04:	330c      	adds	r3, #12
 8003e06:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1e5a      	subs	r2, r3, #1
 8003e0e:	4915      	ldr	r1, [pc, #84]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	3310      	adds	r3, #16
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	4811      	ldr	r0, [pc, #68]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4403      	add	r3, r0
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	1e5a      	subs	r2, r3, #1
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4a09      	ldr	r2, [pc, #36]	; (8003e64 <SYSVIEW_DeleteTask+0x174>)
 8003e40:	4413      	add	r3, r2
 8003e42:	2214      	movs	r2, #20
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f002 fae0 	bl	800640c <memset>
    _NumTasks--;
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	4a03      	ldr	r2, [pc, #12]	; (8003e60 <SYSVIEW_DeleteTask+0x170>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e000      	b.n	8003e5a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003e58:	bf00      	nop
  }
}
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20012e00 	.word	0x20012e00
 8003e64:	20012d60 	.word	0x20012d60

08003e68 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003e76:	f107 0314 	add.w	r3, r7, #20
 8003e7a:	2214      	movs	r2, #20
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f002 fac4 	bl	800640c <memset>
  TaskInfo.TaskID     = TaskID;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 fde1 	bl	8005a64 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003ea2:	bf00      	nop
 8003ea4:	3728      	adds	r7, #40	; 0x28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <__NVIC_EnableIRQ>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	db0b      	blt.n	8003ed6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	4907      	ldr	r1, [pc, #28]	; (8003ee4 <__NVIC_EnableIRQ+0x38>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	2001      	movs	r0, #1
 8003ece:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000e100 	.word	0xe000e100

08003ee8 <__NVIC_SetPriority>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db0a      	blt.n	8003f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	490c      	ldr	r1, [pc, #48]	; (8003f34 <__NVIC_SetPriority+0x4c>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f10:	e00a      	b.n	8003f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <__NVIC_SetPriority+0x50>)
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	761a      	strb	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000e100 	.word	0xe000e100
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003f42:	f002 f9f5 	bl	8006330 <SEGGER_SYSVIEW_IsStarted>
 8003f46:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003f4e:	f001 fc0d 	bl	800576c <SEGGER_SYSVIEW_Start>
  }
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <_cbOnUARTRx+0x3c>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d806      	bhi.n	8003f7c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <_cbOnUARTRx+0x3c>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <_cbOnUARTRx+0x3c>)
 8003f78:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003f7a:	e009      	b.n	8003f90 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003f7c:	f7ff ffde 	bl	8003f3c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <_cbOnUARTRx+0x3c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4618      	mov	r0, r3
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f000 fb9a 	bl	80046c4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003f90:	bf00      	nop
}
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000018 	.word	0x20000018

08003f9c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003fa4:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <_cbOnUARTTx+0x5c>)
 8003fa6:	785b      	ldrb	r3, [r3, #1]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d80f      	bhi.n	8003fcc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <_cbOnUARTTx+0x5c>)
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <_cbOnUARTTx+0x60>)
 8003fb4:	5c9a      	ldrb	r2, [r3, r2]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <_cbOnUARTTx+0x5c>)
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <_cbOnUARTTx+0x5c>)
 8003fc4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003fca:	e00f      	b.n	8003fec <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <_cbOnUARTTx+0x5c>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fa19 	bl	800440c <SEGGER_RTT_ReadUpBufferNoLock>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	da02      	bge.n	8003fea <_cbOnUARTTx+0x4e>
    r = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e000      	b.n	8003fec <_cbOnUARTTx+0x50>
  }
Done:
 8003fea:	bf00      	nop
  return r;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000018 	.word	0x20000018
 8003ffc:	08006630 	.word	0x08006630

08004000 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <SEGGER_UART_init+0x1c>)
 800400a:	4905      	ldr	r1, [pc, #20]	; (8004020 <SEGGER_UART_init+0x20>)
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f863 	bl	80040d8 <HIF_UART_Init>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	08003f5d 	.word	0x08003f5d
 8004020:	08003f9d 	.word	0x08003f9d

08004024 <USART2_IRQHandler>:
*
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <USART2_IRQHandler+0x80>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d011      	beq.n	800405e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800403a:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <USART2_IRQHandler+0x84>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 030b 	and.w	r3, r3, #11
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <USART2_IRQHandler+0x88>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <USART2_IRQHandler+0x88>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	79fa      	ldrb	r2, [r7, #7]
 800405a:	4610      	mov	r0, r2
 800405c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01a      	beq.n	800409e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <USART2_IRQHandler+0x8c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d015      	beq.n	800409c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <USART2_IRQHandler+0x8c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	1dfa      	adds	r2, r7, #7
 8004076:	4610      	mov	r0, r2
 8004078:	4798      	blx	r3
 800407a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <USART2_IRQHandler+0x90>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <USART2_IRQHandler+0x90>)
 8004088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e006      	b.n	800409e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <USART2_IRQHandler+0x80>)
 8004092:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004094:	79fa      	ldrb	r2, [r7, #7]
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <USART2_IRQHandler+0x84>)
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e000      	b.n	800409e <USART2_IRQHandler+0x7a>
      return;
 800409c:	bf00      	nop
    }
  }
}
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40004400 	.word	0x40004400
 80040a8:	40004404 	.word	0x40004404
 80040ac:	20012e04 	.word	0x20012e04
 80040b0:	20012e08 	.word	0x20012e08
 80040b4:	4000440c 	.word	0x4000440c

080040b8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80040c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	4000440c 	.word	0x4000440c

080040d8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80040e4:	4b2e      	ldr	r3, [pc, #184]	; (80041a0 <HIF_UART_Init+0xc8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2d      	ldr	r2, [pc, #180]	; (80041a0 <HIF_UART_Init+0xc8>)
 80040ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ee:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80040f0:	4b2c      	ldr	r3, [pc, #176]	; (80041a4 <HIF_UART_Init+0xcc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2b      	ldr	r2, [pc, #172]	; (80041a4 <HIF_UART_Init+0xcc>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <HIF_UART_Init+0xd0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004108:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004110:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004112:	4a25      	ldr	r2, [pc, #148]	; (80041a8 <HIF_UART_Init+0xd0>)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004118:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HIF_UART_Init+0xd4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004124:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800412c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800412e:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <HIF_UART_Init+0xd4>)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004134:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <HIF_UART_Init+0xd8>)
 8004136:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800413a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HIF_UART_Init+0xdc>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004142:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <HIF_UART_Init+0xe0>)
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800414e:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <HIF_UART_Init+0xe4>)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	3301      	adds	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004166:	d302      	bcc.n	800416e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004168:	f640 73ff 	movw	r3, #4095	; 0xfff
 800416c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <HIF_UART_Init+0xe8>)
 800417a:	b29b      	uxth	r3, r3
 800417c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800417e:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <HIF_UART_Init+0xec>)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004184:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <HIF_UART_Init+0xf0>)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800418a:	2106      	movs	r1, #6
 800418c:	2026      	movs	r0, #38	; 0x26
 800418e:	f7ff feab 	bl	8003ee8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004192:	2026      	movs	r0, #38	; 0x26
 8004194:	f7ff fe8a 	bl	8003eac <__NVIC_EnableIRQ>
}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023840 	.word	0x40023840
 80041a4:	40023830 	.word	0x40023830
 80041a8:	40020020 	.word	0x40020020
 80041ac:	40020000 	.word	0x40020000
 80041b0:	4000440c 	.word	0x4000440c
 80041b4:	40004410 	.word	0x40004410
 80041b8:	40004414 	.word	0x40004414
 80041bc:	055d4a80 	.word	0x055d4a80
 80041c0:	40004408 	.word	0x40004408
 80041c4:	20012e04 	.word	0x20012e04
 80041c8:	20012e08 	.word	0x20012e08

080041cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80041d2:	4b24      	ldr	r3, [pc, #144]	; (8004264 <_DoInit+0x98>)
 80041d4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2203      	movs	r2, #3
 80041da:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2203      	movs	r2, #3
 80041e0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a20      	ldr	r2, [pc, #128]	; (8004268 <_DoInit+0x9c>)
 80041e6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a20      	ldr	r2, [pc, #128]	; (800426c <_DoInit+0xa0>)
 80041ec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <_DoInit+0x9c>)
 800420c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a17      	ldr	r2, [pc, #92]	; (8004270 <_DoInit+0xa4>)
 8004212:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2210      	movs	r2, #16
 8004218:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3307      	adds	r3, #7
 8004230:	4a10      	ldr	r2, [pc, #64]	; (8004274 <_DoInit+0xa8>)
 8004232:	6810      	ldr	r0, [r2, #0]
 8004234:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004236:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <_DoInit+0xac>)
 800423e:	6810      	ldr	r0, [r2, #0]
 8004240:	6018      	str	r0, [r3, #0]
 8004242:	8891      	ldrh	r1, [r2, #4]
 8004244:	7992      	ldrb	r2, [r2, #6]
 8004246:	8099      	strh	r1, [r3, #4]
 8004248:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800424a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004254:	f3bf 8f5f 	dmb	sy
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	20014398 	.word	0x20014398
 8004268:	080065f0 	.word	0x080065f0
 800426c:	20012e0c 	.word	0x20012e0c
 8004270:	2001320c 	.word	0x2001320c
 8004274:	080065fc 	.word	0x080065fc
 8004278:	08006600 	.word	0x08006600

0800427c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004288:	2300      	movs	r3, #0
 800428a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	429a      	cmp	r2, r3
 800429e:	d905      	bls.n	80042ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e007      	b.n	80042bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	69b9      	ldr	r1, [r7, #24]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	1acb      	subs	r3, r1, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	3b01      	subs	r3, #1
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c6:	4293      	cmp	r3, r2
 80042c8:	bf28      	it	cs
 80042ca:	4613      	movcs	r3, r2
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80042ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4293      	cmp	r3, r2
 80042d4:	bf28      	it	cs
 80042d6:	4613      	movcs	r3, r2
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	6978      	ldr	r0, [r7, #20]
 80042ea:	f002 f881 	bl	80063f0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	4413      	add	r3, r2
 80042f4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	4413      	add	r3, r2
 80042fc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	4413      	add	r3, r2
 800430c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	429a      	cmp	r2, r3
 8004316:	d101      	bne.n	800431c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004318:	2300      	movs	r3, #0
 800431a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800431c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1b2      	bne.n	8004292 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800432c:	6a3b      	ldr	r3, [r7, #32]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004336:	b580      	push	{r7, lr}
 8004338:	b088      	sub	sp, #32
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	429a      	cmp	r2, r3
 8004358:	d911      	bls.n	800437e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	6938      	ldr	r0, [r7, #16]
 800436a:	f002 f841 	bl	80063f0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800436e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	441a      	add	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800437c:	e01f      	b.n	80043be <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	6938      	ldr	r0, [r7, #16]
 8004392:	f002 f82d 	bl	80063f0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4413      	add	r3, r2
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4619      	mov	r1, r3
 80043ae:	6938      	ldr	r0, [r7, #16]
 80043b0:	f002 f81e 	bl	80063f0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	60da      	str	r2, [r3, #12]
}
 80043be:	bf00      	nop
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d808      	bhi.n	80043f4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad2      	subs	r2, r2, r3
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	3b01      	subs	r3, #1
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e004      	b.n	80043fe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80043fe:	697b      	ldr	r3, [r7, #20]
}
 8004400:	4618      	mov	r0, r3
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	; 0x30
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004418:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004426:	f7ff fed1 	bl	80041cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4a37      	ldr	r2, [pc, #220]	; (8004514 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004438:	4413      	add	r3, r2
 800443a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800444c:	2300      	movs	r3, #0
 800444e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	429a      	cmp	r2, r3
 8004456:	d92b      	bls.n	80044b0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4293      	cmp	r3, r2
 8004468:	bf28      	it	cs
 800446a:	4613      	movcs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	4413      	add	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	6939      	ldr	r1, [r7, #16]
 800447c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800447e:	f001 ffb7 	bl	80063f0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4413      	add	r3, r2
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800449a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4413      	add	r3, r2
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d101      	bne.n	80044b0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4293      	cmp	r3, r2
 80044be:	bf28      	it	cs
 80044c0:	4613      	movcs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d019      	beq.n	80044fe <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	4413      	add	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	6939      	ldr	r1, [r7, #16]
 80044d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044da:	f001 ff89 	bl	80063f0 <memcpy>
    NumBytesRead += NumBytesRem;
 80044de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4413      	add	r3, r2
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4413      	add	r3, r2
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004508:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800450c:	4618      	mov	r0, r3
 800450e:	3730      	adds	r7, #48	; 0x30
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20014398 	.word	0x20014398

08004518 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004524:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <SEGGER_RTT_ReadNoLock+0x108>)
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <SEGGER_RTT_ReadNoLock+0x1e>
 8004532:	f7ff fe4b 	bl	80041cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	3360      	adds	r3, #96	; 0x60
 8004542:	4a37      	ldr	r2, [pc, #220]	; (8004620 <SEGGER_RTT_ReadNoLock+0x108>)
 8004544:	4413      	add	r3, r2
 8004546:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004558:	2300      	movs	r3, #0
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800455c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	429a      	cmp	r2, r3
 8004562:	d92b      	bls.n	80045bc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4293      	cmp	r3, r2
 8004574:	bf28      	it	cs
 8004576:	4613      	movcs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	4413      	add	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	6939      	ldr	r1, [r7, #16]
 8004588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800458a:	f001 ff31 	bl	80063f0 <memcpy>
    NumBytesRead += NumBytesRem;
 800458e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	4413      	add	r3, r2
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4413      	add	r3, r2
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d101      	bne.n	80045bc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80045b8:	2300      	movs	r3, #0
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bf28      	it	cs
 80045cc:	4613      	movcs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d019      	beq.n	800460a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	4413      	add	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	6939      	ldr	r1, [r7, #16]
 80045e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045e6:	f001 ff03 	bl	80063f0 <memcpy>
    NumBytesRead += NumBytesRem;
 80045ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4413      	add	r3, r2
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4413      	add	r3, r2
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4413      	add	r3, r2
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004614:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004618:	4618      	mov	r0, r3
 800461a:	3730      	adds	r7, #48	; 0x30
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20014398 	.word	0x20014398

08004624 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	3360      	adds	r3, #96	; 0x60
 8004640:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004642:	4413      	add	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d029      	beq.n	80046a2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800464e:	2b02      	cmp	r3, #2
 8004650:	d82e      	bhi.n	80046b0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004656:	2b01      	cmp	r3, #1
 8004658:	d013      	beq.n	8004682 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800465a:	e029      	b.n	80046b0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800465c:	6978      	ldr	r0, [r7, #20]
 800465e:	f7ff feb2 	bl	80043c6 <_GetAvailWriteSpace>
 8004662:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d202      	bcs.n	8004672 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004670:	e021      	b.n	80046b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	69b9      	ldr	r1, [r7, #24]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff fe5b 	bl	8004336 <_WriteNoCheck>
    break;
 8004680:	e019      	b.n	80046b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004682:	6978      	ldr	r0, [r7, #20]
 8004684:	f7ff fe9f 	bl	80043c6 <_GetAvailWriteSpace>
 8004688:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4293      	cmp	r3, r2
 8004690:	bf28      	it	cs
 8004692:	4613      	movcs	r3, r2
 8004694:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff fe4b 	bl	8004336 <_WriteNoCheck>
    break;
 80046a0:	e009      	b.n	80046b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	6978      	ldr	r0, [r7, #20]
 80046a8:	f7ff fde8 	bl	800427c <_WriteBlocking>
 80046ac:	61f8      	str	r0, [r7, #28]
    break;
 80046ae:	e002      	b.n	80046b6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]
    break;
 80046b4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80046b6:	69fb      	ldr	r3, [r7, #28]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20014398 	.word	0x20014398

080046c4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <SEGGER_RTT_WriteDownBuffer+0x48>)
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80046de:	f7ff fd75 	bl	80041cc <_DoInit>
  SEGGER_RTT_LOCK();
 80046e2:	f3ef 8311 	mrs	r3, BASEPRI
 80046e6:	f04f 0120 	mov.w	r1, #32
 80046ea:	f381 8811 	msr	BASEPRI, r1
 80046ee:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff ff95 	bl	8004624 <SEGGER_RTT_WriteDownBufferNoLock>
 80046fa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004702:	697b      	ldr	r3, [r7, #20]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20014398 	.word	0x20014398

08004710 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800471e:	4b3d      	ldr	r3, [pc, #244]	; (8004814 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <SEGGER_RTT_AllocUpBuffer+0x20>
 800472c:	f7ff fd4e 	bl	80041cc <_DoInit>
  SEGGER_RTT_LOCK();
 8004730:	f3ef 8311 	mrs	r3, BASEPRI
 8004734:	f04f 0120 	mov.w	r1, #32
 8004738:	f381 8811 	msr	BASEPRI, r1
 800473c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800473e:	4b35      	ldr	r3, [pc, #212]	; (8004814 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004740:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004746:	6939      	ldr	r1, [r7, #16]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	4613      	mov	r3, r2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4413      	add	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	440b      	add	r3, r1
 8004756:	3304      	adds	r3, #4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3301      	adds	r3, #1
 8004762:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	429a      	cmp	r2, r3
 800476c:	dbeb      	blt.n	8004746 <SEGGER_RTT_AllocUpBuffer+0x36>
 800476e:	e000      	b.n	8004772 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004770:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	429a      	cmp	r2, r3
 800477a:	da3f      	bge.n	80047fc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800477c:	6939      	ldr	r1, [r7, #16]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	440b      	add	r3, r1
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004790:	6939      	ldr	r1, [r7, #16]
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	4613      	mov	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	440b      	add	r3, r1
 80047a0:	3304      	adds	r3, #4
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80047a6:	6939      	ldr	r1, [r7, #16]
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	4613      	mov	r3, r2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	440b      	add	r3, r1
 80047b4:	3320      	adds	r3, #32
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80047ba:	6939      	ldr	r1, [r7, #16]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	440b      	add	r3, r1
 80047c8:	3328      	adds	r3, #40	; 0x28
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80047ce:	6939      	ldr	r1, [r7, #16]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	4613      	mov	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4413      	add	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	440b      	add	r3, r1
 80047dc:	3324      	adds	r3, #36	; 0x24
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80047e2:	6939      	ldr	r1, [r7, #16]
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	4613      	mov	r3, r2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4413      	add	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	440b      	add	r3, r1
 80047f0:	332c      	adds	r3, #44	; 0x2c
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80047f6:	f3bf 8f5f 	dmb	sy
 80047fa:	e002      	b.n	8004802 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004800:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004808:	69fb      	ldr	r3, [r7, #28]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20014398 	.word	0x20014398

08004818 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004826:	4b21      	ldr	r3, [pc, #132]	; (80048ac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004834:	f7ff fcca 	bl	80041cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004838:	4b1c      	ldr	r3, [pc, #112]	; (80048ac <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800483a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d82c      	bhi.n	800489c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004842:	f3ef 8311 	mrs	r3, BASEPRI
 8004846:	f04f 0120 	mov.w	r1, #32
 800484a:	f381 8811 	msr	BASEPRI, r1
 800484e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	3360      	adds	r3, #96	; 0x60
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00e      	beq.n	8004886 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800488c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	e002      	b.n	80048a2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	; 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20014398 	.word	0x20014398

080048b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00f      	beq.n	80048e6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80048c6:	e002      	b.n	80048ce <_EncodeStr+0x1e>
      Len++;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	3301      	adds	r3, #1
 80048cc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f6      	bne.n	80048c8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d901      	bls.n	80048e6 <_EncodeStr+0x36>
      Len = Limit;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2bfe      	cmp	r3, #254	; 0xfe
 80048ea:	d806      	bhi.n	80048fa <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	60fa      	str	r2, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e011      	b.n	800491e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	60fa      	str	r2, [r7, #12]
 8004900:	22ff      	movs	r2, #255	; 0xff
 8004902:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	60fa      	str	r2, [r7, #12]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	0a19      	lsrs	r1, r3, #8
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	60fa      	str	r2, [r7, #12]
 800491a:	b2ca      	uxtb	r2, r1
 800491c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004922:	e00a      	b.n	800493a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	1c53      	adds	r3, r2, #1
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1c59      	adds	r1, r3, #1
 800492e:	60f9      	str	r1, [r7, #12]
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	701a      	strb	r2, [r3, #0]
    n++;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3301      	adds	r3, #1
 8004938:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	429a      	cmp	r2, r3
 8004940:	d3f0      	bcc.n	8004924 <_EncodeStr+0x74>
  }
  return pPayload;
 8004942:	68fb      	ldr	r3, [r7, #12]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3304      	adds	r3, #4
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800496e:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <_HandleIncomingPacket+0xe0>)
 8004970:	7e1b      	ldrb	r3, [r3, #24]
 8004972:	4618      	mov	r0, r3
 8004974:	1cfb      	adds	r3, r7, #3
 8004976:	2201      	movs	r2, #1
 8004978:	4619      	mov	r1, r3
 800497a:	f7ff fdcd 	bl	8004518 <SEGGER_RTT_ReadNoLock>
 800497e:	4603      	mov	r3, r0
 8004980:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	dd54      	ble.n	8004a32 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	2b80      	cmp	r3, #128	; 0x80
 800498c:	d032      	beq.n	80049f4 <_HandleIncomingPacket+0x8c>
 800498e:	2b80      	cmp	r3, #128	; 0x80
 8004990:	dc42      	bgt.n	8004a18 <_HandleIncomingPacket+0xb0>
 8004992:	2b07      	cmp	r3, #7
 8004994:	dc16      	bgt.n	80049c4 <_HandleIncomingPacket+0x5c>
 8004996:	2b00      	cmp	r3, #0
 8004998:	dd3e      	ble.n	8004a18 <_HandleIncomingPacket+0xb0>
 800499a:	3b01      	subs	r3, #1
 800499c:	2b06      	cmp	r3, #6
 800499e:	d83b      	bhi.n	8004a18 <_HandleIncomingPacket+0xb0>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <_HandleIncomingPacket+0x40>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049cb 	.word	0x080049cb
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d7 	.word	0x080049d7
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e3 	.word	0x080049e3
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	2b7f      	cmp	r3, #127	; 0x7f
 80049c6:	d036      	beq.n	8004a36 <_HandleIncomingPacket+0xce>
 80049c8:	e026      	b.n	8004a18 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80049ca:	f000 fecf 	bl	800576c <SEGGER_SYSVIEW_Start>
      break;
 80049ce:	e037      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80049d0:	f000 ff88 	bl	80058e4 <SEGGER_SYSVIEW_Stop>
      break;
 80049d4:	e034      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80049d6:	f001 f961 	bl	8005c9c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80049da:	e031      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80049dc:	f001 f926 	bl	8005c2c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80049e0:	e02e      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80049e2:	f000 ffa5 	bl	8005930 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80049e6:	e02b      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80049e8:	f001 fbf4 	bl	80061d4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80049ec:	e028      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80049ee:	f001 fbd3 	bl	8006198 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80049f2:	e025      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <_HandleIncomingPacket+0xe0>)
 80049f6:	7e1b      	ldrb	r3, [r3, #24]
 80049f8:	4618      	mov	r0, r3
 80049fa:	1cfb      	adds	r3, r7, #3
 80049fc:	2201      	movs	r2, #1
 80049fe:	4619      	mov	r1, r3
 8004a00:	f7ff fd8a 	bl	8004518 <SEGGER_RTT_ReadNoLock>
 8004a04:	4603      	mov	r3, r0
 8004a06:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	dd15      	ble.n	8004a3a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 fb41 	bl	8006098 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004a16:	e010      	b.n	8004a3a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da0e      	bge.n	8004a3e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <_HandleIncomingPacket+0xe0>)
 8004a22:	7e1b      	ldrb	r3, [r3, #24]
 8004a24:	4618      	mov	r0, r3
 8004a26:	1cfb      	adds	r3, r7, #3
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f7ff fd74 	bl	8004518 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004a30:	e005      	b.n	8004a3e <_HandleIncomingPacket+0xd6>
    }
  }
 8004a32:	bf00      	nop
 8004a34:	e004      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
      break;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <_HandleIncomingPacket+0xd8>
      break;
 8004a3e:	bf00      	nop
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20014224 	.word	0x20014224

08004a4c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	; 0x30
 8004a50:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004a52:	2301      	movs	r3, #1
 8004a54:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004a56:	1d3b      	adds	r3, r7, #4
 8004a58:	3301      	adds	r3, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a60:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <_TrySendOverflowPacket+0xe0>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a66:	e00b      	b.n	8004a80 <_TrySendOverflowPacket+0x34>
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	09db      	lsrs	r3, r3, #7
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	2b7f      	cmp	r3, #127	; 0x7f
 8004a84:	d8f0      	bhi.n	8004a68 <_TrySendOverflowPacket+0x1c>
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a96:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <_TrySendOverflowPacket+0xe4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a9c:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <_TrySendOverflowPacket+0xe0>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	e00b      	b.n	8004ac8 <_TrySendOverflowPacket+0x7c>
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	6279      	str	r1, [r7, #36]	; 0x24
 8004aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	09db      	lsrs	r3, r3, #7
 8004ac6:	623b      	str	r3, [r7, #32]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	2b7f      	cmp	r3, #127	; 0x7f
 8004acc:	d8f0      	bhi.n	8004ab0 <_TrySendOverflowPacket+0x64>
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	627a      	str	r2, [r7, #36]	; 0x24
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <_TrySendOverflowPacket+0xe0>)
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	f7fb fb8e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004af4:	4603      	mov	r3, r0
 8004af6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004af8:	f7ff fade 	bl	80040b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <_TrySendOverflowPacket+0xe0>)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004b08:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <_TrySendOverflowPacket+0xe0>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <_TrySendOverflowPacket+0xe0>)
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e004      	b.n	8004b20 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <_TrySendOverflowPacket+0xe0>)
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	4a03      	ldr	r2, [pc, #12]	; (8004b2c <_TrySendOverflowPacket+0xe0>)
 8004b1e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004b20:	693b      	ldr	r3, [r7, #16]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3730      	adds	r7, #48	; 0x30
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20014224 	.word	0x20014224
 8004b30:	e0001004 	.word	0xe0001004

08004b34 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	; 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004b40:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <_SendPacket+0x1c4>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d010      	beq.n	8004b6a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004b48:	4b6b      	ldr	r3, [pc, #428]	; (8004cf8 <_SendPacket+0x1c4>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80a5 	beq.w	8004c9c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004b52:	4b69      	ldr	r3, [pc, #420]	; (8004cf8 <_SendPacket+0x1c4>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d109      	bne.n	8004b6e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004b5a:	f7ff ff77 	bl	8004a4c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004b5e:	4b66      	ldr	r3, [pc, #408]	; (8004cf8 <_SendPacket+0x1c4>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	f040 809c 	bne.w	8004ca0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004b68:	e001      	b.n	8004b6e <_SendPacket+0x3a>
    goto Send;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <_SendPacket+0x3c>
Send:
 8004b6e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b1f      	cmp	r3, #31
 8004b74:	d809      	bhi.n	8004b8a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004b76:	4b60      	ldr	r3, [pc, #384]	; (8004cf8 <_SendPacket+0x1c4>)
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 808d 	bne.w	8004ca4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b17      	cmp	r3, #23
 8004b8e:	d807      	bhi.n	8004ba0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e03d      	b.n	8004c1c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b7f      	cmp	r3, #127	; 0x7f
 8004bac:	d912      	bls.n	8004bd4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	09da      	lsrs	r2, r3, #7
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	3a01      	subs	r2, #1
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e006      	b.n	8004be2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b7f      	cmp	r3, #127	; 0x7f
 8004be6:	d912      	bls.n	8004c0e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	09da      	lsrs	r2, r3, #7
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	3a01      	subs	r2, #1
 8004c00:	60fa      	str	r2, [r7, #12]
 8004c02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e006      	b.n	8004c1c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c1c:	4b37      	ldr	r3, [pc, #220]	; (8004cfc <_SendPacket+0x1c8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004c22:	4b35      	ldr	r3, [pc, #212]	; (8004cf8 <_SendPacket+0x1c4>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	623b      	str	r3, [r7, #32]
 8004c34:	e00b      	b.n	8004c4e <_SendPacket+0x11a>
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	1c59      	adds	r1, r3, #1
 8004c3e:	6279      	str	r1, [r7, #36]	; 0x24
 8004c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	09db      	lsrs	r3, r3, #7
 8004c4c:	623b      	str	r3, [r7, #32]
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2b7f      	cmp	r3, #127	; 0x7f
 8004c52:	d8f0      	bhi.n	8004c36 <_SendPacket+0x102>
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	627a      	str	r2, [r7, #36]	; 0x24
 8004c5a:	6a3a      	ldr	r2, [r7, #32]
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <_SendPacket+0x1c4>)
 8004c66:	785b      	ldrb	r3, [r3, #1]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	f7fb facc 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004c7c:	f7ff fa1c 	bl	80040b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c86:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <_SendPacket+0x1c4>)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	60d3      	str	r3, [r2, #12]
 8004c8c:	e00b      	b.n	8004ca6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <_SendPacket+0x1c4>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	3301      	adds	r3, #1
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <_SendPacket+0x1c4>)
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e004      	b.n	8004ca6 <_SendPacket+0x172>
    goto SendDone;
 8004c9c:	bf00      	nop
 8004c9e:	e002      	b.n	8004ca6 <_SendPacket+0x172>
      goto SendDone;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <_SendPacket+0x172>
      goto SendDone;
 8004ca4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004ca6:	4b14      	ldr	r3, [pc, #80]	; (8004cf8 <_SendPacket+0x1c4>)
 8004ca8:	7e1b      	ldrb	r3, [r3, #24]
 8004caa:	4619      	mov	r1, r3
 8004cac:	4a14      	ldr	r2, [pc, #80]	; (8004d00 <_SendPacket+0x1cc>)
 8004cae:	460b      	mov	r3, r1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	440b      	add	r3, r1
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	336c      	adds	r3, #108	; 0x6c
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <_SendPacket+0x1c4>)
 8004cbe:	7e1b      	ldrb	r3, [r3, #24]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	490f      	ldr	r1, [pc, #60]	; (8004d00 <_SendPacket+0x1cc>)
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4403      	add	r3, r0
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	440b      	add	r3, r1
 8004cce:	3370      	adds	r3, #112	; 0x70
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d00b      	beq.n	8004cee <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <_SendPacket+0x1c4>)
 8004cd8:	789b      	ldrb	r3, [r3, #2]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <_SendPacket+0x1c4>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004ce4:	f7ff fe40 	bl	8004968 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <_SendPacket+0x1c4>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004cee:	bf00      	nop
 8004cf0:	3728      	adds	r7, #40	; 0x28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20014224 	.word	0x20014224
 8004cfc:	e0001004 	.word	0xe0001004
 8004d00:	20014398 	.word	0x20014398

08004d04 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d80a      	bhi.n	8004d34 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	1c59      	adds	r1, r3, #1
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6051      	str	r1, [r2, #4]
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d15a      	bne.n	8004df2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	e00b      	b.n	8004d76 <_StoreChar+0x72>
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1c59      	adds	r1, r3, #1
 8004d66:	6279      	str	r1, [r7, #36]	; 0x24
 8004d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	09db      	lsrs	r3, r3, #7
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	2b7f      	cmp	r3, #127	; 0x7f
 8004d7a:	d8f0      	bhi.n	8004d5e <_StoreChar+0x5a>
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	627a      	str	r2, [r7, #36]	; 0x24
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	2300      	movs	r3, #0
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	e00b      	b.n	8004dae <_StoreChar+0xaa>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	1c59      	adds	r1, r3, #1
 8004d9e:	61f9      	str	r1, [r7, #28]
 8004da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	09db      	lsrs	r3, r3, #7
 8004dac:	61bb      	str	r3, [r7, #24]
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b7f      	cmp	r3, #127	; 0x7f
 8004db2:	d8f0      	bhi.n	8004d96 <_StoreChar+0x92>
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	221a      	movs	r2, #26
 8004dca:	6939      	ldr	r1, [r7, #16]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff feb1 	bl	8004b34 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fdba 	bl	8004950 <_PreparePacket>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	611a      	str	r2, [r3, #16]
  }
}
 8004df2:	bf00      	nop
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004e16:	e007      	b.n	8004e28 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	623b      	str	r3, [r7, #32]
    Width++;
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3301      	adds	r3, #1
 8004e26:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004e28:	6a3a      	ldr	r2, [r7, #32]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d2f3      	bcs.n	8004e18 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d901      	bls.n	8004e3c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d11f      	bne.n	8004e86 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01c      	beq.n	8004e86 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <_PrintUnsigned+0x66>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <_PrintUnsigned+0x66>
        c = '0';
 8004e5c:	2330      	movs	r3, #48	; 0x30
 8004e5e:	76fb      	strb	r3, [r7, #27]
 8004e60:	e001      	b.n	8004e66 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004e62:	2320      	movs	r3, #32
 8004e64:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e66:	e007      	b.n	8004e78 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004e6e:	7efb      	ldrb	r3, [r7, #27]
 8004e70:	4619      	mov	r1, r3
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff ff46 	bl	8004d04 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <_PrintUnsigned+0x8a>
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d3f0      	bcc.n	8004e68 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d903      	bls.n	8004e94 <_PrintUnsigned+0x98>
      NumDigits--;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	e009      	b.n	8004ea8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d200      	bcs.n	8004ea8 <_PrintUnsigned+0xac>
        break;
 8004ea6:	e005      	b.n	8004eb4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	fb02 f303 	mul.w	r3, r2, r3
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004eb2:	e7e8      	b.n	8004e86 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004ecc:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <_PrintUnsigned+0x128>)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff ff14 	bl	8004d04 <_StoreChar>
    Digit /= Base;
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e3      	bne.n	8004eb4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d011      	beq.n	8004f1a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00e      	beq.n	8004f1a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004efc:	e006      	b.n	8004f0c <_PrintUnsigned+0x110>
        FieldWidth--;
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	3b01      	subs	r3, #1
 8004f02:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004f04:	2120      	movs	r1, #32
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff fefc 	bl	8004d04 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <_PrintUnsigned+0x11e>
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d3f1      	bcc.n	8004efe <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	08006640 	.word	0x08006640

08004f28 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bfb8      	it	lt
 8004f3c:	425b      	neglt	r3, r3
 8004f3e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004f44:	e007      	b.n	8004f56 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f4e:	613b      	str	r3, [r7, #16]
    Width++;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3301      	adds	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	daf3      	bge.n	8004f46 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d901      	bls.n	8004f6a <_PrintInt+0x42>
    Width = NumDigits;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <_PrintInt+0x5e>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	db04      	blt.n	8004f80 <_PrintInt+0x58>
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <_PrintInt+0x5e>
    FieldWidth--;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <_PrintInt+0x6e>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d016      	beq.n	8004fc4 <_PrintInt+0x9c>
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d111      	bne.n	8004fc4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00e      	beq.n	8004fc4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fa6:	e006      	b.n	8004fb6 <_PrintInt+0x8e>
        FieldWidth--;
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004fae:	2120      	movs	r1, #32
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff fea7 	bl	8004d04 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <_PrintInt+0x9c>
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3f1      	bcc.n	8004fa8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da07      	bge.n	8004fda <_PrintInt+0xb2>
    v = -v;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	425b      	negs	r3, r3
 8004fce:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004fd0:	212d      	movs	r1, #45	; 0x2d
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fe96 	bl	8004d04 <_StoreChar>
 8004fd8:	e008      	b.n	8004fec <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004fe4:	212b      	movs	r1, #43	; 0x2b
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff fe8c 	bl	8004d04 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d019      	beq.n	800502a <_PrintInt+0x102>
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d114      	bne.n	800502a <_PrintInt+0x102>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d111      	bne.n	800502a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00e      	beq.n	800502a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800500c:	e006      	b.n	800501c <_PrintInt+0xf4>
        FieldWidth--;
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	3b01      	subs	r3, #1
 8005012:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005014:	2130      	movs	r1, #48	; 0x30
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff fe74 	bl	8004d04 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <_PrintInt+0x102>
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	429a      	cmp	r2, r3
 8005028:	d3f1      	bcc.n	800500e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff fedf 	bl	8004dfc <_PrintUnsigned>
}
 800503e:	bf00      	nop
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b098      	sub	sp, #96	; 0x60
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005054:	f3ef 8311 	mrs	r3, BASEPRI
 8005058:	f04f 0120 	mov.w	r1, #32
 800505c:	f381 8811 	msr	BASEPRI, r1
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
 8005062:	48b7      	ldr	r0, [pc, #732]	; (8005340 <_VPrintTarget+0x2f8>)
 8005064:	f7ff fc74 	bl	8004950 <_PreparePacket>
 8005068:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800506a:	4bb5      	ldr	r3, [pc, #724]	; (8005340 <_VPrintTarget+0x2f8>)
 800506c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3301      	adds	r3, #1
 800507a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3301      	adds	r3, #1
 800508c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800508e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8183 	beq.w	800539e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800509c:	2b25      	cmp	r3, #37	; 0x25
 800509e:	f040 8170 	bne.w	8005382 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80050a2:	2300      	movs	r3, #0
 80050a4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80050a6:	2301      	movs	r3, #1
 80050a8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80050b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050b6:	3b23      	subs	r3, #35	; 0x23
 80050b8:	2b0d      	cmp	r3, #13
 80050ba:	d83f      	bhi.n	800513c <_VPrintTarget+0xf4>
 80050bc:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <_VPrintTarget+0x7c>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	0800512d 	.word	0x0800512d
 80050c8:	0800513d 	.word	0x0800513d
 80050cc:	0800513d 	.word	0x0800513d
 80050d0:	0800513d 	.word	0x0800513d
 80050d4:	0800513d 	.word	0x0800513d
 80050d8:	0800513d 	.word	0x0800513d
 80050dc:	0800513d 	.word	0x0800513d
 80050e0:	0800513d 	.word	0x0800513d
 80050e4:	0800511d 	.word	0x0800511d
 80050e8:	0800513d 	.word	0x0800513d
 80050ec:	080050fd 	.word	0x080050fd
 80050f0:	0800513d 	.word	0x0800513d
 80050f4:	0800513d 	.word	0x0800513d
 80050f8:	0800510d 	.word	0x0800510d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80050fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3301      	adds	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e01a      	b.n	8005142 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800510c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510e:	f043 0302 	orr.w	r3, r3, #2
 8005112:	64bb      	str	r3, [r7, #72]	; 0x48
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e012      	b.n	8005142 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800511c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511e:	f043 0304 	orr.w	r3, r3, #4
 8005122:	64bb      	str	r3, [r7, #72]	; 0x48
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	3301      	adds	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e00a      	b.n	8005142 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800512c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512e:	f043 0308 	orr.w	r3, r3, #8
 8005132:	64bb      	str	r3, [r7, #72]	; 0x48
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e002      	b.n	8005142 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800513c:	2300      	movs	r3, #0
 800513e:	653b      	str	r3, [r7, #80]	; 0x50
 8005140:	bf00      	nop
        }
      } while (v);
 8005142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1b0      	bne.n	80050aa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005148:	2300      	movs	r3, #0
 800514a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005154:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005158:	2b2f      	cmp	r3, #47	; 0x2f
 800515a:	d912      	bls.n	8005182 <_VPrintTarget+0x13a>
 800515c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005160:	2b39      	cmp	r3, #57	; 0x39
 8005162:	d80e      	bhi.n	8005182 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3301      	adds	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800516a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	461a      	mov	r2, r3
 8005176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800517a:	4413      	add	r3, r2
 800517c:	3b30      	subs	r3, #48	; 0x30
 800517e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005180:	e7e4      	b.n	800514c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005182:	2300      	movs	r3, #0
 8005184:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800518e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005192:	2b2e      	cmp	r3, #46	; 0x2e
 8005194:	d11d      	bne.n	80051d2 <_VPrintTarget+0x18a>
        sFormat++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80051a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051a8:	2b2f      	cmp	r3, #47	; 0x2f
 80051aa:	d912      	bls.n	80051d2 <_VPrintTarget+0x18a>
 80051ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051b0:	2b39      	cmp	r3, #57	; 0x39
 80051b2:	d80e      	bhi.n	80051d2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80051ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	461a      	mov	r2, r3
 80051c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ca:	4413      	add	r3, r2
 80051cc:	3b30      	subs	r3, #48	; 0x30
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80051d0:	e7e4      	b.n	800519c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80051da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051de:	2b6c      	cmp	r3, #108	; 0x6c
 80051e0:	d003      	beq.n	80051ea <_VPrintTarget+0x1a2>
 80051e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051e6:	2b68      	cmp	r3, #104	; 0x68
 80051e8:	d107      	bne.n	80051fa <_VPrintTarget+0x1b2>
          c = *sFormat;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80051f8:	e7ef      	b.n	80051da <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80051fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051fe:	2b25      	cmp	r3, #37	; 0x25
 8005200:	f000 80b3 	beq.w	800536a <_VPrintTarget+0x322>
 8005204:	2b25      	cmp	r3, #37	; 0x25
 8005206:	f2c0 80b7 	blt.w	8005378 <_VPrintTarget+0x330>
 800520a:	2b78      	cmp	r3, #120	; 0x78
 800520c:	f300 80b4 	bgt.w	8005378 <_VPrintTarget+0x330>
 8005210:	2b58      	cmp	r3, #88	; 0x58
 8005212:	f2c0 80b1 	blt.w	8005378 <_VPrintTarget+0x330>
 8005216:	3b58      	subs	r3, #88	; 0x58
 8005218:	2b20      	cmp	r3, #32
 800521a:	f200 80ad 	bhi.w	8005378 <_VPrintTarget+0x330>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <_VPrintTarget+0x1dc>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	0800531b 	.word	0x0800531b
 8005228:	08005379 	.word	0x08005379
 800522c:	08005379 	.word	0x08005379
 8005230:	08005379 	.word	0x08005379
 8005234:	08005379 	.word	0x08005379
 8005238:	08005379 	.word	0x08005379
 800523c:	08005379 	.word	0x08005379
 8005240:	08005379 	.word	0x08005379
 8005244:	08005379 	.word	0x08005379
 8005248:	08005379 	.word	0x08005379
 800524c:	08005379 	.word	0x08005379
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052cf 	.word	0x080052cf
 8005258:	08005379 	.word	0x08005379
 800525c:	08005379 	.word	0x08005379
 8005260:	08005379 	.word	0x08005379
 8005264:	08005379 	.word	0x08005379
 8005268:	08005379 	.word	0x08005379
 800526c:	08005379 	.word	0x08005379
 8005270:	08005379 	.word	0x08005379
 8005274:	08005379 	.word	0x08005379
 8005278:	08005379 	.word	0x08005379
 800527c:	08005379 	.word	0x08005379
 8005280:	08005379 	.word	0x08005379
 8005284:	08005345 	.word	0x08005345
 8005288:	08005379 	.word	0x08005379
 800528c:	08005379 	.word	0x08005379
 8005290:	08005379 	.word	0x08005379
 8005294:	08005379 	.word	0x08005379
 8005298:	080052f5 	.word	0x080052f5
 800529c:	08005379 	.word	0x08005379
 80052a0:	08005379 	.word	0x08005379
 80052a4:	0800531b 	.word	0x0800531b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	1d19      	adds	r1, r3, #4
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80052b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80052bc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fd1c 	bl	8004d04 <_StoreChar>
        break;
 80052cc:	e055      	b.n	800537a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1d19      	adds	r1, r3, #4
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6011      	str	r1, [r2, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80052dc:	f107 0014 	add.w	r0, r7, #20
 80052e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	220a      	movs	r2, #10
 80052ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052ee:	f7ff fe1b 	bl	8004f28 <_PrintInt>
        break;
 80052f2:	e042      	b.n	800537a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	1d19      	adds	r1, r3, #4
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6011      	str	r1, [r2, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005304:	f107 0014 	add.w	r0, r7, #20
 8005308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005312:	220a      	movs	r2, #10
 8005314:	f7ff fd72 	bl	8004dfc <_PrintUnsigned>
        break;
 8005318:	e02f      	b.n	800537a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	1d19      	adds	r1, r3, #4
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6011      	str	r1, [r2, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005328:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800532a:	f107 0014 	add.w	r0, r7, #20
 800532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005338:	2210      	movs	r2, #16
 800533a:	f7ff fd5f 	bl	8004dfc <_PrintUnsigned>
        break;
 800533e:	e01c      	b.n	800537a <_VPrintTarget+0x332>
 8005340:	20014254 	.word	0x20014254
      case 'p':
        v = va_arg(*pParamList, int);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	1d19      	adds	r1, r3, #4
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005352:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005354:	f107 0014 	add.w	r0, r7, #20
 8005358:	2300      	movs	r3, #0
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	2308      	movs	r3, #8
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	2308      	movs	r3, #8
 8005362:	2210      	movs	r2, #16
 8005364:	f7ff fd4a 	bl	8004dfc <_PrintUnsigned>
        break;
 8005368:	e007      	b.n	800537a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800536a:	f107 0314 	add.w	r3, r7, #20
 800536e:	2125      	movs	r1, #37	; 0x25
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fcc7 	bl	8004d04 <_StoreChar>
        break;
 8005376:	e000      	b.n	800537a <_VPrintTarget+0x332>
      default:
        break;
 8005378:	bf00      	nop
      }
      sFormat++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3301      	adds	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e007      	b.n	8005392 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005382:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005386:	f107 0314 	add.w	r3, r7, #20
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fcb9 	bl	8004d04 <_StoreChar>
    }
  } while (*sFormat);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f47f ae72 	bne.w	8005080 <_VPrintTarget+0x38>
 800539c:	e000      	b.n	80053a0 <_VPrintTarget+0x358>
      break;
 800539e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d041      	beq.n	800542a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	643b      	str	r3, [r7, #64]	; 0x40
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b6:	e00b      	b.n	80053d0 <_VPrintTarget+0x388>
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053be:	1c59      	adds	r1, r3, #1
 80053c0:	6439      	str	r1, [r7, #64]	; 0x40
 80053c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	09db      	lsrs	r3, r3, #7
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d2:	2b7f      	cmp	r3, #127	; 0x7f
 80053d4:	d8f0      	bhi.n	80053b8 <_VPrintTarget+0x370>
 80053d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	643a      	str	r2, [r7, #64]	; 0x40
 80053dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80053ea:	2300      	movs	r3, #0
 80053ec:	637b      	str	r3, [r7, #52]	; 0x34
 80053ee:	e00b      	b.n	8005408 <_VPrintTarget+0x3c0>
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	63b9      	str	r1, [r7, #56]	; 0x38
 80053fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005404:	09db      	lsrs	r3, r3, #7
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	2b7f      	cmp	r3, #127	; 0x7f
 800540c:	d8f0      	bhi.n	80053f0 <_VPrintTarget+0x3a8>
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	63ba      	str	r2, [r7, #56]	; 0x38
 8005414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	221a      	movs	r2, #26
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fb85 	bl	8004b34 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005430:	bf00      	nop
 8005432:	3758      	adds	r7, #88	; 0x58
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005446:	2300      	movs	r3, #0
 8005448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800544c:	4917      	ldr	r1, [pc, #92]	; (80054ac <SEGGER_SYSVIEW_Init+0x74>)
 800544e:	4818      	ldr	r0, [pc, #96]	; (80054b0 <SEGGER_SYSVIEW_Init+0x78>)
 8005450:	f7ff f95e 	bl	8004710 <SEGGER_RTT_AllocUpBuffer>
 8005454:	4603      	mov	r3, r0
 8005456:	b2da      	uxtb	r2, r3
 8005458:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800545a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800545c:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800545e:	785a      	ldrb	r2, [r3, #1]
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005462:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005466:	7e1b      	ldrb	r3, [r3, #24]
 8005468:	4618      	mov	r0, r3
 800546a:	2300      	movs	r3, #0
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2308      	movs	r3, #8
 8005470:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <SEGGER_SYSVIEW_Init+0x80>)
 8005472:	490f      	ldr	r1, [pc, #60]	; (80054b0 <SEGGER_SYSVIEW_Init+0x78>)
 8005474:	f7ff f9d0 	bl	8004818 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800547a:	2200      	movs	r2, #0
 800547c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800547e:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <SEGGER_SYSVIEW_Init+0x84>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a0c      	ldr	r2, [pc, #48]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005484:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005486:	4a0b      	ldr	r2, [pc, #44]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005492:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005498:	4a06      	ldr	r2, [pc, #24]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <SEGGER_SYSVIEW_Init+0x7c>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	2001321c 	.word	0x2001321c
 80054b0:	08006608 	.word	0x08006608
 80054b4:	20014224 	.word	0x20014224
 80054b8:	2001421c 	.word	0x2001421c
 80054bc:	e0001004 	.word	0xe0001004

080054c0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80054c8:	4a04      	ldr	r2, [pc, #16]	; (80054dc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6113      	str	r3, [r2, #16]
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20014224 	.word	0x20014224

080054e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054e8:	f3ef 8311 	mrs	r3, BASEPRI
 80054ec:	f04f 0120 	mov.w	r1, #32
 80054f0:	f381 8811 	msr	BASEPRI, r1
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	4808      	ldr	r0, [pc, #32]	; (8005518 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80054f8:	f7ff fa2a 	bl	8004950 <_PreparePacket>
 80054fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	68b8      	ldr	r0, [r7, #8]
 8005504:	f7ff fb16 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f383 8811 	msr	BASEPRI, r3
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20014254 	.word	0x20014254

0800551c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005526:	f3ef 8311 	mrs	r3, BASEPRI
 800552a:	f04f 0120 	mov.w	r1, #32
 800552e:	f381 8811 	msr	BASEPRI, r1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	4816      	ldr	r0, [pc, #88]	; (8005590 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005536:	f7ff fa0b 	bl	8004950 <_PreparePacket>
 800553a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	e00b      	b.n	8005562 <SEGGER_SYSVIEW_RecordU32+0x46>
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	b2da      	uxtb	r2, r3
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	1c59      	adds	r1, r3, #1
 8005552:	61f9      	str	r1, [r7, #28]
 8005554:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	09db      	lsrs	r3, r3, #7
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b7f      	cmp	r3, #127	; 0x7f
 8005566:	d8f0      	bhi.n	800554a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	61fa      	str	r2, [r7, #28]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	6938      	ldr	r0, [r7, #16]
 800557e:	f7ff fad9 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f383 8811 	msr	BASEPRI, r3
}
 8005588:	bf00      	nop
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20014254 	.word	0x20014254

08005594 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80055a0:	f3ef 8311 	mrs	r3, BASEPRI
 80055a4:	f04f 0120 	mov.w	r1, #32
 80055a8:	f381 8811 	msr	BASEPRI, r1
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	4825      	ldr	r0, [pc, #148]	; (8005644 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80055b0:	f7ff f9ce 	bl	8004950 <_PreparePacket>
 80055b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c2:	e00b      	b.n	80055dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	09db      	lsrs	r3, r3, #7
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2b7f      	cmp	r3, #127	; 0x7f
 80055e0:	d8f0      	bhi.n	80055c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	623b      	str	r3, [r7, #32]
 80055fa:	e00b      	b.n	8005614 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	1c59      	adds	r1, r3, #1
 8005604:	6279      	str	r1, [r7, #36]	; 0x24
 8005606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	09db      	lsrs	r3, r3, #7
 8005612:	623b      	str	r3, [r7, #32]
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	2b7f      	cmp	r3, #127	; 0x7f
 8005618:	d8f0      	bhi.n	80055fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	627a      	str	r2, [r7, #36]	; 0x24
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	69b8      	ldr	r0, [r7, #24]
 8005630:	f7ff fa80 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f383 8811 	msr	BASEPRI, r3
}
 800563a:	bf00      	nop
 800563c:	3730      	adds	r7, #48	; 0x30
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20014254 	.word	0x20014254

08005648 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b090      	sub	sp, #64	; 0x40
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005656:	f3ef 8311 	mrs	r3, BASEPRI
 800565a:	f04f 0120 	mov.w	r1, #32
 800565e:	f381 8811 	msr	BASEPRI, r1
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	4840      	ldr	r0, [pc, #256]	; (8005768 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005666:	f7ff f973 	bl	8004950 <_PreparePacket>
 800566a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	63bb      	str	r3, [r7, #56]	; 0x38
 8005678:	e00b      	b.n	8005692 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	b2da      	uxtb	r2, r3
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	1c59      	adds	r1, r3, #1
 8005682:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005684:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	09db      	lsrs	r3, r3, #7
 8005690:	63bb      	str	r3, [r7, #56]	; 0x38
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	2b7f      	cmp	r3, #127	; 0x7f
 8005696:	d8f0      	bhi.n	800567a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800569e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30
 80056b0:	e00b      	b.n	80056ca <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b8:	1c59      	adds	r1, r3, #1
 80056ba:	6379      	str	r1, [r7, #52]	; 0x34
 80056bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	09db      	lsrs	r3, r3, #7
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	2b7f      	cmp	r3, #127	; 0x7f
 80056ce:	d8f0      	bhi.n	80056b2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80056d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	637a      	str	r2, [r7, #52]	; 0x34
 80056d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e8:	e00b      	b.n	8005702 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	1c59      	adds	r1, r3, #1
 80056f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	09db      	lsrs	r3, r3, #7
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	2b7f      	cmp	r3, #127	; 0x7f
 8005706:	d8f0      	bhi.n	80056ea <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800570e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
 800571c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	e00b      	b.n	800573a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	6279      	str	r1, [r7, #36]	; 0x24
 800572c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	2b7f      	cmp	r3, #127	; 0x7f
 800573e:	d8f0      	bhi.n	8005722 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	627a      	str	r2, [r7, #36]	; 0x24
 8005746:	6a3a      	ldr	r2, [r7, #32]
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	6979      	ldr	r1, [r7, #20]
 8005754:	69b8      	ldr	r0, [r7, #24]
 8005756:	f7ff f9ed 	bl	8004b34 <_SendPacket>
  RECORD_END();
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f383 8811 	msr	BASEPRI, r3
}
 8005760:	bf00      	nop
 8005762:	3740      	adds	r7, #64	; 0x40
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20014254 	.word	0x20014254

0800576c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005772:	4b59      	ldr	r3, [pc, #356]	; (80058d8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005778:	f3ef 8311 	mrs	r3, BASEPRI
 800577c:	f04f 0120 	mov.w	r1, #32
 8005780:	f381 8811 	msr	BASEPRI, r1
 8005784:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005786:	4b54      	ldr	r3, [pc, #336]	; (80058d8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	220a      	movs	r2, #10
 800578c:	4953      	ldr	r1, [pc, #332]	; (80058dc <SEGGER_SYSVIEW_Start+0x170>)
 800578e:	4618      	mov	r0, r3
 8005790:	f7fa fd3e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800579a:	f7fe fc8d 	bl	80040b8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800579e:	200a      	movs	r0, #10
 80057a0:	f7ff fe9e 	bl	80054e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057a4:	f3ef 8311 	mrs	r3, BASEPRI
 80057a8:	f04f 0120 	mov.w	r1, #32
 80057ac:	f381 8811 	msr	BASEPRI, r1
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	484b      	ldr	r0, [pc, #300]	; (80058e0 <SEGGER_SYSVIEW_Start+0x174>)
 80057b4:	f7ff f8cc 	bl	8004950 <_PreparePacket>
 80057b8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c2:	4b45      	ldr	r3, [pc, #276]	; (80058d8 <SEGGER_SYSVIEW_Start+0x16c>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c8:	e00b      	b.n	80057e2 <SEGGER_SYSVIEW_Start+0x76>
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	09db      	lsrs	r3, r3, #7
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	2b7f      	cmp	r3, #127	; 0x7f
 80057e6:	d8f0      	bhi.n	80057ca <SEGGER_SYSVIEW_Start+0x5e>
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
 80057fc:	4b36      	ldr	r3, [pc, #216]	; (80058d8 <SEGGER_SYSVIEW_Start+0x16c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	e00b      	b.n	800581c <SEGGER_SYSVIEW_Start+0xb0>
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	6279      	str	r1, [r7, #36]	; 0x24
 800580e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	09db      	lsrs	r3, r3, #7
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b7f      	cmp	r3, #127	; 0x7f
 8005820:	d8f0      	bhi.n	8005804 <SEGGER_SYSVIEW_Start+0x98>
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	627a      	str	r2, [r7, #36]	; 0x24
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	4b28      	ldr	r3, [pc, #160]	; (80058d8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	e00b      	b.n	8005856 <SEGGER_SYSVIEW_Start+0xea>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	61f9      	str	r1, [r7, #28]
 8005848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b7f      	cmp	r3, #127	; 0x7f
 800585a:	d8f0      	bhi.n	800583e <SEGGER_SYSVIEW_Start+0xd2>
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	61fa      	str	r2, [r7, #28]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	2300      	movs	r3, #0
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	e00b      	b.n	800588e <SEGGER_SYSVIEW_Start+0x122>
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	1c59      	adds	r1, r3, #1
 800587e:	6179      	str	r1, [r7, #20]
 8005880:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	09db      	lsrs	r3, r3, #7
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b7f      	cmp	r3, #127	; 0x7f
 8005892:	d8f0      	bhi.n	8005876 <SEGGER_SYSVIEW_Start+0x10a>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	617a      	str	r2, [r7, #20]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80058a4:	2218      	movs	r2, #24
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff f943 	bl	8004b34 <_SendPacket>
      RECORD_END();
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80058b4:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <SEGGER_SYSVIEW_Start+0x16c>)
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <SEGGER_SYSVIEW_Start+0x16c>)
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80058c2:	f000 f9eb 	bl	8005c9c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80058c6:	f000 f9b1 	bl	8005c2c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80058ca:	f000 fc83 	bl	80061d4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80058ce:	bf00      	nop
 80058d0:	3730      	adds	r7, #48	; 0x30
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20014224 	.word	0x20014224
 80058dc:	08006634 	.word	0x08006634
 80058e0:	20014254 	.word	0x20014254

080058e4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058ea:	f3ef 8311 	mrs	r3, BASEPRI
 80058ee:	f04f 0120 	mov.w	r1, #32
 80058f2:	f381 8811 	msr	BASEPRI, r1
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	480b      	ldr	r0, [pc, #44]	; (8005928 <SEGGER_SYSVIEW_Stop+0x44>)
 80058fa:	f7ff f829 	bl	8004950 <_PreparePacket>
 80058fe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <SEGGER_SYSVIEW_Stop+0x48>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005908:	220b      	movs	r2, #11
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6838      	ldr	r0, [r7, #0]
 800590e:	f7ff f911 	bl	8004b34 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <SEGGER_SYSVIEW_Stop+0x48>)
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f383 8811 	msr	BASEPRI, r3
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20014254 	.word	0x20014254
 800592c:	20014224 	.word	0x20014224

08005930 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005936:	f3ef 8311 	mrs	r3, BASEPRI
 800593a:	f04f 0120 	mov.w	r1, #32
 800593e:	f381 8811 	msr	BASEPRI, r1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	4845      	ldr	r0, [pc, #276]	; (8005a5c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005946:	f7ff f803 	bl	8004950 <_PreparePacket>
 800594a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005954:	4b42      	ldr	r3, [pc, #264]	; (8005a60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 800595a:	e00b      	b.n	8005974 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	b2da      	uxtb	r2, r3
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	09db      	lsrs	r3, r3, #7
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	2b7f      	cmp	r3, #127	; 0x7f
 8005978:	d8f0      	bhi.n	800595c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
 800598e:	4b34      	ldr	r3, [pc, #208]	; (8005a60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	e00b      	b.n	80059ae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	6279      	str	r1, [r7, #36]	; 0x24
 80059a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	623b      	str	r3, [r7, #32]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2b7f      	cmp	r3, #127	; 0x7f
 80059b2:	d8f0      	bhi.n	8005996 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	627a      	str	r2, [r7, #36]	; 0x24
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	e00b      	b.n	80059e8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	61f9      	str	r1, [r7, #28]
 80059da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	09db      	lsrs	r3, r3, #7
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b7f      	cmp	r3, #127	; 0x7f
 80059ec:	d8f0      	bhi.n	80059d0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	61fa      	str	r2, [r7, #28]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	2300      	movs	r3, #0
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	e00b      	b.n	8005a20 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	6179      	str	r1, [r7, #20]
 8005a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	09db      	lsrs	r3, r3, #7
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b7f      	cmp	r3, #127	; 0x7f
 8005a24:	d8f0      	bhi.n	8005a08 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	617a      	str	r2, [r7, #20]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a36:	2218      	movs	r2, #24
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	68b8      	ldr	r0, [r7, #8]
 8005a3c:	f7ff f87a 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a46:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005a4e:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	4798      	blx	r3
  }
}
 8005a54:	bf00      	nop
 8005a56:	3730      	adds	r7, #48	; 0x30
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20014254 	.word	0x20014254
 8005a60:	20014224 	.word	0x20014224

08005a64 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b092      	sub	sp, #72	; 0x48
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005a6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a70:	f04f 0120 	mov.w	r1, #32
 8005a74:	f381 8811 	msr	BASEPRI, r1
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	486a      	ldr	r0, [pc, #424]	; (8005c24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005a7c:	f7fe ff68 	bl	8004950 <_PreparePacket>
 8005a80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b66      	ldr	r3, [pc, #408]	; (8005c28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	643b      	str	r3, [r7, #64]	; 0x40
 8005a96:	e00b      	b.n	8005ab0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	6479      	str	r1, [r7, #68]	; 0x44
 8005aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aac:	09db      	lsrs	r3, r3, #7
 8005aae:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab4:	d8f0      	bhi.n	8005a98 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	647a      	str	r2, [r7, #68]	; 0x44
 8005abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad0:	e00b      	b.n	8005aea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad8:	1c59      	adds	r1, r3, #1
 8005ada:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	09db      	lsrs	r3, r3, #7
 8005ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aec:	2b7f      	cmp	r3, #127	; 0x7f
 8005aee:	d8f0      	bhi.n	8005ad2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	4619      	mov	r1, r3
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7fe fed1 	bl	80048b0 <_EncodeStr>
 8005b0e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b10:	2209      	movs	r2, #9
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	6938      	ldr	r0, [r7, #16]
 8005b16:	f7ff f80d 	bl	8004b34 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b40      	ldr	r3, [pc, #256]	; (8005c28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2e:	e00b      	b.n	8005b48 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	1c59      	adds	r1, r3, #1
 8005b38:	6379      	str	r1, [r7, #52]	; 0x34
 8005b3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	09db      	lsrs	r3, r3, #7
 8005b46:	633b      	str	r3, [r7, #48]	; 0x30
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4c:	d8f0      	bhi.n	8005b30 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	637a      	str	r2, [r7, #52]	; 0x34
 8005b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b68:	e00b      	b.n	8005b82 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	1c59      	adds	r1, r3, #1
 8005b72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	09db      	lsrs	r3, r3, #7
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	2b7f      	cmp	r3, #127	; 0x7f
 8005b86:	d8f0      	bhi.n	8005b6a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	e00b      	b.n	8005bbc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	1c59      	adds	r1, r3, #1
 8005bac:	6279      	str	r1, [r7, #36]	; 0x24
 8005bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	09db      	lsrs	r3, r3, #7
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc0:	d8f0      	bhi.n	8005ba4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	627a      	str	r2, [r7, #36]	; 0x24
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	e00b      	b.n	8005bf4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	1c59      	adds	r1, r3, #1
 8005be4:	61f9      	str	r1, [r7, #28]
 8005be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	09db      	lsrs	r3, r3, #7
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf8:	d8f0      	bhi.n	8005bdc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	61fa      	str	r2, [r7, #28]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c0a:	2215      	movs	r2, #21
 8005c0c:	68f9      	ldr	r1, [r7, #12]
 8005c0e:	6938      	ldr	r0, [r7, #16]
 8005c10:	f7fe ff90 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f383 8811 	msr	BASEPRI, r3
}
 8005c1a:	bf00      	nop
 8005c1c:	3748      	adds	r7, #72	; 0x48
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20014254 	.word	0x20014254
 8005c28:	20014224 	.word	0x20014224

08005c2c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c38:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c42:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4798      	blx	r3
  }
}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20014224 	.word	0x20014224

08005c54 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c60:	f04f 0120 	mov.w	r1, #32
 8005c64:	f381 8811 	msr	BASEPRI, r1
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	480b      	ldr	r0, [pc, #44]	; (8005c98 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005c6c:	f7fe fe70 	bl	8004950 <_PreparePacket>
 8005c70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c72:	2280      	movs	r2, #128	; 0x80
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	6938      	ldr	r0, [r7, #16]
 8005c78:	f7fe fe1a 	bl	80048b0 <_EncodeStr>
 8005c7c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005c7e:	220e      	movs	r2, #14
 8005c80:	68f9      	ldr	r1, [r7, #12]
 8005c82:	6938      	ldr	r0, [r7, #16]
 8005c84:	f7fe ff56 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f383 8811 	msr	BASEPRI, r3
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20014254 	.word	0x20014254

08005c9c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005ca2:	4b15      	ldr	r3, [pc, #84]	; (8005cf8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01a      	beq.n	8005ce0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005caa:	4b13      	ldr	r3, [pc, #76]	; (8005cf8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d015      	beq.n	8005ce0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4798      	blx	r3
 8005cbc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005cc0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	000a      	movs	r2, r1
 8005cd0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	200d      	movs	r0, #13
 8005cda:	f7ff fc5b 	bl	8005594 <SEGGER_SYSVIEW_RecordU32x2>
 8005cde:	e006      	b.n	8005cee <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005ce0:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	200c      	movs	r0, #12
 8005ce8:	f7ff fc18 	bl	800551c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd90      	pop	{r4, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20014224 	.word	0x20014224
 8005cfc:	e0001004 	.word	0xe0001004

08005d00 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d06:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0a:	f04f 0120 	mov.w	r1, #32
 8005d0e:	f381 8811 	msr	BASEPRI, r1
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	4819      	ldr	r0, [pc, #100]	; (8005d7c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d16:	f7fe fe1b 	bl	8004950 <_PreparePacket>
 8005d1a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005d20:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d28:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	e00b      	b.n	8005d4c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1c59      	adds	r1, r3, #1
 8005d3c:	6179      	str	r1, [r7, #20]
 8005d3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	09db      	lsrs	r3, r3, #7
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d50:	d8f0      	bhi.n	8005d34 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	617a      	str	r2, [r7, #20]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005d62:	2202      	movs	r2, #2
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	68b8      	ldr	r0, [r7, #8]
 8005d68:	f7fe fee4 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f383 8811 	msr	BASEPRI, r3
}
 8005d72:	bf00      	nop
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20014254 	.word	0x20014254
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8e:	f04f 0120 	mov.w	r1, #32
 8005d92:	f381 8811 	msr	BASEPRI, r1
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	4807      	ldr	r0, [pc, #28]	; (8005db8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005d9a:	f7fe fdd9 	bl	8004950 <_PreparePacket>
 8005d9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005da0:	2203      	movs	r2, #3
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6838      	ldr	r0, [r7, #0]
 8005da6:	f7fe fec5 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f383 8811 	msr	BASEPRI, r3
}
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20014254 	.word	0x20014254

08005dbc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc6:	f04f 0120 	mov.w	r1, #32
 8005dca:	f381 8811 	msr	BASEPRI, r1
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	4807      	ldr	r0, [pc, #28]	; (8005df0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005dd2:	f7fe fdbd 	bl	8004950 <_PreparePacket>
 8005dd6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005dd8:	2212      	movs	r2, #18
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6838      	ldr	r0, [r7, #0]
 8005dde:	f7fe fea9 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f383 8811 	msr	BASEPRI, r3
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20014254 	.word	0x20014254

08005df4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfe:	f04f 0120 	mov.w	r1, #32
 8005e02:	f381 8811 	msr	BASEPRI, r1
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	4807      	ldr	r0, [pc, #28]	; (8005e28 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e0a:	f7fe fda1 	bl	8004950 <_PreparePacket>
 8005e0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e10:	2211      	movs	r2, #17
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6838      	ldr	r0, [r7, #0]
 8005e16:	f7fe fe8d 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f383 8811 	msr	BASEPRI, r3
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20014254 	.word	0x20014254

08005e2c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e34:	f3ef 8311 	mrs	r3, BASEPRI
 8005e38:	f04f 0120 	mov.w	r1, #32
 8005e3c:	f381 8811 	msr	BASEPRI, r1
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	4819      	ldr	r0, [pc, #100]	; (8005ea8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005e44:	f7fe fd84 	bl	8004950 <_PreparePacket>
 8005e48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e4e:	4b17      	ldr	r3, [pc, #92]	; (8005eac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	e00b      	b.n	8005e7a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	1c59      	adds	r1, r3, #1
 8005e6a:	61f9      	str	r1, [r7, #28]
 8005e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	09db      	lsrs	r3, r3, #7
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e7e:	d8f0      	bhi.n	8005e62 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	61fa      	str	r2, [r7, #28]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005e90:	2208      	movs	r2, #8
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	6938      	ldr	r0, [r7, #16]
 8005e96:	f7fe fe4d 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f383 8811 	msr	BASEPRI, r3
}
 8005ea0:	bf00      	nop
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20014254 	.word	0x20014254
 8005eac:	20014224 	.word	0x20014224

08005eb0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebc:	f04f 0120 	mov.w	r1, #32
 8005ec0:	f381 8811 	msr	BASEPRI, r1
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	4819      	ldr	r0, [pc, #100]	; (8005f2c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005ec8:	f7fe fd42 	bl	8004950 <_PreparePacket>
 8005ecc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ed2:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e00b      	b.n	8005efe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	1c59      	adds	r1, r3, #1
 8005eee:	61f9      	str	r1, [r7, #28]
 8005ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	09db      	lsrs	r3, r3, #7
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b7f      	cmp	r3, #127	; 0x7f
 8005f02:	d8f0      	bhi.n	8005ee6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	61fa      	str	r2, [r7, #28]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f14:	2204      	movs	r2, #4
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	6938      	ldr	r0, [r7, #16]
 8005f1a:	f7fe fe0b 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f383 8811 	msr	BASEPRI, r3
}
 8005f24:	bf00      	nop
 8005f26:	3720      	adds	r7, #32
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20014254 	.word	0x20014254
 8005f30:	20014224 	.word	0x20014224

08005f34 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f40:	f04f 0120 	mov.w	r1, #32
 8005f44:	f381 8811 	msr	BASEPRI, r1
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	4819      	ldr	r0, [pc, #100]	; (8005fb0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005f4c:	f7fe fd00 	bl	8004950 <_PreparePacket>
 8005f50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f56:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	e00b      	b.n	8005f82 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	1c59      	adds	r1, r3, #1
 8005f72:	61f9      	str	r1, [r7, #28]
 8005f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	09db      	lsrs	r3, r3, #7
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b7f      	cmp	r3, #127	; 0x7f
 8005f86:	d8f0      	bhi.n	8005f6a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	61fa      	str	r2, [r7, #28]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005f98:	2206      	movs	r2, #6
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	6938      	ldr	r0, [r7, #16]
 8005f9e:	f7fe fdc9 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f383 8811 	msr	BASEPRI, r3
}
 8005fa8:	bf00      	nop
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20014254 	.word	0x20014254
 8005fb4:	20014224 	.word	0x20014224

08005fb8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc6:	f04f 0120 	mov.w	r1, #32
 8005fca:	f381 8811 	msr	BASEPRI, r1
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	4827      	ldr	r0, [pc, #156]	; (8006070 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005fd2:	f7fe fcbd 	bl	8004950 <_PreparePacket>
 8005fd6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	e00b      	b.n	8006008 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	1c59      	adds	r1, r3, #1
 8005ff8:	6279      	str	r1, [r7, #36]	; 0x24
 8005ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	09db      	lsrs	r3, r3, #7
 8006006:	623b      	str	r3, [r7, #32]
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	2b7f      	cmp	r3, #127	; 0x7f
 800600c:	d8f0      	bhi.n	8005ff0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	627a      	str	r2, [r7, #36]	; 0x24
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e00b      	b.n	8006040 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	b2da      	uxtb	r2, r3
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	1c59      	adds	r1, r3, #1
 8006030:	61f9      	str	r1, [r7, #28]
 8006032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	09db      	lsrs	r3, r3, #7
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	2b7f      	cmp	r3, #127	; 0x7f
 8006044:	d8f0      	bhi.n	8006028 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	61fa      	str	r2, [r7, #28]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006056:	2207      	movs	r2, #7
 8006058:	68f9      	ldr	r1, [r7, #12]
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f7fe fd6a 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f383 8811 	msr	BASEPRI, r3
}
 8006066:	bf00      	nop
 8006068:	3728      	adds	r7, #40	; 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20014254 	.word	0x20014254
 8006074:	20014224 	.word	0x20014224

08006078 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	1ad3      	subs	r3, r2, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20014224 	.word	0x20014224

08006098 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b08c      	sub	sp, #48	; 0x30
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80060a2:	4b3b      	ldr	r3, [pc, #236]	; (8006190 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d06d      	beq.n	8006186 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80060aa:	4b39      	ldr	r3, [pc, #228]	; (8006190 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80060b0:	2300      	movs	r3, #0
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b4:	e008      	b.n	80060c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c4:	3301      	adds	r3, #1
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d3f2      	bcc.n	80060b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80060d0:	e000      	b.n	80060d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80060d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d055      	beq.n	8006186 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060da:	f3ef 8311 	mrs	r3, BASEPRI
 80060de:	f04f 0120 	mov.w	r1, #32
 80060e2:	f381 8811 	msr	BASEPRI, r1
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	482a      	ldr	r0, [pc, #168]	; (8006194 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80060ea:	f7fe fc31 	bl	8004950 <_PreparePacket>
 80060ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	623b      	str	r3, [r7, #32]
 80060fc:	e00b      	b.n	8006116 <SEGGER_SYSVIEW_SendModule+0x7e>
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	1c59      	adds	r1, r3, #1
 8006106:	6279      	str	r1, [r7, #36]	; 0x24
 8006108:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	09db      	lsrs	r3, r3, #7
 8006114:	623b      	str	r3, [r7, #32]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2b7f      	cmp	r3, #127	; 0x7f
 800611a:	d8f0      	bhi.n	80060fe <SEGGER_SYSVIEW_SendModule+0x66>
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	627a      	str	r2, [r7, #36]	; 0x24
 8006122:	6a3a      	ldr	r2, [r7, #32]
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	e00b      	b.n	8006150 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	1c59      	adds	r1, r3, #1
 8006140:	61f9      	str	r1, [r7, #28]
 8006142:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	09db      	lsrs	r3, r3, #7
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b7f      	cmp	r3, #127	; 0x7f
 8006154:	d8f0      	bhi.n	8006138 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	61fa      	str	r2, [r7, #28]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	4619      	mov	r1, r3
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7fe fb9e 	bl	80048b0 <_EncodeStr>
 8006174:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006176:	2216      	movs	r2, #22
 8006178:	68f9      	ldr	r1, [r7, #12]
 800617a:	6938      	ldr	r0, [r7, #16]
 800617c:	f7fe fcda 	bl	8004b34 <_SendPacket>
      RECORD_END();
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006186:	bf00      	nop
 8006188:	3730      	adds	r7, #48	; 0x30
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	2001424c 	.word	0x2001424c
 8006194:	20014254 	.word	0x20014254

08006198 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800619e:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00f      	beq.n	80061c6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f2      	bne.n	80061ac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	2001424c 	.word	0x2001424c

080061d4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80061da:	f3ef 8311 	mrs	r3, BASEPRI
 80061de:	f04f 0120 	mov.w	r1, #32
 80061e2:	f381 8811 	msr	BASEPRI, r1
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	4817      	ldr	r0, [pc, #92]	; (8006248 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80061ea:	f7fe fbb1 	bl	8004950 <_PreparePacket>
 80061ee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	4b14      	ldr	r3, [pc, #80]	; (800624c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	e00b      	b.n	8006218 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	b2da      	uxtb	r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1c59      	adds	r1, r3, #1
 8006208:	6179      	str	r1, [r7, #20]
 800620a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	09db      	lsrs	r3, r3, #7
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b7f      	cmp	r3, #127	; 0x7f
 800621c:	d8f0      	bhi.n	8006200 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	617a      	str	r2, [r7, #20]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800622e:	221b      	movs	r2, #27
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	68b8      	ldr	r0, [r7, #8]
 8006234:	f7fe fc7e 	bl	8004b34 <_SendPacket>
  RECORD_END();
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f383 8811 	msr	BASEPRI, r3
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20014254 	.word	0x20014254
 800624c:	20014250 	.word	0x20014250

08006250 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006250:	b40f      	push	{r0, r1, r2, r3}
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800625e:	1d3b      	adds	r3, r7, #4
 8006260:	461a      	mov	r2, r3
 8006262:	2100      	movs	r1, #0
 8006264:	6938      	ldr	r0, [r7, #16]
 8006266:	f7fe feef 	bl	8005048 <_VPrintTarget>
  va_end(ParamList);
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006274:	b004      	add	sp, #16
 8006276:	4770      	bx	lr

08006278 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006280:	f3ef 8311 	mrs	r3, BASEPRI
 8006284:	f04f 0120 	mov.w	r1, #32
 8006288:	f381 8811 	msr	BASEPRI, r1
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	4827      	ldr	r0, [pc, #156]	; (800632c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006290:	f7fe fb5e 	bl	8004950 <_PreparePacket>
 8006294:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006296:	2280      	movs	r2, #128	; 0x80
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	6938      	ldr	r0, [r7, #16]
 800629c:	f7fe fb08 	bl	80048b0 <_EncodeStr>
 80062a0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
 80062a6:	2301      	movs	r3, #1
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	e00b      	b.n	80062c4 <SEGGER_SYSVIEW_Warn+0x4c>
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	1c59      	adds	r1, r3, #1
 80062b4:	6279      	str	r1, [r7, #36]	; 0x24
 80062b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	09db      	lsrs	r3, r3, #7
 80062c2:	623b      	str	r3, [r7, #32]
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	2b7f      	cmp	r3, #127	; 0x7f
 80062c8:	d8f0      	bhi.n	80062ac <SEGGER_SYSVIEW_Warn+0x34>
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	627a      	str	r2, [r7, #36]	; 0x24
 80062d0:	6a3a      	ldr	r2, [r7, #32]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	2300      	movs	r3, #0
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e00b      	b.n	80062fc <SEGGER_SYSVIEW_Warn+0x84>
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	1c59      	adds	r1, r3, #1
 80062ec:	61f9      	str	r1, [r7, #28]
 80062ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	09db      	lsrs	r3, r3, #7
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006300:	d8f0      	bhi.n	80062e4 <SEGGER_SYSVIEW_Warn+0x6c>
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	61fa      	str	r2, [r7, #28]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006312:	221a      	movs	r2, #26
 8006314:	68f9      	ldr	r1, [r7, #12]
 8006316:	6938      	ldr	r0, [r7, #16]
 8006318:	f7fe fc0c 	bl	8004b34 <_SendPacket>
  RECORD_END();
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f383 8811 	msr	BASEPRI, r3
}
 8006322:	bf00      	nop
 8006324:	3728      	adds	r7, #40	; 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20014254 	.word	0x20014254

08006330 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006334:	4b13      	ldr	r3, [pc, #76]	; (8006384 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006336:	7e1b      	ldrb	r3, [r3, #24]
 8006338:	4619      	mov	r1, r3
 800633a:	4a13      	ldr	r2, [pc, #76]	; (8006388 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800633c:	460b      	mov	r3, r1
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	440b      	add	r3, r1
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4413      	add	r3, r2
 8006346:	336c      	adds	r3, #108	; 0x6c
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800634c:	7e1b      	ldrb	r3, [r3, #24]
 800634e:	4618      	mov	r0, r3
 8006350:	490d      	ldr	r1, [pc, #52]	; (8006388 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006352:	4603      	mov	r3, r0
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4403      	add	r3, r0
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	440b      	add	r3, r1
 800635c:	3370      	adds	r3, #112	; 0x70
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d00b      	beq.n	800637c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006366:	789b      	ldrb	r3, [r3, #2]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d107      	bne.n	800637c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800636e:	2201      	movs	r2, #1
 8006370:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006372:	f7fe faf9 	bl	8004968 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006376:	4b03      	ldr	r3, [pc, #12]	; (8006384 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006378:	2200      	movs	r2, #0
 800637a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800637e:	781b      	ldrb	r3, [r3, #0]
}
 8006380:	4618      	mov	r0, r3
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20014224 	.word	0x20014224
 8006388:	20014398 	.word	0x20014398

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4d0d      	ldr	r5, [pc, #52]	; (80063c4 <__libc_init_array+0x38>)
 8006390:	4c0d      	ldr	r4, [pc, #52]	; (80063c8 <__libc_init_array+0x3c>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	2600      	movs	r6, #0
 8006398:	42a6      	cmp	r6, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	4d0b      	ldr	r5, [pc, #44]	; (80063cc <__libc_init_array+0x40>)
 800639e:	4c0c      	ldr	r4, [pc, #48]	; (80063d0 <__libc_init_array+0x44>)
 80063a0:	f000 f83c 	bl	800641c <_init>
 80063a4:	1b64      	subs	r4, r4, r5
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	2600      	movs	r6, #0
 80063aa:	42a6      	cmp	r6, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b4:	4798      	blx	r3
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80063be:	4798      	blx	r3
 80063c0:	3601      	adds	r6, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	08006658 	.word	0x08006658
 80063c8:	08006658 	.word	0x08006658
 80063cc:	08006658 	.word	0x08006658
 80063d0:	0800665c 	.word	0x0800665c

080063d4 <memcmp>:
 80063d4:	b530      	push	{r4, r5, lr}
 80063d6:	3901      	subs	r1, #1
 80063d8:	2400      	movs	r4, #0
 80063da:	42a2      	cmp	r2, r4
 80063dc:	d101      	bne.n	80063e2 <memcmp+0xe>
 80063de:	2000      	movs	r0, #0
 80063e0:	e005      	b.n	80063ee <memcmp+0x1a>
 80063e2:	5d03      	ldrb	r3, [r0, r4]
 80063e4:	3401      	adds	r4, #1
 80063e6:	5d0d      	ldrb	r5, [r1, r4]
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	d0f6      	beq.n	80063da <memcmp+0x6>
 80063ec:	1b58      	subs	r0, r3, r5
 80063ee:	bd30      	pop	{r4, r5, pc}

080063f0 <memcpy>:
 80063f0:	440a      	add	r2, r1
 80063f2:	4291      	cmp	r1, r2
 80063f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063f8:	d100      	bne.n	80063fc <memcpy+0xc>
 80063fa:	4770      	bx	lr
 80063fc:	b510      	push	{r4, lr}
 80063fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006406:	4291      	cmp	r1, r2
 8006408:	d1f9      	bne.n	80063fe <memcpy+0xe>
 800640a:	bd10      	pop	{r4, pc}

0800640c <memset>:
 800640c:	4402      	add	r2, r0
 800640e:	4603      	mov	r3, r0
 8006410:	4293      	cmp	r3, r2
 8006412:	d100      	bne.n	8006416 <memset+0xa>
 8006414:	4770      	bx	lr
 8006416:	f803 1b01 	strb.w	r1, [r3], #1
 800641a:	e7f9      	b.n	8006410 <memset+0x4>

0800641c <_init>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr

08006428 <_fini>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr
